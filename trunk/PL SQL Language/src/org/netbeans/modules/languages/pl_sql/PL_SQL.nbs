TOKEN:block_comment: ("/*" - "*/")
#TOKEN:line_comment: ( "--"i | "--"i [^ "\n" "\r"]* ) 
TOKEN:line_comment: ( "--"i [^ "\n" "\r"]* )
TOKEN:whitespace:( [" " "\t" "\n" "\r"]+ )
TOKEN:operator: (
    ":=" | "+" | "-" | "*" | "/" | "**" | "||" | "PRIOR"i | "CONNECT_BY_ROOT"i |
    "UNION"i | "UNION ALL"i | "INTERSECT"i | "MINUS"i | "MULTISET EXCEPT"i |
    "MULTISET INTERSECT"i | "MULTISET UNION"i | "=" | "<>" | "!=" | "~=" |
    "^=" | ">" | "<" | "<=" | ">=" | "IS NULL"i | "LIKE"i | "BETWEEN"i |
    "IN"i | "NOT IN"i | "AND"i | "NOT"i | ".." | "ANY"i | "SOME"i |
    "ALL"i | "EXISTS"i | "ESCAPE"i | "IS NOT NULL"i | "(+)" | "(" | ")"
)
TOKEN:or_operator: ( "OR"i )
TOKEN:number: (
    #["0"-"9"]+ |
    #["+" "-"]? ["0"-"9"]+
    ["+" "-"]?["0"-"9"]*"."?["0"-"9"]+(["e" "E"]["+" "-"]?["0"-"9"]+)?
)
TOKEN:keyword: (
    "IF"i | "ELSE"i | "END IF"i | "SELECT"i | "." |
    "FROM"i | "AS"i | "WHERE"i | "PROCEDURE"i | "FUNCTION"i
)
TOKEN:begin_keyword: ( "BEGIN"i )
TOKEN:end_keyword: ( "END"i )
TOKEN:declare_keyword: ( "DECLARE"i )
TOKEN:exception_keyword: ( "EXCEPTION"i )
TOKEN:when_keyword: ( "WHEN"i )
TOKEN:then_keyword: ( "THEN"i )

TOKEN:identifier:( ["a"-"z" "A"-"Z"] ["$" "#" "_" "0"-"9" "a"-"z" "A"-"Z"]* )
 
TOKEN:separator: ( ";" )
TOKEN:terminator: ( "/" )

SKIP:whitespace
SKIP:block_comment
SKIP:line_comment

#FOLD:block_comment: {
#    fold_display_name:"LBL_Comment";
#    expand_type_action_name:"Expand Comments";
#    collapse_type_action_name:"Collapse Comments"; 
#}
#FOLD:block_comment: {
#    fold_display_name:"LBL_HTML_Comment";
#    expand_type_action_name:"LBL_Expand_HTML_Comment";
#    collapse_type_action_name:"LBL_Collapse_HTML_Comment";
#} 

# Grammar 
S = (Source_Element)*;
Source_Element = Anonymous_Block;
#Statement = WhileStatement | IfStatement | ExpressionStatement | Block;
#WhileStatement = "while" "(" ConditionalExpression ")" Block;
#IfStatement = "if" "(" ConditionalExpression ")" "then" Block ["else" Block] ";";
#Block = <keyword, "begin"> (Statement)* <keyword, "end">;
Anonymous_Block = [Declare_Section]
                  <begin_keyword>
                  (Executable_Section)+
                  [Exception_Section]
                  <end_keyword> 
                  [<separator>]["/"];
Executable_Section = Statement | Anonymous_Block;
Statement = Call_Statement;
Call_Statement = <identifier> ["." <identifier>] ";";
Declare_Section = [<declare_keyword>]
                  (<identifier> <identifier> [":=" <number>] <separator>)+ ;
Exception_Section = <exception_keyword> (Exception_Handler)+;
Exception_Handler = <when_keyword> <identifier> (<or_operator> <identifier>)*
                    <then_keyword> Executable_Section;
#Block = (Statement)*;
#gr_begin_stm = "BEGIN";
#ConditionalExpression = <identifier>;
#ExpressionStatement = <identifier>;

FOLD:Block
FOLD:block_comment: { fold_display_name:"/*...*/"; }
FOLD:Anonymous_Block: { fold_display_name:"begin...end"; }

BRACE "(:)"
BRACE "[:]" 
