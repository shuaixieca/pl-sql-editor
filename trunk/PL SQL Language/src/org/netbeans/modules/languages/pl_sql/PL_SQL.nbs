TOKEN:block_comment: ("/*" - "*/")
#TOKEN:line_comment: ( "--"i | "--"i [^ "\n" "\r"]* ) 
TOKEN:line_comment: ( "--"i [^ "\n" "\r"]* )
TOKEN:whitespace:( [" " "\t" "\n" "\r"]+ )
TOKEN:operator: (
    ":=" | "+" | "-" | "*" | "/" | "**" | "||" | "PRIOR"i | "CONNECT_BY_ROOT"i |
    "UNION"i | "UNION ALL"i | "INTERSECT"i | "MINUS"i | "MULTISET EXCEPT"i |
    "MULTISET INTERSECT"i | "MULTISET UNION"i | "=" | "<>" | "!=" | "~=" |
    "^=" | ">" | "<" | "<=" | ">=" | "IS NULL"i | "LIKE"i | "BETWEEN"i |
    "IN"i | "NOT IN"i | ".." | "ANY"i | "SOME"i |
    "ALL"i | "EXISTS"i | "ESCAPE"i | "IS NOT NULL"i | "(+)" | "(" | ")"
)
TOKEN:or_operator: ( "OR"i )
TOKEN:and_operator: ( "AND"i )
TOKEN:not_operator: ( "NOT"i )

TOKEN:number_unsigned: (
    ["0"-"9"]*"."?["0"-"9"]+(["e" "E"]["+" "-"]?["0"-"9"]+)?
)
#TOKEN:number: (
    #["0"-"9"]+ |
    #["+" "-"]? ["0"-"9"]+
#    ["+" "-"]?["0"-"9"]*"."?["0"-"9"]+(["e" "E"]["+" "-"]?["0"-"9"]+)?
#)
TOKEN:string: ( "\'" ( 
        ([^ "\'"])*([ "\'"][ "\'"])*([^ "\'"])*
    )* "\'" )

TOKEN:keyword: (
    "IF"i | "ELSE"i | "END IF"i | "SELECT"i | "." |
    "FROM"i | "AS"i | "WHERE"i | "PROCEDURE"i | "FUNCTION"i
)
TOKEN:begin_keyword: ( "BEGIN"i )
TOKEN:end_keyword: ( "END"i )
TOKEN:declare_keyword: ( "DECLARE"i )
TOKEN:exception_keyword: ( "EXCEPTION"i )
TOKEN:when_keyword: ( "WHEN"i )
TOKEN:then_keyword: ( "THEN"i )
TOKEN:not_null_keyword: ( "NOT NULL"i )
TOKEN:null_keyword: ( "NULL"i )
TOKEN:default_keyword: ( "DEFAULT"i )

TOKEN:identifier:( ["a"-"z" "A"-"Z"] ["$" "#" "_" "0"-"9" "a"-"z" "A"-"Z"]* )
TOKEN:ext_identifier:( ["a"-"z" "A"-"Z"] ["." "@" "$" "#" "_" "0"-"9" "a"-"z" "A"-"Z"]* )
 
TOKEN:separator: ( ";" )
TOKEN:terminator: ( "/" )

SKIP:whitespace
SKIP:block_comment
SKIP:line_comment

#FOLD:block_comment: {
#    fold_display_name:"LBL_Comment";
#    expand_type_action_name:"Expand Comments";
#    collapse_type_action_name:"Collapse Comments"; 
#}
#FOLD:block_comment: {
#    fold_display_name:"LBL_HTML_Comment";
#    expand_type_action_name:"LBL_Expand_HTML_Comment";
#    collapse_type_action_name:"LBL_Collapse_HTML_Comment";
#} 

# Grammar 
S = (Source_Element)*;
Source_Element = Anonymous_Block;
#Statement = WhileStatement | IfStatement | ExpressionStatement | Block;
#WhileStatement = "while" "(" ConditionalExpression ")" Block;
#IfStatement = "if" "(" ConditionalExpression ")" "then" Block ["else" Block] ";";
#Block = <keyword, "begin"> (Statement)* <keyword, "end">;
Block = <begin_keyword>
            (Executable_Section)+
            [Exception_Section]
        <end_keyword>[<separator>]["/"];
Anonymous_Block = [Anonymous_Block_Declare_Section] Block;
Executable_Section = Statement | Inner_Anonymous_Block;
Inner_Anonymous_Block = Anonymous_Block_Declare_Section Block;
Statement = Call_Statement;
Call_Statement = Expression_Part ";";
Anonymous_Block_Declare_Section = <declare_keyword> (Variable_Declaration)+;

Variable_Declaration = <identifier> Data_Type 
                       [[<not_null_keyword>] Variable_Def_Part Expression] <separator>;
Variable_Def_Part = <operator, ":="> | <default_keyword>;
Data_Type = <identifier>;

Expression = Boolean_Expression | String_expression | Numeric_expression;
#Expression_Part = <identifier> | <ext_identifier>; 
#Boolean_Expression = [<not_operator>] Expression_Part (Boolean_Expression_1)* ;
#Boolean_Expression_Part = <and_operator> | <or_operator>;
#Boolean_Expression_1 = Boolean_Expression_Part [<not_operator>] Expression_Part;
#Boolean_Expression_1 = Boolean_Expression_Part ( <operator> Boolean_Expression)*;

String_expression = String_term (<operator, "||"> String_term)*;
String_term = <string> | <identifier> | <ext_identifier>;

Numeric_expression = [Numeric_operator1] Numeric_term (Numeric_operator1 Numeric_term)*;
Numeric_operator1 = <operator, "+"> | <operator, "-">;
Numeric_term = Numeric_factor (Numeric_operator2 Numeric_factor)*;
Numeric_operator2 = <operator, "*"> | <operator, "/"> | <operator, "**">;
Numeric_factor = <number_unsigned> | <identifier> | <ext_identifier>;

Boolean_Expression = Expression_Part_Op;
Expression_Part_Op = (Expression_Part)+;
Expression_Part_Op = (Expression_Part Bool_Operator Expression_Part_Op)+;
Expression_Part_Op = ((<not_operator>)? Expression_Part_Op)+ ;
Expression_Part_Op = (<operator, "("> Expression_Part_Op <operator, ")"> (Expression_Part_Op)? )+;
Expression_Part = <identifier> | <ext_identifier> | <null_keyword>;
Bool_Operator = <and_operator> | <or_operator>;

Exception_Section = <exception_keyword> (Exception_Handler)+;
Exception_Handler = <when_keyword> <identifier> (<or_operator> <identifier>)*
                    <then_keyword> (Inner_Anonymous_Block | Block | Statement);
#Block = (Statement)*;
#gr_begin_stm = "BEGIN";
#ConditionalExpression = <identifier>;
#ExpressionStatement = <identifier>;

FOLD:Block: { fold_display_name:"begin...end"; }
FOLD:block_comment: { fold_display_name:"/*...*/"; }
#FOLD:Anonymous_Block: { fold_display_name:"begin...end"; }

BRACE "(:)"
BRACE "[:]"

COMPLETE "/*:*/"

#INDENT "<begin_keyword>:<end_keyword>" 
