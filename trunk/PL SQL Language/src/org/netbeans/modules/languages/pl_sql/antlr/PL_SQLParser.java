// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g 2010-04-27 13:23:22
package org.netbeans.modules.languages.pl_sql.antlr;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class PL_SQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER_UNSIGNED", "AND_OPERATOR", "OR_OPERATOR", "NOT_OPEARTOR", "BLOCK_COMMENT", "LINE_COMMENT", "WHITESPACE", "STRING", "SOME_TYPES", "SCALE_TYPES", "SIZE_TYPES", "CHAR_TYPES", "CHAR_TYPE", "BYTE_TYPE", "RAW_TYPE", "TIMESTAMP_TYPE", "YEAR_TYPE", "DAY_TYPE", "SECOND_TYPE", "KEYWORD", "IDENTIFIER", "EXT_IDENTIFIER", "ALIAS", "SEPARATOR", "COMMA", "PARAM_VALUE", "BEGIN_KEYWORD", "END_KEYWORD", "DECLARE_KEYWORD", "EXCEPTION_KEYWORD", "WHEN_KEYWORD", "THEN_KEYWORD", "NULL_KEYWORD", "DEFAULT_KEYWORD", "ROWTYPE_KEYWORD", "LIKE_TYPE_KEYWORD", "TYPE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "CONSTANT_KEYWORD", "WITH_KEYWORD", "LOCAL_KEYWORD", "TIME_KEYWORD", "ZONE_KEYWORD", "INTERVAL_KEYWORD", "TO_KEYWORD", "MONTH_KEYWORD", "SUBTYPE_KEYWORD", "IS_KEYWORD", "RECORD_KEYWORD", "CREATE_KEYWORD", "REPLACE_KEYWORD", "FUNCTION_KEYWORD", "AS_KEYWORD", "RETURN_KEYWORD", "IN_KEYWORD", "OUT_KEYWORD", "NOCOPY_KEYWORD", "AUTHID_KEYWORD", "CURRENT_USER_KEYWORD", "DEFINER_KEYWORD", "DETERMINISTIC_KEYWORD", "PARALLEL_ENABLED_KEYWORD", "PIPELINED_KEYWORD", "RESULT_CACHE_KEYWORD", "PROCEDURE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "ELSIF_KEYWORD", "GOTO_KEYWORD", "LOOP_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "REVERSE_KEYWORD", "SELECT_KEYWORD", "COUNT_KEYWORD", "EXCEPTION_INIT_KEYWORD", "LIKE_KEYWORD", "RAISE_KEYWORD", "PRAGMA_KEYWORD", "AUTONOMOUS_TRANSACTION_KEYWORD", "CASE_KEYWORD", "CLOSE_KEYWORD", "TABLE_KEYWORD", "OF_KEYWORD", "INDEX_KEYWORD", "BY_KEYWORD", "VARRAY_KEYWORD", "VARYING_KEYWORD", "ARRAY_KEYWORD", "COMMIT_KEYWORD", "REF_KEYWORD", "CONTINUE_KEYWORD", "CURSOR_KEYWORD", "DELETE_KEYWORD", "EXECUTE_KEYWORD", "IMMEDIATE_KEYWORD", "EXIT_KEYWORD", "INTO_KEYWORD", "USING_KEYWORD", "BULK_KEYWORD", "COLLECT_KEYWORD", "FETCH_KEYWORD", "LIMIT_KEYWORD", "FORALL_KEYWORD", "SAVE_KEYWORD", "EXCEPTIONS_KEYWORD", "INDICES_KEYWORD", "VALUES_KEYWORD", "BETWEEN_KEYWORD", "INLINE_KEYWORD", "INSERT_KEYWORD", "LOCK_KEYWORD", "MERGE_KEYWORD", "OPEN_KEYWORD", "PACKAGE_KEYWORD", "BODY_KEYWORD", "RESTRICT_REFERENCES_KEYWORD", "RETURNING_KEYWORD", "ROLLBACK_KEYWORD", "SAVEPOINT_KEYWORD", "SERIALLY_REUSABLE_KEYWORD", "SET_KEYWORD", "TRANSACTION_KEYWORD", "NOTFOUND_KEYWORD", "FOUND_KEYWORD", "ISOPEN_KEYWORD", "ROWCOUNT_KEYWORD", "SQLCODE_KEYWORD", "SQLERRM_KEYWORD", "UPDATE_KEYWORD", "EXISTS_KEYWORD", "TRIGGER_KEYWORD", "BEFORE_KEYWORD", "AFTER_KEYWORD", "INSTEAD_KEYWORD", "ON_KEYWORD", "NESTED_KEYWORD", "REFERENCING_KEYWORD", "OLD_KEYWORD", "NEW_KEYWORD", "PARENT_KEYWORD", "EACH_KEYWORD", "ROW_KEYWORD", "FOLLOWS_KEYWORD", "ENABLE_KEYWORD", "DISABLE_KEYWORD", "OID_KEYWORD", "OBJECT_KEYWORD", "UNDER_KEYWORD", "FINAL_KEYWORD", "INSTANTIABLE_KEYWORD", "OVERRIDING_KEYWORD", "MEMBER_KEYWORD", "STATIC_KEYWORD", "CONSTRUCTOR_KEYWORD", "SELF_KEYWORD", "RESULT_KEYWORD", "MAP_KEYWORD", "ORDER_KEYWORD", "JOIN_KEYWORD", "IM_BEGIN_END", "IM_IF", "IM_LOOP", "IM_CASE", "IM_PCK_SPC", "IM_PCK_BODY", "IM_FUNC", "IM_PROC", "IM_TYPE_SPC", "IM_TYPE_BODY", "LPAREN", "RPAREN", "O", "R", "A", "N", "D", "T", "NOT_OPERATOR", "DIGITS", "EXP_DIGITS", "U", "L", "P", "S", "I", "E", "G", "V", "Y", "M", "B", "F", "W", "C", "H", "X", "Z", "K", "Q", "J", "CHARS", "DIGIT", "QUOTATION_MARK", "THE_REST", "'<<'", "'>>'", "'/'", "'\\''", "'+'", "'-'", "'*'", "'**'", "'||'", "'='", "'<>'", "'!='", "'~='", "'^='", "'>'", "'<'", "'<='", "'>='", "'(+)'", "'..'", "':='", "'.'"
    };
    public static final int VARRAY_KEYWORD=91;
    public static final int TRIGGER_KEYWORD=136;
    public static final int RESULT_KEYWORD=161;
    public static final int EXIT_KEYWORD=101;
    public static final int V=193;
    public static final int DISABLE_KEYWORD=150;
    public static final int IM_FUNC=171;
    public static final int RESTRICT_REFERENCES_KEYWORD=121;
    public static final int ALIAS=26;
    public static final int WHILE_KEYWORD=75;
    public static final int AUTONOMOUS_TRANSACTION_KEYWORD=84;
    public static final int U=186;
    public static final int BEGIN_KEYWORD=30;
    public static final int ELSE_KEYWORD=71;
    public static final int SOME_TYPES=12;
    public static final int COLLECT_KEYWORD=105;
    public static final int T__214=214;
    public static final int INTERVAL_KEYWORD=48;
    public static final int CONSTANT_KEYWORD=43;
    public static final int VALUES_KEYWORD=112;
    public static final int PRAGMA_KEYWORD=83;
    public static final int R=178;
    public static final int MEMBER_KEYWORD=157;
    public static final int ZONE_KEYWORD=47;
    public static final int CHARS=206;
    public static final int CREATE_KEYWORD=54;
    public static final int Q=204;
    public static final int ROLLBACK_KEYWORD=123;
    public static final int RPAREN=176;
    public static final int CLOSE_KEYWORD=86;
    public static final int T__220=220;
    public static final int TRUE_KEYWORD=41;
    public static final int DEFINER_KEYWORD=64;
    public static final int CONTINUE_KEYWORD=96;
    public static final int CURRENT_USER_KEYWORD=63;
    public static final int LOOP_KEYWORD=74;
    public static final int EXECUTE_KEYWORD=99;
    public static final int W=198;
    public static final int T__218=218;
    public static final int DELETE_KEYWORD=98;
    public static final int INDEX_KEYWORD=89;
    public static final int STRING=11;
    public static final int RESULT_CACHE_KEYWORD=68;
    public static final int BEFORE_KEYWORD=137;
    public static final int IM_LOOP=167;
    public static final int EACH_KEYWORD=146;
    public static final int IM_IF=166;
    public static final int FOLLOWS_KEYWORD=148;
    public static final int X=201;
    public static final int T__215=215;
    public static final int UNDER_KEYWORD=153;
    public static final int UPDATE_KEYWORD=134;
    public static final int AND_OPERATOR=5;
    public static final int IM_CASE=168;
    public static final int CHAR_TYPE=16;
    public static final int OPEN_KEYWORD=118;
    public static final int J=205;
    public static final int OR_OPERATOR=6;
    public static final int T__219=219;
    public static final int OID_KEYWORD=151;
    public static final int USING_KEYWORD=103;
    public static final int O=177;
    public static final int PARAM_VALUE=29;
    public static final int CURSOR_KEYWORD=97;
    public static final int ARRAY_KEYWORD=93;
    public static final int P=188;
    public static final int REFERENCING_KEYWORD=142;
    public static final int ISOPEN_KEYWORD=130;
    public static final int OF_KEYWORD=88;
    public static final int IM_BEGIN_END=165;
    public static final int S=189;
    public static final int IM_PROC=172;
    public static final int SELF_KEYWORD=160;
    public static final int DECLARE_KEYWORD=32;
    public static final int OVERRIDING_KEYWORD=156;
    public static final int VARYING_KEYWORD=92;
    public static final int THE_REST=209;
    public static final int BETWEEN_KEYWORD=113;
    public static final int M=195;
    public static final int LPAREN=175;
    public static final int EXCEPTION_INIT_KEYWORD=80;
    public static final int T=182;
    public static final int T__210=210;
    public static final int FALSE_KEYWORD=42;
    public static final int NOT_OPERATOR=183;
    public static final int REF_KEYWORD=95;
    public static final int EXP_DIGITS=185;
    public static final int IM_PCK_BODY=170;
    public static final int SIZE_TYPES=14;
    public static final int SQLCODE_KEYWORD=132;
    public static final int DETERMINISTIC_KEYWORD=65;
    public static final int KEYWORD=23;
    public static final int EXCEPTION_KEYWORD=33;
    public static final int T__230=230;
    public static final int T__216=216;
    public static final int SCALE_TYPES=13;
    public static final int T__224=224;
    public static final int INSERT_KEYWORD=115;
    public static final int MONTH_KEYWORD=50;
    public static final int FORALL_KEYWORD=108;
    public static final int N=180;
    public static final int SQLERRM_KEYWORD=133;
    public static final int CASE_KEYWORD=85;
    public static final int PACKAGE_KEYWORD=119;
    public static final int INLINE_KEYWORD=114;
    public static final int AS_KEYWORD=57;
    public static final int DAY_TYPE=21;
    public static final int T__217=217;
    public static final int ROWCOUNT_KEYWORD=131;
    public static final int ELSIF_KEYWORD=72;
    public static final int JOIN_KEYWORD=164;
    public static final int COUNT_KEYWORD=79;
    public static final int PARENT_KEYWORD=145;
    public static final int FINAL_KEYWORD=154;
    public static final int SUBTYPE_KEYWORD=51;
    public static final int COMMA=28;
    public static final int FETCH_KEYWORD=106;
    public static final int FUNCTION_KEYWORD=56;
    public static final int STATIC_KEYWORD=158;
    public static final int EXISTS_KEYWORD=135;
    public static final int TABLE_KEYWORD=87;
    public static final int COMMIT_KEYWORD=94;
    public static final int NESTED_KEYWORD=141;
    public static final int IS_KEYWORD=52;
    public static final int BULK_KEYWORD=104;
    public static final int D=181;
    public static final int T__211=211;
    public static final int PROCEDURE_KEYWORD=69;
    public static final int IF_KEYWORD=70;
    public static final int T__229=229;
    public static final int YEAR_TYPE=20;
    public static final int LIKE_TYPE_KEYWORD=39;
    public static final int RAISE_KEYWORD=82;
    public static final int TIME_KEYWORD=46;
    public static final int CHAR_TYPES=15;
    public static final int ORDER_KEYWORD=163;
    public static final int CONSTRUCTOR_KEYWORD=159;
    public static final int SAVEPOINT_KEYWORD=124;
    public static final int ROWTYPE_KEYWORD=38;
    public static final int RETURN_KEYWORD=58;
    public static final int PIPELINED_KEYWORD=67;
    public static final int MAP_KEYWORD=162;
    public static final int TIMESTAMP_TYPE=19;
    public static final int NOT_OPEARTOR=7;
    public static final int NOTFOUND_KEYWORD=128;
    public static final int AUTHID_KEYWORD=62;
    public static final int A=179;
    public static final int IN_KEYWORD=59;
    public static final int T__231=231;
    public static final int WITH_KEYWORD=44;
    public static final int LINE_COMMENT=9;
    public static final int INSTEAD_KEYWORD=139;
    public static final int PARALLEL_ENABLED_KEYWORD=66;
    public static final int ENABLE_KEYWORD=149;
    public static final int BYTE_TYPE=17;
    public static final int WHEN_KEYWORD=34;
    public static final int C=199;
    public static final int T__212=212;
    public static final int L=187;
    public static final int LOCAL_KEYWORD=45;
    public static final int SECOND_TYPE=22;
    public static final int ROW_KEYWORD=147;
    public static final int END_KEYWORD=31;
    public static final int LIMIT_KEYWORD=107;
    public static final int SET_KEYWORD=126;
    public static final int AFTER_KEYWORD=138;
    public static final int SERIALLY_REUSABLE_KEYWORD=125;
    public static final int IDENTIFIER=24;
    public static final int TYPE_KEYWORD=40;
    public static final int LOCK_KEYWORD=116;
    public static final int BODY_KEYWORD=120;
    public static final int ON_KEYWORD=140;
    public static final int FOUND_KEYWORD=129;
    public static final int MERGE_KEYWORD=117;
    public static final int I=190;
    public static final int T__227=227;
    public static final int OBJECT_KEYWORD=152;
    public static final int F=197;
    public static final int TRANSACTION_KEYWORD=127;
    public static final int INSTANTIABLE_KEYWORD=155;
    public static final int SAVE_KEYWORD=109;
    public static final int RAW_TYPE=18;
    public static final int EXCEPTIONS_KEYWORD=110;
    public static final int QUOTATION_MARK=208;
    public static final int T__222=222;
    public static final int LIKE_KEYWORD=81;
    public static final int RETURNING_KEYWORD=122;
    public static final int K=203;
    public static final int NEW_KEYWORD=144;
    public static final int RECORD_KEYWORD=53;
    public static final int B=196;
    public static final int OUT_KEYWORD=60;
    public static final int IM_TYPE_BODY=174;
    public static final int NULL_KEYWORD=36;
    public static final int INTO_KEYWORD=102;
    public static final int DIGIT=207;
    public static final int IM_TYPE_SPC=173;
    public static final int T__226=226;
    public static final int DEFAULT_KEYWORD=37;
    public static final int T__225=225;
    public static final int OLD_KEYWORD=143;
    public static final int DIGITS=184;
    public static final int H=200;
    public static final int T__223=223;
    public static final int IMMEDIATE_KEYWORD=100;
    public static final int NUMBER_UNSIGNED=4;
    public static final int G=192;
    public static final int BLOCK_COMMENT=8;
    public static final int IM_PCK_SPC=169;
    public static final int FOR_KEYWORD=76;
    public static final int EXT_IDENTIFIER=25;
    public static final int TO_KEYWORD=49;
    public static final int WHITESPACE=10;
    public static final int Z=202;
    public static final int THEN_KEYWORD=35;
    public static final int REVERSE_KEYWORD=77;
    public static final int BY_KEYWORD=90;
    public static final int SEPARATOR=27;
    public static final int T__228=228;
    public static final int EOF=-1;
    public static final int SELECT_KEYWORD=78;
    public static final int REPLACE_KEYWORD=55;
    public static final int GOTO_KEYWORD=73;
    public static final int INDICES_KEYWORD=111;
    public static final int NOCOPY_KEYWORD=61;
    public static final int T__213=213;
    public static final int Y=194;
    public static final int T__221=221;
    public static final int E=191;

    // delegates
    // delegators


        public PL_SQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PL_SQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[569+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PL_SQLParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g"; }



    public class SyntaxError {

        public RecognitionException exception;
        public String message;
        public int line;
        public int start, end;
    }
    	public List<SyntaxError> syntaxErrors = new ArrayList<SyntaxError>();

    	@Override
    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		String message = super.getErrorMessage(e, tokenNames);
    		SyntaxError syntaxError = new SyntaxError();
    		syntaxError.exception = e;
    		syntaxError.message = message;
    		syntaxError.line = e.line;
    		CommonToken token =  (CommonToken) e.token;
    		syntaxError.start = token.getStartIndex();
                    syntaxError.end = token.getStopIndex() + 1;
    		syntaxErrors.add(syntaxError);
    		return message;
    	}

    	@Override
    	public void emitErrorMessage(String msg) {
    	}
    	
    /*protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException
    {
    throw new MismatchedTokenException(ttype, input);
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input,
    RecognitionException e,
    BitSet follow)
    throws RecognitionException
    {
    throw e;
    }
    }
    // Alter code generation so catch-clauses get replace with
    // this action.
    @rulecatch {
    catch (RecognitionException e) {
    throw e;
    }*/


    public static class grammar_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grammar_def"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:1: grammar_def : source_element EOF ;
    public final PL_SQLParser.grammar_def_return grammar_def() throws RecognitionException {
        PL_SQLParser.grammar_def_return retval = new PL_SQLParser.grammar_def_return();
        retval.start = input.LT(1);
        int grammar_def_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EOF2=null;
        PL_SQLParser.source_element_return source_element1 = null;


        CommonTree EOF2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:2: ( source_element EOF )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:4: source_element EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_source_element_in_grammar_def4695);
            source_element1=source_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, source_element1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_grammar_def4698); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, grammar_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grammar_def"

    public static class source_element_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "source_element"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:1: source_element : ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) );
    public final PL_SQLParser.source_element_return source_element() throws RecognitionException {
        PL_SQLParser.source_element_return retval = new PL_SQLParser.source_element_return();
        retval.start = input.LT(1);
        int source_element_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_return anonymous_block3 = null;

        PL_SQLParser.create_replace_part_return create_replace_part4 = null;

        PL_SQLParser.function_declaration_return function_declaration5 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration6 = null;

        PL_SQLParser.package_declaration_return package_declaration7 = null;

        PL_SQLParser.trigger_declaration_return trigger_declaration8 = null;

        PL_SQLParser.type_declaration_return type_declaration9 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:16: ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BEGIN_KEYWORD||LA3_0==DECLARE_KEYWORD) ) {
                alt3=1;
            }
            else if ( (LA3_0==TYPE_KEYWORD||LA3_0==CREATE_KEYWORD||LA3_0==FUNCTION_KEYWORD||LA3_0==PROCEDURE_KEYWORD||LA3_0==PACKAGE_KEYWORD||LA3_0==TRIGGER_KEYWORD) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:18: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_source_element4708);
                    anonymous_block3=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block3.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:19: ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:19: ( create_replace_part )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==CREATE_KEYWORD) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: create_replace_part
                            {
                            pushFollow(FOLLOW_create_replace_part_in_source_element4731);
                            create_replace_part4=create_replace_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_replace_part4.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:19: ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    int alt2=5;
                    switch ( input.LA(1) ) {
                    case FUNCTION_KEYWORD:
                        {
                        alt2=1;
                        }
                        break;
                    case PROCEDURE_KEYWORD:
                        {
                        alt2=2;
                        }
                        break;
                    case PACKAGE_KEYWORD:
                        {
                        alt2=3;
                        }
                        break;
                    case TRIGGER_KEYWORD:
                        {
                        alt2=4;
                        }
                        break;
                    case TYPE_KEYWORD:
                        {
                        alt2=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 0, input);

                        throw nvae;
                    }

                    switch (alt2) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:20: function_declaration
                            {
                            pushFollow(FOLLOW_function_declaration_in_source_element4753);
                            function_declaration5=function_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration5.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:43: procedure_declaration
                            {
                            pushFollow(FOLLOW_procedure_declaration_in_source_element4757);
                            procedure_declaration6=procedure_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration6.getTree());

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:67: package_declaration
                            {
                            pushFollow(FOLLOW_package_declaration_in_source_element4761);
                            package_declaration7=package_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_declaration7.getTree());

                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:20: trigger_declaration
                            {
                            pushFollow(FOLLOW_trigger_declaration_in_source_element4784);
                            trigger_declaration8=trigger_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_declaration8.getTree());

                            }
                            break;
                        case 5 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:42: type_declaration
                            {
                            pushFollow(FOLLOW_type_declaration_in_source_element4788);
                            type_declaration9=type_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration9.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, source_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "source_element"

    public static class identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:1: identifier : ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD );
    public final PL_SQLParser.identifier_return identifier() throws RecognitionException {
        PL_SQLParser.identifier_return retval = new PL_SQLParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:12: ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==INTERVAL_KEYWORD||input.LA(1)==RESULT_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class universal_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:1: universal_identifier : ( identifier | EXT_IDENTIFIER );
    public final PL_SQLParser.universal_identifier_return universal_identifier() throws RecognitionException {
        PL_SQLParser.universal_identifier_return retval = new PL_SQLParser.universal_identifier_return();
        retval.start = input.LT(1);
        int universal_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER12=null;
        PL_SQLParser.identifier_return identifier11 = null;


        CommonTree EXT_IDENTIFIER12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:22: ( identifier | EXT_IDENTIFIER )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER||LA4_0==INTERVAL_KEYWORD||LA4_0==RESULT_KEYWORD) ) {
                alt4=1;
            }
            else if ( (LA4_0==EXT_IDENTIFIER) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:24: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_universal_identifier4813);
                    identifier11=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier11.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:37: EXT_IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXT_IDENTIFIER12=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_universal_identifier4817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER12_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER12);
                    adaptor.addChild(root_0, EXT_IDENTIFIER12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, universal_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_identifier"

    public static class label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:1: label : '<<' identifier '>>' ;
    public final PL_SQLParser.label_return label() throws RecognitionException {
        PL_SQLParser.label_return retval = new PL_SQLParser.label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal13=null;
        Token string_literal15=null;
        PL_SQLParser.identifier_return identifier14 = null;


        CommonTree string_literal13_tree=null;
        CommonTree string_literal15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:7: ( '<<' identifier '>>' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:9: '<<' identifier '>>'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal13=(Token)match(input,210,FOLLOW_210_in_label4824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal13_tree = (CommonTree)adaptor.create(string_literal13);
            adaptor.addChild(root_0, string_literal13_tree);
            }
            pushFollow(FOLLOW_identifier_in_label4826);
            identifier14=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier14.getTree());
            string_literal15=(Token)match(input,211,FOLLOW_211_in_label4828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (CommonTree)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class create_replace_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_replace_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:1: create_replace_part : CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? ;
    public final PL_SQLParser.create_replace_part_return create_replace_part() throws RecognitionException {
        PL_SQLParser.create_replace_part_return retval = new PL_SQLParser.create_replace_part_return();
        retval.start = input.LT(1);
        int create_replace_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE_KEYWORD16=null;
        Token OR_OPERATOR17=null;
        Token REPLACE_KEYWORD18=null;

        CommonTree CREATE_KEYWORD16_tree=null;
        CommonTree OR_OPERATOR17_tree=null;
        CommonTree REPLACE_KEYWORD18_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:21: ( CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:23: CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CREATE_KEYWORD16=(Token)match(input,CREATE_KEYWORD,FOLLOW_CREATE_KEYWORD_in_create_replace_part4835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE_KEYWORD16_tree = (CommonTree)adaptor.create(CREATE_KEYWORD16);
            adaptor.addChild(root_0, CREATE_KEYWORD16_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:38: ( OR_OPERATOR REPLACE_KEYWORD )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==OR_OPERATOR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:39: OR_OPERATOR REPLACE_KEYWORD
                    {
                    OR_OPERATOR17=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_create_replace_part4838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR17_tree = (CommonTree)adaptor.create(OR_OPERATOR17);
                    adaptor.addChild(root_0, OR_OPERATOR17_tree);
                    }
                    REPLACE_KEYWORD18=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_create_replace_part4840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD18_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD18);
                    adaptor.addChild(root_0, REPLACE_KEYWORD18_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, create_replace_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_replace_part"

    public static class as_is_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_is_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:1: as_is_part : ( IS_KEYWORD | AS_KEYWORD );
    public final PL_SQLParser.as_is_part_return as_is_part() throws RecognitionException {
        PL_SQLParser.as_is_part_return retval = new PL_SQLParser.as_is_part_return();
        retval.start = input.LT(1);
        int as_is_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set19=null;

        CommonTree set19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:12: ( IS_KEYWORD | AS_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set19=(Token)input.LT(1);
            if ( input.LA(1)==IS_KEYWORD||input.LA(1)==AS_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set19));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, as_is_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "as_is_part"

    public static class parameter_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:1: parameter_type : ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) );
    public final PL_SQLParser.parameter_type_return parameter_type() throws RecognitionException {
        PL_SQLParser.parameter_type_return retval = new PL_SQLParser.parameter_type_return();
        retval.start = input.LT(1);
        int parameter_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD20=null;
        Token OUT_KEYWORD21=null;
        Token NOCOPY_KEYWORD22=null;
        Token OUT_KEYWORD23=null;
        Token NOCOPY_KEYWORD24=null;

        CommonTree IN_KEYWORD20_tree=null;
        CommonTree OUT_KEYWORD21_tree=null;
        CommonTree NOCOPY_KEYWORD22_tree=null;
        CommonTree OUT_KEYWORD23_tree=null;
        CommonTree NOCOPY_KEYWORD24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:16: ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IN_KEYWORD) ) {
                alt9=1;
            }
            else if ( (LA9_0==OUT_KEYWORD) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:18: IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD20=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD20_tree = (CommonTree)adaptor.create(IN_KEYWORD20);
                    adaptor.addChild(root_0, IN_KEYWORD20_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:29: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==OUT_KEYWORD) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:30: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                            {
                            OUT_KEYWORD21=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4863); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUT_KEYWORD21_tree = (CommonTree)adaptor.create(OUT_KEYWORD21);
                            adaptor.addChild(root_0, OUT_KEYWORD21_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:42: ( NOCOPY_KEYWORD )?
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==NOCOPY_KEYWORD) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                                    {
                                    NOCOPY_KEYWORD22=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4865); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOCOPY_KEYWORD22_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD22);
                                    adaptor.addChild(root_0, NOCOPY_KEYWORD22_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:63: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    OUT_KEYWORD23=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD23_tree = (CommonTree)adaptor.create(OUT_KEYWORD23);
                    adaptor.addChild(root_0, OUT_KEYWORD23_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:75: ( NOCOPY_KEYWORD )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==NOCOPY_KEYWORD) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD24=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4875); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD24_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD24);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD24_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, parameter_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:1: parameter_declaration : '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' ;
    public final PL_SQLParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PL_SQLParser.parameter_declaration_return retval = new PL_SQLParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal25=null;
        Token char_literal31=null;
        Token char_literal37=null;
        PL_SQLParser.identifier_return identifier26 = null;

        PL_SQLParser.parameter_type_return parameter_type27 = null;

        PL_SQLParser.data_type_return data_type28 = null;

        PL_SQLParser.variable_def_part_return variable_def_part29 = null;

        PL_SQLParser.expression_return expression30 = null;

        PL_SQLParser.identifier_return identifier32 = null;

        PL_SQLParser.parameter_type_return parameter_type33 = null;

        PL_SQLParser.data_type_return data_type34 = null;

        PL_SQLParser.variable_def_part_return variable_def_part35 = null;

        PL_SQLParser.expression_return expression36 = null;


        CommonTree char_literal25_tree=null;
        CommonTree char_literal31_tree=null;
        CommonTree char_literal37_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:23: ( '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:25: '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal25=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameter_declaration4884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            pushFollow(FOLLOW_identifier_in_parameter_declaration4886);
            identifier26=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier26.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:40: ( parameter_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=IN_KEYWORD && LA10_0<=OUT_KEYWORD)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
                    {
                    pushFollow(FOLLOW_parameter_type_in_parameter_declaration4888);
                    parameter_type27=parameter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type27.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_parameter_declaration4891);
            data_type28=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type28.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:66: ( variable_def_part expression )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT_KEYWORD||LA11_0==230) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:67: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4894);
                    variable_def_part29=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part29.getTree());
                    pushFollow(FOLLOW_expression_in_parameter_declaration4896);
                    expression30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression30.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:25: ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:26: ',' identifier ( parameter_type )? data_type ( variable_def_part expression )?
            	    {
            	    char_literal31=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration4925); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal31_tree = (CommonTree)adaptor.create(char_literal31);
            	    adaptor.addChild(root_0, char_literal31_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_parameter_declaration4927);
            	    identifier32=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier32.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:41: ( parameter_type )?
            	    int alt12=2;
            	    int LA12_0 = input.LA(1);

            	    if ( ((LA12_0>=IN_KEYWORD && LA12_0<=OUT_KEYWORD)) ) {
            	        alt12=1;
            	    }
            	    switch (alt12) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
            	            {
            	            pushFollow(FOLLOW_parameter_type_in_parameter_declaration4929);
            	            parameter_type33=parameter_type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type33.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_parameter_declaration4932);
            	    data_type34=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type34.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:67: ( variable_def_part expression )?
            	    int alt13=2;
            	    int LA13_0 = input.LA(1);

            	    if ( (LA13_0==DEFAULT_KEYWORD||LA13_0==230) ) {
            	        alt13=1;
            	    }
            	    switch (alt13) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:68: variable_def_part expression
            	            {
            	            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4935);
            	            variable_def_part35=variable_def_part();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part35.getTree());
            	            pushFollow(FOLLOW_expression_in_parameter_declaration4937);
            	            expression36=expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression36.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal37=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameter_declaration4943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
            adaptor.addChild(root_0, char_literal37_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:1: function_spec : FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* ;
    public final PL_SQLParser.function_spec_return function_spec() throws RecognitionException {
        PL_SQLParser.function_spec_return retval = new PL_SQLParser.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FUNCTION_KEYWORD38=null;
        Token RETURN_KEYWORD41=null;
        PL_SQLParser.function_name_return function_name39 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration40 = null;

        PL_SQLParser.data_type_return data_type42 = null;

        PL_SQLParser.invoker_clause_return invoker_clause43 = null;

        PL_SQLParser.function_spec_add2_return function_spec_add244 = null;


        CommonTree FUNCTION_KEYWORD38_tree=null;
        CommonTree RETURN_KEYWORD41_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:15: ( FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:17: FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            FUNCTION_KEYWORD38=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_function_spec4950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD38_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD38);
            adaptor.addChild(root_0, FUNCTION_KEYWORD38_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4968);
            function_name39=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name39.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:31: ( parameter_declaration )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==LPAREN) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_function_spec4970);
                    parameter_declaration40=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration40.getTree());

                    }
                    break;

            }

            RETURN_KEYWORD41=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_function_spec4989); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD41_tree = (CommonTree)adaptor.create(RETURN_KEYWORD41);
            adaptor.addChild(root_0, RETURN_KEYWORD41_tree);
            }
            pushFollow(FOLLOW_data_type_in_function_spec4991);
            data_type42=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type42.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:42: ( invoker_clause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==AUTHID_KEYWORD) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_function_spec4993);
                    invoker_clause43=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause43.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:58: ( function_spec_add2 )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( ((LA17_0>=DETERMINISTIC_KEYWORD && LA17_0<=RESULT_CACHE_KEYWORD)) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:59: function_spec_add2
            	    {
            	    pushFollow(FOLLOW_function_spec_add2_in_function_spec4997);
            	    function_spec_add244=function_spec_add2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec_add244.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class function_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:1: function_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.function_name_return function_name() throws RecognitionException {
        PL_SQLParser.function_name_return retval = new PL_SQLParser.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS46=null;
        PL_SQLParser.universal_identifier_return universal_identifier45 = null;


        CommonTree ALIAS46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:15: ( universal_identifier | ALIAS )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=IDENTIFIER && LA18_0<=EXT_IDENTIFIER)||LA18_0==INTERVAL_KEYWORD||LA18_0==RESULT_KEYWORD) ) {
                alt18=1;
            }
            else if ( (LA18_0==ALIAS) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:17: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_function_name5006);
                    universal_identifier45=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier45.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:40: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS46=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_function_name5010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS46_tree = (CommonTree)adaptor.create(ALIAS46);
                    adaptor.addChild(root_0, ALIAS46_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class invoker_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invoker_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:1: invoker_clause : AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) ;
    public final PL_SQLParser.invoker_clause_return invoker_clause() throws RecognitionException {
        PL_SQLParser.invoker_clause_return retval = new PL_SQLParser.invoker_clause_return();
        retval.start = input.LT(1);
        int invoker_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AUTHID_KEYWORD47=null;
        Token set48=null;

        CommonTree AUTHID_KEYWORD47_tree=null;
        CommonTree set48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:16: ( AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:18: AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            AUTHID_KEYWORD47=(Token)match(input,AUTHID_KEYWORD,FOLLOW_AUTHID_KEYWORD_in_invoker_clause5017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUTHID_KEYWORD47_tree = (CommonTree)adaptor.create(AUTHID_KEYWORD47);
            adaptor.addChild(root_0, AUTHID_KEYWORD47_tree);
            }
            set48=(Token)input.LT(1);
            if ( (input.LA(1)>=CURRENT_USER_KEYWORD && input.LA(1)<=DEFINER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set48));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, invoker_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invoker_clause"

    public static class function_spec_add2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec_add2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:1: function_spec_add2 : ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD );
    public final PL_SQLParser.function_spec_add2_return function_spec_add2() throws RecognitionException {
        PL_SQLParser.function_spec_add2_return retval = new PL_SQLParser.function_spec_add2_return();
        retval.start = input.LT(1);
        int function_spec_add2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set49=null;

        CommonTree set49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:20: ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set49=(Token)input.LT(1);
            if ( (input.LA(1)>=DETERMINISTIC_KEYWORD && input.LA(1)<=RESULT_CACHE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set49));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, function_spec_add2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec_add2"

    public static class function_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:1: function_declaration : function_spec function_procedure_body -> ^( IM_FUNC function_spec function_procedure_body ) ;
    public final PL_SQLParser.function_declaration_return function_declaration() throws RecognitionException {
        PL_SQLParser.function_declaration_return retval = new PL_SQLParser.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.function_spec_return function_spec50 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body51 = null;


        RewriteRuleSubtreeStream stream_function_procedure_body=new RewriteRuleSubtreeStream(adaptor,"rule function_procedure_body");
        RewriteRuleSubtreeStream stream_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule function_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:22: ( function_spec function_procedure_body -> ^( IM_FUNC function_spec function_procedure_body ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:24: function_spec function_procedure_body
            {
            pushFollow(FOLLOW_function_spec_in_function_declaration5051);
            function_spec50=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_spec.add(function_spec50.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_function_declaration5053);
            function_procedure_body51=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_procedure_body.add(function_procedure_body51.getTree());


            // AST REWRITE
            // elements: function_spec, function_procedure_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:22: -> ^( IM_FUNC function_spec function_procedure_body )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:25: ^( IM_FUNC function_spec function_procedure_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_FUNC, "IM_FUNC"), root_1);

                adaptor.addChild(root_1, stream_function_spec.nextTree());
                adaptor.addChild(root_1, stream_function_procedure_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:1: procedure_spec : PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? ;
    public final PL_SQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
        PL_SQLParser.procedure_spec_return retval = new PL_SQLParser.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PROCEDURE_KEYWORD52=null;
        PL_SQLParser.procedure_name_return procedure_name53 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration54 = null;

        PL_SQLParser.invoker_clause_return invoker_clause55 = null;


        CommonTree PROCEDURE_KEYWORD52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:16: ( PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:18: PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            PROCEDURE_KEYWORD52=(Token)match(input,PROCEDURE_KEYWORD,FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE_KEYWORD52_tree = (CommonTree)adaptor.create(PROCEDURE_KEYWORD52);
            adaptor.addChild(root_0, PROCEDURE_KEYWORD52_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec5093);
            procedure_name53=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name53.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:51: ( parameter_declaration )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==LPAREN) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_procedure_spec5095);
                    parameter_declaration54=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration54.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:18: ( invoker_clause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AUTHID_KEYWORD) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_procedure_spec5115);
                    invoker_clause55=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause55.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class procedure_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:1: procedure_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.procedure_name_return procedure_name() throws RecognitionException {
        PL_SQLParser.procedure_name_return retval = new PL_SQLParser.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS57=null;
        PL_SQLParser.universal_identifier_return universal_identifier56 = null;


        CommonTree ALIAS57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:16: ( universal_identifier | ALIAS )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( ((LA21_0>=IDENTIFIER && LA21_0<=EXT_IDENTIFIER)||LA21_0==INTERVAL_KEYWORD||LA21_0==RESULT_KEYWORD) ) {
                alt21=1;
            }
            else if ( (LA21_0==ALIAS) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_procedure_name5123);
                    universal_identifier56=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier56.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS57=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_procedure_name5127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS57_tree = (CommonTree)adaptor.create(ALIAS57);
                    adaptor.addChild(root_0, ALIAS57_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:1: procedure_declaration : procedure_spec function_procedure_body -> ^( IM_PROC procedure_spec function_procedure_body ) ;
    public final PL_SQLParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PL_SQLParser.procedure_declaration_return retval = new PL_SQLParser.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec58 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body59 = null;


        RewriteRuleSubtreeStream stream_procedure_spec=new RewriteRuleSubtreeStream(adaptor,"rule procedure_spec");
        RewriteRuleSubtreeStream stream_function_procedure_body=new RewriteRuleSubtreeStream(adaptor,"rule function_procedure_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:23: ( procedure_spec function_procedure_body -> ^( IM_PROC procedure_spec function_procedure_body ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:25: procedure_spec function_procedure_body
            {
            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration5134);
            procedure_spec58=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_spec.add(procedure_spec58.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_procedure_declaration5136);
            function_procedure_body59=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_procedure_body.add(function_procedure_body59.getTree());


            // AST REWRITE
            // elements: function_procedure_body, procedure_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:23: -> ^( IM_PROC procedure_spec function_procedure_body )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:26: ^( IM_PROC procedure_spec function_procedure_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PROC, "IM_PROC"), root_1);

                adaptor.addChild(root_1, stream_procedure_spec.nextTree());
                adaptor.addChild(root_1, stream_function_procedure_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class function_procedure_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_procedure_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:1: function_procedure_body : as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block ;
    public final PL_SQLParser.function_procedure_body_return function_procedure_body() throws RecognitionException {
        PL_SQLParser.function_procedure_body_return retval = new PL_SQLParser.function_procedure_body_return();
        retval.start = input.LT(1);
        int function_procedure_body_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part60 = null;

        PL_SQLParser.variable_declaration_return variable_declaration61 = null;

        PL_SQLParser.function_declaration_return function_declaration62 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration63 = null;

        PL_SQLParser.block_return block64 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:25: ( as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:27: as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_function_procedure_body5175);
            as_is_part60=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part60.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:38: ( variable_declaration )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==IDENTIFIER||LA22_0==TYPE_KEYWORD||LA22_0==INTERVAL_KEYWORD||LA22_0==SUBTYPE_KEYWORD||LA22_0==PRAGMA_KEYWORD||LA22_0==CURSOR_KEYWORD||LA22_0==RESULT_KEYWORD) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:39: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_function_procedure_body5178);
            	    variable_declaration61=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration61.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:62: ( function_declaration | procedure_declaration )*
            loop23:
            do {
                int alt23=3;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==FUNCTION_KEYWORD) ) {
                    alt23=1;
                }
                else if ( (LA23_0==PROCEDURE_KEYWORD) ) {
                    alt23=2;
                }


                switch (alt23) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:63: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_function_procedure_body5183);
            	    function_declaration62=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration62.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:86: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_function_procedure_body5187);
            	    procedure_declaration63=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration63.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_block_in_function_procedure_body5191);
            block64=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block64.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, function_procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_procedure_body"

    public static class package_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:1: package_declaration : ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) );
    public final PL_SQLParser.package_declaration_return package_declaration() throws RecognitionException {
        PL_SQLParser.package_declaration_return retval = new PL_SQLParser.package_declaration_return();
        retval.start = input.LT(1);
        int package_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE_KEYWORD65=null;
        Token PACKAGE_KEYWORD67=null;
        PL_SQLParser.package_spec_return package_spec66 = null;

        PL_SQLParser.package_body_return package_body68 = null;


        CommonTree PACKAGE_KEYWORD65_tree=null;
        CommonTree PACKAGE_KEYWORD67_tree=null;
        RewriteRuleTokenStream stream_PACKAGE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token PACKAGE_KEYWORD");
        RewriteRuleSubtreeStream stream_package_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_spec");
        RewriteRuleSubtreeStream stream_package_body=new RewriteRuleSubtreeStream(adaptor,"rule package_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:21: ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==PACKAGE_KEYWORD) ) {
                int LA24_1 = input.LA(2);

                if ( (synpred35_PL_SQL()) ) {
                    alt24=1;
                }
                else if ( (true) ) {
                    alt24=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:23: ( PACKAGE_KEYWORD package_spec )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:23: ( PACKAGE_KEYWORD package_spec )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:24: PACKAGE_KEYWORD package_spec
                    {
                    PACKAGE_KEYWORD65=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD65);

                    pushFollow(FOLLOW_package_spec_in_package_declaration5201);
                    package_spec66=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_spec.add(package_spec66.getTree());

                    }



                    // AST REWRITE
                    // elements: package_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 622:54: -> ^( IM_PCK_SPC package_spec )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:57: ^( IM_PCK_SPC package_spec )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_SPC, "IM_PCK_SPC"), root_1);

                        adaptor.addChild(root_1, stream_package_spec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:5: ( PACKAGE_KEYWORD package_body )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:5: ( PACKAGE_KEYWORD package_body )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:6: PACKAGE_KEYWORD package_body
                    {
                    PACKAGE_KEYWORD67=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD67);

                    pushFollow(FOLLOW_package_body_in_package_declaration5219);
                    package_body68=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_body.add(package_body68.getTree());

                    }



                    // AST REWRITE
                    // elements: package_body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 623:36: -> ^( IM_PCK_BODY package_body )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:39: ^( IM_PCK_BODY package_body )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_BODY, "IM_PCK_BODY"), root_1);

                        adaptor.addChild(root_1, stream_package_body.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, package_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_declaration"

    public static class package_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:1: package_spec : package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_spec_return package_spec() throws RecognitionException {
        PL_SQLParser.package_spec_return retval = new PL_SQLParser.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token END_KEYWORD74=null;
        Token SEPARATOR76=null;
        Token char_literal77=null;
        PL_SQLParser.package_spec_name_return package_spec_name69 = null;

        PL_SQLParser.invoker_clause_return invoker_clause70 = null;

        PL_SQLParser.as_is_part_return as_is_part71 = null;

        PL_SQLParser.variable_declaration_return variable_declaration72 = null;

        PL_SQLParser.package_spec2_return package_spec273 = null;

        PL_SQLParser.universal_identifier_return universal_identifier75 = null;


        CommonTree END_KEYWORD74_tree=null;
        CommonTree SEPARATOR76_tree=null;
        CommonTree char_literal77_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:14: ( package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:16: package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_package_spec_name_in_package_spec5235);
            package_spec_name69=package_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec_name69.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:34: ( invoker_clause )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AUTHID_KEYWORD) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_package_spec5237);
                    invoker_clause70=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause70.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_as_is_part_in_package_spec5240);
            as_is_part71=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part71.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:16: ( variable_declaration | package_spec2 )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==IDENTIFIER||LA26_0==TYPE_KEYWORD||LA26_0==INTERVAL_KEYWORD||LA26_0==SUBTYPE_KEYWORD||LA26_0==PRAGMA_KEYWORD||LA26_0==CURSOR_KEYWORD||LA26_0==RESULT_KEYWORD) ) {
                    alt26=1;
                }
                else if ( (LA26_0==FUNCTION_KEYWORD||LA26_0==PROCEDURE_KEYWORD) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_spec5258);
            	    variable_declaration72=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration72.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:40: package_spec2
            	    {
            	    pushFollow(FOLLOW_package_spec2_in_package_spec5262);
            	    package_spec273=package_spec2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec273.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            END_KEYWORD74=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_spec5282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD74_tree = (CommonTree)adaptor.create(END_KEYWORD74);
            adaptor.addChild(root_0, END_KEYWORD74_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:28: ( universal_identifier )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( ((LA27_0>=IDENTIFIER && LA27_0<=EXT_IDENTIFIER)||LA27_0==INTERVAL_KEYWORD||LA27_0==RESULT_KEYWORD) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_spec5284);
                    universal_identifier75=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier75.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:50: ( SEPARATOR )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SEPARATOR) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR76=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR76_tree = (CommonTree)adaptor.create(SEPARATOR76);
                    adaptor.addChild(root_0, SEPARATOR76_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:61: ( '/' )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==212) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal77=(Token)match(input,212,FOLLOW_212_in_package_spec5290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal77_tree = (CommonTree)adaptor.create(char_literal77);
                    adaptor.addChild(root_0, char_literal77_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_spec2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:1: package_spec2 : ( function_spec SEPARATOR -> ^( IM_FUNC function_spec SEPARATOR ) | procedure_spec SEPARATOR -> ^( IM_PROC procedure_spec SEPARATOR ) );
    public final PL_SQLParser.package_spec2_return package_spec2() throws RecognitionException {
        PL_SQLParser.package_spec2_return retval = new PL_SQLParser.package_spec2_return();
        retval.start = input.LT(1);
        int package_spec2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR79=null;
        Token SEPARATOR81=null;
        PL_SQLParser.function_spec_return function_spec78 = null;

        PL_SQLParser.procedure_spec_return procedure_spec80 = null;


        CommonTree SEPARATOR79_tree=null;
        CommonTree SEPARATOR81_tree=null;
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleSubtreeStream stream_procedure_spec=new RewriteRuleSubtreeStream(adaptor,"rule procedure_spec");
        RewriteRuleSubtreeStream stream_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule function_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:15: ( function_spec SEPARATOR -> ^( IM_FUNC function_spec SEPARATOR ) | procedure_spec SEPARATOR -> ^( IM_PROC procedure_spec SEPARATOR ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==FUNCTION_KEYWORD) ) {
                alt30=1;
            }
            else if ( (LA30_0==PROCEDURE_KEYWORD) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:17: function_spec SEPARATOR
                    {
                    pushFollow(FOLLOW_function_spec_in_package_spec25298);
                    function_spec78=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_spec.add(function_spec78.getTree());
                    SEPARATOR79=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec25300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR79);



                    // AST REWRITE
                    // elements: SEPARATOR, function_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 627:41: -> ^( IM_FUNC function_spec SEPARATOR )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:44: ^( IM_FUNC function_spec SEPARATOR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_FUNC, "IM_FUNC"), root_1);

                        adaptor.addChild(root_1, stream_function_spec.nextTree());
                        adaptor.addChild(root_1, stream_SEPARATOR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:19: procedure_spec SEPARATOR
                    {
                    pushFollow(FOLLOW_procedure_spec_in_package_spec25331);
                    procedure_spec80=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_spec.add(procedure_spec80.getTree());
                    SEPARATOR81=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec25333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR81);



                    // AST REWRITE
                    // elements: procedure_spec, SEPARATOR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 628:44: -> ^( IM_PROC procedure_spec SEPARATOR )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:47: ^( IM_PROC procedure_spec SEPARATOR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PROC, "IM_PROC"), root_1);

                        adaptor.addChild(root_1, stream_procedure_spec.nextTree());
                        adaptor.addChild(root_1, stream_SEPARATOR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, package_spec2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec2"

    public static class package_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:1: package_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_spec_name_return package_spec_name() throws RecognitionException {
        PL_SQLParser.package_spec_name_return retval = new PL_SQLParser.package_spec_name_return();
        retval.start = input.LT(1);
        int package_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS83=null;
        PL_SQLParser.universal_identifier_return universal_identifier82 = null;


        CommonTree ALIAS83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:19: ( universal_identifier | ALIAS )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=IDENTIFIER && LA31_0<=EXT_IDENTIFIER)||LA31_0==INTERVAL_KEYWORD||LA31_0==RESULT_KEYWORD) ) {
                alt31=1;
            }
            else if ( (LA31_0==ALIAS) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_spec_name5350);
                    universal_identifier82=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier82.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS83=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_spec_name5354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS83_tree = (CommonTree)adaptor.create(ALIAS83);
                    adaptor.addChild(root_0, ALIAS83_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec_name"

    public static class package_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:1: package_body : BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_body_return package_body() throws RecognitionException {
        PL_SQLParser.package_body_return retval = new PL_SQLParser.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD84=null;
        Token BEGIN_KEYWORD90=null;
        Token END_KEYWORD92=null;
        Token SEPARATOR94=null;
        Token char_literal95=null;
        PL_SQLParser.package_body_name_return package_body_name85 = null;

        PL_SQLParser.as_is_part_return as_is_part86 = null;

        PL_SQLParser.variable_declaration_return variable_declaration87 = null;

        PL_SQLParser.function_declaration_return function_declaration88 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration89 = null;

        PL_SQLParser.executable_section_return executable_section91 = null;

        PL_SQLParser.universal_identifier_return universal_identifier93 = null;


        CommonTree BODY_KEYWORD84_tree=null;
        CommonTree BEGIN_KEYWORD90_tree=null;
        CommonTree END_KEYWORD92_tree=null;
        CommonTree SEPARATOR94_tree=null;
        CommonTree char_literal95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:14: ( BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:16: BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD84=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_package_body5361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD84_tree = (CommonTree)adaptor.create(BODY_KEYWORD84);
            adaptor.addChild(root_0, BODY_KEYWORD84_tree);
            }
            pushFollow(FOLLOW_package_body_name_in_package_body5363);
            package_body_name85=package_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body_name85.getTree());
            pushFollow(FOLLOW_as_is_part_in_package_body5365);
            as_is_part86=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part86.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:16: ( variable_declaration | function_declaration | procedure_declaration )*
            loop32:
            do {
                int alt32=4;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case TYPE_KEYWORD:
                case INTERVAL_KEYWORD:
                case SUBTYPE_KEYWORD:
                case PRAGMA_KEYWORD:
                case CURSOR_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt32=1;
                    }
                    break;
                case FUNCTION_KEYWORD:
                    {
                    alt32=2;
                    }
                    break;
                case PROCEDURE_KEYWORD:
                    {
                    alt32=3;
                    }
                    break;

                }

                switch (alt32) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_body5383);
            	    variable_declaration87=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration87.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:40: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_package_body5387);
            	    function_declaration88=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration88.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:63: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_package_body5391);
            	    procedure_declaration89=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration89.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:16: ( BEGIN_KEYWORD ( executable_section )+ )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BEGIN_KEYWORD) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:17: BEGIN_KEYWORD ( executable_section )+
                    {
                    BEGIN_KEYWORD90=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_package_body5411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEGIN_KEYWORD90_tree = (CommonTree)adaptor.create(BEGIN_KEYWORD90);
                    adaptor.addChild(root_0, BEGIN_KEYWORD90_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:31: ( executable_section )+
                    int cnt33=0;
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==NUMBER_UNSIGNED||LA33_0==STRING||(LA33_0>=IDENTIFIER && LA33_0<=EXT_IDENTIFIER)||LA33_0==BEGIN_KEYWORD||LA33_0==DECLARE_KEYWORD||LA33_0==NULL_KEYWORD||(LA33_0>=TRUE_KEYWORD && LA33_0<=FALSE_KEYWORD)||LA33_0==INTERVAL_KEYWORD||LA33_0==REPLACE_KEYWORD||(LA33_0>=RETURN_KEYWORD && LA33_0<=IN_KEYWORD)||LA33_0==IF_KEYWORD||(LA33_0>=GOTO_KEYWORD && LA33_0<=FOR_KEYWORD)||LA33_0==SELECT_KEYWORD||(LA33_0>=RAISE_KEYWORD && LA33_0<=PRAGMA_KEYWORD)||(LA33_0>=CASE_KEYWORD && LA33_0<=CLOSE_KEYWORD)||LA33_0==COMMIT_KEYWORD||LA33_0==CONTINUE_KEYWORD||(LA33_0>=DELETE_KEYWORD && LA33_0<=EXECUTE_KEYWORD)||LA33_0==EXIT_KEYWORD||LA33_0==FETCH_KEYWORD||LA33_0==FORALL_KEYWORD||(LA33_0>=INSERT_KEYWORD && LA33_0<=OPEN_KEYWORD)||(LA33_0>=ROLLBACK_KEYWORD && LA33_0<=SAVEPOINT_KEYWORD)||LA33_0==SET_KEYWORD||(LA33_0>=SQLCODE_KEYWORD && LA33_0<=UPDATE_KEYWORD)||LA33_0==RESULT_KEYWORD||LA33_0==LPAREN||LA33_0==NOT_OPERATOR||LA33_0==210||(LA33_0>=214 && LA33_0<=215)) ) {
                            alt33=1;
                        }


                        switch (alt33) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:32: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_package_body5414);
                    	    executable_section91=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt33 >= 1 ) break loop33;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(33, input);
                                throw eee;
                        }
                        cnt33++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD92=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_body5435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD92_tree = (CommonTree)adaptor.create(END_KEYWORD92);
            adaptor.addChild(root_0, END_KEYWORD92_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:28: ( universal_identifier )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( ((LA35_0>=IDENTIFIER && LA35_0<=EXT_IDENTIFIER)||LA35_0==INTERVAL_KEYWORD||LA35_0==RESULT_KEYWORD) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_body5437);
                    universal_identifier93=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier93.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:50: ( SEPARATOR )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==SEPARATOR) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR94=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_body5440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR94_tree = (CommonTree)adaptor.create(SEPARATOR94);
                    adaptor.addChild(root_0, SEPARATOR94_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:61: ( '/' )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==212) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal95=(Token)match(input,212,FOLLOW_212_in_package_body5443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal95_tree = (CommonTree)adaptor.create(char_literal95);
                    adaptor.addChild(root_0, char_literal95_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:1: package_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_body_name_return package_body_name() throws RecognitionException {
        PL_SQLParser.package_body_name_return retval = new PL_SQLParser.package_body_name_return();
        retval.start = input.LT(1);
        int package_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS97=null;
        PL_SQLParser.universal_identifier_return universal_identifier96 = null;


        CommonTree ALIAS97_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:19: ( universal_identifier | ALIAS )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0>=IDENTIFIER && LA38_0<=EXT_IDENTIFIER)||LA38_0==INTERVAL_KEYWORD||LA38_0==RESULT_KEYWORD) ) {
                alt38=1;
            }
            else if ( (LA38_0==ALIAS) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_body_name5451);
                    universal_identifier96=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier96.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS97=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_body_name5455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS97_tree = (CommonTree)adaptor.create(ALIAS97);
                    adaptor.addChild(root_0, ALIAS97_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, package_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body_name"

    public static class trigger_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:1: trigger_declaration : TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block ;
    public final PL_SQLParser.trigger_declaration_return trigger_declaration() throws RecognitionException {
        PL_SQLParser.trigger_declaration_return retval = new PL_SQLParser.trigger_declaration_return();
        retval.start = input.LT(1);
        int trigger_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRIGGER_KEYWORD98=null;
        PL_SQLParser.trigger_name_return trigger_name99 = null;

        PL_SQLParser.trigger_type_return trigger_type100 = null;

        PL_SQLParser.follows_part_return follows_part101 = null;

        PL_SQLParser.trigger_part_return trigger_part102 = null;

        PL_SQLParser.anonymous_block_return anonymous_block103 = null;


        CommonTree TRIGGER_KEYWORD98_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:21: ( TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:23: TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block
            {
            root_0 = (CommonTree)adaptor.nil();

            TRIGGER_KEYWORD98=(Token)match(input,TRIGGER_KEYWORD,FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRIGGER_KEYWORD98_tree = (CommonTree)adaptor.create(TRIGGER_KEYWORD98);
            root_0 = (CommonTree)adaptor.becomeRoot(TRIGGER_KEYWORD98_tree, root_0);
            }
            pushFollow(FOLLOW_trigger_name_in_trigger_declaration5465);
            trigger_name99=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_name99.getTree());
            pushFollow(FOLLOW_trigger_type_in_trigger_declaration5467);
            trigger_type100=trigger_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_type100.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:66: ( follows_part )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==FOLLOWS_KEYWORD) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: follows_part
                    {
                    pushFollow(FOLLOW_follows_part_in_trigger_declaration5469);
                    follows_part101=follows_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_part101.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_trigger_part_in_trigger_declaration5472);
            trigger_part102=trigger_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_part102.getTree());
            pushFollow(FOLLOW_anonymous_block_in_trigger_declaration5496);
            anonymous_block103=anonymous_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block103.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, trigger_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_declaration"

    public static class trigger_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:1: trigger_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.trigger_name_return trigger_name() throws RecognitionException {
        PL_SQLParser.trigger_name_return retval = new PL_SQLParser.trigger_name_return();
        retval.start = input.LT(1);
        int trigger_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS105=null;
        PL_SQLParser.universal_identifier_return universal_identifier104 = null;


        CommonTree ALIAS105_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:14: ( universal_identifier | ALIAS )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=IDENTIFIER && LA40_0<=EXT_IDENTIFIER)||LA40_0==INTERVAL_KEYWORD||LA40_0==RESULT_KEYWORD) ) {
                alt40=1;
            }
            else if ( (LA40_0==ALIAS) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:16: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_trigger_name5503);
                    universal_identifier104=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier104.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:39: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS105=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_trigger_name5507); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS105_tree = (CommonTree)adaptor.create(ALIAS105);
                    adaptor.addChild(root_0, ALIAS105_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, trigger_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_name"

    public static class follows_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:1: follows_part : FOLLOWS_KEYWORD universal_identifier ;
    public final PL_SQLParser.follows_part_return follows_part() throws RecognitionException {
        PL_SQLParser.follows_part_return retval = new PL_SQLParser.follows_part_return();
        retval.start = input.LT(1);
        int follows_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOLLOWS_KEYWORD106=null;
        PL_SQLParser.universal_identifier_return universal_identifier107 = null;


        CommonTree FOLLOWS_KEYWORD106_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:14: ( FOLLOWS_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:16: FOLLOWS_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            FOLLOWS_KEYWORD106=(Token)match(input,FOLLOWS_KEYWORD,FOLLOW_FOLLOWS_KEYWORD_in_follows_part5514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOLLOWS_KEYWORD106_tree = (CommonTree)adaptor.create(FOLLOWS_KEYWORD106);
            adaptor.addChild(root_0, FOLLOWS_KEYWORD106_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_follows_part5516);
            universal_identifier107=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier107.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, follows_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "follows_part"

    public static class trigger_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:1: trigger_part : ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? ;
    public final PL_SQLParser.trigger_part_return trigger_part() throws RecognitionException {
        PL_SQLParser.trigger_part_return retval = new PL_SQLParser.trigger_part_return();
        retval.start = input.LT(1);
        int trigger_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set108=null;
        Token WHEN_KEYWORD109=null;
        PL_SQLParser.universal_expression_return universal_expression110 = null;


        CommonTree set108_tree=null;
        CommonTree WHEN_KEYWORD109_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:14: ( ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=ENABLE_KEYWORD && LA41_0<=DISABLE_KEYWORD)) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set108=(Token)input.LT(1);
                    if ( (input.LA(1)>=ENABLE_KEYWORD && input.LA(1)<=DISABLE_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set108));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:52: ( WHEN_KEYWORD universal_expression )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==WHEN_KEYWORD) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:53: WHEN_KEYWORD universal_expression
                    {
                    WHEN_KEYWORD109=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_trigger_part5533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD109_tree = (CommonTree)adaptor.create(WHEN_KEYWORD109);
                    adaptor.addChild(root_0, WHEN_KEYWORD109_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_trigger_part5535);
                    universal_expression110=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression110.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, trigger_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_part"

    public static class trigger_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:1: trigger_type : ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger );
    public final PL_SQLParser.trigger_type_return trigger_type() throws RecognitionException {
        PL_SQLParser.trigger_type_return retval = new PL_SQLParser.trigger_type_return();
        retval.start = input.LT(1);
        int trigger_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEFORE_KEYWORD111=null;
        Token AFTER_KEYWORD114=null;
        Token INSTEAD_KEYWORD117=null;
        Token OF_KEYWORD118=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause112 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger113 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause115 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger116 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause119 = null;

        PL_SQLParser.compound_dml_trigger_return compound_dml_trigger120 = null;


        CommonTree BEFORE_KEYWORD111_tree=null;
        CommonTree AFTER_KEYWORD114_tree=null;
        CommonTree INSTEAD_KEYWORD117_tree=null;
        CommonTree OF_KEYWORD118_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:14: ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger )
            int alt45=4;
            switch ( input.LA(1) ) {
            case BEFORE_KEYWORD:
                {
                alt45=1;
                }
                break;
            case AFTER_KEYWORD:
                {
                alt45=2;
                }
                break;
            case INSTEAD_KEYWORD:
                {
                alt45=3;
                }
                break;
            case FOR_KEYWORD:
                {
                alt45=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:17: BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    BEFORE_KEYWORD111=(Token)match(input,BEFORE_KEYWORD,FOLLOW_BEFORE_KEYWORD_in_trigger_type5545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEFORE_KEYWORD111_tree = (CommonTree)adaptor.create(BEFORE_KEYWORD111);
                    adaptor.addChild(root_0, BEFORE_KEYWORD111_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:32: ( dml_event_clause | non_dml_trigger )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==DELETE_KEYWORD||LA43_0==INSERT_KEYWORD||LA43_0==UPDATE_KEYWORD) ) {
                        alt43=1;
                    }
                    else if ( (LA43_0==IDENTIFIER||LA43_0==INTERVAL_KEYWORD||LA43_0==RESULT_KEYWORD) ) {
                        alt43=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 0, input);

                        throw nvae;
                    }
                    switch (alt43) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:33: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5548);
                            dml_event_clause112=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause112.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:52: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5552);
                            non_dml_trigger113=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger113.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:17: AFTER_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    AFTER_KEYWORD114=(Token)match(input,AFTER_KEYWORD,FOLLOW_AFTER_KEYWORD_in_trigger_type5574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AFTER_KEYWORD114_tree = (CommonTree)adaptor.create(AFTER_KEYWORD114);
                    adaptor.addChild(root_0, AFTER_KEYWORD114_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:31: ( dml_event_clause | non_dml_trigger )
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==DELETE_KEYWORD||LA44_0==INSERT_KEYWORD||LA44_0==UPDATE_KEYWORD) ) {
                        alt44=1;
                    }
                    else if ( (LA44_0==IDENTIFIER||LA44_0==INTERVAL_KEYWORD||LA44_0==RESULT_KEYWORD) ) {
                        alt44=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 0, input);

                        throw nvae;
                    }
                    switch (alt44) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:32: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5577);
                            dml_event_clause115=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause115.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:51: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5581);
                            non_dml_trigger116=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger116.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:17: INSTEAD_KEYWORD OF_KEYWORD dml_event_clause
                    {
                    INSTEAD_KEYWORD117=(Token)match(input,INSTEAD_KEYWORD,FOLLOW_INSTEAD_KEYWORD_in_trigger_type5603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTEAD_KEYWORD117_tree = (CommonTree)adaptor.create(INSTEAD_KEYWORD117);
                    adaptor.addChild(root_0, INSTEAD_KEYWORD117_tree);
                    }
                    OF_KEYWORD118=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_trigger_type5605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD118_tree = (CommonTree)adaptor.create(OF_KEYWORD118);
                    adaptor.addChild(root_0, OF_KEYWORD118_tree);
                    }
                    pushFollow(FOLLOW_dml_event_clause_in_trigger_type5607);
                    dml_event_clause119=dml_event_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause119.getTree());

                    }


                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:16: compound_dml_trigger
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_dml_trigger_in_trigger_type5627);
                    compound_dml_trigger120=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_dml_trigger120.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, trigger_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_type"

    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:1: compound_dml_trigger : FOR_KEYWORD dml_event_clause ( referencing_clause )? ;
    public final PL_SQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        PL_SQLParser.compound_dml_trigger_return retval = new PL_SQLParser.compound_dml_trigger_return();
        retval.start = input.LT(1);
        int compound_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD121=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause122 = null;

        PL_SQLParser.referencing_clause_return referencing_clause123 = null;


        CommonTree FOR_KEYWORD121_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:22: ( FOR_KEYWORD dml_event_clause ( referencing_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:24: FOR_KEYWORD dml_event_clause ( referencing_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD121=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD121_tree = (CommonTree)adaptor.create(FOR_KEYWORD121);
            adaptor.addChild(root_0, FOR_KEYWORD121_tree);
            }
            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger5636);
            dml_event_clause122=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause122.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:53: ( referencing_clause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==REFERENCING_KEYWORD) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger5638);
                    referencing_clause123=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause123.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, compound_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"

    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:1: non_dml_trigger : ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier ;
    public final PL_SQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        PL_SQLParser.non_dml_trigger_return retval = new PL_SQLParser.non_dml_trigger_return();
        retval.start = input.LT(1);
        int non_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR_OPERATOR125=null;
        Token ON_KEYWORD126=null;
        PL_SQLParser.identifier_return identifier124 = null;

        PL_SQLParser.universal_identifier_return universal_identifier127 = null;


        CommonTree OR_OPERATOR125_tree=null;
        CommonTree ON_KEYWORD126_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:17: ( ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:19: ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:19: ( identifier ( OR_OPERATOR )? )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==IDENTIFIER||LA48_0==INTERVAL_KEYWORD||LA48_0==RESULT_KEYWORD) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:20: identifier ( OR_OPERATOR )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_non_dml_trigger5647);
            	    identifier124=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier124.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:31: ( OR_OPERATOR )?
            	    int alt47=2;
            	    int LA47_0 = input.LA(1);

            	    if ( (LA47_0==OR_OPERATOR) ) {
            	        alt47=1;
            	    }
            	    switch (alt47) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR125=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_non_dml_trigger5649); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR125_tree = (CommonTree)adaptor.create(OR_OPERATOR125);
            	            adaptor.addChild(root_0, OR_OPERATOR125_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);

            ON_KEYWORD126=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_non_dml_trigger5654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD126_tree = (CommonTree)adaptor.create(ON_KEYWORD126);
            adaptor.addChild(root_0, ON_KEYWORD126_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_non_dml_trigger5656);
            universal_identifier127=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier127.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, non_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"

    public static class dml_event_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:1: dml_event_clause : ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? ;
    public final PL_SQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
        PL_SQLParser.dml_event_clause_return retval = new PL_SQLParser.dml_event_clause_return();
        retval.start = input.LT(1);
        int dml_event_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD128=null;
        Token DELETE_KEYWORD129=null;
        Token UPDATE_KEYWORD130=null;
        Token OR_OPERATOR132=null;
        Token FOR_KEYWORD136=null;
        Token EACH_KEYWORD137=null;
        Token ROW_KEYWORD138=null;
        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor131 = null;

        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor133 = null;

        PL_SQLParser.dml_event_clause_part_return dml_event_clause_part134 = null;

        PL_SQLParser.referencing_clause_return referencing_clause135 = null;


        CommonTree INSERT_KEYWORD128_tree=null;
        CommonTree DELETE_KEYWORD129_tree=null;
        CommonTree UPDATE_KEYWORD130_tree=null;
        CommonTree OR_OPERATOR132_tree=null;
        CommonTree FOR_KEYWORD136_tree=null;
        CommonTree EACH_KEYWORD137_tree=null;
        CommonTree ROW_KEYWORD138_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:18: ( ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+
            int cnt53=0;
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==DELETE_KEYWORD||LA53_0==INSERT_KEYWORD||LA53_0==UPDATE_KEYWORD) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) )
            	    int alt50=3;
            	    switch ( input.LA(1) ) {
            	    case INSERT_KEYWORD:
            	        {
            	        alt50=1;
            	        }
            	        break;
            	    case DELETE_KEYWORD:
            	        {
            	        alt50=2;
            	        }
            	        break;
            	    case UPDATE_KEYWORD:
            	        {
            	        alt50=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 50, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt50) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:22: INSERT_KEYWORD
            	            {
            	            INSERT_KEYWORD128=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_dml_event_clause5665); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INSERT_KEYWORD128_tree = (CommonTree)adaptor.create(INSERT_KEYWORD128);
            	            adaptor.addChild(root_0, INSERT_KEYWORD128_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:39: DELETE_KEYWORD
            	            {
            	            DELETE_KEYWORD129=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_dml_event_clause5669); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DELETE_KEYWORD129_tree = (CommonTree)adaptor.create(DELETE_KEYWORD129);
            	            adaptor.addChild(root_0, DELETE_KEYWORD129_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:22: UPDATE_KEYWORD ( dml_event_clause_factor )?
            	            {
            	            UPDATE_KEYWORD130=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5695); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UPDATE_KEYWORD130_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD130);
            	            adaptor.addChild(root_0, UPDATE_KEYWORD130_tree);
            	            }
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:37: ( dml_event_clause_factor )?
            	            int alt49=2;
            	            int LA49_0 = input.LA(1);

            	            if ( (LA49_0==OF_KEYWORD) ) {
            	                int LA49_1 = input.LA(2);

            	                if ( (synpred68_PL_SQL()) ) {
            	                    alt49=1;
            	                }
            	            }
            	            switch (alt49) {
            	                case 1 :
            	                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	                    {
            	                    pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5697);
            	                    dml_event_clause_factor131=dml_event_clause_factor();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor131.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:21: ( OR_OPERATOR )?
            	    int alt51=2;
            	    int LA51_0 = input.LA(1);

            	    if ( (LA51_0==OR_OPERATOR) ) {
            	        alt51=1;
            	    }
            	    switch (alt51) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR132=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_dml_event_clause5722); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR132_tree = (CommonTree)adaptor.create(OR_OPERATOR132);
            	            adaptor.addChild(root_0, OR_OPERATOR132_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:34: ( dml_event_clause_factor )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==OF_KEYWORD) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	            {
            	            pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5725);
            	            dml_event_clause_factor133=dml_event_clause_factor();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor133.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);

            pushFollow(FOLLOW_dml_event_clause_part_in_dml_event_clause5750);
            dml_event_clause_part134=dml_event_clause_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_part134.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:43: ( referencing_clause )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==REFERENCING_KEYWORD) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred72_PL_SQL()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_dml_event_clause5752);
                    referencing_clause135=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause135.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:21: ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==FOR_KEYWORD) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:22: FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD
                    {
                    FOR_KEYWORD136=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_dml_event_clause5776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD136_tree = (CommonTree)adaptor.create(FOR_KEYWORD136);
                    adaptor.addChild(root_0, FOR_KEYWORD136_tree);
                    }
                    EACH_KEYWORD137=(Token)match(input,EACH_KEYWORD,FOLLOW_EACH_KEYWORD_in_dml_event_clause5778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EACH_KEYWORD137_tree = (CommonTree)adaptor.create(EACH_KEYWORD137);
                    adaptor.addChild(root_0, EACH_KEYWORD137_tree);
                    }
                    ROW_KEYWORD138=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_dml_event_clause5780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD138_tree = (CommonTree)adaptor.create(ROW_KEYWORD138);
                    adaptor.addChild(root_0, ROW_KEYWORD138_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, dml_event_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"

    public static class dml_event_clause_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:1: dml_event_clause_factor : OF_KEYWORD ( universal_identifier ( COMMA )? )+ ;
    public final PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor() throws RecognitionException {
        PL_SQLParser.dml_event_clause_factor_return retval = new PL_SQLParser.dml_event_clause_factor_return();
        retval.start = input.LT(1);
        int dml_event_clause_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OF_KEYWORD139=null;
        Token COMMA141=null;
        PL_SQLParser.universal_identifier_return universal_identifier140 = null;


        CommonTree OF_KEYWORD139_tree=null;
        CommonTree COMMA141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:25: ( OF_KEYWORD ( universal_identifier ( COMMA )? )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:27: OF_KEYWORD ( universal_identifier ( COMMA )? )+
            {
            root_0 = (CommonTree)adaptor.nil();

            OF_KEYWORD139=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD139_tree = (CommonTree)adaptor.create(OF_KEYWORD139);
            adaptor.addChild(root_0, OF_KEYWORD139_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:38: ( universal_identifier ( COMMA )? )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( ((LA57_0>=IDENTIFIER && LA57_0<=EXT_IDENTIFIER)||LA57_0==INTERVAL_KEYWORD||LA57_0==RESULT_KEYWORD) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:39: universal_identifier ( COMMA )?
            	    {
            	    pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_factor5792);
            	    universal_identifier140=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier140.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:60: ( COMMA )?
            	    int alt56=2;
            	    int LA56_0 = input.LA(1);

            	    if ( (LA56_0==COMMA) ) {
            	        alt56=1;
            	    }
            	    switch (alt56) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: COMMA
            	            {
            	            COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_clause_factor5794); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA141_tree = (CommonTree)adaptor.create(COMMA141);
            	            adaptor.addChild(root_0, COMMA141_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, dml_event_clause_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_factor"

    public static class dml_event_clause_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:1: dml_event_clause_part : ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) ;
    public final PL_SQLParser.dml_event_clause_part_return dml_event_clause_part() throws RecognitionException {
        PL_SQLParser.dml_event_clause_part_return retval = new PL_SQLParser.dml_event_clause_part_return();
        retval.start = input.LT(1);
        int dml_event_clause_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ON_KEYWORD142=null;
        Token NESTED_KEYWORD143=null;
        Token TABLE_KEYWORD144=null;
        Token OF_KEYWORD146=null;
        PL_SQLParser.identifier_return identifier145 = null;

        PL_SQLParser.universal_identifier_return universal_identifier147 = null;


        CommonTree ON_KEYWORD142_tree=null;
        CommonTree NESTED_KEYWORD143_tree=null;
        CommonTree TABLE_KEYWORD144_tree=null;
        CommonTree OF_KEYWORD146_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:23: ( ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:25: ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            {
            root_0 = (CommonTree)adaptor.nil();

            ON_KEYWORD142=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_dml_event_clause_part5804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD142_tree = (CommonTree)adaptor.create(ON_KEYWORD142);
            adaptor.addChild(root_0, ON_KEYWORD142_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:36: ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==NESTED_KEYWORD) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:38: NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD
                    {
                    NESTED_KEYWORD143=(Token)match(input,NESTED_KEYWORD,FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_KEYWORD143_tree = (CommonTree)adaptor.create(NESTED_KEYWORD143);
                    adaptor.addChild(root_0, NESTED_KEYWORD143_tree);
                    }
                    TABLE_KEYWORD144=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD144_tree = (CommonTree)adaptor.create(TABLE_KEYWORD144);
                    adaptor.addChild(root_0, TABLE_KEYWORD144_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_dml_event_clause_part5812);
                    identifier145=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier145.getTree());
                    OF_KEYWORD146=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_part5814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD146_tree = (CommonTree)adaptor.create(OF_KEYWORD146);
                    adaptor.addChild(root_0, OF_KEYWORD146_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_part5818);
            universal_identifier147=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier147.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, dml_event_clause_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_part"

    public static class referencing_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:1: referencing_clause : REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ ;
    public final PL_SQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
        PL_SQLParser.referencing_clause_return retval = new PL_SQLParser.referencing_clause_return();
        retval.start = input.LT(1);
        int referencing_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REFERENCING_KEYWORD148=null;
        Token set149=null;
        Token AS_KEYWORD150=null;
        Token OLD_KEYWORD151=null;
        Token NEW_KEYWORD152=null;
        PL_SQLParser.identifier_return identifier153 = null;


        CommonTree REFERENCING_KEYWORD148_tree=null;
        CommonTree set149_tree=null;
        CommonTree AS_KEYWORD150_tree=null;
        CommonTree OLD_KEYWORD151_tree=null;
        CommonTree NEW_KEYWORD152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:20: ( REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:22: REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            REFERENCING_KEYWORD148=(Token)match(input,REFERENCING_KEYWORD,FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCING_KEYWORD148_tree = (CommonTree)adaptor.create(REFERENCING_KEYWORD148);
            adaptor.addChild(root_0, REFERENCING_KEYWORD148_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:42: ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( ((LA61_0>=OLD_KEYWORD && LA61_0<=PARENT_KEYWORD)) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:44: ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    {
            	    set149=(Token)input.LT(1);
            	    if ( (input.LA(1)>=OLD_KEYWORD && input.LA(1)<=PARENT_KEYWORD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set149));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:22: ( AS_KEYWORD )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AS_KEYWORD) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: AS_KEYWORD
            	            {
            	            AS_KEYWORD150=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_referencing_clause5863); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AS_KEYWORD150_tree = (CommonTree)adaptor.create(AS_KEYWORD150);
            	            adaptor.addChild(root_0, AS_KEYWORD150_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:34: ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    int alt60=3;
            	    switch ( input.LA(1) ) {
            	    case OLD_KEYWORD:
            	        {
            	        alt60=1;
            	        }
            	        break;
            	    case NEW_KEYWORD:
            	        {
            	        alt60=2;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    case INTERVAL_KEYWORD:
            	    case RESULT_KEYWORD:
            	        {
            	        alt60=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 60, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:35: OLD_KEYWORD
            	            {
            	            OLD_KEYWORD151=(Token)match(input,OLD_KEYWORD,FOLLOW_OLD_KEYWORD_in_referencing_clause5867); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OLD_KEYWORD151_tree = (CommonTree)adaptor.create(OLD_KEYWORD151);
            	            adaptor.addChild(root_0, OLD_KEYWORD151_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:49: NEW_KEYWORD
            	            {
            	            NEW_KEYWORD152=(Token)match(input,NEW_KEYWORD,FOLLOW_NEW_KEYWORD_in_referencing_clause5871); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NEW_KEYWORD152_tree = (CommonTree)adaptor.create(NEW_KEYWORD152);
            	            adaptor.addChild(root_0, NEW_KEYWORD152_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:63: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_referencing_clause5875);
            	            identifier153=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier153.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, referencing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"

    public static class type_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:1: type_declaration : ( ( TYPE_KEYWORD type_spec_declaration ) -> ^( IM_TYPE_SPC type_spec_declaration ) | ( TYPE_KEYWORD type_body_declaration ) -> ^( IM_TYPE_BODY type_body_declaration ) );
    public final PL_SQLParser.type_declaration_return type_declaration() throws RecognitionException {
        PL_SQLParser.type_declaration_return retval = new PL_SQLParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD154=null;
        Token TYPE_KEYWORD156=null;
        PL_SQLParser.type_spec_declaration_return type_spec_declaration155 = null;

        PL_SQLParser.type_body_declaration_return type_body_declaration157 = null;


        CommonTree TYPE_KEYWORD154_tree=null;
        CommonTree TYPE_KEYWORD156_tree=null;
        RewriteRuleTokenStream stream_TYPE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token TYPE_KEYWORD");
        RewriteRuleSubtreeStream stream_type_body_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_body_declaration");
        RewriteRuleSubtreeStream stream_type_spec_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_spec_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:18: ( ( TYPE_KEYWORD type_spec_declaration ) -> ^( IM_TYPE_SPC type_spec_declaration ) | ( TYPE_KEYWORD type_body_declaration ) -> ^( IM_TYPE_BODY type_body_declaration ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==TYPE_KEYWORD) ) {
                int LA62_1 = input.LA(2);

                if ( (synpred83_PL_SQL()) ) {
                    alt62=1;
                }
                else if ( (true) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:20: ( TYPE_KEYWORD type_spec_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:20: ( TYPE_KEYWORD type_spec_declaration )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:21: TYPE_KEYWORD type_spec_declaration
                    {
                    TYPE_KEYWORD154=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration5887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE_KEYWORD.add(TYPE_KEYWORD154);

                    pushFollow(FOLLOW_type_spec_declaration_in_type_declaration5889);
                    type_spec_declaration155=type_spec_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec_declaration.add(type_spec_declaration155.getTree());

                    }



                    // AST REWRITE
                    // elements: type_spec_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 655:57: -> ^( IM_TYPE_SPC type_spec_declaration )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:60: ^( IM_TYPE_SPC type_spec_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_TYPE_SPC, "IM_TYPE_SPC"), root_1);

                        adaptor.addChild(root_1, stream_type_spec_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:20: ( TYPE_KEYWORD type_body_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:20: ( TYPE_KEYWORD type_body_declaration )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:21: TYPE_KEYWORD type_body_declaration
                    {
                    TYPE_KEYWORD156=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration5941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE_KEYWORD.add(TYPE_KEYWORD156);

                    pushFollow(FOLLOW_type_body_declaration_in_type_declaration5943);
                    type_body_declaration157=type_body_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_body_declaration.add(type_body_declaration157.getTree());

                    }



                    // AST REWRITE
                    // elements: type_body_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 657:57: -> ^( IM_TYPE_BODY type_body_declaration )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:60: ^( IM_TYPE_BODY type_body_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_TYPE_BODY, "IM_TYPE_BODY"), root_1);

                        adaptor.addChild(root_1, stream_type_body_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_spec_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:1: type_spec_declaration : type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_spec_declaration_return type_spec_declaration() throws RecognitionException {
        PL_SQLParser.type_spec_declaration_return retval = new PL_SQLParser.type_spec_declaration_return();
        retval.start = input.LT(1);
        int type_spec_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR162=null;
        Token char_literal163=null;
        PL_SQLParser.type_spec_name_return type_spec_name158 = null;

        PL_SQLParser.type_oid_part_return type_oid_part159 = null;

        PL_SQLParser.invoker_clause_return invoker_clause160 = null;

        PL_SQLParser.type_spec_types_return type_spec_types161 = null;


        CommonTree SEPARATOR162_tree=null;
        CommonTree char_literal163_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:23: ( type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:25: type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_spec_name_in_type_spec_declaration5959);
            type_spec_name158=type_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_name158.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:40: ( type_oid_part )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==OID_KEYWORD) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: type_oid_part
                    {
                    pushFollow(FOLLOW_type_oid_part_in_type_spec_declaration5961);
                    type_oid_part159=type_oid_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_oid_part159.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:55: ( invoker_clause )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==AUTHID_KEYWORD) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_type_spec_declaration5964);
                    invoker_clause160=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause160.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_types_in_type_spec_declaration5967);
            type_spec_types161=type_spec_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_types161.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:25: ( SEPARATOR )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==SEPARATOR) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR162=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_spec_declaration5993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR162_tree = (CommonTree)adaptor.create(SEPARATOR162);
                    adaptor.addChild(root_0, SEPARATOR162_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:36: ( '/' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==212) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal163=(Token)match(input,212,FOLLOW_212_in_type_spec_declaration5996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal163_tree = (CommonTree)adaptor.create(char_literal163);
                    adaptor.addChild(root_0, char_literal163_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, type_spec_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_declaration"

    public static class type_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:1: type_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_spec_name_return type_spec_name() throws RecognitionException {
        PL_SQLParser.type_spec_name_return retval = new PL_SQLParser.type_spec_name_return();
        retval.start = input.LT(1);
        int type_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS165=null;
        PL_SQLParser.universal_identifier_return universal_identifier164 = null;


        CommonTree ALIAS165_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:16: ( universal_identifier | ALIAS )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=IDENTIFIER && LA67_0<=EXT_IDENTIFIER)||LA67_0==INTERVAL_KEYWORD||LA67_0==RESULT_KEYWORD) ) {
                alt67=1;
            }
            else if ( (LA67_0==ALIAS) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_spec_name6004);
                    universal_identifier164=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier164.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS165=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_spec_name6008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS165_tree = (CommonTree)adaptor.create(ALIAS165);
                    adaptor.addChild(root_0, ALIAS165_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, type_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_name"

    public static class type_oid_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_oid_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:1: type_oid_part : OID_KEYWORD '\\'' universal_identifier '\\'' ;
    public final PL_SQLParser.type_oid_part_return type_oid_part() throws RecognitionException {
        PL_SQLParser.type_oid_part_return retval = new PL_SQLParser.type_oid_part_return();
        retval.start = input.LT(1);
        int type_oid_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OID_KEYWORD166=null;
        Token char_literal167=null;
        Token char_literal169=null;
        PL_SQLParser.universal_identifier_return universal_identifier168 = null;


        CommonTree OID_KEYWORD166_tree=null;
        CommonTree char_literal167_tree=null;
        CommonTree char_literal169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:15: ( OID_KEYWORD '\\'' universal_identifier '\\'' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:17: OID_KEYWORD '\\'' universal_identifier '\\''
            {
            root_0 = (CommonTree)adaptor.nil();

            OID_KEYWORD166=(Token)match(input,OID_KEYWORD,FOLLOW_OID_KEYWORD_in_type_oid_part6015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OID_KEYWORD166_tree = (CommonTree)adaptor.create(OID_KEYWORD166);
            adaptor.addChild(root_0, OID_KEYWORD166_tree);
            }
            char_literal167=(Token)match(input,213,FOLLOW_213_in_type_oid_part6017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal167_tree = (CommonTree)adaptor.create(char_literal167);
            adaptor.addChild(root_0, char_literal167_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_type_oid_part6019);
            universal_identifier168=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier168.getTree());
            char_literal169=(Token)match(input,213,FOLLOW_213_in_type_oid_part6021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal169_tree = (CommonTree)adaptor.create(char_literal169);
            adaptor.addChild(root_0, char_literal169_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, type_oid_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_oid_part"

    public static class type_spec_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:1: type_spec_types : ( object_type | varray_type | nested_table_type );
    public final PL_SQLParser.type_spec_types_return type_spec_types() throws RecognitionException {
        PL_SQLParser.type_spec_types_return retval = new PL_SQLParser.type_spec_types_return();
        retval.start = input.LT(1);
        int type_spec_types_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.object_type_return object_type170 = null;

        PL_SQLParser.varray_type_return varray_type171 = null;

        PL_SQLParser.nested_table_type_return nested_table_type172 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:17: ( object_type | varray_type | nested_table_type )
            int alt68=3;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==UNDER_KEYWORD) ) {
                alt68=1;
            }
            else if ( (LA68_0==IS_KEYWORD||LA68_0==AS_KEYWORD) ) {
                int LA68_2 = input.LA(2);

                if ( (synpred89_PL_SQL()) ) {
                    alt68=1;
                }
                else if ( (synpred90_PL_SQL()) ) {
                    alt68=2;
                }
                else if ( (true) ) {
                    alt68=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:19: object_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_object_type_in_type_spec_types6029);
                    object_type170=object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type170.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:33: varray_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_varray_type_in_type_spec_types6033);
                    varray_type171=varray_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_type171.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:47: nested_table_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nested_table_type_in_type_spec_types6037);
                    nested_table_type172=nested_table_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_type172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, type_spec_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_types"

    public static class object_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:1: object_type : ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? ;
    public final PL_SQLParser.object_type_return object_type() throws RecognitionException {
        PL_SQLParser.object_type_return retval = new PL_SQLParser.object_type_return();
        retval.start = input.LT(1);
        int object_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OBJECT_KEYWORD174=null;
        Token UNDER_KEYWORD175=null;
        Token NOT_OPERATOR178=null;
        Token FINAL_KEYWORD179=null;
        Token NOT_OPERATOR180=null;
        Token INSTANTIABLE_KEYWORD181=null;
        PL_SQLParser.as_is_part_return as_is_part173 = null;

        PL_SQLParser.universal_identifier_return universal_identifier176 = null;

        PL_SQLParser.object_type_part_return object_type_part177 = null;


        CommonTree OBJECT_KEYWORD174_tree=null;
        CommonTree UNDER_KEYWORD175_tree=null;
        CommonTree NOT_OPERATOR178_tree=null;
        CommonTree FINAL_KEYWORD179_tree=null;
        CommonTree NOT_OPERATOR180_tree=null;
        CommonTree INSTANTIABLE_KEYWORD181_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:13: ( ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==IS_KEYWORD||LA69_0==AS_KEYWORD) ) {
                alt69=1;
            }
            else if ( (LA69_0==UNDER_KEYWORD) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:16: ( as_is_part OBJECT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:16: ( as_is_part OBJECT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:17: as_is_part OBJECT_KEYWORD
                    {
                    pushFollow(FOLLOW_as_is_part_in_object_type6046);
                    as_is_part173=as_is_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part173.getTree());
                    OBJECT_KEYWORD174=(Token)match(input,OBJECT_KEYWORD,FOLLOW_OBJECT_KEYWORD_in_object_type6048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OBJECT_KEYWORD174_tree = (CommonTree)adaptor.create(OBJECT_KEYWORD174);
                    adaptor.addChild(root_0, OBJECT_KEYWORD174_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:46: ( UNDER_KEYWORD universal_identifier )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:46: ( UNDER_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:47: UNDER_KEYWORD universal_identifier
                    {
                    UNDER_KEYWORD175=(Token)match(input,UNDER_KEYWORD,FOLLOW_UNDER_KEYWORD_in_object_type6054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDER_KEYWORD175_tree = (CommonTree)adaptor.create(UNDER_KEYWORD175);
                    adaptor.addChild(root_0, UNDER_KEYWORD175_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_object_type6056);
                    universal_identifier176=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier176.getTree());

                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:15: ( object_type_part )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==LPAREN) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: object_type_part
                    {
                    pushFollow(FOLLOW_object_type_part_in_object_type6074);
                    object_type_part177=object_type_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type_part177.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:16: ( ( NOT_OPERATOR )? FINAL_KEYWORD )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==FINAL_KEYWORD) ) {
                alt72=1;
            }
            else if ( (LA72_0==NOT_OPERATOR) ) {
                int LA72_3 = input.LA(2);

                if ( (synpred94_PL_SQL()) ) {
                    alt72=1;
                }
            }
            switch (alt72) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:17: ( NOT_OPERATOR )? FINAL_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:17: ( NOT_OPERATOR )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==NOT_OPERATOR) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR178=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type6093); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR178_tree = (CommonTree)adaptor.create(NOT_OPERATOR178);
                            adaptor.addChild(root_0, NOT_OPERATOR178_tree);
                            }

                            }
                            break;

                    }

                    FINAL_KEYWORD179=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_object_type6096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD179_tree = (CommonTree)adaptor.create(FINAL_KEYWORD179);
                    adaptor.addChild(root_0, FINAL_KEYWORD179_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:47: ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==INSTANTIABLE_KEYWORD||LA74_0==NOT_OPERATOR) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:48: ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:48: ( NOT_OPERATOR )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==NOT_OPERATOR) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR180=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type6101); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR180_tree = (CommonTree)adaptor.create(NOT_OPERATOR180);
                            adaptor.addChild(root_0, NOT_OPERATOR180_tree);
                            }

                            }
                            break;

                    }

                    INSTANTIABLE_KEYWORD181=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_object_type6104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD181_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD181);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD181_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, object_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type"

    public static class object_type_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:1: object_type_part : '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' ;
    public final PL_SQLParser.object_type_part_return object_type_part() throws RecognitionException {
        PL_SQLParser.object_type_part_return retval = new PL_SQLParser.object_type_part_return();
        retval.start = input.LT(1);
        int object_type_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal182=null;
        Token char_literal185=null;
        Token char_literal187=null;
        Token char_literal188=null;
        PL_SQLParser.identifier_return identifier183 = null;

        PL_SQLParser.data_type_return data_type184 = null;

        PL_SQLParser.element_spec_return element_spec186 = null;


        CommonTree char_literal182_tree=null;
        CommonTree char_literal185_tree=null;
        CommonTree char_literal187_tree=null;
        CommonTree char_literal188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:18: ( '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:20: '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal182=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_object_type_part6113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal182_tree = (CommonTree)adaptor.create(char_literal182);
            adaptor.addChild(root_0, char_literal182_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:24: ( identifier data_type ( ',' )? )+
            int cnt76=0;
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==IDENTIFIER||LA76_0==INTERVAL_KEYWORD||LA76_0==RESULT_KEYWORD) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:25: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_object_type_part6116);
            	    identifier183=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier183.getTree());
            	    pushFollow(FOLLOW_data_type_in_object_type_part6118);
            	    data_type184=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type184.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:46: ( ',' )?
            	    int alt75=2;
            	    int LA75_0 = input.LA(1);

            	    if ( (LA75_0==COMMA) ) {
            	        alt75=1;
            	    }
            	    switch (alt75) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal185=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part6120); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal185_tree = (CommonTree)adaptor.create(char_literal185);
            	            adaptor.addChild(root_0, char_literal185_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:53: ( element_spec ( ',' )? )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=FINAL_KEYWORD && LA78_0<=CONSTRUCTOR_KEYWORD)||(LA78_0>=MAP_KEYWORD && LA78_0<=ORDER_KEYWORD)||LA78_0==NOT_OPERATOR) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:54: element_spec ( ',' )?
            	    {
            	    pushFollow(FOLLOW_element_spec_in_object_type_part6126);
            	    element_spec186=element_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec186.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:67: ( ',' )?
            	    int alt77=2;
            	    int LA77_0 = input.LA(1);

            	    if ( (LA77_0==COMMA) ) {
            	        alt77=1;
            	    }
            	    switch (alt77) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal187=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part6128); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal187_tree = (CommonTree)adaptor.create(char_literal187);
            	            adaptor.addChild(root_0, char_literal187_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            char_literal188=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_object_type_part6133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal188_tree = (CommonTree)adaptor.create(char_literal188);
            adaptor.addChild(root_0, char_literal188_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, object_type_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type_part"

    public static class element_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:1: element_spec : ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? ;
    public final PL_SQLParser.element_spec_return element_spec() throws RecognitionException {
        PL_SQLParser.element_spec_return retval = new PL_SQLParser.element_spec_return();
        retval.start = input.LT(1);
        int element_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal193=null;
        PL_SQLParser.inheritance_clauses_return inheritance_clauses189 = null;

        PL_SQLParser.subprogram_spec_return subprogram_spec190 = null;

        PL_SQLParser.constructor_spec_return constructor_spec191 = null;

        PL_SQLParser.map_order_function_spec_return map_order_function_spec192 = null;

        PL_SQLParser.pragma_clause_return pragma_clause194 = null;


        CommonTree char_literal193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:14: ( ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:16: ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:16: ( inheritance_clauses )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==OVERRIDING_KEYWORD||LA79_0==NOT_OPERATOR) ) {
                alt79=1;
            }
            else if ( ((LA79_0>=FINAL_KEYWORD && LA79_0<=INSTANTIABLE_KEYWORD)) ) {
                int LA79_3 = input.LA(2);

                if ( (synpred101_PL_SQL()) ) {
                    alt79=1;
                }
            }
            switch (alt79) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: inheritance_clauses
                    {
                    pushFollow(FOLLOW_inheritance_clauses_in_element_spec6140);
                    inheritance_clauses189=inheritance_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inheritance_clauses189.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:37: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>=FINAL_KEYWORD && LA82_0<=INSTANTIABLE_KEYWORD)||(LA82_0>=MEMBER_KEYWORD && LA82_0<=CONSTRUCTOR_KEYWORD)||(LA82_0>=MAP_KEYWORD && LA82_0<=ORDER_KEYWORD)) ) {
                    int LA82_1 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt82=1;
                    }


                }


                switch (alt82) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
            	    int alt80=3;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_KEYWORD:
            	    case STATIC_KEYWORD:
            	        {
            	        alt80=1;
            	        }
            	        break;
            	    case FINAL_KEYWORD:
            	    case INSTANTIABLE_KEYWORD:
            	    case CONSTRUCTOR_KEYWORD:
            	        {
            	        alt80=2;
            	        }
            	        break;
            	    case MAP_KEYWORD:
            	    case ORDER_KEYWORD:
            	        {
            	        alt80=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 80, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt80) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:39: subprogram_spec
            	            {
            	            pushFollow(FOLLOW_subprogram_spec_in_element_spec6145);
            	            subprogram_spec190=subprogram_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec190.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:57: constructor_spec
            	            {
            	            pushFollow(FOLLOW_constructor_spec_in_element_spec6149);
            	            constructor_spec191=constructor_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec191.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:76: map_order_function_spec
            	            {
            	            pushFollow(FOLLOW_map_order_function_spec_in_element_spec6153);
            	            map_order_function_spec192=map_order_function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec192.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:101: ( ',' )?
            	    int alt81=2;
            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==COMMA) ) {
            	        int LA81_1 = input.LA(2);

            	        if ( (synpred104_PL_SQL()) ) {
            	            alt81=1;
            	        }
            	    }
            	    switch (alt81) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal193=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec6156); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal193_tree = (CommonTree)adaptor.create(char_literal193);
            	            adaptor.addChild(root_0, char_literal193_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:16: ( pragma_clause )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==PRAGMA_KEYWORD) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec6176);
                    pragma_clause194=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_clause194.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, element_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_spec"

    public static class pragma_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:1: pragma_clause : PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ;
    public final PL_SQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
        PL_SQLParser.pragma_clause_return retval = new PL_SQLParser.pragma_clause_return();
        retval.start = input.LT(1);
        int pragma_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD195=null;
        Token RESTRICT_REFERENCES_KEYWORD196=null;
        Token char_literal197=null;
        Token char_literal199=null;
        Token char_literal201=null;
        PL_SQLParser.expression_return expression198 = null;

        PL_SQLParser.expression_return expression200 = null;


        CommonTree PRAGMA_KEYWORD195_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD196_tree=null;
        CommonTree char_literal197_tree=null;
        CommonTree char_literal199_tree=null;
        CommonTree char_literal201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:15: ( PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:17: PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD195=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_clause6184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD195_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD195);
            adaptor.addChild(root_0, PRAGMA_KEYWORD195_tree);
            }
            RESTRICT_REFERENCES_KEYWORD196=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause6186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESTRICT_REFERENCES_KEYWORD196_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD196);
            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD196_tree);
            }
            char_literal197=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_clause6188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal197_tree = (CommonTree)adaptor.create(char_literal197);
            adaptor.addChild(root_0, char_literal197_tree);
            }
            pushFollow(FOLLOW_expression_in_pragma_clause6190);
            expression198=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression198.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:75: ( ',' expression )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:76: ',' expression
            	    {
            	    char_literal199=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause6193); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal199_tree = (CommonTree)adaptor.create(char_literal199);
            	    adaptor.addChild(root_0, char_literal199_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_pragma_clause6195);
            	    expression200=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression200.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);

            char_literal201=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_clause6199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal201_tree = (CommonTree)adaptor.create(char_literal201);
            adaptor.addChild(root_0, char_literal201_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, pragma_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"

    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:1: map_order_function_spec : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec ;
    public final PL_SQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        PL_SQLParser.map_order_function_spec_return retval = new PL_SQLParser.map_order_function_spec_return();
        retval.start = input.LT(1);
        int map_order_function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set202=null;
        Token MEMBER_KEYWORD203=null;
        PL_SQLParser.function_spec_return function_spec204 = null;


        CommonTree set202_tree=null;
        CommonTree MEMBER_KEYWORD203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:25: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:27: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            set202=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set202));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD203=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD203_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD203);
            adaptor.addChild(root_0, MEMBER_KEYWORD203_tree);
            }
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec6216);
            function_spec204=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec204.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, map_order_function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"

    public static class constructor_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:1: constructor_spec : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? ;
    public final PL_SQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
        PL_SQLParser.constructor_spec_return retval = new PL_SQLParser.constructor_spec_return();
        retval.start = input.LT(1);
        int constructor_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD205=null;
        Token INSTANTIABLE_KEYWORD206=null;
        Token CONSTRUCTOR_KEYWORD207=null;
        Token FUNCTION_KEYWORD208=null;
        PL_SQLParser.data_type_return data_type209 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part210 = null;


        CommonTree FINAL_KEYWORD205_tree=null;
        CommonTree INSTANTIABLE_KEYWORD206_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD207_tree=null;
        CommonTree FUNCTION_KEYWORD208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:18: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:20: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:20: ( FINAL_KEYWORD )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FINAL_KEYWORD) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD205=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_spec6223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD205_tree = (CommonTree)adaptor.create(FINAL_KEYWORD205);
                    adaptor.addChild(root_0, FINAL_KEYWORD205_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:35: ( INSTANTIABLE_KEYWORD )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==INSTANTIABLE_KEYWORD) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD206=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD206_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD206);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD206_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD207=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD207_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD207);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD207_tree);
            }
            FUNCTION_KEYWORD208=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD208_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD208);
            adaptor.addChild(root_0, FUNCTION_KEYWORD208_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_spec6252);
            data_type209=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type209.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:30: ( constructor_spec_part )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==LPAREN) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_spec6254);
                    constructor_spec_part210=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part210.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, constructor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"

    public static class constructor_spec_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:1: constructor_spec_part : '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD ;
    public final PL_SQLParser.constructor_spec_part_return constructor_spec_part() throws RecognitionException {
        PL_SQLParser.constructor_spec_part_return retval = new PL_SQLParser.constructor_spec_part_return();
        retval.start = input.LT(1);
        int constructor_spec_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal211=null;
        Token SELF_KEYWORD212=null;
        Token IN_KEYWORD213=null;
        Token OUT_KEYWORD214=null;
        Token char_literal215=null;
        Token IN_KEYWORD217=null;
        Token char_literal219=null;
        Token char_literal220=null;
        Token RETURN_KEYWORD221=null;
        Token SELF_KEYWORD222=null;
        Token AS_KEYWORD223=null;
        Token RESULT_KEYWORD224=null;
        PL_SQLParser.identifier_return identifier216 = null;

        PL_SQLParser.data_type_return data_type218 = null;


        CommonTree char_literal211_tree=null;
        CommonTree SELF_KEYWORD212_tree=null;
        CommonTree IN_KEYWORD213_tree=null;
        CommonTree OUT_KEYWORD214_tree=null;
        CommonTree char_literal215_tree=null;
        CommonTree IN_KEYWORD217_tree=null;
        CommonTree char_literal219_tree=null;
        CommonTree char_literal220_tree=null;
        CommonTree RETURN_KEYWORD221_tree=null;
        CommonTree SELF_KEYWORD222_tree=null;
        CommonTree AS_KEYWORD223_tree=null;
        CommonTree RESULT_KEYWORD224_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:23: ( '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:25: '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal211=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constructor_spec_part6262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal211_tree = (CommonTree)adaptor.create(char_literal211);
            adaptor.addChild(root_0, char_literal211_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:29: ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==SELF_KEYWORD) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:30: SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ','
                    {
                    SELF_KEYWORD212=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF_KEYWORD212_tree = (CommonTree)adaptor.create(SELF_KEYWORD212);
                    adaptor.addChild(root_0, SELF_KEYWORD212_tree);
                    }
                    IN_KEYWORD213=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part6267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD213_tree = (CommonTree)adaptor.create(IN_KEYWORD213);
                    adaptor.addChild(root_0, IN_KEYWORD213_tree);
                    }
                    OUT_KEYWORD214=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_constructor_spec_part6269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD214_tree = (CommonTree)adaptor.create(OUT_KEYWORD214);
                    adaptor.addChild(root_0, OUT_KEYWORD214_tree);
                    }
                    char_literal215=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal215_tree = (CommonTree)adaptor.create(char_literal215);
                    adaptor.addChild(root_0, char_literal215_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:25: ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==IDENTIFIER||LA91_0==INTERVAL_KEYWORD||LA91_0==RESULT_KEYWORD) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:26: identifier ( IN_KEYWORD )? data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_constructor_spec_part6300);
            	    identifier216=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier216.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:37: ( IN_KEYWORD )?
            	    int alt89=2;
            	    int LA89_0 = input.LA(1);

            	    if ( (LA89_0==IN_KEYWORD) ) {
            	        alt89=1;
            	    }
            	    switch (alt89) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
            	            {
            	            IN_KEYWORD217=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part6302); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD217_tree = (CommonTree)adaptor.create(IN_KEYWORD217);
            	            adaptor.addChild(root_0, IN_KEYWORD217_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_constructor_spec_part6305);
            	    data_type218=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type218.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:59: ( ',' )?
            	    int alt90=2;
            	    int LA90_0 = input.LA(1);

            	    if ( (LA90_0==COMMA) ) {
            	        alt90=1;
            	    }
            	    switch (alt90) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal219=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6307); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal219_tree = (CommonTree)adaptor.create(char_literal219);
            	            adaptor.addChild(root_0, char_literal219_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);

            char_literal220=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_spec_part6312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal220_tree = (CommonTree)adaptor.create(char_literal220);
            adaptor.addChild(root_0, char_literal220_tree);
            }
            RETURN_KEYWORD221=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD221_tree = (CommonTree)adaptor.create(RETURN_KEYWORD221);
            adaptor.addChild(root_0, RETURN_KEYWORD221_tree);
            }
            SELF_KEYWORD222=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELF_KEYWORD222_tree = (CommonTree)adaptor.create(SELF_KEYWORD222);
            adaptor.addChild(root_0, SELF_KEYWORD222_tree);
            }
            AS_KEYWORD223=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_constructor_spec_part6342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_KEYWORD223_tree = (CommonTree)adaptor.create(AS_KEYWORD223);
            adaptor.addChild(root_0, AS_KEYWORD223_tree);
            }
            RESULT_KEYWORD224=(Token)match(input,RESULT_KEYWORD,FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESULT_KEYWORD224_tree = (CommonTree)adaptor.create(RESULT_KEYWORD224);
            adaptor.addChild(root_0, RESULT_KEYWORD224_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, constructor_spec_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec_part"

    public static class subprogram_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:1: subprogram_spec : ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) ;
    public final PL_SQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
        PL_SQLParser.subprogram_spec_return retval = new PL_SQLParser.subprogram_spec_return();
        retval.start = input.LT(1);
        int subprogram_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set225=null;
        PL_SQLParser.function_spec_return function_spec226 = null;

        PL_SQLParser.procedure_spec_return procedure_spec227 = null;


        CommonTree set225_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:17: ( ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:19: ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec )
            {
            root_0 = (CommonTree)adaptor.nil();

            set225=(Token)input.LT(1);
            if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set225));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:53: ( function_spec | procedure_spec )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==FUNCTION_KEYWORD) ) {
                alt92=1;
            }
            else if ( (LA92_0==PROCEDURE_KEYWORD) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:54: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec6360);
                    function_spec226=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec226.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:70: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec6364);
                    procedure_spec227=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec227.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, subprogram_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"

    public static class inheritance_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritance_clauses"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:1: inheritance_clauses : ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) ;
    public final PL_SQLParser.inheritance_clauses_return inheritance_clauses() throws RecognitionException {
        PL_SQLParser.inheritance_clauses_return retval = new PL_SQLParser.inheritance_clauses_return();
        retval.start = input.LT(1);
        int inheritance_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR228=null;
        Token set229=null;

        CommonTree NOT_OPERATOR228_tree=null;
        CommonTree set229_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:21: ( ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:23: ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:23: ( NOT_OPERATOR )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==NOT_OPERATOR) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR228=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_inheritance_clauses6372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR228_tree = (CommonTree)adaptor.create(NOT_OPERATOR228);
                    adaptor.addChild(root_0, NOT_OPERATOR228_tree);
                    }

                    }
                    break;

            }

            set229=(Token)input.LT(1);
            if ( (input.LA(1)>=FINAL_KEYWORD && input.LA(1)<=OVERRIDING_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set229));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, inheritance_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inheritance_clauses"

    public static class varray_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:1: varray_type : as_is_part collection_varray_datatype ;
    public final PL_SQLParser.varray_type_return varray_type() throws RecognitionException {
        PL_SQLParser.varray_type_return retval = new PL_SQLParser.varray_type_return();
        retval.start = input.LT(1);
        int varray_type_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part230 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype231 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:13: ( as_is_part collection_varray_datatype )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:15: as_is_part collection_varray_datatype
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_varray_type6392);
            as_is_part230=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part230.getTree());
            pushFollow(FOLLOW_collection_varray_datatype_in_varray_type6394);
            collection_varray_datatype231=collection_varray_datatype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype231.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, varray_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_type"

    public static class nested_table_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:1: nested_table_type : as_is_part TABLE_KEYWORD OF_KEYWORD data_type ;
    public final PL_SQLParser.nested_table_type_return nested_table_type() throws RecognitionException {
        PL_SQLParser.nested_table_type_return retval = new PL_SQLParser.nested_table_type_return();
        retval.start = input.LT(1);
        int nested_table_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD233=null;
        Token OF_KEYWORD234=null;
        PL_SQLParser.as_is_part_return as_is_part232 = null;

        PL_SQLParser.data_type_return data_type235 = null;


        CommonTree TABLE_KEYWORD233_tree=null;
        CommonTree OF_KEYWORD234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:19: ( as_is_part TABLE_KEYWORD OF_KEYWORD data_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:21: as_is_part TABLE_KEYWORD OF_KEYWORD data_type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_nested_table_type6401);
            as_is_part232=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part232.getTree());
            TABLE_KEYWORD233=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_nested_table_type6403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD233_tree = (CommonTree)adaptor.create(TABLE_KEYWORD233);
            adaptor.addChild(root_0, TABLE_KEYWORD233_tree);
            }
            OF_KEYWORD234=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_nested_table_type6405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD234_tree = (CommonTree)adaptor.create(OF_KEYWORD234);
            adaptor.addChild(root_0, OF_KEYWORD234_tree);
            }
            pushFollow(FOLLOW_data_type_in_nested_table_type6407);
            data_type235=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, nested_table_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_type"

    public static class type_body_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:1: type_body_declaration : BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_body_declaration_return type_body_declaration() throws RecognitionException {
        PL_SQLParser.type_body_declaration_return retval = new PL_SQLParser.type_body_declaration_return();
        retval.start = input.LT(1);
        int type_body_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD236=null;
        Token char_literal241=null;
        Token END_KEYWORD242=null;
        Token SEPARATOR243=null;
        Token char_literal244=null;
        PL_SQLParser.type_body_name_return type_body_name237 = null;

        PL_SQLParser.as_is_part_return as_is_part238 = null;

        PL_SQLParser.subprogram_declaration_return subprogram_declaration239 = null;

        PL_SQLParser.map_order_func_declaration_return map_order_func_declaration240 = null;


        CommonTree BODY_KEYWORD236_tree=null;
        CommonTree char_literal241_tree=null;
        CommonTree END_KEYWORD242_tree=null;
        CommonTree SEPARATOR243_tree=null;
        CommonTree char_literal244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:23: ( BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:25: BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD236=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_type_body_declaration6414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD236_tree = (CommonTree)adaptor.create(BODY_KEYWORD236);
            adaptor.addChild(root_0, BODY_KEYWORD236_tree);
            }
            pushFollow(FOLLOW_type_body_name_in_type_body_declaration6416);
            type_body_name237=type_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_name237.getTree());
            pushFollow(FOLLOW_as_is_part_in_type_body_declaration6418);
            as_is_part238=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part238.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:25: ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+
            int cnt96=0;
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==FUNCTION_KEYWORD||LA96_0==PROCEDURE_KEYWORD||(LA96_0>=FINAL_KEYWORD && LA96_0<=INSTANTIABLE_KEYWORD)||(LA96_0>=MEMBER_KEYWORD && LA96_0<=CONSTRUCTOR_KEYWORD)||(LA96_0>=MAP_KEYWORD && LA96_0<=ORDER_KEYWORD)) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:26: ( subprogram_declaration | map_order_func_declaration ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:26: ( subprogram_declaration | map_order_func_declaration )
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==FUNCTION_KEYWORD||LA94_0==PROCEDURE_KEYWORD||(LA94_0>=FINAL_KEYWORD && LA94_0<=INSTANTIABLE_KEYWORD)||(LA94_0>=MEMBER_KEYWORD && LA94_0<=CONSTRUCTOR_KEYWORD)) ) {
            	        alt94=1;
            	    }
            	    else if ( ((LA94_0>=MAP_KEYWORD && LA94_0<=ORDER_KEYWORD)) ) {
            	        alt94=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 94, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:27: subprogram_declaration
            	            {
            	            pushFollow(FOLLOW_subprogram_declaration_in_type_body_declaration6446);
            	            subprogram_declaration239=subprogram_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_declaration239.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:52: map_order_func_declaration
            	            {
            	            pushFollow(FOLLOW_map_order_func_declaration_in_type_body_declaration6450);
            	            map_order_func_declaration240=map_order_func_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration240.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:80: ( ',' )?
            	    int alt95=2;
            	    int LA95_0 = input.LA(1);

            	    if ( (LA95_0==COMMA) ) {
            	        alt95=1;
            	    }
            	    switch (alt95) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal241=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body_declaration6453); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal241_tree = (CommonTree)adaptor.create(char_literal241);
            	            adaptor.addChild(root_0, char_literal241_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt96 >= 1 ) break loop96;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(96, input);
                        throw eee;
                }
                cnt96++;
            } while (true);

            END_KEYWORD242=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_type_body_declaration6459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD242_tree = (CommonTree)adaptor.create(END_KEYWORD242);
            adaptor.addChild(root_0, END_KEYWORD242_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:25: ( SEPARATOR )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==SEPARATOR) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR243=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_body_declaration6485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR243_tree = (CommonTree)adaptor.create(SEPARATOR243);
                    adaptor.addChild(root_0, SEPARATOR243_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:36: ( '/' )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==212) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal244=(Token)match(input,212,FOLLOW_212_in_type_body_declaration6488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal244_tree = (CommonTree)adaptor.create(char_literal244);
                    adaptor.addChild(root_0, char_literal244_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, type_body_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_declaration"

    public static class type_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:1: type_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_body_name_return type_body_name() throws RecognitionException {
        PL_SQLParser.type_body_name_return retval = new PL_SQLParser.type_body_name_return();
        retval.start = input.LT(1);
        int type_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS246=null;
        PL_SQLParser.universal_identifier_return universal_identifier245 = null;


        CommonTree ALIAS246_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:16: ( universal_identifier | ALIAS )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( ((LA99_0>=IDENTIFIER && LA99_0<=EXT_IDENTIFIER)||LA99_0==INTERVAL_KEYWORD||LA99_0==RESULT_KEYWORD) ) {
                alt99=1;
            }
            else if ( (LA99_0==ALIAS) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_body_name6496);
                    universal_identifier245=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier245.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS246=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_body_name6500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS246_tree = (CommonTree)adaptor.create(ALIAS246);
                    adaptor.addChild(root_0, ALIAS246_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, type_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_name"

    public static class subprogram_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:1: subprogram_declaration : ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) ;
    public final PL_SQLParser.subprogram_declaration_return subprogram_declaration() throws RecognitionException {
        PL_SQLParser.subprogram_declaration_return retval = new PL_SQLParser.subprogram_declaration_return();
        retval.start = input.LT(1);
        int subprogram_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set247=null;
        PL_SQLParser.function_declaration_return function_declaration248 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration249 = null;

        PL_SQLParser.constructor_declaration_return constructor_declaration250 = null;


        CommonTree set247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:24: ( ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=MEMBER_KEYWORD && LA100_0<=STATIC_KEYWORD)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set247=(Token)input.LT(1);
                    if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set247));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:26: ( function_declaration | procedure_declaration | constructor_declaration )
            int alt101=3;
            switch ( input.LA(1) ) {
            case FUNCTION_KEYWORD:
                {
                alt101=1;
                }
                break;
            case PROCEDURE_KEYWORD:
                {
                alt101=2;
                }
                break;
            case FINAL_KEYWORD:
            case INSTANTIABLE_KEYWORD:
            case CONSTRUCTOR_KEYWORD:
                {
                alt101=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:27: function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_subprogram_declaration6542);
                    function_declaration248=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration248.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:50: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_subprogram_declaration6546);
                    procedure_declaration249=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration249.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:74: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprogram_declaration6550);
                    constructor_declaration250=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration250.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, subprogram_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_declaration"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:1: constructor_declaration : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body ;
    public final PL_SQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        PL_SQLParser.constructor_declaration_return retval = new PL_SQLParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD251=null;
        Token INSTANTIABLE_KEYWORD252=null;
        Token CONSTRUCTOR_KEYWORD253=null;
        Token FUNCTION_KEYWORD254=null;
        PL_SQLParser.data_type_return data_type255 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part256 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body257 = null;


        CommonTree FINAL_KEYWORD251_tree=null;
        CommonTree INSTANTIABLE_KEYWORD252_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD253_tree=null;
        CommonTree FUNCTION_KEYWORD254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:25: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:27: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:27: ( FINAL_KEYWORD )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==FINAL_KEYWORD) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD251=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_declaration6558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD251_tree = (CommonTree)adaptor.create(FINAL_KEYWORD251);
                    adaptor.addChild(root_0, FINAL_KEYWORD251_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:42: ( INSTANTIABLE_KEYWORD )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==INSTANTIABLE_KEYWORD) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD252=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD252_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD252);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD252_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD253=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD253_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD253);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD253_tree);
            }
            FUNCTION_KEYWORD254=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD254_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD254);
            adaptor.addChild(root_0, FUNCTION_KEYWORD254_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_declaration6594);
            data_type255=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type255.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:37: ( constructor_spec_part )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==LPAREN) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_declaration6596);
                    constructor_spec_part256=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part256.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_procedure_body_in_constructor_declaration6599);
            function_procedure_body257=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body257.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, constructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_func_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:1: map_order_func_declaration : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration ;
    public final PL_SQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        PL_SQLParser.map_order_func_declaration_return retval = new PL_SQLParser.map_order_func_declaration_return();
        retval.start = input.LT(1);
        int map_order_func_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set258=null;
        Token MEMBER_KEYWORD259=null;
        PL_SQLParser.function_declaration_return function_declaration260 = null;


        CommonTree set258_tree=null;
        CommonTree MEMBER_KEYWORD259_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:28: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:30: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration
            {
            root_0 = (CommonTree)adaptor.nil();

            set258=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set258));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD259=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD259_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD259);
            adaptor.addChild(root_0, MEMBER_KEYWORD259_tree);
            }
            pushFollow(FOLLOW_function_declaration_in_map_order_func_declaration6616);
            function_declaration260=function_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration260.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, map_order_func_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:1: block : BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) ;
    public final PL_SQLParser.block_return block() throws RecognitionException {
        PL_SQLParser.block_return retval = new PL_SQLParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEGIN_KEYWORD261=null;
        Token END_KEYWORD264=null;
        Token SEPARATOR266=null;
        Token char_literal267=null;
        PL_SQLParser.executable_section_return executable_section262 = null;

        PL_SQLParser.exception_section_return exception_section263 = null;

        PL_SQLParser.universal_identifier_return universal_identifier265 = null;


        CommonTree BEGIN_KEYWORD261_tree=null;
        CommonTree END_KEYWORD264_tree=null;
        CommonTree SEPARATOR266_tree=null;
        CommonTree char_literal267_tree=null;
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_BEGIN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token BEGIN_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_exception_section=new RewriteRuleSubtreeStream(adaptor,"rule exception_section");
        RewriteRuleSubtreeStream stream_universal_identifier=new RewriteRuleSubtreeStream(adaptor,"rule universal_identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:7: ( BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:9: BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            BEGIN_KEYWORD261=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_block6624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BEGIN_KEYWORD.add(BEGIN_KEYWORD261);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:2: ( executable_section )+
            int cnt105=0;
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==NUMBER_UNSIGNED||LA105_0==STRING||(LA105_0>=IDENTIFIER && LA105_0<=EXT_IDENTIFIER)||LA105_0==BEGIN_KEYWORD||LA105_0==DECLARE_KEYWORD||LA105_0==NULL_KEYWORD||(LA105_0>=TRUE_KEYWORD && LA105_0<=FALSE_KEYWORD)||LA105_0==INTERVAL_KEYWORD||LA105_0==REPLACE_KEYWORD||(LA105_0>=RETURN_KEYWORD && LA105_0<=IN_KEYWORD)||LA105_0==IF_KEYWORD||(LA105_0>=GOTO_KEYWORD && LA105_0<=FOR_KEYWORD)||LA105_0==SELECT_KEYWORD||(LA105_0>=RAISE_KEYWORD && LA105_0<=PRAGMA_KEYWORD)||(LA105_0>=CASE_KEYWORD && LA105_0<=CLOSE_KEYWORD)||LA105_0==COMMIT_KEYWORD||LA105_0==CONTINUE_KEYWORD||(LA105_0>=DELETE_KEYWORD && LA105_0<=EXECUTE_KEYWORD)||LA105_0==EXIT_KEYWORD||LA105_0==FETCH_KEYWORD||LA105_0==FORALL_KEYWORD||(LA105_0>=INSERT_KEYWORD && LA105_0<=OPEN_KEYWORD)||(LA105_0>=ROLLBACK_KEYWORD && LA105_0<=SAVEPOINT_KEYWORD)||LA105_0==SET_KEYWORD||(LA105_0>=SQLCODE_KEYWORD && LA105_0<=UPDATE_KEYWORD)||LA105_0==RESULT_KEYWORD||LA105_0==LPAREN||LA105_0==NOT_OPERATOR||LA105_0==210||(LA105_0>=214 && LA105_0<=215)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:3: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_block6628);
            	    executable_section262=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section262.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:25: ( exception_section )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==EXCEPTION_KEYWORD) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: exception_section
                    {
                    pushFollow(FOLLOW_exception_section_in_block6633);
                    exception_section263=exception_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_section.add(exception_section263.getTree());

                    }
                    break;

            }

            END_KEYWORD264=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_block6644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD264);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:21: ( universal_identifier )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=IDENTIFIER && LA107_0<=EXT_IDENTIFIER)||LA107_0==INTERVAL_KEYWORD||LA107_0==RESULT_KEYWORD) ) {
                int LA107_1 = input.LA(2);

                if ( (synpred137_PL_SQL()) ) {
                    alt107=1;
                }
            }
            switch (alt107) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_block6646);
                    universal_identifier265=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_universal_identifier.add(universal_identifier265.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:43: ( SEPARATOR )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==SEPARATOR) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR266=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_block6649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR266);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:9: ( '/' )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==212) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal267=(Token)match(input,212,FOLLOW_212_in_block6660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_212.add(char_literal267);


                    }
                    break;

            }



            // AST REWRITE
            // elements: END_KEYWORD, exception_section, BEGIN_KEYWORD, executable_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 694:9: -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:9: ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_BEGIN_END, "IM_BEGIN_END"), root_1);

                adaptor.addChild(root_1, stream_BEGIN_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:25: ( exception_section )?
                if ( stream_exception_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_exception_section.nextTree());

                }
                stream_exception_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class anonymous_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:1: anonymous_block : ( anonymous_block_declare_section )? block ;
    public final PL_SQLParser.anonymous_block_return anonymous_block() throws RecognitionException {
        PL_SQLParser.anonymous_block_return retval = new PL_SQLParser.anonymous_block_return();
        retval.start = input.LT(1);
        int anonymous_block_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section268 = null;

        PL_SQLParser.block_return block269 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:17: ( ( anonymous_block_declare_section )? block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:19: ( anonymous_block_declare_section )? block
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:19: ( anonymous_block_declare_section )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DECLARE_KEYWORD) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: anonymous_block_declare_section
                    {
                    pushFollow(FOLLOW_anonymous_block_declare_section_in_anonymous_block6712);
                    anonymous_block_declare_section268=anonymous_block_declare_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block_declare_section268.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_block6715);
            block269=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block269.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, anonymous_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block"

    public static class executable_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:699:1: executable_section : ( statement | anonymous_block );
    public final PL_SQLParser.executable_section_return executable_section() throws RecognitionException {
        PL_SQLParser.executable_section_return retval = new PL_SQLParser.executable_section_return();
        retval.start = input.LT(1);
        int executable_section_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.statement_return statement270 = null;

        PL_SQLParser.anonymous_block_return anonymous_block271 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:699:20: ( statement | anonymous_block )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==NUMBER_UNSIGNED||LA111_0==STRING||(LA111_0>=IDENTIFIER && LA111_0<=EXT_IDENTIFIER)||LA111_0==NULL_KEYWORD||(LA111_0>=TRUE_KEYWORD && LA111_0<=FALSE_KEYWORD)||LA111_0==INTERVAL_KEYWORD||LA111_0==REPLACE_KEYWORD||(LA111_0>=RETURN_KEYWORD && LA111_0<=IN_KEYWORD)||LA111_0==IF_KEYWORD||(LA111_0>=GOTO_KEYWORD && LA111_0<=FOR_KEYWORD)||LA111_0==SELECT_KEYWORD||(LA111_0>=RAISE_KEYWORD && LA111_0<=PRAGMA_KEYWORD)||(LA111_0>=CASE_KEYWORD && LA111_0<=CLOSE_KEYWORD)||LA111_0==COMMIT_KEYWORD||LA111_0==CONTINUE_KEYWORD||(LA111_0>=DELETE_KEYWORD && LA111_0<=EXECUTE_KEYWORD)||LA111_0==EXIT_KEYWORD||LA111_0==FETCH_KEYWORD||LA111_0==FORALL_KEYWORD||(LA111_0>=INSERT_KEYWORD && LA111_0<=OPEN_KEYWORD)||(LA111_0>=ROLLBACK_KEYWORD && LA111_0<=SAVEPOINT_KEYWORD)||LA111_0==SET_KEYWORD||(LA111_0>=SQLCODE_KEYWORD && LA111_0<=UPDATE_KEYWORD)||LA111_0==RESULT_KEYWORD||LA111_0==LPAREN||LA111_0==NOT_OPERATOR||LA111_0==210||(LA111_0>=214 && LA111_0<=215)) ) {
                alt111=1;
            }
            else if ( (LA111_0==BEGIN_KEYWORD||LA111_0==DECLARE_KEYWORD) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:699:22: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_executable_section6722);
                    statement270=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement270.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:699:34: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_section6726);
                    anonymous_block271=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, executable_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_section"

    public static class executable_case_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_case_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:1: executable_case_section : ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block );
    public final PL_SQLParser.executable_case_section_return executable_case_section() throws RecognitionException {
        PL_SQLParser.executable_case_section_return retval = new PL_SQLParser.executable_case_section_return();
        retval.start = input.LT(1);
        int executable_case_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR274=null;
        PL_SQLParser.label_return label272 = null;

        PL_SQLParser.statements_return statements273 = null;

        PL_SQLParser.anonymous_block_return anonymous_block275 = null;


        CommonTree SEPARATOR274_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:25: ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==NUMBER_UNSIGNED||LA114_0==STRING||(LA114_0>=IDENTIFIER && LA114_0<=EXT_IDENTIFIER)||LA114_0==NULL_KEYWORD||(LA114_0>=TRUE_KEYWORD && LA114_0<=FALSE_KEYWORD)||LA114_0==INTERVAL_KEYWORD||LA114_0==REPLACE_KEYWORD||(LA114_0>=RETURN_KEYWORD && LA114_0<=IN_KEYWORD)||LA114_0==IF_KEYWORD||(LA114_0>=GOTO_KEYWORD && LA114_0<=FOR_KEYWORD)||LA114_0==SELECT_KEYWORD||(LA114_0>=RAISE_KEYWORD && LA114_0<=PRAGMA_KEYWORD)||(LA114_0>=CASE_KEYWORD && LA114_0<=CLOSE_KEYWORD)||LA114_0==COMMIT_KEYWORD||LA114_0==CONTINUE_KEYWORD||(LA114_0>=DELETE_KEYWORD && LA114_0<=EXECUTE_KEYWORD)||LA114_0==EXIT_KEYWORD||LA114_0==FETCH_KEYWORD||LA114_0==FORALL_KEYWORD||(LA114_0>=INSERT_KEYWORD && LA114_0<=OPEN_KEYWORD)||(LA114_0>=ROLLBACK_KEYWORD && LA114_0<=SAVEPOINT_KEYWORD)||LA114_0==SET_KEYWORD||(LA114_0>=SQLCODE_KEYWORD && LA114_0<=UPDATE_KEYWORD)||LA114_0==RESULT_KEYWORD||LA114_0==LPAREN||LA114_0==NOT_OPERATOR||LA114_0==210||(LA114_0>=214 && LA114_0<=215)) ) {
                alt114=1;
            }
            else if ( (LA114_0==BEGIN_KEYWORD||LA114_0==DECLARE_KEYWORD) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:27: ( ( label )* statements ( SEPARATOR )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:27: ( ( label )* statements ( SEPARATOR )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:28: ( label )* statements ( SEPARATOR )?
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:28: ( label )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==210) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:29: label
                    	    {
                    	    pushFollow(FOLLOW_label_in_executable_case_section6735);
                    	    label272=label();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label272.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);

                    pushFollow(FOLLOW_statements_in_executable_case_section6739);
                    statements273=statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statements273.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:48: ( SEPARATOR )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==SEPARATOR) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                            {
                            SEPARATOR274=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_executable_case_section6741); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEPARATOR274_tree = (CommonTree)adaptor.create(SEPARATOR274);
                            adaptor.addChild(root_0, SEPARATOR274_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:700:62: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_case_section6747);
                    anonymous_block275=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block275.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, executable_case_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_case_section"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:1: statement : ( label )* statements SEPARATOR ;
    public final PL_SQLParser.statement_return statement() throws RecognitionException {
        PL_SQLParser.statement_return retval = new PL_SQLParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR278=null;
        PL_SQLParser.label_return label276 = null;

        PL_SQLParser.statements_return statements277 = null;


        CommonTree SEPARATOR278_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:11: ( ( label )* statements SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:13: ( label )* statements SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:13: ( label )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==210) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:14: label
            	    {
            	    pushFollow(FOLLOW_label_in_statement6755);
            	    label276=label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label276.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);

            pushFollow(FOLLOW_statements_in_statement6759);
            statements277=statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statements277.getTree());
            SEPARATOR278=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_statement6761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR278_tree = (CommonTree)adaptor.create(SEPARATOR278);
            adaptor.addChild(root_0, SEPARATOR278_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );
    public final PL_SQLParser.statements_return statements() throws RecognitionException {
        PL_SQLParser.statements_return retval = new PL_SQLParser.statements_return();
        retval.start = input.LT(1);
        int statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.expression_return expression279 = null;

        PL_SQLParser.goto_statement_return goto_statement280 = null;

        PL_SQLParser.loop_statement_return loop_statement281 = null;

        PL_SQLParser.while_loop_statement_return while_loop_statement282 = null;

        PL_SQLParser.for_loop_statement_return for_loop_statement283 = null;

        PL_SQLParser.sql_statements_return sql_statements284 = null;

        PL_SQLParser.return_statement_return return_statement285 = null;

        PL_SQLParser.if_statement_return if_statement286 = null;

        PL_SQLParser.raise_statement_return raise_statement287 = null;

        PL_SQLParser.close_statement_return close_statement288 = null;

        PL_SQLParser.continue_statement_return continue_statement289 = null;

        PL_SQLParser.execute_immediate_statement_return execute_immediate_statement290 = null;

        PL_SQLParser.exit_statement_return exit_statement291 = null;

        PL_SQLParser.fetch_statement_return fetch_statement292 = null;

        PL_SQLParser.forall_statement_return forall_statement293 = null;

        PL_SQLParser.pragma_inline_statement_return pragma_inline_statement294 = null;

        PL_SQLParser.open_statement_return open_statement295 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:12: ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement )
            int alt116=17;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:14: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statements6768);
                    expression279=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression279.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:27: goto_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statements6772);
                    goto_statement280=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement280.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:44: loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statements6776);
                    loop_statement281=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement281.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:14: while_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_loop_statement_in_statements6793);
                    while_loop_statement282=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_loop_statement282.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:37: for_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_loop_statement_in_statements6797);
                    for_loop_statement283=for_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement283.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:58: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_statements6801);
                    sql_statements284=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements284.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:14: return_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statements6818);
                    return_statement285=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement285.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:33: if_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statements6822);
                    if_statement286=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement286.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:48: raise_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statements6826);
                    raise_statement287=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement287.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:66: close_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_statements6830);
                    close_statement288=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement288.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:14: continue_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_statements6847);
                    continue_statement289=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement289.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:35: execute_immediate_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execute_immediate_statement_in_statements6851);
                    execute_immediate_statement290=execute_immediate_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate_statement290.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:65: exit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statements6855);
                    exit_statement291=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement291.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:14: fetch_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_statements6872);
                    fetch_statement292=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement292.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:32: forall_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_forall_statement_in_statements6876);
                    forall_statement293=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement293.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:51: pragma_inline_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pragma_inline_statement_in_statements6880);
                    pragma_inline_statement294=pragma_inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_inline_statement294.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:14: open_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_statements6897);
                    open_statement295=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement295.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statements"

    public static class sql_statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );
    public final PL_SQLParser.sql_statements_return sql_statements() throws RecognitionException {
        PL_SQLParser.sql_statements_return retval = new PL_SQLParser.sql_statements_return();
        retval.start = input.LT(1);
        int sql_statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.select_statement_return select_statement296 = null;

        PL_SQLParser.commit_statement_return commit_statement297 = null;

        PL_SQLParser.delete_statement_return delete_statement298 = null;

        PL_SQLParser.update_statement_return update_statement299 = null;

        PL_SQLParser.insert_statement_return insert_statement300 = null;

        PL_SQLParser.lock_table_statement_return lock_table_statement301 = null;

        PL_SQLParser.merge_statement_return merge_statement302 = null;

        PL_SQLParser.rollback_statement_return rollback_statement303 = null;

        PL_SQLParser.savepoint_statement_return savepoint_statement304 = null;

        PL_SQLParser.set_transaction_statement_return set_transaction_statement305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:16: ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement )
            int alt117=10;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:18: select_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_sql_statements6904);
                    select_statement296=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement296.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:37: commit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_sql_statements6908);
                    commit_statement297=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement297.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:56: delete_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_sql_statements6912);
                    delete_statement298=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement298.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:75: update_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_sql_statements6916);
                    update_statement299=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement299.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:18: insert_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_sql_statements6937);
                    insert_statement300=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement300.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:37: lock_table_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_sql_statements6941);
                    lock_table_statement301=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement301.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:60: merge_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_sql_statements6945);
                    merge_statement302=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement302.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:18: rollback_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_sql_statements6966);
                    rollback_statement303=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement303.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:39: savepoint_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_sql_statements6970);
                    savepoint_statement304=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement304.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:61: set_transaction_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_statement_in_sql_statements6974);
                    set_transaction_statement305=set_transaction_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_statement305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, sql_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statements"

    public static class sql_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:1: sql_operator : ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' );
    public final PL_SQLParser.sql_operator_return sql_operator() throws RecognitionException {
        PL_SQLParser.sql_operator_return retval = new PL_SQLParser.sql_operator_return();
        retval.start = input.LT(1);
        int sql_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set306=null;

        CommonTree set306_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:14: ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set306=(Token)input.LT(1);
            if ( input.LA(1)==COMMA||input.LA(1)==212||(input.LA(1)>=214 && input.LA(1)<=228) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set306));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, sql_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_operator"

    public static class sql_not_parsed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_not_parsed"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );
    public final PL_SQLParser.sql_not_parsed_return sql_not_parsed() throws RecognitionException {
        PL_SQLParser.sql_not_parsed_return retval = new PL_SQLParser.sql_not_parsed_return();
        retval.start = input.LT(1);
        int sql_not_parsed_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS307=null;
        Token KEYWORD308=null;
        Token INTO_KEYWORD310=null;
        Token IN_KEYWORD311=null;
        Token NOT_OPERATOR312=null;
        Token IN_KEYWORD313=null;
        Token AS_KEYWORD314=null;
        Token VALUES_KEYWORD315=null;
        Token BETWEEN_KEYWORD316=null;
        Token SOME_TYPES317=null;
        Token BULK_KEYWORD318=null;
        Token COLLECT_KEYWORD319=null;
        Token RETURNING_KEYWORD320=null;
        Token ROW_KEYWORD321=null;
        Token SET_KEYWORD322=null;
        Token BY_KEYWORD323=null;
        Token WITH_KEYWORD324=null;
        Token TABLE_KEYWORD325=null;
        Token JOIN_KEYWORD326=null;
        Token EXISTS_KEYWORD327=null;
        Token REPLACE_KEYWORD328=null;
        Token NUMBER_UNSIGNED329=null;
        Token COUNT_KEYWORD330=null;
        Token STRING333=null;
        Token COMMA334=null;
        Token AND_OPERATOR335=null;
        Token OR_OPERATOR336=null;
        Token NOT_OPERATOR337=null;
        Token IS_KEYWORD338=null;
        Token NOT_OPERATOR339=null;
        Token NULL_KEYWORD340=null;
        Token IS_KEYWORD341=null;
        Token NULL_KEYWORD342=null;
        Token NULL_KEYWORD343=null;
        Token LIKE_KEYWORD344=null;
        Token OF_KEYWORD345=null;
        Token THE_REST348=null;
        Token char_literal349=null;
        Token char_literal351=null;
        PL_SQLParser.sql_operator_return sql_operator309 = null;

        PL_SQLParser.universal_identifier_return universal_identifier331 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression332 = null;

        PL_SQLParser.sql_statements_return sql_statements346 = null;

        PL_SQLParser.expression_return expression347 = null;

        PL_SQLParser.sql_not_parsed_return sql_not_parsed350 = null;


        CommonTree ALIAS307_tree=null;
        CommonTree KEYWORD308_tree=null;
        CommonTree INTO_KEYWORD310_tree=null;
        CommonTree IN_KEYWORD311_tree=null;
        CommonTree NOT_OPERATOR312_tree=null;
        CommonTree IN_KEYWORD313_tree=null;
        CommonTree AS_KEYWORD314_tree=null;
        CommonTree VALUES_KEYWORD315_tree=null;
        CommonTree BETWEEN_KEYWORD316_tree=null;
        CommonTree SOME_TYPES317_tree=null;
        CommonTree BULK_KEYWORD318_tree=null;
        CommonTree COLLECT_KEYWORD319_tree=null;
        CommonTree RETURNING_KEYWORD320_tree=null;
        CommonTree ROW_KEYWORD321_tree=null;
        CommonTree SET_KEYWORD322_tree=null;
        CommonTree BY_KEYWORD323_tree=null;
        CommonTree WITH_KEYWORD324_tree=null;
        CommonTree TABLE_KEYWORD325_tree=null;
        CommonTree JOIN_KEYWORD326_tree=null;
        CommonTree EXISTS_KEYWORD327_tree=null;
        CommonTree REPLACE_KEYWORD328_tree=null;
        CommonTree NUMBER_UNSIGNED329_tree=null;
        CommonTree COUNT_KEYWORD330_tree=null;
        CommonTree STRING333_tree=null;
        CommonTree COMMA334_tree=null;
        CommonTree AND_OPERATOR335_tree=null;
        CommonTree OR_OPERATOR336_tree=null;
        CommonTree NOT_OPERATOR337_tree=null;
        CommonTree IS_KEYWORD338_tree=null;
        CommonTree NOT_OPERATOR339_tree=null;
        CommonTree NULL_KEYWORD340_tree=null;
        CommonTree IS_KEYWORD341_tree=null;
        CommonTree NULL_KEYWORD342_tree=null;
        CommonTree NULL_KEYWORD343_tree=null;
        CommonTree LIKE_KEYWORD344_tree=null;
        CommonTree OF_KEYWORD345_tree=null;
        CommonTree THE_REST348_tree=null;
        CommonTree char_literal349_tree=null;
        CommonTree char_literal351_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:16: ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) )
            int alt119=39;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:18: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS307=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_sql_not_parsed7068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS307_tree = (CommonTree)adaptor.create(ALIAS307);
                    adaptor.addChild(root_0, ALIAS307_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:26: KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KEYWORD308=(Token)match(input,KEYWORD,FOLLOW_KEYWORD_in_sql_not_parsed7072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYWORD308_tree = (CommonTree)adaptor.create(KEYWORD308);
                    adaptor.addChild(root_0, KEYWORD308_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:36: sql_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_operator_in_sql_not_parsed7076);
                    sql_operator309=sql_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_operator309.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:51: INTO_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INTO_KEYWORD310=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_sql_not_parsed7080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO_KEYWORD310_tree = (CommonTree)adaptor.create(INTO_KEYWORD310);
                    adaptor.addChild(root_0, INTO_KEYWORD310_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:66: IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD311=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed7084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD311_tree = (CommonTree)adaptor.create(IN_KEYWORD311);
                    adaptor.addChild(root_0, IN_KEYWORD311_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:79: NOT_OPERATOR IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR312=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR312_tree = (CommonTree)adaptor.create(NOT_OPERATOR312);
                    adaptor.addChild(root_0, NOT_OPERATOR312_tree);
                    }
                    IN_KEYWORD313=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed7090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD313_tree = (CommonTree)adaptor.create(IN_KEYWORD313);
                    adaptor.addChild(root_0, IN_KEYWORD313_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:16: AS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AS_KEYWORD314=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_sql_not_parsed7109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS_KEYWORD314_tree = (CommonTree)adaptor.create(AS_KEYWORD314);
                    adaptor.addChild(root_0, AS_KEYWORD314_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:29: VALUES_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VALUES_KEYWORD315=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_sql_not_parsed7113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD315_tree = (CommonTree)adaptor.create(VALUES_KEYWORD315);
                    adaptor.addChild(root_0, VALUES_KEYWORD315_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:46: BETWEEN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BETWEEN_KEYWORD316=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed7117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD316_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD316);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD316_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:64: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES317=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_sql_not_parsed7121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES317_tree = (CommonTree)adaptor.create(SOME_TYPES317);
                    adaptor.addChild(root_0, SOME_TYPES317_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:16: BULK_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BULK_KEYWORD318=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_sql_not_parsed7140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BULK_KEYWORD318_tree = (CommonTree)adaptor.create(BULK_KEYWORD318);
                    adaptor.addChild(root_0, BULK_KEYWORD318_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:31: COLLECT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COLLECT_KEYWORD319=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed7144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLLECT_KEYWORD319_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD319);
                    adaptor.addChild(root_0, COLLECT_KEYWORD319_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:49: RETURNING_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETURNING_KEYWORD320=(Token)match(input,RETURNING_KEYWORD,FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed7148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNING_KEYWORD320_tree = (CommonTree)adaptor.create(RETURNING_KEYWORD320);
                    adaptor.addChild(root_0, RETURNING_KEYWORD320_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:69: ROW_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ROW_KEYWORD321=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_sql_not_parsed7152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD321_tree = (CommonTree)adaptor.create(ROW_KEYWORD321);
                    adaptor.addChild(root_0, ROW_KEYWORD321_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:16: SET_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SET_KEYWORD322=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_sql_not_parsed7171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_KEYWORD322_tree = (CommonTree)adaptor.create(SET_KEYWORD322);
                    adaptor.addChild(root_0, SET_KEYWORD322_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:30: BY_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BY_KEYWORD323=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_sql_not_parsed7175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD323_tree = (CommonTree)adaptor.create(BY_KEYWORD323);
                    adaptor.addChild(root_0, BY_KEYWORD323_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:43: WITH_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH_KEYWORD324=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_sql_not_parsed7179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD324_tree = (CommonTree)adaptor.create(WITH_KEYWORD324);
                    adaptor.addChild(root_0, WITH_KEYWORD324_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:58: TABLE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TABLE_KEYWORD325=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_sql_not_parsed7183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD325_tree = (CommonTree)adaptor.create(TABLE_KEYWORD325);
                    adaptor.addChild(root_0, TABLE_KEYWORD325_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:74: JOIN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN_KEYWORD326=(Token)match(input,JOIN_KEYWORD,FOLLOW_JOIN_KEYWORD_in_sql_not_parsed7187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN_KEYWORD326_tree = (CommonTree)adaptor.create(JOIN_KEYWORD326);
                    adaptor.addChild(root_0, JOIN_KEYWORD326_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:16: EXISTS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS_KEYWORD327=(Token)match(input,EXISTS_KEYWORD,FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS_KEYWORD327_tree = (CommonTree)adaptor.create(EXISTS_KEYWORD327);
                    adaptor.addChild(root_0, EXISTS_KEYWORD327_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:33: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD328=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD328_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD328);
                    adaptor.addChild(root_0, REPLACE_KEYWORD328_tree);
                    }

                    }
                    break;
                case 22 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:16: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED329=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED329_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED329);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED329_tree);
                    }

                    }
                    break;
                case 23 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:34: COUNT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT_KEYWORD330=(Token)match(input,COUNT_KEYWORD,FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT_KEYWORD330_tree = (CommonTree)adaptor.create(COUNT_KEYWORD330);
                    adaptor.addChild(root_0, COUNT_KEYWORD330_tree);
                    }

                    }
                    break;
                case 24 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:50: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_sql_not_parsed7237);
                    universal_identifier331=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier331.getTree());

                    }
                    break;
                case 25 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:73: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_sql_not_parsed7241);
                    case_statement_expression332=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression332.getTree());

                    }
                    break;
                case 26 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:16: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING333=(Token)match(input,STRING,FOLLOW_STRING_in_sql_not_parsed7260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING333_tree = (CommonTree)adaptor.create(STRING333);
                    adaptor.addChild(root_0, STRING333_tree);
                    }

                    }
                    break;
                case 27 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:25: COMMA
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COMMA334=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_not_parsed7264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA334_tree = (CommonTree)adaptor.create(COMMA334);
                    adaptor.addChild(root_0, COMMA334_tree);
                    }

                    }
                    break;
                case 28 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:33: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR335=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_sql_not_parsed7268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR335_tree = (CommonTree)adaptor.create(AND_OPERATOR335);
                    adaptor.addChild(root_0, AND_OPERATOR335_tree);
                    }

                    }
                    break;
                case 29 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:48: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR336=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_sql_not_parsed7272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR336_tree = (CommonTree)adaptor.create(OR_OPERATOR336);
                    adaptor.addChild(root_0, OR_OPERATOR336_tree);
                    }

                    }
                    break;
                case 30 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:62: NOT_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR337=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR337_tree = (CommonTree)adaptor.create(NOT_OPERATOR337);
                    adaptor.addChild(root_0, NOT_OPERATOR337_tree);
                    }

                    }
                    break;
                case 31 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD338=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD338_tree = (CommonTree)adaptor.create(IS_KEYWORD338);
                    adaptor.addChild(root_0, IS_KEYWORD338_tree);
                    }
                    NOT_OPERATOR339=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR339_tree = (CommonTree)adaptor.create(NOT_OPERATOR339);
                    adaptor.addChild(root_0, NOT_OPERATOR339_tree);
                    }
                    NULL_KEYWORD340=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD340_tree = (CommonTree)adaptor.create(NULL_KEYWORD340);
                    adaptor.addChild(root_0, NULL_KEYWORD340_tree);
                    }

                    }
                    break;
                case 32 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:55: IS_KEYWORD NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD341=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD341_tree = (CommonTree)adaptor.create(IS_KEYWORD341);
                    adaptor.addChild(root_0, IS_KEYWORD341_tree);
                    }
                    NULL_KEYWORD342=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD342_tree = (CommonTree)adaptor.create(NULL_KEYWORD342);
                    adaptor.addChild(root_0, NULL_KEYWORD342_tree);
                    }

                    }
                    break;
                case 33 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:81: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD343=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD343_tree = (CommonTree)adaptor.create(NULL_KEYWORD343);
                    adaptor.addChild(root_0, NULL_KEYWORD343_tree);
                    }

                    }
                    break;
                case 34 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:96: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD344=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD344_tree = (CommonTree)adaptor.create(LIKE_KEYWORD344);
                    adaptor.addChild(root_0, LIKE_KEYWORD344_tree);
                    }

                    }
                    break;
                case 35 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:16: OF_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OF_KEYWORD345=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_sql_not_parsed7333); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD345_tree = (CommonTree)adaptor.create(OF_KEYWORD345);
                    adaptor.addChild(root_0, OF_KEYWORD345_tree);
                    }

                    }
                    break;
                case 36 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_sql_not_parsed7352);
                    sql_statements346=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements346.getTree());

                    }
                    break;
                case 37 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:16: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_sql_not_parsed7372);
                    expression347=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression347.getTree());

                    }
                    break;
                case 38 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:29: THE_REST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    THE_REST348=(Token)match(input,THE_REST,FOLLOW_THE_REST_in_sql_not_parsed7376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THE_REST348_tree = (CommonTree)adaptor.create(THE_REST348);
                    adaptor.addChild(root_0, THE_REST348_tree);
                    }

                    }
                    break;
                case 39 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:40: ( '(' ( sql_not_parsed )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:40: ( '(' ( sql_not_parsed )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:41: '(' ( sql_not_parsed )* ')'
                    {
                    char_literal349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sql_not_parsed7381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal349_tree = (CommonTree)adaptor.create(char_literal349);
                    adaptor.addChild(root_0, char_literal349_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:45: ( sql_not_parsed )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( ((LA118_0>=NUMBER_UNSIGNED && LA118_0<=OR_OPERATOR)||(LA118_0>=STRING && LA118_0<=SOME_TYPES)||(LA118_0>=KEYWORD && LA118_0<=ALIAS)||LA118_0==COMMA||LA118_0==NULL_KEYWORD||(LA118_0>=TRUE_KEYWORD && LA118_0<=FALSE_KEYWORD)||LA118_0==WITH_KEYWORD||LA118_0==INTERVAL_KEYWORD||LA118_0==IS_KEYWORD||LA118_0==REPLACE_KEYWORD||LA118_0==AS_KEYWORD||LA118_0==IN_KEYWORD||(LA118_0>=SELECT_KEYWORD && LA118_0<=COUNT_KEYWORD)||LA118_0==LIKE_KEYWORD||LA118_0==CASE_KEYWORD||(LA118_0>=TABLE_KEYWORD && LA118_0<=OF_KEYWORD)||LA118_0==BY_KEYWORD||LA118_0==COMMIT_KEYWORD||LA118_0==DELETE_KEYWORD||LA118_0==INTO_KEYWORD||(LA118_0>=BULK_KEYWORD && LA118_0<=COLLECT_KEYWORD)||(LA118_0>=VALUES_KEYWORD && LA118_0<=BETWEEN_KEYWORD)||(LA118_0>=INSERT_KEYWORD && LA118_0<=MERGE_KEYWORD)||(LA118_0>=RETURNING_KEYWORD && LA118_0<=SAVEPOINT_KEYWORD)||LA118_0==SET_KEYWORD||(LA118_0>=SQLCODE_KEYWORD && LA118_0<=EXISTS_KEYWORD)||LA118_0==ROW_KEYWORD||LA118_0==RESULT_KEYWORD||LA118_0==JOIN_KEYWORD||LA118_0==LPAREN||LA118_0==NOT_OPERATOR||LA118_0==THE_REST||LA118_0==212||(LA118_0>=214 && LA118_0<=228)) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:46: sql_not_parsed
                    	    {
                    	    pushFollow(FOLLOW_sql_not_parsed_in_sql_not_parsed7384);
                    	    sql_not_parsed350=sql_not_parsed();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed350.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);

                    char_literal351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sql_not_parsed7388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal351_tree = (CommonTree)adaptor.create(char_literal351);
                    adaptor.addChild(root_0, char_literal351_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, sql_not_parsed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_not_parsed"

    public static class select_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:1: select_statement : SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ ;
    public final PL_SQLParser.select_statement_return select_statement() throws RecognitionException {
        PL_SQLParser.select_statement_return retval = new PL_SQLParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SELECT_KEYWORD352=null;
        Token ON_KEYWORD354=null;
        Token FOR_KEYWORD355=null;
        Token UPDATE_KEYWORD356=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed353 = null;


        CommonTree SELECT_KEYWORD352_tree=null;
        CommonTree ON_KEYWORD354_tree=null;
        CommonTree FOR_KEYWORD355_tree=null;
        CommonTree UPDATE_KEYWORD356_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:18: ( SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:20: SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SELECT_KEYWORD352=(Token)match(input,SELECT_KEYWORD,FOLLOW_SELECT_KEYWORD_in_select_statement7399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT_KEYWORD352_tree = (CommonTree)adaptor.create(SELECT_KEYWORD352);
            adaptor.addChild(root_0, SELECT_KEYWORD352_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:35: ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            int cnt121=0;
            loop121:
            do {
                int alt121=3;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=NUMBER_UNSIGNED && LA121_0<=OR_OPERATOR)||(LA121_0>=STRING && LA121_0<=SOME_TYPES)||(LA121_0>=KEYWORD && LA121_0<=ALIAS)||LA121_0==COMMA||LA121_0==NULL_KEYWORD||(LA121_0>=TRUE_KEYWORD && LA121_0<=FALSE_KEYWORD)||LA121_0==WITH_KEYWORD||LA121_0==INTERVAL_KEYWORD||LA121_0==IS_KEYWORD||LA121_0==REPLACE_KEYWORD||LA121_0==AS_KEYWORD||LA121_0==IN_KEYWORD||(LA121_0>=SELECT_KEYWORD && LA121_0<=COUNT_KEYWORD)||LA121_0==LIKE_KEYWORD||LA121_0==CASE_KEYWORD||(LA121_0>=TABLE_KEYWORD && LA121_0<=OF_KEYWORD)||LA121_0==BY_KEYWORD||LA121_0==COMMIT_KEYWORD||LA121_0==DELETE_KEYWORD||LA121_0==INTO_KEYWORD||(LA121_0>=BULK_KEYWORD && LA121_0<=COLLECT_KEYWORD)||(LA121_0>=VALUES_KEYWORD && LA121_0<=BETWEEN_KEYWORD)||(LA121_0>=INSERT_KEYWORD && LA121_0<=MERGE_KEYWORD)||(LA121_0>=RETURNING_KEYWORD && LA121_0<=SAVEPOINT_KEYWORD)||LA121_0==SET_KEYWORD||(LA121_0>=SQLCODE_KEYWORD && LA121_0<=EXISTS_KEYWORD)||LA121_0==ON_KEYWORD||LA121_0==ROW_KEYWORD||LA121_0==RESULT_KEYWORD||LA121_0==JOIN_KEYWORD||LA121_0==LPAREN||LA121_0==NOT_OPERATOR||LA121_0==THE_REST||LA121_0==212||(LA121_0>=214 && LA121_0<=228)) ) {
                    int LA121_2 = input.LA(2);

                    if ( (synpred227_PL_SQL()) ) {
                        alt121=1;
                    }


                }
                else if ( (LA121_0==FOR_KEYWORD) ) {
                    int LA121_4 = input.LA(2);

                    if ( (synpred228_PL_SQL()) ) {
                        alt121=2;
                    }


                }


                switch (alt121) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:36: ( sql_not_parsed | ON_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:36: ( sql_not_parsed | ON_KEYWORD )
            	    int alt120=2;
            	    int LA120_0 = input.LA(1);

            	    if ( ((LA120_0>=NUMBER_UNSIGNED && LA120_0<=OR_OPERATOR)||(LA120_0>=STRING && LA120_0<=SOME_TYPES)||(LA120_0>=KEYWORD && LA120_0<=ALIAS)||LA120_0==COMMA||LA120_0==NULL_KEYWORD||(LA120_0>=TRUE_KEYWORD && LA120_0<=FALSE_KEYWORD)||LA120_0==WITH_KEYWORD||LA120_0==INTERVAL_KEYWORD||LA120_0==IS_KEYWORD||LA120_0==REPLACE_KEYWORD||LA120_0==AS_KEYWORD||LA120_0==IN_KEYWORD||(LA120_0>=SELECT_KEYWORD && LA120_0<=COUNT_KEYWORD)||LA120_0==LIKE_KEYWORD||LA120_0==CASE_KEYWORD||(LA120_0>=TABLE_KEYWORD && LA120_0<=OF_KEYWORD)||LA120_0==BY_KEYWORD||LA120_0==COMMIT_KEYWORD||LA120_0==DELETE_KEYWORD||LA120_0==INTO_KEYWORD||(LA120_0>=BULK_KEYWORD && LA120_0<=COLLECT_KEYWORD)||(LA120_0>=VALUES_KEYWORD && LA120_0<=BETWEEN_KEYWORD)||(LA120_0>=INSERT_KEYWORD && LA120_0<=MERGE_KEYWORD)||(LA120_0>=RETURNING_KEYWORD && LA120_0<=SAVEPOINT_KEYWORD)||LA120_0==SET_KEYWORD||(LA120_0>=SQLCODE_KEYWORD && LA120_0<=EXISTS_KEYWORD)||LA120_0==ROW_KEYWORD||LA120_0==RESULT_KEYWORD||LA120_0==JOIN_KEYWORD||LA120_0==LPAREN||LA120_0==NOT_OPERATOR||LA120_0==THE_REST||LA120_0==212||(LA120_0>=214 && LA120_0<=228)) ) {
            	        alt120=1;
            	    }
            	    else if ( (LA120_0==ON_KEYWORD) ) {
            	        alt120=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 120, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt120) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:37: sql_not_parsed
            	            {
            	            pushFollow(FOLLOW_sql_not_parsed_in_select_statement7403);
            	            sql_not_parsed353=sql_not_parsed();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed353.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:54: ON_KEYWORD
            	            {
            	            ON_KEYWORD354=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_select_statement7407); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ON_KEYWORD354_tree = (CommonTree)adaptor.create(ON_KEYWORD354);
            	            adaptor.addChild(root_0, ON_KEYWORD354_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:69: FOR_KEYWORD UPDATE_KEYWORD
            	    {
            	    FOR_KEYWORD355=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_select_statement7413); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR_KEYWORD355_tree = (CommonTree)adaptor.create(FOR_KEYWORD355);
            	    adaptor.addChild(root_0, FOR_KEYWORD355_tree);
            	    }
            	    UPDATE_KEYWORD356=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_select_statement7415); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD356_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD356);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD356_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class commit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:1: commit_statement : COMMIT_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.commit_statement_return commit_statement() throws RecognitionException {
        PL_SQLParser.commit_statement_return retval = new PL_SQLParser.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMIT_KEYWORD357=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed358 = null;


        CommonTree COMMIT_KEYWORD357_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:18: ( COMMIT_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:20: COMMIT_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMIT_KEYWORD357=(Token)match(input,COMMIT_KEYWORD,FOLLOW_COMMIT_KEYWORD_in_commit_statement7425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMIT_KEYWORD357_tree = (CommonTree)adaptor.create(COMMIT_KEYWORD357);
            adaptor.addChild(root_0, COMMIT_KEYWORD357_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:35: ( sql_not_parsed )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( ((LA122_0>=NUMBER_UNSIGNED && LA122_0<=OR_OPERATOR)||(LA122_0>=STRING && LA122_0<=SOME_TYPES)||(LA122_0>=KEYWORD && LA122_0<=ALIAS)||LA122_0==COMMA||LA122_0==NULL_KEYWORD||(LA122_0>=TRUE_KEYWORD && LA122_0<=FALSE_KEYWORD)||LA122_0==WITH_KEYWORD||LA122_0==INTERVAL_KEYWORD||LA122_0==IS_KEYWORD||LA122_0==REPLACE_KEYWORD||LA122_0==AS_KEYWORD||LA122_0==IN_KEYWORD||(LA122_0>=SELECT_KEYWORD && LA122_0<=COUNT_KEYWORD)||LA122_0==LIKE_KEYWORD||LA122_0==CASE_KEYWORD||(LA122_0>=TABLE_KEYWORD && LA122_0<=OF_KEYWORD)||LA122_0==BY_KEYWORD||LA122_0==COMMIT_KEYWORD||LA122_0==DELETE_KEYWORD||LA122_0==INTO_KEYWORD||(LA122_0>=BULK_KEYWORD && LA122_0<=COLLECT_KEYWORD)||(LA122_0>=VALUES_KEYWORD && LA122_0<=BETWEEN_KEYWORD)||(LA122_0>=INSERT_KEYWORD && LA122_0<=MERGE_KEYWORD)||(LA122_0>=RETURNING_KEYWORD && LA122_0<=SAVEPOINT_KEYWORD)||LA122_0==SET_KEYWORD||(LA122_0>=SQLCODE_KEYWORD && LA122_0<=EXISTS_KEYWORD)||LA122_0==ROW_KEYWORD||LA122_0==RESULT_KEYWORD||LA122_0==JOIN_KEYWORD||LA122_0==LPAREN||LA122_0==NOT_OPERATOR||LA122_0==THE_REST||LA122_0==212||(LA122_0>=214 && LA122_0<=228)) ) {
                int LA122_1 = input.LA(2);

                if ( (synpred229_PL_SQL()) ) {
                    alt122=1;
                }
            }
            switch (alt122) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_commit_statement7427);
                    sql_not_parsed358=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed358.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class delete_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:1: delete_statement : DELETE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.delete_statement_return delete_statement() throws RecognitionException {
        PL_SQLParser.delete_statement_return retval = new PL_SQLParser.delete_statement_return();
        retval.start = input.LT(1);
        int delete_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DELETE_KEYWORD359=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed360 = null;


        CommonTree DELETE_KEYWORD359_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:18: ( DELETE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:20: DELETE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            DELETE_KEYWORD359=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_delete_statement7435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE_KEYWORD359_tree = (CommonTree)adaptor.create(DELETE_KEYWORD359);
            adaptor.addChild(root_0, DELETE_KEYWORD359_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:35: ( sql_not_parsed )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( ((LA123_0>=NUMBER_UNSIGNED && LA123_0<=OR_OPERATOR)||(LA123_0>=STRING && LA123_0<=SOME_TYPES)||(LA123_0>=KEYWORD && LA123_0<=ALIAS)||LA123_0==COMMA||LA123_0==NULL_KEYWORD||(LA123_0>=TRUE_KEYWORD && LA123_0<=FALSE_KEYWORD)||LA123_0==WITH_KEYWORD||LA123_0==INTERVAL_KEYWORD||LA123_0==IS_KEYWORD||LA123_0==REPLACE_KEYWORD||LA123_0==AS_KEYWORD||LA123_0==IN_KEYWORD||(LA123_0>=SELECT_KEYWORD && LA123_0<=COUNT_KEYWORD)||LA123_0==LIKE_KEYWORD||LA123_0==CASE_KEYWORD||(LA123_0>=TABLE_KEYWORD && LA123_0<=OF_KEYWORD)||LA123_0==BY_KEYWORD||LA123_0==COMMIT_KEYWORD||LA123_0==DELETE_KEYWORD||LA123_0==INTO_KEYWORD||(LA123_0>=BULK_KEYWORD && LA123_0<=COLLECT_KEYWORD)||(LA123_0>=VALUES_KEYWORD && LA123_0<=BETWEEN_KEYWORD)||(LA123_0>=INSERT_KEYWORD && LA123_0<=MERGE_KEYWORD)||(LA123_0>=RETURNING_KEYWORD && LA123_0<=SAVEPOINT_KEYWORD)||LA123_0==SET_KEYWORD||(LA123_0>=SQLCODE_KEYWORD && LA123_0<=EXISTS_KEYWORD)||LA123_0==ROW_KEYWORD||LA123_0==RESULT_KEYWORD||LA123_0==JOIN_KEYWORD||LA123_0==LPAREN||LA123_0==NOT_OPERATOR||LA123_0==THE_REST||LA123_0==212||(LA123_0>=214 && LA123_0<=228)) ) {
                    int LA123_2 = input.LA(2);

                    if ( (synpred230_PL_SQL()) ) {
                        alt123=1;
                    }


                }


                switch (alt123) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_delete_statement7438);
            	    sql_not_parsed360=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed360.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, delete_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:1: insert_statement : INSERT_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.insert_statement_return insert_statement() throws RecognitionException {
        PL_SQLParser.insert_statement_return retval = new PL_SQLParser.insert_statement_return();
        retval.start = input.LT(1);
        int insert_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD361=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed362 = null;


        CommonTree INSERT_KEYWORD361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:18: ( INSERT_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:20: INSERT_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            INSERT_KEYWORD361=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_insert_statement7447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT_KEYWORD361_tree = (CommonTree)adaptor.create(INSERT_KEYWORD361);
            adaptor.addChild(root_0, INSERT_KEYWORD361_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:35: ( sql_not_parsed )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0>=NUMBER_UNSIGNED && LA124_0<=OR_OPERATOR)||(LA124_0>=STRING && LA124_0<=SOME_TYPES)||(LA124_0>=KEYWORD && LA124_0<=ALIAS)||LA124_0==COMMA||LA124_0==NULL_KEYWORD||(LA124_0>=TRUE_KEYWORD && LA124_0<=FALSE_KEYWORD)||LA124_0==WITH_KEYWORD||LA124_0==INTERVAL_KEYWORD||LA124_0==IS_KEYWORD||LA124_0==REPLACE_KEYWORD||LA124_0==AS_KEYWORD||LA124_0==IN_KEYWORD||(LA124_0>=SELECT_KEYWORD && LA124_0<=COUNT_KEYWORD)||LA124_0==LIKE_KEYWORD||LA124_0==CASE_KEYWORD||(LA124_0>=TABLE_KEYWORD && LA124_0<=OF_KEYWORD)||LA124_0==BY_KEYWORD||LA124_0==COMMIT_KEYWORD||LA124_0==DELETE_KEYWORD||LA124_0==INTO_KEYWORD||(LA124_0>=BULK_KEYWORD && LA124_0<=COLLECT_KEYWORD)||(LA124_0>=VALUES_KEYWORD && LA124_0<=BETWEEN_KEYWORD)||(LA124_0>=INSERT_KEYWORD && LA124_0<=MERGE_KEYWORD)||(LA124_0>=RETURNING_KEYWORD && LA124_0<=SAVEPOINT_KEYWORD)||LA124_0==SET_KEYWORD||(LA124_0>=SQLCODE_KEYWORD && LA124_0<=EXISTS_KEYWORD)||LA124_0==ROW_KEYWORD||LA124_0==RESULT_KEYWORD||LA124_0==JOIN_KEYWORD||LA124_0==LPAREN||LA124_0==NOT_OPERATOR||LA124_0==THE_REST||LA124_0==212||(LA124_0>=214 && LA124_0<=228)) ) {
                    int LA124_2 = input.LA(2);

                    if ( (synpred231_PL_SQL()) ) {
                        alt124=1;
                    }


                }


                switch (alt124) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_insert_statement7450);
            	    sql_not_parsed362=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed362.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, insert_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:1: lock_table_statement : LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PL_SQLParser.lock_table_statement_return retval = new PL_SQLParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOCK_KEYWORD363=null;
        Token TABLE_KEYWORD364=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed365 = null;


        CommonTree LOCK_KEYWORD363_tree=null;
        CommonTree TABLE_KEYWORD364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:22: ( LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:24: LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            LOCK_KEYWORD363=(Token)match(input,LOCK_KEYWORD,FOLLOW_LOCK_KEYWORD_in_lock_table_statement7459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOCK_KEYWORD363_tree = (CommonTree)adaptor.create(LOCK_KEYWORD363);
            adaptor.addChild(root_0, LOCK_KEYWORD363_tree);
            }
            TABLE_KEYWORD364=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_lock_table_statement7461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD364_tree = (CommonTree)adaptor.create(TABLE_KEYWORD364);
            adaptor.addChild(root_0, TABLE_KEYWORD364_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:51: ( sql_not_parsed )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( ((LA125_0>=NUMBER_UNSIGNED && LA125_0<=OR_OPERATOR)||(LA125_0>=STRING && LA125_0<=SOME_TYPES)||(LA125_0>=KEYWORD && LA125_0<=ALIAS)||LA125_0==COMMA||LA125_0==NULL_KEYWORD||(LA125_0>=TRUE_KEYWORD && LA125_0<=FALSE_KEYWORD)||LA125_0==WITH_KEYWORD||LA125_0==INTERVAL_KEYWORD||LA125_0==IS_KEYWORD||LA125_0==REPLACE_KEYWORD||LA125_0==AS_KEYWORD||LA125_0==IN_KEYWORD||(LA125_0>=SELECT_KEYWORD && LA125_0<=COUNT_KEYWORD)||LA125_0==LIKE_KEYWORD||LA125_0==CASE_KEYWORD||(LA125_0>=TABLE_KEYWORD && LA125_0<=OF_KEYWORD)||LA125_0==BY_KEYWORD||LA125_0==COMMIT_KEYWORD||LA125_0==DELETE_KEYWORD||LA125_0==INTO_KEYWORD||(LA125_0>=BULK_KEYWORD && LA125_0<=COLLECT_KEYWORD)||(LA125_0>=VALUES_KEYWORD && LA125_0<=BETWEEN_KEYWORD)||(LA125_0>=INSERT_KEYWORD && LA125_0<=MERGE_KEYWORD)||(LA125_0>=RETURNING_KEYWORD && LA125_0<=SAVEPOINT_KEYWORD)||LA125_0==SET_KEYWORD||(LA125_0>=SQLCODE_KEYWORD && LA125_0<=EXISTS_KEYWORD)||LA125_0==ROW_KEYWORD||LA125_0==RESULT_KEYWORD||LA125_0==JOIN_KEYWORD||LA125_0==LPAREN||LA125_0==NOT_OPERATOR||LA125_0==THE_REST||LA125_0==212||(LA125_0>=214 && LA125_0<=228)) ) {
                    int LA125_1 = input.LA(2);

                    if ( (synpred232_PL_SQL()) ) {
                        alt125=1;
                    }


                }


                switch (alt125) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:52: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_lock_table_statement7464);
            	    sql_not_parsed365=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed365.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class merge_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:1: merge_statement : MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ ;
    public final PL_SQLParser.merge_statement_return merge_statement() throws RecognitionException {
        PL_SQLParser.merge_statement_return retval = new PL_SQLParser.merge_statement_return();
        retval.start = input.LT(1);
        int merge_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token MERGE_KEYWORD366=null;
        Token ON_KEYWORD368=null;
        Token USING_KEYWORD369=null;
        Token WHEN_KEYWORD370=null;
        Token THEN_KEYWORD371=null;
        Token INSERT_KEYWORD372=null;
        Token UPDATE_KEYWORD373=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed367 = null;


        CommonTree MERGE_KEYWORD366_tree=null;
        CommonTree ON_KEYWORD368_tree=null;
        CommonTree USING_KEYWORD369_tree=null;
        CommonTree WHEN_KEYWORD370_tree=null;
        CommonTree THEN_KEYWORD371_tree=null;
        CommonTree INSERT_KEYWORD372_tree=null;
        CommonTree UPDATE_KEYWORD373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:17: ( MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:19: MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            {
            root_0 = (CommonTree)adaptor.nil();

            MERGE_KEYWORD366=(Token)match(input,MERGE_KEYWORD,FOLLOW_MERGE_KEYWORD_in_merge_statement7473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MERGE_KEYWORD366_tree = (CommonTree)adaptor.create(MERGE_KEYWORD366);
            adaptor.addChild(root_0, MERGE_KEYWORD366_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            int cnt126=0;
            loop126:
            do {
                int alt126=8;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:34: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_merge_statement7476);
            	    sql_not_parsed367=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed367.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:51: ON_KEYWORD
            	    {
            	    ON_KEYWORD368=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_merge_statement7480); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON_KEYWORD368_tree = (CommonTree)adaptor.create(ON_KEYWORD368);
            	    adaptor.addChild(root_0, ON_KEYWORD368_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:19: USING_KEYWORD
            	    {
            	    USING_KEYWORD369=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_merge_statement7502); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING_KEYWORD369_tree = (CommonTree)adaptor.create(USING_KEYWORD369);
            	    adaptor.addChild(root_0, USING_KEYWORD369_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:35: WHEN_KEYWORD
            	    {
            	    WHEN_KEYWORD370=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_merge_statement7506); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD370_tree = (CommonTree)adaptor.create(WHEN_KEYWORD370);
            	    adaptor.addChild(root_0, WHEN_KEYWORD370_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:50: THEN_KEYWORD
            	    {
            	    THEN_KEYWORD371=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_merge_statement7510); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD371_tree = (CommonTree)adaptor.create(THEN_KEYWORD371);
            	    adaptor.addChild(root_0, THEN_KEYWORD371_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:65: INSERT_KEYWORD
            	    {
            	    INSERT_KEYWORD372=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_merge_statement7514); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    INSERT_KEYWORD372_tree = (CommonTree)adaptor.create(INSERT_KEYWORD372);
            	    adaptor.addChild(root_0, INSERT_KEYWORD372_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:19: UPDATE_KEYWORD
            	    {
            	    UPDATE_KEYWORD373=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_merge_statement7536); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD373_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD373);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD373_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, merge_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:1: rollback_statement : ROLLBACK_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
        PL_SQLParser.rollback_statement_return retval = new PL_SQLParser.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ROLLBACK_KEYWORD374=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed375 = null;


        CommonTree ROLLBACK_KEYWORD374_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:20: ( ROLLBACK_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:22: ROLLBACK_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            ROLLBACK_KEYWORD374=(Token)match(input,ROLLBACK_KEYWORD,FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ROLLBACK_KEYWORD374_tree = (CommonTree)adaptor.create(ROLLBACK_KEYWORD374);
            adaptor.addChild(root_0, ROLLBACK_KEYWORD374_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:39: ( sql_not_parsed )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=NUMBER_UNSIGNED && LA127_0<=OR_OPERATOR)||(LA127_0>=STRING && LA127_0<=SOME_TYPES)||(LA127_0>=KEYWORD && LA127_0<=ALIAS)||LA127_0==COMMA||LA127_0==NULL_KEYWORD||(LA127_0>=TRUE_KEYWORD && LA127_0<=FALSE_KEYWORD)||LA127_0==WITH_KEYWORD||LA127_0==INTERVAL_KEYWORD||LA127_0==IS_KEYWORD||LA127_0==REPLACE_KEYWORD||LA127_0==AS_KEYWORD||LA127_0==IN_KEYWORD||(LA127_0>=SELECT_KEYWORD && LA127_0<=COUNT_KEYWORD)||LA127_0==LIKE_KEYWORD||LA127_0==CASE_KEYWORD||(LA127_0>=TABLE_KEYWORD && LA127_0<=OF_KEYWORD)||LA127_0==BY_KEYWORD||LA127_0==COMMIT_KEYWORD||LA127_0==DELETE_KEYWORD||LA127_0==INTO_KEYWORD||(LA127_0>=BULK_KEYWORD && LA127_0<=COLLECT_KEYWORD)||(LA127_0>=VALUES_KEYWORD && LA127_0<=BETWEEN_KEYWORD)||(LA127_0>=INSERT_KEYWORD && LA127_0<=MERGE_KEYWORD)||(LA127_0>=RETURNING_KEYWORD && LA127_0<=SAVEPOINT_KEYWORD)||LA127_0==SET_KEYWORD||(LA127_0>=SQLCODE_KEYWORD && LA127_0<=EXISTS_KEYWORD)||LA127_0==ROW_KEYWORD||LA127_0==RESULT_KEYWORD||LA127_0==JOIN_KEYWORD||LA127_0==LPAREN||LA127_0==NOT_OPERATOR||LA127_0==THE_REST||LA127_0==212||(LA127_0>=214 && LA127_0<=228)) ) {
                int LA127_1 = input.LA(2);

                if ( (synpred240_PL_SQL()) ) {
                    alt127=1;
                }
            }
            switch (alt127) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_rollback_statement7547);
                    sql_not_parsed375=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed375.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:1: savepoint_statement : SAVEPOINT_KEYWORD identifier ;
    public final PL_SQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PL_SQLParser.savepoint_statement_return retval = new PL_SQLParser.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SAVEPOINT_KEYWORD376=null;
        PL_SQLParser.identifier_return identifier377 = null;


        CommonTree SAVEPOINT_KEYWORD376_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:21: ( SAVEPOINT_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:23: SAVEPOINT_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            SAVEPOINT_KEYWORD376=(Token)match(input,SAVEPOINT_KEYWORD,FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAVEPOINT_KEYWORD376_tree = (CommonTree)adaptor.create(SAVEPOINT_KEYWORD376);
            adaptor.addChild(root_0, SAVEPOINT_KEYWORD376_tree);
            }
            pushFollow(FOLLOW_identifier_in_savepoint_statement7557);
            identifier377=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier377.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class set_transaction_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:1: set_transaction_statement : SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.set_transaction_statement_return set_transaction_statement() throws RecognitionException {
        PL_SQLParser.set_transaction_statement_return retval = new PL_SQLParser.set_transaction_statement_return();
        retval.start = input.LT(1);
        int set_transaction_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SET_KEYWORD378=null;
        Token TRANSACTION_KEYWORD379=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed380 = null;


        CommonTree SET_KEYWORD378_tree=null;
        CommonTree TRANSACTION_KEYWORD379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:27: ( SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:29: SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SET_KEYWORD378=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_set_transaction_statement7564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET_KEYWORD378_tree = (CommonTree)adaptor.create(SET_KEYWORD378);
            adaptor.addChild(root_0, SET_KEYWORD378_tree);
            }
            TRANSACTION_KEYWORD379=(Token)match(input,TRANSACTION_KEYWORD,FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRANSACTION_KEYWORD379_tree = (CommonTree)adaptor.create(TRANSACTION_KEYWORD379);
            adaptor.addChild(root_0, TRANSACTION_KEYWORD379_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:61: ( sql_not_parsed )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( ((LA128_0>=NUMBER_UNSIGNED && LA128_0<=OR_OPERATOR)||(LA128_0>=STRING && LA128_0<=SOME_TYPES)||(LA128_0>=KEYWORD && LA128_0<=ALIAS)||LA128_0==COMMA||LA128_0==NULL_KEYWORD||(LA128_0>=TRUE_KEYWORD && LA128_0<=FALSE_KEYWORD)||LA128_0==WITH_KEYWORD||LA128_0==INTERVAL_KEYWORD||LA128_0==IS_KEYWORD||LA128_0==REPLACE_KEYWORD||LA128_0==AS_KEYWORD||LA128_0==IN_KEYWORD||(LA128_0>=SELECT_KEYWORD && LA128_0<=COUNT_KEYWORD)||LA128_0==LIKE_KEYWORD||LA128_0==CASE_KEYWORD||(LA128_0>=TABLE_KEYWORD && LA128_0<=OF_KEYWORD)||LA128_0==BY_KEYWORD||LA128_0==COMMIT_KEYWORD||LA128_0==DELETE_KEYWORD||LA128_0==INTO_KEYWORD||(LA128_0>=BULK_KEYWORD && LA128_0<=COLLECT_KEYWORD)||(LA128_0>=VALUES_KEYWORD && LA128_0<=BETWEEN_KEYWORD)||(LA128_0>=INSERT_KEYWORD && LA128_0<=MERGE_KEYWORD)||(LA128_0>=RETURNING_KEYWORD && LA128_0<=SAVEPOINT_KEYWORD)||LA128_0==SET_KEYWORD||(LA128_0>=SQLCODE_KEYWORD && LA128_0<=EXISTS_KEYWORD)||LA128_0==ROW_KEYWORD||LA128_0==RESULT_KEYWORD||LA128_0==JOIN_KEYWORD||LA128_0==LPAREN||LA128_0==NOT_OPERATOR||LA128_0==THE_REST||LA128_0==212||(LA128_0>=214 && LA128_0<=228)) ) {
                    int LA128_2 = input.LA(2);

                    if ( (synpred241_PL_SQL()) ) {
                        alt128=1;
                    }


                }


                switch (alt128) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:62: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_set_transaction_statement7569);
            	    sql_not_parsed380=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed380.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, set_transaction_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_statement"

    public static class update_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:1: update_statement : UPDATE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.update_statement_return update_statement() throws RecognitionException {
        PL_SQLParser.update_statement_return retval = new PL_SQLParser.update_statement_return();
        retval.start = input.LT(1);
        int update_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token UPDATE_KEYWORD381=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed382 = null;


        CommonTree UPDATE_KEYWORD381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:18: ( UPDATE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:20: UPDATE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            UPDATE_KEYWORD381=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_update_statement7578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATE_KEYWORD381_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD381);
            adaptor.addChild(root_0, UPDATE_KEYWORD381_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:35: ( sql_not_parsed )+
            int cnt129=0;
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( ((LA129_0>=NUMBER_UNSIGNED && LA129_0<=OR_OPERATOR)||(LA129_0>=STRING && LA129_0<=SOME_TYPES)||(LA129_0>=KEYWORD && LA129_0<=ALIAS)||LA129_0==COMMA||LA129_0==NULL_KEYWORD||(LA129_0>=TRUE_KEYWORD && LA129_0<=FALSE_KEYWORD)||LA129_0==WITH_KEYWORD||LA129_0==INTERVAL_KEYWORD||LA129_0==IS_KEYWORD||LA129_0==REPLACE_KEYWORD||LA129_0==AS_KEYWORD||LA129_0==IN_KEYWORD||(LA129_0>=SELECT_KEYWORD && LA129_0<=COUNT_KEYWORD)||LA129_0==LIKE_KEYWORD||LA129_0==CASE_KEYWORD||(LA129_0>=TABLE_KEYWORD && LA129_0<=OF_KEYWORD)||LA129_0==BY_KEYWORD||LA129_0==COMMIT_KEYWORD||LA129_0==DELETE_KEYWORD||LA129_0==INTO_KEYWORD||(LA129_0>=BULK_KEYWORD && LA129_0<=COLLECT_KEYWORD)||(LA129_0>=VALUES_KEYWORD && LA129_0<=BETWEEN_KEYWORD)||(LA129_0>=INSERT_KEYWORD && LA129_0<=MERGE_KEYWORD)||(LA129_0>=RETURNING_KEYWORD && LA129_0<=SAVEPOINT_KEYWORD)||LA129_0==SET_KEYWORD||(LA129_0>=SQLCODE_KEYWORD && LA129_0<=EXISTS_KEYWORD)||LA129_0==ROW_KEYWORD||LA129_0==RESULT_KEYWORD||LA129_0==JOIN_KEYWORD||LA129_0==LPAREN||LA129_0==NOT_OPERATOR||LA129_0==THE_REST||LA129_0==212||(LA129_0>=214 && LA129_0<=228)) ) {
                    int LA129_2 = input.LA(2);

                    if ( (synpred242_PL_SQL()) ) {
                        alt129=1;
                    }


                }


                switch (alt129) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_update_statement7581);
            	    sql_not_parsed382=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed382.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, update_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:1: goto_statement : GOTO_KEYWORD identifier ;
    public final PL_SQLParser.goto_statement_return goto_statement() throws RecognitionException {
        PL_SQLParser.goto_statement_return retval = new PL_SQLParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GOTO_KEYWORD383=null;
        PL_SQLParser.identifier_return identifier384 = null;


        CommonTree GOTO_KEYWORD383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:16: ( GOTO_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:18: GOTO_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            GOTO_KEYWORD383=(Token)match(input,GOTO_KEYWORD,FOLLOW_GOTO_KEYWORD_in_goto_statement7592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOTO_KEYWORD383_tree = (CommonTree)adaptor.create(GOTO_KEYWORD383);
            adaptor.addChild(root_0, GOTO_KEYWORD383_tree);
            }
            pushFollow(FOLLOW_identifier_in_goto_statement7594);
            identifier384=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier384.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:1: return_statement : RETURN_KEYWORD ( expression )? ;
    public final PL_SQLParser.return_statement_return return_statement() throws RecognitionException {
        PL_SQLParser.return_statement_return retval = new PL_SQLParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RETURN_KEYWORD385=null;
        PL_SQLParser.expression_return expression386 = null;


        CommonTree RETURN_KEYWORD385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:18: ( RETURN_KEYWORD ( expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:20: RETURN_KEYWORD ( expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RETURN_KEYWORD385=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_return_statement7601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD385_tree = (CommonTree)adaptor.create(RETURN_KEYWORD385);
            adaptor.addChild(root_0, RETURN_KEYWORD385_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:35: ( expression )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==NUMBER_UNSIGNED||LA130_0==STRING||(LA130_0>=IDENTIFIER && LA130_0<=EXT_IDENTIFIER)||LA130_0==NULL_KEYWORD||(LA130_0>=TRUE_KEYWORD && LA130_0<=FALSE_KEYWORD)||LA130_0==INTERVAL_KEYWORD||LA130_0==REPLACE_KEYWORD||LA130_0==IN_KEYWORD||LA130_0==CASE_KEYWORD||(LA130_0>=SQLCODE_KEYWORD && LA130_0<=SQLERRM_KEYWORD)||LA130_0==RESULT_KEYWORD||LA130_0==LPAREN||LA130_0==NOT_OPERATOR||(LA130_0>=214 && LA130_0<=215)) ) {
                int LA130_2 = input.LA(2);

                if ( (synpred243_PL_SQL()) ) {
                    alt130=1;
                }
            }
            switch (alt130) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7603);
                    expression386=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:1: if_statement : IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) ;
    public final PL_SQLParser.if_statement_return if_statement() throws RecognitionException {
        PL_SQLParser.if_statement_return retval = new PL_SQLParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IF_KEYWORD387=null;
        Token THEN_KEYWORD389=null;
        Token ELSIF_KEYWORD391=null;
        Token THEN_KEYWORD393=null;
        Token ELSE_KEYWORD395=null;
        Token END_KEYWORD397=null;
        Token IF_KEYWORD398=null;
        PL_SQLParser.expression_return expression388 = null;

        PL_SQLParser.executable_section_return executable_section390 = null;

        PL_SQLParser.expression_return expression392 = null;

        PL_SQLParser.executable_section_return executable_section394 = null;

        PL_SQLParser.executable_section_return executable_section396 = null;


        CommonTree IF_KEYWORD387_tree=null;
        CommonTree THEN_KEYWORD389_tree=null;
        CommonTree ELSIF_KEYWORD391_tree=null;
        CommonTree THEN_KEYWORD393_tree=null;
        CommonTree ELSE_KEYWORD395_tree=null;
        CommonTree END_KEYWORD397_tree=null;
        CommonTree IF_KEYWORD398_tree=null;
        RewriteRuleTokenStream stream_ELSIF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSIF_KEYWORD");
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_IF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token IF_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:14: ( IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:16: IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD
            {
            IF_KEYWORD387=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD387);

            pushFollow(FOLLOW_expression_in_if_statement7613);
            expression388=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression388.getTree());
            THEN_KEYWORD389=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD389);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:51: ( executable_section )+
            int cnt131=0;
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==NUMBER_UNSIGNED||LA131_0==STRING||(LA131_0>=IDENTIFIER && LA131_0<=EXT_IDENTIFIER)||LA131_0==BEGIN_KEYWORD||LA131_0==DECLARE_KEYWORD||LA131_0==NULL_KEYWORD||(LA131_0>=TRUE_KEYWORD && LA131_0<=FALSE_KEYWORD)||LA131_0==INTERVAL_KEYWORD||LA131_0==REPLACE_KEYWORD||(LA131_0>=RETURN_KEYWORD && LA131_0<=IN_KEYWORD)||LA131_0==IF_KEYWORD||(LA131_0>=GOTO_KEYWORD && LA131_0<=FOR_KEYWORD)||LA131_0==SELECT_KEYWORD||(LA131_0>=RAISE_KEYWORD && LA131_0<=PRAGMA_KEYWORD)||(LA131_0>=CASE_KEYWORD && LA131_0<=CLOSE_KEYWORD)||LA131_0==COMMIT_KEYWORD||LA131_0==CONTINUE_KEYWORD||(LA131_0>=DELETE_KEYWORD && LA131_0<=EXECUTE_KEYWORD)||LA131_0==EXIT_KEYWORD||LA131_0==FETCH_KEYWORD||LA131_0==FORALL_KEYWORD||(LA131_0>=INSERT_KEYWORD && LA131_0<=OPEN_KEYWORD)||(LA131_0>=ROLLBACK_KEYWORD && LA131_0<=SAVEPOINT_KEYWORD)||LA131_0==SET_KEYWORD||(LA131_0>=SQLCODE_KEYWORD && LA131_0<=UPDATE_KEYWORD)||LA131_0==RESULT_KEYWORD||LA131_0==LPAREN||LA131_0==NOT_OPERATOR||LA131_0==210||(LA131_0>=214 && LA131_0<=215)) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:52: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_if_statement7618);
            	    executable_section390=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section390.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt131 >= 1 ) break loop131;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(131, input);
                        throw eee;
                }
                cnt131++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:16: ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==ELSIF_KEYWORD) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:17: ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+
            	    {
            	    ELSIF_KEYWORD391=(Token)match(input,ELSIF_KEYWORD,FOLLOW_ELSIF_KEYWORD_in_if_statement7638); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ELSIF_KEYWORD.add(ELSIF_KEYWORD391);

            	    pushFollow(FOLLOW_expression_in_if_statement7640);
            	    expression392=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());
            	    THEN_KEYWORD393=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7642); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD393);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:55: ( executable_section )+
            	    int cnt132=0;
            	    loop132:
            	    do {
            	        int alt132=2;
            	        int LA132_0 = input.LA(1);

            	        if ( (LA132_0==NUMBER_UNSIGNED||LA132_0==STRING||(LA132_0>=IDENTIFIER && LA132_0<=EXT_IDENTIFIER)||LA132_0==BEGIN_KEYWORD||LA132_0==DECLARE_KEYWORD||LA132_0==NULL_KEYWORD||(LA132_0>=TRUE_KEYWORD && LA132_0<=FALSE_KEYWORD)||LA132_0==INTERVAL_KEYWORD||LA132_0==REPLACE_KEYWORD||(LA132_0>=RETURN_KEYWORD && LA132_0<=IN_KEYWORD)||LA132_0==IF_KEYWORD||(LA132_0>=GOTO_KEYWORD && LA132_0<=FOR_KEYWORD)||LA132_0==SELECT_KEYWORD||(LA132_0>=RAISE_KEYWORD && LA132_0<=PRAGMA_KEYWORD)||(LA132_0>=CASE_KEYWORD && LA132_0<=CLOSE_KEYWORD)||LA132_0==COMMIT_KEYWORD||LA132_0==CONTINUE_KEYWORD||(LA132_0>=DELETE_KEYWORD && LA132_0<=EXECUTE_KEYWORD)||LA132_0==EXIT_KEYWORD||LA132_0==FETCH_KEYWORD||LA132_0==FORALL_KEYWORD||(LA132_0>=INSERT_KEYWORD && LA132_0<=OPEN_KEYWORD)||(LA132_0>=ROLLBACK_KEYWORD && LA132_0<=SAVEPOINT_KEYWORD)||LA132_0==SET_KEYWORD||(LA132_0>=SQLCODE_KEYWORD && LA132_0<=UPDATE_KEYWORD)||LA132_0==RESULT_KEYWORD||LA132_0==LPAREN||LA132_0==NOT_OPERATOR||LA132_0==210||(LA132_0>=214 && LA132_0<=215)) ) {
            	            alt132=1;
            	        }


            	        switch (alt132) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:56: executable_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_section_in_if_statement7645);
            	    	    executable_section394=executable_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section394.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt132 >= 1 ) break loop132;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(132, input);
            	                throw eee;
            	        }
            	        cnt132++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:16: ( ELSE_KEYWORD ( executable_section )+ )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==ELSE_KEYWORD) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:17: ELSE_KEYWORD ( executable_section )+
                    {
                    ELSE_KEYWORD395=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_if_statement7667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD395);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:30: ( executable_section )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==NUMBER_UNSIGNED||LA134_0==STRING||(LA134_0>=IDENTIFIER && LA134_0<=EXT_IDENTIFIER)||LA134_0==BEGIN_KEYWORD||LA134_0==DECLARE_KEYWORD||LA134_0==NULL_KEYWORD||(LA134_0>=TRUE_KEYWORD && LA134_0<=FALSE_KEYWORD)||LA134_0==INTERVAL_KEYWORD||LA134_0==REPLACE_KEYWORD||(LA134_0>=RETURN_KEYWORD && LA134_0<=IN_KEYWORD)||LA134_0==IF_KEYWORD||(LA134_0>=GOTO_KEYWORD && LA134_0<=FOR_KEYWORD)||LA134_0==SELECT_KEYWORD||(LA134_0>=RAISE_KEYWORD && LA134_0<=PRAGMA_KEYWORD)||(LA134_0>=CASE_KEYWORD && LA134_0<=CLOSE_KEYWORD)||LA134_0==COMMIT_KEYWORD||LA134_0==CONTINUE_KEYWORD||(LA134_0>=DELETE_KEYWORD && LA134_0<=EXECUTE_KEYWORD)||LA134_0==EXIT_KEYWORD||LA134_0==FETCH_KEYWORD||LA134_0==FORALL_KEYWORD||(LA134_0>=INSERT_KEYWORD && LA134_0<=OPEN_KEYWORD)||(LA134_0>=ROLLBACK_KEYWORD && LA134_0<=SAVEPOINT_KEYWORD)||LA134_0==SET_KEYWORD||(LA134_0>=SQLCODE_KEYWORD && LA134_0<=UPDATE_KEYWORD)||LA134_0==RESULT_KEYWORD||LA134_0==LPAREN||LA134_0==NOT_OPERATOR||LA134_0==210||(LA134_0>=214 && LA134_0<=215)) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:31: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_if_statement7670);
                    	    executable_section396=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section396.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD397=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_if_statement7691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD397);

            IF_KEYWORD398=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD398);



            // AST REWRITE
            // elements: IF_KEYWORD, executable_section, IF_KEYWORD, END_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 748:16: -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:19: ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_IF, "IM_IF"), root_1);

                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:1: loop_statement : LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) ;
    public final PL_SQLParser.loop_statement_return loop_statement() throws RecognitionException {
        PL_SQLParser.loop_statement_return retval = new PL_SQLParser.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOOP_KEYWORD399=null;
        Token END_KEYWORD401=null;
        Token LOOP_KEYWORD402=null;
        PL_SQLParser.executable_section_return executable_section400 = null;

        PL_SQLParser.identifier_return identifier403 = null;


        CommonTree LOOP_KEYWORD399_tree=null;
        CommonTree END_KEYWORD401_tree=null;
        CommonTree LOOP_KEYWORD402_tree=null;
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_LOOP_KEYWORD=new RewriteRuleTokenStream(adaptor,"token LOOP_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:16: ( LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:18: LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )?
            {
            LOOP_KEYWORD399=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD399);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:31: ( executable_section )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==NUMBER_UNSIGNED||LA136_0==STRING||(LA136_0>=IDENTIFIER && LA136_0<=EXT_IDENTIFIER)||LA136_0==BEGIN_KEYWORD||LA136_0==DECLARE_KEYWORD||LA136_0==NULL_KEYWORD||(LA136_0>=TRUE_KEYWORD && LA136_0<=FALSE_KEYWORD)||LA136_0==INTERVAL_KEYWORD||LA136_0==REPLACE_KEYWORD||(LA136_0>=RETURN_KEYWORD && LA136_0<=IN_KEYWORD)||LA136_0==IF_KEYWORD||(LA136_0>=GOTO_KEYWORD && LA136_0<=FOR_KEYWORD)||LA136_0==SELECT_KEYWORD||(LA136_0>=RAISE_KEYWORD && LA136_0<=PRAGMA_KEYWORD)||(LA136_0>=CASE_KEYWORD && LA136_0<=CLOSE_KEYWORD)||LA136_0==COMMIT_KEYWORD||LA136_0==CONTINUE_KEYWORD||(LA136_0>=DELETE_KEYWORD && LA136_0<=EXECUTE_KEYWORD)||LA136_0==EXIT_KEYWORD||LA136_0==FETCH_KEYWORD||LA136_0==FORALL_KEYWORD||(LA136_0>=INSERT_KEYWORD && LA136_0<=OPEN_KEYWORD)||(LA136_0>=ROLLBACK_KEYWORD && LA136_0<=SAVEPOINT_KEYWORD)||LA136_0==SET_KEYWORD||(LA136_0>=SQLCODE_KEYWORD && LA136_0<=UPDATE_KEYWORD)||LA136_0==RESULT_KEYWORD||LA136_0==LPAREN||LA136_0==NOT_OPERATOR||LA136_0==210||(LA136_0>=214 && LA136_0<=215)) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:32: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_loop_statement7735);
            	    executable_section400=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section400.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);

            END_KEYWORD401=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_loop_statement7739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD401);

            LOOP_KEYWORD402=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD402);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:78: ( identifier )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==IDENTIFIER||LA137_0==INTERVAL_KEYWORD||LA137_0==RESULT_KEYWORD) ) {
                int LA137_1 = input.LA(2);

                if ( (synpred250_PL_SQL()) ) {
                    alt137=1;
                }
            }
            switch (alt137) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_loop_statement7743);
                    identifier403=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier403.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: END_KEYWORD, executable_section, LOOP_KEYWORD, LOOP_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 750:3: -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:6: ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_LOOP, "IM_LOOP"), root_1);

                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:1: while_loop_statement : WHILE_KEYWORD expression loop_statement ;
    public final PL_SQLParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        PL_SQLParser.while_loop_statement_return retval = new PL_SQLParser.while_loop_statement_return();
        retval.start = input.LT(1);
        int while_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHILE_KEYWORD404=null;
        PL_SQLParser.expression_return expression405 = null;

        PL_SQLParser.loop_statement_return loop_statement406 = null;


        CommonTree WHILE_KEYWORD404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:22: ( WHILE_KEYWORD expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:24: WHILE_KEYWORD expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            WHILE_KEYWORD404=(Token)match(input,WHILE_KEYWORD,FOLLOW_WHILE_KEYWORD_in_while_loop_statement7770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE_KEYWORD404_tree = (CommonTree)adaptor.create(WHILE_KEYWORD404);
            adaptor.addChild(root_0, WHILE_KEYWORD404_tree);
            }
            pushFollow(FOLLOW_expression_in_while_loop_statement7772);
            expression405=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression405.getTree());
            pushFollow(FOLLOW_loop_statement_in_while_loop_statement7774);
            loop_statement406=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement406.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, while_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class for_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:1: for_loop_statement : FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) ;
    public final PL_SQLParser.for_loop_statement_return for_loop_statement() throws RecognitionException {
        PL_SQLParser.for_loop_statement_return retval = new PL_SQLParser.for_loop_statement_return();
        retval.start = input.LT(1);
        int for_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD407=null;
        Token IN_KEYWORD409=null;
        Token REVERSE_KEYWORD410=null;
        PL_SQLParser.identifier_return identifier408 = null;

        PL_SQLParser.expression_return expression411 = null;

        PL_SQLParser.for_loop_statement_part_return for_loop_statement_part412 = null;

        PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1413 = null;

        PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2414 = null;


        CommonTree FOR_KEYWORD407_tree=null;
        CommonTree IN_KEYWORD409_tree=null;
        CommonTree REVERSE_KEYWORD410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:20: ( FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:22: FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD407=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_for_loop_statement7781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD407_tree = (CommonTree)adaptor.create(FOR_KEYWORD407);
            adaptor.addChild(root_0, FOR_KEYWORD407_tree);
            }
            pushFollow(FOLLOW_identifier_in_for_loop_statement7783);
            identifier408=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier408.getTree());
            IN_KEYWORD409=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_for_loop_statement7785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD409_tree = (CommonTree)adaptor.create(IN_KEYWORD409);
            adaptor.addChild(root_0, IN_KEYWORD409_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:56: ( REVERSE_KEYWORD )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==REVERSE_KEYWORD) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REVERSE_KEYWORD
                    {
                    REVERSE_KEYWORD410=(Token)match(input,REVERSE_KEYWORD,FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_KEYWORD410_tree = (CommonTree)adaptor.create(REVERSE_KEYWORD410);
                    adaptor.addChild(root_0, REVERSE_KEYWORD410_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:22: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==NUMBER_UNSIGNED||LA140_0==STRING||(LA140_0>=IDENTIFIER && LA140_0<=EXT_IDENTIFIER)||LA140_0==NULL_KEYWORD||(LA140_0>=TRUE_KEYWORD && LA140_0<=FALSE_KEYWORD)||LA140_0==INTERVAL_KEYWORD||LA140_0==REPLACE_KEYWORD||LA140_0==IN_KEYWORD||LA140_0==CASE_KEYWORD||(LA140_0>=SQLCODE_KEYWORD && LA140_0<=SQLERRM_KEYWORD)||LA140_0==RESULT_KEYWORD||LA140_0==NOT_OPERATOR||(LA140_0>=214 && LA140_0<=215)) ) {
                alt140=1;
            }
            else if ( (LA140_0==LPAREN) ) {
                int LA140_2 = input.LA(2);

                if ( (synpred253_PL_SQL()) ) {
                    alt140=1;
                }
                else if ( (true) ) {
                    alt140=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
                    {
                    pushFollow(FOLLOW_expression_in_for_loop_statement7814);
                    expression411=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression411.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==229) ) {
                        alt139=1;
                    }
                    else if ( (LA139_0==LOOP_KEYWORD) ) {
                        alt139=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;
                    }
                    switch (alt139) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:36: for_loop_statement_part
                            {
                            pushFollow(FOLLOW_for_loop_statement_part_in_for_loop_statement7817);
                            for_loop_statement_part412=for_loop_statement_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement_part412.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:62: cursor_for_loop_statement1
                            {
                            pushFollow(FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7821);
                            cursor_for_loop_statement1413=cursor_for_loop_statement1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement1413.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:24: cursor_for_loop_statement2
                    {
                    pushFollow(FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7850);
                    cursor_for_loop_statement2414=cursor_for_loop_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement2414.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, for_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement"

    public static class for_loop_statement_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:1: for_loop_statement_part : '..' expression loop_statement ;
    public final PL_SQLParser.for_loop_statement_part_return for_loop_statement_part() throws RecognitionException {
        PL_SQLParser.for_loop_statement_part_return retval = new PL_SQLParser.for_loop_statement_part_return();
        retval.start = input.LT(1);
        int for_loop_statement_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal415=null;
        PL_SQLParser.expression_return expression416 = null;

        PL_SQLParser.loop_statement_return loop_statement417 = null;


        CommonTree string_literal415_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:25: ( '..' expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:28: '..' expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal415=(Token)match(input,229,FOLLOW_229_in_for_loop_statement_part7859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal415_tree = (CommonTree)adaptor.create(string_literal415);
            adaptor.addChild(root_0, string_literal415_tree);
            }
            pushFollow(FOLLOW_expression_in_for_loop_statement_part7861);
            expression416=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression416.getTree());
            pushFollow(FOLLOW_loop_statement_in_for_loop_statement_part7863);
            loop_statement417=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement417.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, for_loop_statement_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement_part"

    public static class cursor_for_loop_statement1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement1"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:756:1: cursor_for_loop_statement1 : loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement1_return retval = new PL_SQLParser.cursor_for_loop_statement1_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement1_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.loop_statement_return loop_statement418 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:756:28: ( loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:756:30: loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement17870);
            loop_statement418=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement418.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, cursor_for_loop_statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement1"

    public static class cursor_for_loop_statement2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:1: cursor_for_loop_statement2 : '(' select_statement ')' loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement2_return retval = new PL_SQLParser.cursor_for_loop_statement2_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal419=null;
        Token char_literal421=null;
        PL_SQLParser.select_statement_return select_statement420 = null;

        PL_SQLParser.loop_statement_return loop_statement422 = null;


        CommonTree char_literal419_tree=null;
        CommonTree char_literal421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:28: ( '(' select_statement ')' loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:30: '(' select_statement ')' loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal419=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_for_loop_statement27877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal419_tree = (CommonTree)adaptor.create(char_literal419);
            adaptor.addChild(root_0, char_literal419_tree);
            }
            pushFollow(FOLLOW_select_statement_in_cursor_for_loop_statement27879);
            select_statement420=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement420.getTree());
            char_literal421=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_for_loop_statement27881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal421_tree = (CommonTree)adaptor.create(char_literal421);
            adaptor.addChild(root_0, char_literal421_tree);
            }
            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement27883);
            loop_statement422=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement422.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, cursor_for_loop_statement2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement2"

    public static class raise_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:1: raise_statement : RAISE_KEYWORD ( universal_identifier )? ;
    public final PL_SQLParser.raise_statement_return raise_statement() throws RecognitionException {
        PL_SQLParser.raise_statement_return retval = new PL_SQLParser.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAISE_KEYWORD423=null;
        PL_SQLParser.universal_identifier_return universal_identifier424 = null;


        CommonTree RAISE_KEYWORD423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:17: ( RAISE_KEYWORD ( universal_identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:19: RAISE_KEYWORD ( universal_identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAISE_KEYWORD423=(Token)match(input,RAISE_KEYWORD,FOLLOW_RAISE_KEYWORD_in_raise_statement7890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE_KEYWORD423_tree = (CommonTree)adaptor.create(RAISE_KEYWORD423);
            adaptor.addChild(root_0, RAISE_KEYWORD423_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:33: ( universal_identifier )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( ((LA141_0>=IDENTIFIER && LA141_0<=EXT_IDENTIFIER)||LA141_0==INTERVAL_KEYWORD||LA141_0==RESULT_KEYWORD) ) {
                int LA141_1 = input.LA(2);

                if ( (synpred254_PL_SQL()) ) {
                    alt141=1;
                }
            }
            switch (alt141) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_raise_statement7892);
                    universal_identifier424=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier424.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:1: case_statement_expression : ( simple_case_statement_expression | searched_case_statement_expression );
    public final PL_SQLParser.case_statement_expression_return case_statement_expression() throws RecognitionException {
        PL_SQLParser.case_statement_expression_return retval = new PL_SQLParser.case_statement_expression_return();
        retval.start = input.LT(1);
        int case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression425 = null;

        PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression426 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:27: ( simple_case_statement_expression | searched_case_statement_expression )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==CASE_KEYWORD) ) {
                int LA142_1 = input.LA(2);

                if ( (synpred255_PL_SQL()) ) {
                    alt142=1;
                }
                else if ( (true) ) {
                    alt142=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:29: simple_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_expression_in_case_statement_expression7900);
                    simple_case_statement_expression425=simple_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement_expression425.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:64: searched_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_expression_in_case_statement_expression7904);
                    searched_case_statement_expression426=searched_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement_expression426.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement_expression"

    public static class simple_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:760:1: simple_case_statement_expression : CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression() throws RecognitionException {
        PL_SQLParser.simple_case_statement_expression_return retval = new PL_SQLParser.simple_case_statement_expression_return();
        retval.start = input.LT(1);
        int simple_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD427=null;
        Token WHEN_KEYWORD429=null;
        Token THEN_KEYWORD431=null;
        Token ELSE_KEYWORD433=null;
        Token END_KEYWORD435=null;
        Token CASE_KEYWORD436=null;
        PL_SQLParser.expression_return expression428 = null;

        PL_SQLParser.expression_return expression430 = null;

        PL_SQLParser.executable_case_section_return executable_case_section432 = null;

        PL_SQLParser.executable_case_section_return executable_case_section434 = null;

        PL_SQLParser.identifier_return identifier437 = null;


        CommonTree CASE_KEYWORD427_tree=null;
        CommonTree WHEN_KEYWORD429_tree=null;
        CommonTree THEN_KEYWORD431_tree=null;
        CommonTree ELSE_KEYWORD433_tree=null;
        CommonTree END_KEYWORD435_tree=null;
        CommonTree CASE_KEYWORD436_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:760:34: ( CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:760:36: CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD427=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD427);

            pushFollow(FOLLOW_expression_in_simple_case_statement_expression7913);
            expression428=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression428.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==WHEN_KEYWORD) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD429=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7941); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD429);

            	    pushFollow(FOLLOW_expression_in_simple_case_statement_expression7943);
            	    expression430=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression430.getTree());
            	    THEN_KEYWORD431=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7945); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD431);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:63: ( executable_case_section )+
            	    int cnt143=0;
            	    loop143:
            	    do {
            	        int alt143=2;
            	        int LA143_0 = input.LA(1);

            	        if ( (LA143_0==NUMBER_UNSIGNED||LA143_0==STRING||(LA143_0>=IDENTIFIER && LA143_0<=EXT_IDENTIFIER)||LA143_0==BEGIN_KEYWORD||LA143_0==DECLARE_KEYWORD||LA143_0==NULL_KEYWORD||(LA143_0>=TRUE_KEYWORD && LA143_0<=FALSE_KEYWORD)||LA143_0==INTERVAL_KEYWORD||LA143_0==REPLACE_KEYWORD||(LA143_0>=RETURN_KEYWORD && LA143_0<=IN_KEYWORD)||LA143_0==IF_KEYWORD||(LA143_0>=GOTO_KEYWORD && LA143_0<=FOR_KEYWORD)||LA143_0==SELECT_KEYWORD||(LA143_0>=RAISE_KEYWORD && LA143_0<=PRAGMA_KEYWORD)||(LA143_0>=CASE_KEYWORD && LA143_0<=CLOSE_KEYWORD)||LA143_0==COMMIT_KEYWORD||LA143_0==CONTINUE_KEYWORD||(LA143_0>=DELETE_KEYWORD && LA143_0<=EXECUTE_KEYWORD)||LA143_0==EXIT_KEYWORD||LA143_0==FETCH_KEYWORD||LA143_0==FORALL_KEYWORD||(LA143_0>=INSERT_KEYWORD && LA143_0<=OPEN_KEYWORD)||(LA143_0>=ROLLBACK_KEYWORD && LA143_0<=SAVEPOINT_KEYWORD)||LA143_0==SET_KEYWORD||(LA143_0>=SQLCODE_KEYWORD && LA143_0<=UPDATE_KEYWORD)||LA143_0==RESULT_KEYWORD||LA143_0==LPAREN||LA143_0==NOT_OPERATOR||LA143_0==210||(LA143_0>=214 && LA143_0<=215)) ) {
            	            alt143=1;
            	        }


            	        switch (alt143) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7948);
            	    	    executable_case_section432=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section432.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt143 >= 1 ) break loop143;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(143, input);
            	                throw eee;
            	        }
            	        cnt143++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ELSE_KEYWORD) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD433=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD433);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:39: ( executable_case_section )+
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==NUMBER_UNSIGNED||LA145_0==STRING||(LA145_0>=IDENTIFIER && LA145_0<=EXT_IDENTIFIER)||LA145_0==BEGIN_KEYWORD||LA145_0==DECLARE_KEYWORD||LA145_0==NULL_KEYWORD||(LA145_0>=TRUE_KEYWORD && LA145_0<=FALSE_KEYWORD)||LA145_0==INTERVAL_KEYWORD||LA145_0==REPLACE_KEYWORD||(LA145_0>=RETURN_KEYWORD && LA145_0<=IN_KEYWORD)||LA145_0==IF_KEYWORD||(LA145_0>=GOTO_KEYWORD && LA145_0<=FOR_KEYWORD)||LA145_0==SELECT_KEYWORD||(LA145_0>=RAISE_KEYWORD && LA145_0<=PRAGMA_KEYWORD)||(LA145_0>=CASE_KEYWORD && LA145_0<=CLOSE_KEYWORD)||LA145_0==COMMIT_KEYWORD||LA145_0==CONTINUE_KEYWORD||(LA145_0>=DELETE_KEYWORD && LA145_0<=EXECUTE_KEYWORD)||LA145_0==EXIT_KEYWORD||LA145_0==FETCH_KEYWORD||LA145_0==FORALL_KEYWORD||(LA145_0>=INSERT_KEYWORD && LA145_0<=OPEN_KEYWORD)||(LA145_0>=ROLLBACK_KEYWORD && LA145_0<=SAVEPOINT_KEYWORD)||LA145_0==SET_KEYWORD||(LA145_0>=SQLCODE_KEYWORD && LA145_0<=UPDATE_KEYWORD)||LA145_0==RESULT_KEYWORD||LA145_0==LPAREN||LA145_0==NOT_OPERATOR||LA145_0==210||(LA145_0>=214 && LA145_0<=215)) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7982);
                    	    executable_case_section434=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section434.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD435=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_simple_case_statement_expression8013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD435);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:38: ( CASE_KEYWORD )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==CASE_KEYWORD) ) {
                int LA147_1 = input.LA(2);

                if ( (synpred260_PL_SQL()) ) {
                    alt147=1;
                }
            }
            switch (alt147) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD436=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD436);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:52: ( identifier )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==IDENTIFIER||LA148_0==INTERVAL_KEYWORD||LA148_0==RESULT_KEYWORD) ) {
                int LA148_1 = input.LA(2);

                if ( (synpred261_PL_SQL()) ) {
                    alt148=1;
                }
            }
            switch (alt148) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_simple_case_statement_expression8018);
                    identifier437=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier437.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: executable_case_section, END_KEYWORD, CASE_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 764:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, simple_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement_expression"

    public static class searched_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:1: searched_case_statement_expression : CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression() throws RecognitionException {
        PL_SQLParser.searched_case_statement_expression_return retval = new PL_SQLParser.searched_case_statement_expression_return();
        retval.start = input.LT(1);
        int searched_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD438=null;
        Token WHEN_KEYWORD439=null;
        Token THEN_KEYWORD441=null;
        Token ELSE_KEYWORD443=null;
        Token END_KEYWORD445=null;
        Token CASE_KEYWORD446=null;
        PL_SQLParser.expression_return expression440 = null;

        PL_SQLParser.executable_case_section_return executable_case_section442 = null;

        PL_SQLParser.executable_case_section_return executable_case_section444 = null;

        PL_SQLParser.identifier_return identifier447 = null;


        CommonTree CASE_KEYWORD438_tree=null;
        CommonTree WHEN_KEYWORD439_tree=null;
        CommonTree THEN_KEYWORD441_tree=null;
        CommonTree ELSE_KEYWORD443_tree=null;
        CommonTree END_KEYWORD445_tree=null;
        CommonTree CASE_KEYWORD446_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:36: ( CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:38: CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD438=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD438);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==WHEN_KEYWORD) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD439=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression8093); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD439);

            	    pushFollow(FOLLOW_expression_in_searched_case_statement_expression8095);
            	    expression440=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression440.getTree());
            	    THEN_KEYWORD441=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression8097); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD441);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:63: ( executable_case_section )+
            	    int cnt149=0;
            	    loop149:
            	    do {
            	        int alt149=2;
            	        int LA149_0 = input.LA(1);

            	        if ( (LA149_0==NUMBER_UNSIGNED||LA149_0==STRING||(LA149_0>=IDENTIFIER && LA149_0<=EXT_IDENTIFIER)||LA149_0==BEGIN_KEYWORD||LA149_0==DECLARE_KEYWORD||LA149_0==NULL_KEYWORD||(LA149_0>=TRUE_KEYWORD && LA149_0<=FALSE_KEYWORD)||LA149_0==INTERVAL_KEYWORD||LA149_0==REPLACE_KEYWORD||(LA149_0>=RETURN_KEYWORD && LA149_0<=IN_KEYWORD)||LA149_0==IF_KEYWORD||(LA149_0>=GOTO_KEYWORD && LA149_0<=FOR_KEYWORD)||LA149_0==SELECT_KEYWORD||(LA149_0>=RAISE_KEYWORD && LA149_0<=PRAGMA_KEYWORD)||(LA149_0>=CASE_KEYWORD && LA149_0<=CLOSE_KEYWORD)||LA149_0==COMMIT_KEYWORD||LA149_0==CONTINUE_KEYWORD||(LA149_0>=DELETE_KEYWORD && LA149_0<=EXECUTE_KEYWORD)||LA149_0==EXIT_KEYWORD||LA149_0==FETCH_KEYWORD||LA149_0==FORALL_KEYWORD||(LA149_0>=INSERT_KEYWORD && LA149_0<=OPEN_KEYWORD)||(LA149_0>=ROLLBACK_KEYWORD && LA149_0<=SAVEPOINT_KEYWORD)||LA149_0==SET_KEYWORD||(LA149_0>=SQLCODE_KEYWORD && LA149_0<=UPDATE_KEYWORD)||LA149_0==RESULT_KEYWORD||LA149_0==LPAREN||LA149_0==NOT_OPERATOR||LA149_0==210||(LA149_0>=214 && LA149_0<=215)) ) {
            	            alt149=1;
            	        }


            	        switch (alt149) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression8100);
            	    	    executable_case_section442=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section442.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt149 >= 1 ) break loop149;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(149, input);
            	                throw eee;
            	        }
            	        cnt149++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ELSE_KEYWORD) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD443=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression8131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD443);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:39: ( executable_case_section )+
                    int cnt151=0;
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==NUMBER_UNSIGNED||LA151_0==STRING||(LA151_0>=IDENTIFIER && LA151_0<=EXT_IDENTIFIER)||LA151_0==BEGIN_KEYWORD||LA151_0==DECLARE_KEYWORD||LA151_0==NULL_KEYWORD||(LA151_0>=TRUE_KEYWORD && LA151_0<=FALSE_KEYWORD)||LA151_0==INTERVAL_KEYWORD||LA151_0==REPLACE_KEYWORD||(LA151_0>=RETURN_KEYWORD && LA151_0<=IN_KEYWORD)||LA151_0==IF_KEYWORD||(LA151_0>=GOTO_KEYWORD && LA151_0<=FOR_KEYWORD)||LA151_0==SELECT_KEYWORD||(LA151_0>=RAISE_KEYWORD && LA151_0<=PRAGMA_KEYWORD)||(LA151_0>=CASE_KEYWORD && LA151_0<=CLOSE_KEYWORD)||LA151_0==COMMIT_KEYWORD||LA151_0==CONTINUE_KEYWORD||(LA151_0>=DELETE_KEYWORD && LA151_0<=EXECUTE_KEYWORD)||LA151_0==EXIT_KEYWORD||LA151_0==FETCH_KEYWORD||LA151_0==FORALL_KEYWORD||(LA151_0>=INSERT_KEYWORD && LA151_0<=OPEN_KEYWORD)||(LA151_0>=ROLLBACK_KEYWORD && LA151_0<=SAVEPOINT_KEYWORD)||LA151_0==SET_KEYWORD||(LA151_0>=SQLCODE_KEYWORD && LA151_0<=UPDATE_KEYWORD)||LA151_0==RESULT_KEYWORD||LA151_0==LPAREN||LA151_0==NOT_OPERATOR||LA151_0==210||(LA151_0>=214 && LA151_0<=215)) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression8134);
                    	    executable_case_section444=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section444.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt151 >= 1 ) break loop151;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(151, input);
                                throw eee;
                        }
                        cnt151++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD445=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_searched_case_statement_expression8165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD445);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:38: ( CASE_KEYWORD )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==CASE_KEYWORD) ) {
                int LA153_2 = input.LA(2);

                if ( (synpred266_PL_SQL()) ) {
                    alt153=1;
                }
            }
            switch (alt153) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD446=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD446);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:52: ( identifier )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==IDENTIFIER||LA154_0==INTERVAL_KEYWORD||LA154_0==RESULT_KEYWORD) ) {
                int LA154_1 = input.LA(2);

                if ( (synpred267_PL_SQL()) ) {
                    alt154=1;
                }
            }
            switch (alt154) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_searched_case_statement_expression8170);
                    identifier447=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier447.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: END_KEYWORD, CASE_KEYWORD, executable_case_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 769:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, searched_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement_expression"

    public static class close_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:1: close_statement : CLOSE_KEYWORD universal_identifier ;
    public final PL_SQLParser.close_statement_return close_statement() throws RecognitionException {
        PL_SQLParser.close_statement_return retval = new PL_SQLParser.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLOSE_KEYWORD448=null;
        PL_SQLParser.universal_identifier_return universal_identifier449 = null;


        CommonTree CLOSE_KEYWORD448_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:17: ( CLOSE_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:19: CLOSE_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            CLOSE_KEYWORD448=(Token)match(input,CLOSE_KEYWORD,FOLLOW_CLOSE_KEYWORD_in_close_statement8242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_KEYWORD448_tree = (CommonTree)adaptor.create(CLOSE_KEYWORD448);
            adaptor.addChild(root_0, CLOSE_KEYWORD448_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_close_statement8244);
            universal_identifier449=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier449.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:1: continue_statement : CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.continue_statement_return continue_statement() throws RecognitionException {
        PL_SQLParser.continue_statement_return retval = new PL_SQLParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONTINUE_KEYWORD450=null;
        Token WHEN_KEYWORD452=null;
        PL_SQLParser.identifier_return identifier451 = null;

        PL_SQLParser.expression_return expression453 = null;


        CommonTree CONTINUE_KEYWORD450_tree=null;
        CommonTree WHEN_KEYWORD452_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:20: ( CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:22: CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CONTINUE_KEYWORD450=(Token)match(input,CONTINUE_KEYWORD,FOLLOW_CONTINUE_KEYWORD_in_continue_statement8251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE_KEYWORD450_tree = (CommonTree)adaptor.create(CONTINUE_KEYWORD450);
            adaptor.addChild(root_0, CONTINUE_KEYWORD450_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:39: ( identifier )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==IDENTIFIER||LA155_0==INTERVAL_KEYWORD||LA155_0==RESULT_KEYWORD) ) {
                int LA155_2 = input.LA(2);

                if ( (synpred268_PL_SQL()) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_continue_statement8253);
                    identifier451=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier451.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:51: ( WHEN_KEYWORD expression )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==WHEN_KEYWORD) ) {
                int LA156_2 = input.LA(2);

                if ( (synpred269_PL_SQL()) ) {
                    alt156=1;
                }
            }
            switch (alt156) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:52: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD452=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_continue_statement8257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD452_tree = (CommonTree)adaptor.create(WHEN_KEYWORD452);
                    adaptor.addChild(root_0, WHEN_KEYWORD452_tree);
                    }
                    pushFollow(FOLLOW_expression_in_continue_statement8259);
                    expression453=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression453.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, continue_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class execute_immediate_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_immediate_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:1: execute_immediate_statement : EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? ;
    public final PL_SQLParser.execute_immediate_statement_return execute_immediate_statement() throws RecognitionException {
        PL_SQLParser.execute_immediate_statement_return retval = new PL_SQLParser.execute_immediate_statement_return();
        retval.start = input.LT(1);
        int execute_immediate_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXECUTE_KEYWORD454=null;
        Token IMMEDIATE_KEYWORD455=null;
        Token set457=null;
        PL_SQLParser.expression_return expression456 = null;

        PL_SQLParser.into_clause_return into_clause458 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause459 = null;

        PL_SQLParser.using_clause_return using_clause460 = null;


        CommonTree EXECUTE_KEYWORD454_tree=null;
        CommonTree IMMEDIATE_KEYWORD455_tree=null;
        CommonTree set457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:29: ( EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:31: EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXECUTE_KEYWORD454=(Token)match(input,EXECUTE_KEYWORD,FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECUTE_KEYWORD454_tree = (CommonTree)adaptor.create(EXECUTE_KEYWORD454);
            adaptor.addChild(root_0, EXECUTE_KEYWORD454_tree);
            }
            IMMEDIATE_KEYWORD455=(Token)match(input,IMMEDIATE_KEYWORD,FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMMEDIATE_KEYWORD455_tree = (CommonTree)adaptor.create(IMMEDIATE_KEYWORD455);
            adaptor.addChild(root_0, IMMEDIATE_KEYWORD455_tree);
            }
            pushFollow(FOLLOW_expression_in_execute_immediate_statement8272);
            expression456=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:31: ( RETURN_KEYWORD | RETURNING_KEYWORD )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==RETURN_KEYWORD) ) {
                int LA157_2 = input.LA(2);

                if ( (true) ) {
                    alt157=1;
                }
            }
            else if ( (LA157_0==RETURNING_KEYWORD) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set457=(Token)input.LT(1);
                    if ( input.LA(1)==RETURN_KEYWORD||input.LA(1)==RETURNING_KEYWORD ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set457));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:31: ( into_clause | bulk_collect_into_clause )?
            int alt158=3;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==INTO_KEYWORD) ) {
                alt158=1;
            }
            else if ( (LA158_0==BULK_KEYWORD) ) {
                alt158=2;
            }
            switch (alt158) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:32: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate_statement8344);
                    into_clause458=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause458.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:46: bulk_collect_into_clause
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8348);
                    bulk_collect_into_clause459=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause459.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:775:31: ( using_clause )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==USING_KEYWORD) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate_statement8382);
                    using_clause460=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause460.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, execute_immediate_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "execute_immediate_statement"

    public static class into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:1: into_clause : INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.into_clause_return into_clause() throws RecognitionException {
        PL_SQLParser.into_clause_return retval = new PL_SQLParser.into_clause_return();
        retval.start = input.LT(1);
        int into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTO_KEYWORD461=null;
        Token char_literal463=null;
        PL_SQLParser.universal_identifier_return universal_identifier462 = null;

        PL_SQLParser.universal_identifier_return universal_identifier464 = null;


        CommonTree INTO_KEYWORD461_tree=null;
        CommonTree char_literal463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:13: ( INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:15: INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            INTO_KEYWORD461=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_into_clause8391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD461_tree = (CommonTree)adaptor.create(INTO_KEYWORD461);
            adaptor.addChild(root_0, INTO_KEYWORD461_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_into_clause8393);
            universal_identifier462=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier462.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:49: ( ',' universal_identifier )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==COMMA) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:50: ',' universal_identifier
            	    {
            	    char_literal463=(Token)match(input,COMMA,FOLLOW_COMMA_in_into_clause8396); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal463_tree = (CommonTree)adaptor.create(char_literal463);
            	    adaptor.addChild(root_0, char_literal463_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_into_clause8398);
            	    universal_identifier464=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier464.getTree());

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "into_clause"

    public static class bulk_collect_into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_collect_into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:1: bulk_collect_into_clause : BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause() throws RecognitionException {
        PL_SQLParser.bulk_collect_into_clause_return retval = new PL_SQLParser.bulk_collect_into_clause_return();
        retval.start = input.LT(1);
        int bulk_collect_into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BULK_KEYWORD465=null;
        Token COLLECT_KEYWORD466=null;
        Token INTO_KEYWORD467=null;
        Token char_literal469=null;
        PL_SQLParser.universal_identifier_return universal_identifier468 = null;

        PL_SQLParser.universal_identifier_return universal_identifier470 = null;


        CommonTree BULK_KEYWORD465_tree=null;
        CommonTree COLLECT_KEYWORD466_tree=null;
        CommonTree INTO_KEYWORD467_tree=null;
        CommonTree char_literal469_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:26: ( BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:28: BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            BULK_KEYWORD465=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BULK_KEYWORD465_tree = (CommonTree)adaptor.create(BULK_KEYWORD465);
            adaptor.addChild(root_0, BULK_KEYWORD465_tree);
            }
            COLLECT_KEYWORD466=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLLECT_KEYWORD466_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD466);
            adaptor.addChild(root_0, COLLECT_KEYWORD466_tree);
            }
            INTO_KEYWORD467=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD467_tree = (CommonTree)adaptor.create(INTO_KEYWORD467);
            adaptor.addChild(root_0, INTO_KEYWORD467_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8441);
            universal_identifier468=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier468.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:778:49: ( ',' universal_identifier )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:778:50: ',' universal_identifier
            	    {
            	    char_literal469=(Token)match(input,COMMA,FOLLOW_COMMA_in_bulk_collect_into_clause8444); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal469_tree = (CommonTree)adaptor.create(char_literal469);
            	    adaptor.addChild(root_0, char_literal469_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8446);
            	    universal_identifier470=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier470.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, bulk_collect_into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bulk_collect_into_clause"

    public static class using_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:1: using_clause : USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* ;
    public final PL_SQLParser.using_clause_return using_clause() throws RecognitionException {
        PL_SQLParser.using_clause_return retval = new PL_SQLParser.using_clause_return();
        retval.start = input.LT(1);
        int using_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token USING_KEYWORD471=null;
        Token IN_KEYWORD472=null;
        Token OUT_KEYWORD473=null;
        Token IN_KEYWORD474=null;
        Token OUT_KEYWORD475=null;
        Token char_literal477=null;
        Token IN_KEYWORD478=null;
        Token OUT_KEYWORD479=null;
        Token IN_KEYWORD480=null;
        Token OUT_KEYWORD481=null;
        PL_SQLParser.expression_return expression476 = null;

        PL_SQLParser.expression_return expression482 = null;


        CommonTree USING_KEYWORD471_tree=null;
        CommonTree IN_KEYWORD472_tree=null;
        CommonTree OUT_KEYWORD473_tree=null;
        CommonTree IN_KEYWORD474_tree=null;
        CommonTree OUT_KEYWORD475_tree=null;
        CommonTree char_literal477_tree=null;
        CommonTree IN_KEYWORD478_tree=null;
        CommonTree OUT_KEYWORD479_tree=null;
        CommonTree IN_KEYWORD480_tree=null;
        CommonTree OUT_KEYWORD481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:14: ( USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:16: USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            USING_KEYWORD471=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_using_clause8455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_KEYWORD471_tree = (CommonTree)adaptor.create(USING_KEYWORD471);
            adaptor.addChild(root_0, USING_KEYWORD471_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            int alt162=4;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==OUT_KEYWORD) ) {
                alt162=2;
            }
            else if ( (LA162_0==IN_KEYWORD) ) {
                int LA162_2 = input.LA(2);

                if ( (synpred277_PL_SQL()) ) {
                    alt162=1;
                }
                else if ( (synpred279_PL_SQL()) ) {
                    alt162=3;
                }
            }
            switch (alt162) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:31: IN_KEYWORD
                    {
                    IN_KEYWORD472=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD472_tree = (CommonTree)adaptor.create(IN_KEYWORD472);
                    adaptor.addChild(root_0, IN_KEYWORD472_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:44: OUT_KEYWORD
                    {
                    OUT_KEYWORD473=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD473_tree = (CommonTree)adaptor.create(OUT_KEYWORD473);
                    adaptor.addChild(root_0, OUT_KEYWORD473_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:58: ( IN_KEYWORD OUT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:58: ( IN_KEYWORD OUT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:59: IN_KEYWORD OUT_KEYWORD
                    {
                    IN_KEYWORD474=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD474_tree = (CommonTree)adaptor.create(IN_KEYWORD474);
                    adaptor.addChild(root_0, IN_KEYWORD474_tree);
                    }
                    OUT_KEYWORD475=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD475_tree = (CommonTree)adaptor.create(OUT_KEYWORD475);
                    adaptor.addChild(root_0, OUT_KEYWORD475_tree);
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_using_clause8474);
            expression476=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression476.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:16: ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:17: ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression
            	    {
            	    char_literal477=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause8492); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal477_tree = (CommonTree)adaptor.create(char_literal477);
            	    adaptor.addChild(root_0, char_literal477_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            	    int alt163=4;
            	    int LA163_0 = input.LA(1);

            	    if ( (LA163_0==OUT_KEYWORD) ) {
            	        alt163=2;
            	    }
            	    else if ( (LA163_0==IN_KEYWORD) ) {
            	        int LA163_2 = input.LA(2);

            	        if ( (synpred280_PL_SQL()) ) {
            	            alt163=1;
            	        }
            	        else if ( (synpred282_PL_SQL()) ) {
            	            alt163=3;
            	        }
            	    }
            	    switch (alt163) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:22: IN_KEYWORD
            	            {
            	            IN_KEYWORD478=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8495); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD478_tree = (CommonTree)adaptor.create(IN_KEYWORD478);
            	            adaptor.addChild(root_0, IN_KEYWORD478_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:35: OUT_KEYWORD
            	            {
            	            OUT_KEYWORD479=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8499); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD479_tree = (CommonTree)adaptor.create(OUT_KEYWORD479);
            	            adaptor.addChild(root_0, OUT_KEYWORD479_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:49: ( IN_KEYWORD OUT_KEYWORD )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:49: ( IN_KEYWORD OUT_KEYWORD )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:50: IN_KEYWORD OUT_KEYWORD
            	            {
            	            IN_KEYWORD480=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8504); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD480_tree = (CommonTree)adaptor.create(IN_KEYWORD480);
            	            adaptor.addChild(root_0, IN_KEYWORD480_tree);
            	            }
            	            OUT_KEYWORD481=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8506); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD481_tree = (CommonTree)adaptor.create(OUT_KEYWORD481);
            	            adaptor.addChild(root_0, OUT_KEYWORD481_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expression_in_using_clause8511);
            	    expression482=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, using_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class exit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:1: exit_statement : EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.exit_statement_return exit_statement() throws RecognitionException {
        PL_SQLParser.exit_statement_return retval = new PL_SQLParser.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXIT_KEYWORD483=null;
        Token WHEN_KEYWORD485=null;
        PL_SQLParser.identifier_return identifier484 = null;

        PL_SQLParser.expression_return expression486 = null;


        CommonTree EXIT_KEYWORD483_tree=null;
        CommonTree WHEN_KEYWORD485_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:16: ( EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:18: EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXIT_KEYWORD483=(Token)match(input,EXIT_KEYWORD,FOLLOW_EXIT_KEYWORD_in_exit_statement8520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT_KEYWORD483_tree = (CommonTree)adaptor.create(EXIT_KEYWORD483);
            adaptor.addChild(root_0, EXIT_KEYWORD483_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:31: ( identifier )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==IDENTIFIER||LA165_0==INTERVAL_KEYWORD||LA165_0==RESULT_KEYWORD) ) {
                int LA165_2 = input.LA(2);

                if ( (synpred284_PL_SQL()) ) {
                    alt165=1;
                }
            }
            switch (alt165) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_exit_statement8522);
                    identifier484=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier484.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:43: ( WHEN_KEYWORD expression )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==WHEN_KEYWORD) ) {
                int LA166_2 = input.LA(2);

                if ( (synpred285_PL_SQL()) ) {
                    alt166=1;
                }
            }
            switch (alt166) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:44: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD485=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exit_statement8526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD485_tree = (CommonTree)adaptor.create(WHEN_KEYWORD485);
                    adaptor.addChild(root_0, WHEN_KEYWORD485_tree);
                    }
                    pushFollow(FOLLOW_expression_in_exit_statement8528);
                    expression486=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression486.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:1: fetch_statement : FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) ;
    public final PL_SQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
        PL_SQLParser.fetch_statement_return retval = new PL_SQLParser.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FETCH_KEYWORD487=null;
        Token LIMIT_KEYWORD490=null;
        PL_SQLParser.expression_return expression488 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause489 = null;

        PL_SQLParser.expression_return expression491 = null;

        PL_SQLParser.into_clause_return into_clause492 = null;


        CommonTree FETCH_KEYWORD487_tree=null;
        CommonTree LIMIT_KEYWORD490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:17: ( FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:19: FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            {
            root_0 = (CommonTree)adaptor.nil();

            FETCH_KEYWORD487=(Token)match(input,FETCH_KEYWORD,FOLLOW_FETCH_KEYWORD_in_fetch_statement8537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FETCH_KEYWORD487_tree = (CommonTree)adaptor.create(FETCH_KEYWORD487);
            adaptor.addChild(root_0, FETCH_KEYWORD487_tree);
            }
            pushFollow(FOLLOW_expression_in_fetch_statement8539);
            expression488=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:19: ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==BULK_KEYWORD) ) {
                alt168=1;
            }
            else if ( (LA168_0==INTO_KEYWORD) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:21: bulk_collect_into_clause ( LIMIT_KEYWORD expression )?
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_fetch_statement8562);
                    bulk_collect_into_clause489=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause489.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:46: ( LIMIT_KEYWORD expression )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==LIMIT_KEYWORD) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:47: LIMIT_KEYWORD expression
                            {
                            LIMIT_KEYWORD490=(Token)match(input,LIMIT_KEYWORD,FOLLOW_LIMIT_KEYWORD_in_fetch_statement8565); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LIMIT_KEYWORD490_tree = (CommonTree)adaptor.create(LIMIT_KEYWORD490);
                            adaptor.addChild(root_0, LIMIT_KEYWORD490_tree);
                            }
                            pushFollow(FOLLOW_expression_in_fetch_statement8567);
                            expression491=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:78: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_fetch_statement8575);
                    into_clause492=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause492.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class forall_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:1: forall_statement : FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements ;
    public final PL_SQLParser.forall_statement_return forall_statement() throws RecognitionException {
        PL_SQLParser.forall_statement_return retval = new PL_SQLParser.forall_statement_return();
        retval.start = input.LT(1);
        int forall_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FORALL_KEYWORD493=null;
        Token IN_KEYWORD495=null;
        Token SAVE_KEYWORD497=null;
        Token EXCEPTIONS_KEYWORD498=null;
        PL_SQLParser.identifier_return identifier494 = null;

        PL_SQLParser.bounds_clause_return bounds_clause496 = null;

        PL_SQLParser.sql_statements_return sql_statements499 = null;


        CommonTree FORALL_KEYWORD493_tree=null;
        CommonTree IN_KEYWORD495_tree=null;
        CommonTree SAVE_KEYWORD497_tree=null;
        CommonTree EXCEPTIONS_KEYWORD498_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:18: ( FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:20: FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements
            {
            root_0 = (CommonTree)adaptor.nil();

            FORALL_KEYWORD493=(Token)match(input,FORALL_KEYWORD,FOLLOW_FORALL_KEYWORD_in_forall_statement8583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORALL_KEYWORD493_tree = (CommonTree)adaptor.create(FORALL_KEYWORD493);
            adaptor.addChild(root_0, FORALL_KEYWORD493_tree);
            }
            pushFollow(FOLLOW_identifier_in_forall_statement8585);
            identifier494=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier494.getTree());
            IN_KEYWORD495=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_forall_statement8587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD495_tree = (CommonTree)adaptor.create(IN_KEYWORD495);
            adaptor.addChild(root_0, IN_KEYWORD495_tree);
            }
            pushFollow(FOLLOW_bounds_clause_in_forall_statement8589);
            bounds_clause496=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bounds_clause496.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:20: ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==SAVE_KEYWORD) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:21: SAVE_KEYWORD EXCEPTIONS_KEYWORD
                    {
                    SAVE_KEYWORD497=(Token)match(input,SAVE_KEYWORD,FOLLOW_SAVE_KEYWORD_in_forall_statement8611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAVE_KEYWORD497_tree = (CommonTree)adaptor.create(SAVE_KEYWORD497);
                    adaptor.addChild(root_0, SAVE_KEYWORD497_tree);
                    }
                    EXCEPTIONS_KEYWORD498=(Token)match(input,EXCEPTIONS_KEYWORD,FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTIONS_KEYWORD498_tree = (CommonTree)adaptor.create(EXCEPTIONS_KEYWORD498);
                    adaptor.addChild(root_0, EXCEPTIONS_KEYWORD498_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_statements_in_forall_statement8617);
            sql_statements499=sql_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements499.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, forall_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forall_statement"

    public static class bounds_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bounds_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:1: bounds_clause : ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) );
    public final PL_SQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
        PL_SQLParser.bounds_clause_return retval = new PL_SQLParser.bounds_clause_return();
        retval.start = input.LT(1);
        int bounds_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal501=null;
        Token INDICES_KEYWORD503=null;
        Token OF_KEYWORD504=null;
        Token BETWEEN_KEYWORD506=null;
        Token AND_OPERATOR508=null;
        Token VALUES_KEYWORD510=null;
        Token OF_KEYWORD511=null;
        PL_SQLParser.expression_return expression500 = null;

        PL_SQLParser.expression_return expression502 = null;

        PL_SQLParser.universal_identifier_return universal_identifier505 = null;

        PL_SQLParser.expression_return expression507 = null;

        PL_SQLParser.expression_return expression509 = null;

        PL_SQLParser.universal_identifier_return universal_identifier512 = null;


        CommonTree string_literal501_tree=null;
        CommonTree INDICES_KEYWORD503_tree=null;
        CommonTree OF_KEYWORD504_tree=null;
        CommonTree BETWEEN_KEYWORD506_tree=null;
        CommonTree AND_OPERATOR508_tree=null;
        CommonTree VALUES_KEYWORD510_tree=null;
        CommonTree OF_KEYWORD511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:15: ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) )
            int alt171=3;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case LPAREN:
            case NOT_OPERATOR:
            case 214:
            case 215:
                {
                alt171=1;
                }
                break;
            case INDICES_KEYWORD:
                {
                alt171=2;
                }
                break;
            case VALUES_KEYWORD:
                {
                alt171=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:17: ( expression '..' expression )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:17: ( expression '..' expression )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:18: expression '..' expression
                    {
                    pushFollow(FOLLOW_expression_in_bounds_clause8625);
                    expression500=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression500.getTree());
                    string_literal501=(Token)match(input,229,FOLLOW_229_in_bounds_clause8627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal501_tree = (CommonTree)adaptor.create(string_literal501);
                    adaptor.addChild(root_0, string_literal501_tree);
                    }
                    pushFollow(FOLLOW_expression_in_bounds_clause8629);
                    expression502=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression502.getTree());

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:18: INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    {
                    INDICES_KEYWORD503=(Token)match(input,INDICES_KEYWORD,FOLLOW_INDICES_KEYWORD_in_bounds_clause8651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDICES_KEYWORD503_tree = (CommonTree)adaptor.create(INDICES_KEYWORD503);
                    adaptor.addChild(root_0, INDICES_KEYWORD503_tree);
                    }
                    OF_KEYWORD504=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8653); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD504_tree = (CommonTree)adaptor.create(OF_KEYWORD504);
                    adaptor.addChild(root_0, OF_KEYWORD504_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8655);
                    universal_identifier505=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier505.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:17: ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==BETWEEN_KEYWORD) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:18: BETWEEN_KEYWORD expression AND_OPERATOR expression
                            {
                            BETWEEN_KEYWORD506=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8675); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BETWEEN_KEYWORD506_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD506);
                            adaptor.addChild(root_0, BETWEEN_KEYWORD506_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8677);
                            expression507=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                            AND_OPERATOR508=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_bounds_clause8679); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_OPERATOR508_tree = (CommonTree)adaptor.create(AND_OPERATOR508);
                            adaptor.addChild(root_0, AND_OPERATOR508_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8681);
                            expression509=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression509.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:18: VALUES_KEYWORD OF_KEYWORD universal_identifier
                    {
                    VALUES_KEYWORD510=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_bounds_clause8706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD510_tree = (CommonTree)adaptor.create(VALUES_KEYWORD510);
                    adaptor.addChild(root_0, VALUES_KEYWORD510_tree);
                    }
                    OF_KEYWORD511=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD511_tree = (CommonTree)adaptor.create(OF_KEYWORD511);
                    adaptor.addChild(root_0, OF_KEYWORD511_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8710);
                    universal_identifier512=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier512.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, bounds_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"

    public static class pragma_inline_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_inline_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:1: pragma_inline_statement : PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' ;
    public final PL_SQLParser.pragma_inline_statement_return pragma_inline_statement() throws RecognitionException {
        PL_SQLParser.pragma_inline_statement_return retval = new PL_SQLParser.pragma_inline_statement_return();
        retval.start = input.LT(1);
        int pragma_inline_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD513=null;
        Token INLINE_KEYWORD514=null;
        Token char_literal515=null;
        Token STRING516=null;
        Token char_literal517=null;
        Token STRING518=null;
        Token char_literal519=null;

        CommonTree PRAGMA_KEYWORD513_tree=null;
        CommonTree INLINE_KEYWORD514_tree=null;
        CommonTree char_literal515_tree=null;
        CommonTree STRING516_tree=null;
        CommonTree char_literal517_tree=null;
        CommonTree STRING518_tree=null;
        CommonTree char_literal519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:25: ( PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:27: PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD513=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD513_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD513);
            adaptor.addChild(root_0, PRAGMA_KEYWORD513_tree);
            }
            INLINE_KEYWORD514=(Token)match(input,INLINE_KEYWORD,FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INLINE_KEYWORD514_tree = (CommonTree)adaptor.create(INLINE_KEYWORD514);
            adaptor.addChild(root_0, INLINE_KEYWORD514_tree);
            }
            char_literal515=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_inline_statement8749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal515_tree = (CommonTree)adaptor.create(char_literal515);
            adaptor.addChild(root_0, char_literal515_tree);
            }
            STRING516=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING516_tree = (CommonTree)adaptor.create(STRING516);
            adaptor.addChild(root_0, STRING516_tree);
            }
            char_literal517=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_inline_statement8753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal517_tree = (CommonTree)adaptor.create(char_literal517);
            adaptor.addChild(root_0, char_literal517_tree);
            }
            STRING518=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING518_tree = (CommonTree)adaptor.create(STRING518);
            adaptor.addChild(root_0, STRING518_tree);
            }
            char_literal519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_inline_statement8757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal519_tree = (CommonTree)adaptor.create(char_literal519);
            adaptor.addChild(root_0, char_literal519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, pragma_inline_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_inline_statement"

    public static class open_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:1: open_statement : OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? ;
    public final PL_SQLParser.open_statement_return open_statement() throws RecognitionException {
        PL_SQLParser.open_statement_return retval = new PL_SQLParser.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OPEN_KEYWORD520=null;
        Token FOR_KEYWORD523=null;
        Token STRING525=null;
        PL_SQLParser.universal_identifier_return universal_identifier521 = null;

        PL_SQLParser.open_params_return open_params522 = null;

        PL_SQLParser.select_statement_return select_statement524 = null;

        PL_SQLParser.universal_identifier_return universal_identifier526 = null;

        PL_SQLParser.using_clause_return using_clause527 = null;


        CommonTree OPEN_KEYWORD520_tree=null;
        CommonTree FOR_KEYWORD523_tree=null;
        CommonTree STRING525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:16: ( OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:18: OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            OPEN_KEYWORD520=(Token)match(input,OPEN_KEYWORD,FOLLOW_OPEN_KEYWORD_in_open_statement8764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_KEYWORD520_tree = (CommonTree)adaptor.create(OPEN_KEYWORD520);
            adaptor.addChild(root_0, OPEN_KEYWORD520_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_open_statement8766);
            universal_identifier521=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier521.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:52: ( open_params )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==LPAREN) ) {
                int LA172_1 = input.LA(2);

                if ( (synpred292_PL_SQL()) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: open_params
                    {
                    pushFollow(FOLLOW_open_params_in_open_statement8768);
                    open_params522=open_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_params522.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==FOR_KEYWORD) ) {
                int LA175_1 = input.LA(2);

                if ( (synpred296_PL_SQL()) ) {
                    alt175=1;
                }
            }
            switch (alt175) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
                    {
                    FOR_KEYWORD523=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_open_statement8789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD523_tree = (CommonTree)adaptor.create(FOR_KEYWORD523);
                    adaptor.addChild(root_0, FOR_KEYWORD523_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:31: ( select_statement | STRING | universal_identifier )
                    int alt173=3;
                    switch ( input.LA(1) ) {
                    case SELECT_KEYWORD:
                        {
                        alt173=1;
                        }
                        break;
                    case STRING:
                        {
                        alt173=2;
                        }
                        break;
                    case IDENTIFIER:
                    case EXT_IDENTIFIER:
                    case INTERVAL_KEYWORD:
                    case RESULT_KEYWORD:
                        {
                        alt173=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 173, 0, input);

                        throw nvae;
                    }

                    switch (alt173) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:32: select_statement
                            {
                            pushFollow(FOLLOW_select_statement_in_open_statement8792);
                            select_statement524=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement524.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:51: STRING
                            {
                            STRING525=(Token)match(input,STRING,FOLLOW_STRING_in_open_statement8796); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STRING525_tree = (CommonTree)adaptor.create(STRING525);
                            adaptor.addChild(root_0, STRING525_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:60: universal_identifier
                            {
                            pushFollow(FOLLOW_universal_identifier_in_open_statement8800);
                            universal_identifier526=universal_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier526.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:82: ( using_clause )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==USING_KEYWORD) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_open_statement8803);
                            using_clause527=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause527.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class open_params_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_params"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:1: open_params : '(' expression ( ',' expression )* ')' ;
    public final PL_SQLParser.open_params_return open_params() throws RecognitionException {
        PL_SQLParser.open_params_return retval = new PL_SQLParser.open_params_return();
        retval.start = input.LT(1);
        int open_params_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal528=null;
        Token char_literal530=null;
        Token char_literal532=null;
        PL_SQLParser.expression_return expression529 = null;

        PL_SQLParser.expression_return expression531 = null;


        CommonTree char_literal528_tree=null;
        CommonTree char_literal530_tree=null;
        CommonTree char_literal532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:13: ( '(' expression ( ',' expression )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:15: '(' expression ( ',' expression )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal528=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_open_params8813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal528_tree = (CommonTree)adaptor.create(char_literal528);
            adaptor.addChild(root_0, char_literal528_tree);
            }
            pushFollow(FOLLOW_expression_in_open_params8815);
            expression529=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression529.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:30: ( ',' expression )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==COMMA) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:31: ',' expression
            	    {
            	    char_literal530=(Token)match(input,COMMA,FOLLOW_COMMA_in_open_params8818); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal530_tree = (CommonTree)adaptor.create(char_literal530);
            	    adaptor.addChild(root_0, char_literal530_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_open_params8820);
            	    expression531=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression531.getTree());

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);

            char_literal532=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_open_params8824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal532_tree = (CommonTree)adaptor.create(char_literal532);
            adaptor.addChild(root_0, char_literal532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, open_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_params"

    public static class sqlcode_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcode_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:1: sqlcode_function : SQLCODE_KEYWORD ;
    public final PL_SQLParser.sqlcode_function_return sqlcode_function() throws RecognitionException {
        PL_SQLParser.sqlcode_function_return retval = new PL_SQLParser.sqlcode_function_return();
        retval.start = input.LT(1);
        int sqlcode_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLCODE_KEYWORD533=null;

        CommonTree SQLCODE_KEYWORD533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:18: ( SQLCODE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:20: SQLCODE_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLCODE_KEYWORD533=(Token)match(input,SQLCODE_KEYWORD,FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLCODE_KEYWORD533_tree = (CommonTree)adaptor.create(SQLCODE_KEYWORD533);
            adaptor.addChild(root_0, SQLCODE_KEYWORD533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, sqlcode_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlcode_function"

    public static class sqlerrm_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerrm_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:1: sqlerrm_function : SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.sqlerrm_function_return sqlerrm_function() throws RecognitionException {
        PL_SQLParser.sqlerrm_function_return retval = new PL_SQLParser.sqlerrm_function_return();
        retval.start = input.LT(1);
        int sqlerrm_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLERRM_KEYWORD534=null;
        Token char_literal535=null;
        Token set536=null;
        Token NUMBER_UNSIGNED537=null;
        Token char_literal538=null;

        CommonTree SQLERRM_KEYWORD534_tree=null;
        CommonTree char_literal535_tree=null;
        CommonTree set536_tree=null;
        CommonTree NUMBER_UNSIGNED537_tree=null;
        CommonTree char_literal538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:18: ( SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:20: SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLERRM_KEYWORD534=(Token)match(input,SQLERRM_KEYWORD,FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLERRM_KEYWORD534_tree = (CommonTree)adaptor.create(SQLERRM_KEYWORD534);
            adaptor.addChild(root_0, SQLERRM_KEYWORD534_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:36: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==LPAREN) ) {
                int LA178_1 = input.LA(2);

                if ( (synpred300_PL_SQL()) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal535=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlerrm_function8841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal535_tree = (CommonTree)adaptor.create(char_literal535);
                    adaptor.addChild(root_0, char_literal535_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:41: ( '+' | '-' )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( ((LA177_0>=214 && LA177_0<=215)) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set536=(Token)input.LT(1);
                            if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set536));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER_UNSIGNED537=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED537_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED537);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED537_tree);
                    }
                    char_literal538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlerrm_function8852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal538_tree = (CommonTree)adaptor.create(char_literal538);
                    adaptor.addChild(root_0, char_literal538_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, sqlerrm_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlerrm_function"

    public static class anonymous_block_declare_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block_declare_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:1: anonymous_block_declare_section : DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* ;
    public final PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section() throws RecognitionException {
        PL_SQLParser.anonymous_block_declare_section_return retval = new PL_SQLParser.anonymous_block_declare_section_return();
        retval.start = input.LT(1);
        int anonymous_block_declare_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DECLARE_KEYWORD539=null;
        PL_SQLParser.variable_declaration_return variable_declaration540 = null;

        PL_SQLParser.function_declaration_return function_declaration541 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration542 = null;


        CommonTree DECLARE_KEYWORD539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:33: ( DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:35: DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE_KEYWORD539=(Token)match(input,DECLARE_KEYWORD,FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE_KEYWORD539_tree = (CommonTree)adaptor.create(DECLARE_KEYWORD539);
            adaptor.addChild(root_0, DECLARE_KEYWORD539_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:35: ( variable_declaration )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==IDENTIFIER||LA179_0==TYPE_KEYWORD||LA179_0==INTERVAL_KEYWORD||LA179_0==SUBTYPE_KEYWORD||LA179_0==PRAGMA_KEYWORD||LA179_0==CURSOR_KEYWORD||LA179_0==RESULT_KEYWORD) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:36: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_anonymous_block_declare_section8899);
            	    variable_declaration540=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration540.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:35: ( function_declaration | procedure_declaration )*
            loop180:
            do {
                int alt180=3;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==FUNCTION_KEYWORD) ) {
                    alt180=1;
                }
                else if ( (LA180_0==PROCEDURE_KEYWORD) ) {
                    alt180=2;
                }


                switch (alt180) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:36: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_anonymous_block_declare_section8939);
            	    function_declaration541=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration541.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:59: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_anonymous_block_declare_section8943);
            	    procedure_declaration542=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration542.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, anonymous_block_declare_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block_declare_section"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:1: variable_declaration : ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR ;
    public final PL_SQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
        PL_SQLParser.variable_declaration_return retval = new PL_SQLParser.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONSTANT_KEYWORD547=null;
        Token EXCEPTION_KEYWORD553=null;
        Token PRAGMA_KEYWORD554=null;
        Token AUTONOMOUS_TRANSACTION_KEYWORD555=null;
        Token SERIALLY_REUSABLE_KEYWORD556=null;
        Token EXCEPTION_INIT_KEYWORD557=null;
        Token char_literal558=null;
        Token char_literal560=null;
        Token char_literal562=null;
        Token RESTRICT_REFERENCES_KEYWORD563=null;
        Token char_literal564=null;
        Token char_literal566=null;
        Token char_literal568=null;
        Token SEPARATOR570=null;
        PL_SQLParser.identifier_return identifier543 = null;

        PL_SQLParser.data_type_return data_type544 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part545 = null;

        PL_SQLParser.identifier_return identifier546 = null;

        PL_SQLParser.data_type_return data_type548 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part549 = null;

        PL_SQLParser.subtype_datatype_return subtype_datatype550 = null;

        PL_SQLParser.record_collection_datatype_return record_collection_datatype551 = null;

        PL_SQLParser.identifier_return identifier552 = null;

        PL_SQLParser.expression_return expression559 = null;

        PL_SQLParser.expression_return expression561 = null;

        PL_SQLParser.expression_return expression565 = null;

        PL_SQLParser.expression_return expression567 = null;

        PL_SQLParser.cursor_datatype_return cursor_datatype569 = null;


        CommonTree CONSTANT_KEYWORD547_tree=null;
        CommonTree EXCEPTION_KEYWORD553_tree=null;
        CommonTree PRAGMA_KEYWORD554_tree=null;
        CommonTree AUTONOMOUS_TRANSACTION_KEYWORD555_tree=null;
        CommonTree SERIALLY_REUSABLE_KEYWORD556_tree=null;
        CommonTree EXCEPTION_INIT_KEYWORD557_tree=null;
        CommonTree char_literal558_tree=null;
        CommonTree char_literal560_tree=null;
        CommonTree char_literal562_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD563_tree=null;
        CommonTree char_literal564_tree=null;
        CommonTree char_literal566_tree=null;
        CommonTree char_literal568_tree=null;
        CommonTree SEPARATOR570_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:22: ( ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype )
            int alt184=7;
            switch ( input.LA(1) ) {
            case SUBTYPE_KEYWORD:
                {
                alt184=3;
                }
                break;
            case IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                int LA184_2 = input.LA(2);

                if ( (synpred305_PL_SQL()) ) {
                    alt184=1;
                }
                else if ( (synpred306_PL_SQL()) ) {
                    alt184=2;
                }
                else if ( (synpred309_PL_SQL()) ) {
                    alt184=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 184, 2, input);

                    throw nvae;
                }
                }
                break;
            case TYPE_KEYWORD:
                {
                alt184=4;
                }
                break;
            case CURSOR_KEYWORD:
                {
                alt184=7;
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt184=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:25: ( identifier data_type ( variable_declaration_part )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:25: ( identifier data_type ( variable_declaration_part )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:26: identifier data_type ( variable_declaration_part )?
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8954);
                    identifier543=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier543.getTree());
                    pushFollow(FOLLOW_data_type_in_variable_declaration8956);
                    data_type544=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type544.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:24: ( variable_declaration_part )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==DEFAULT_KEYWORD||LA181_0==NOT_OPERATOR||LA181_0==230) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                            {
                            pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8982);
                            variable_declaration_part545=variable_declaration_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part545.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration9000);
                    identifier546=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier546.getTree());
                    CONSTANT_KEYWORD547=(Token)match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_variable_declaration9002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT_KEYWORD547_tree = (CommonTree)adaptor.create(CONSTANT_KEYWORD547);
                    adaptor.addChild(root_0, CONSTANT_KEYWORD547_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_variable_declaration9004);
                    data_type548=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type548.getTree());
                    pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration9030);
                    variable_declaration_part549=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part549.getTree());

                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:11: subtype_datatype
                    {
                    pushFollow(FOLLOW_subtype_datatype_in_variable_declaration9043);
                    subtype_datatype550=subtype_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_datatype550.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:11: record_collection_datatype
                    {
                    pushFollow(FOLLOW_record_collection_datatype_in_variable_declaration9055);
                    record_collection_datatype551=record_collection_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_collection_datatype551.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:11: ( identifier EXCEPTION_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:11: ( identifier EXCEPTION_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:12: identifier EXCEPTION_KEYWORD
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration9068);
                    identifier552=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier552.getTree());
                    EXCEPTION_KEYWORD553=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration9070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTION_KEYWORD553_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD553);
                    adaptor.addChild(root_0, EXCEPTION_KEYWORD553_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:10: PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    {
                    PRAGMA_KEYWORD554=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_variable_declaration9093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRAGMA_KEYWORD554_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD554);
                    adaptor.addChild(root_0, PRAGMA_KEYWORD554_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:25: ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    int alt183=4;
                    switch ( input.LA(1) ) {
                    case AUTONOMOUS_TRANSACTION_KEYWORD:
                        {
                        alt183=1;
                        }
                        break;
                    case SERIALLY_REUSABLE_KEYWORD:
                        {
                        alt183=2;
                        }
                        break;
                    case EXCEPTION_INIT_KEYWORD:
                        {
                        alt183=3;
                        }
                        break;
                    case RESTRICT_REFERENCES_KEYWORD:
                        {
                        alt183=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);

                        throw nvae;
                    }

                    switch (alt183) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:26: AUTONOMOUS_TRANSACTION_KEYWORD
                            {
                            AUTONOMOUS_TRANSACTION_KEYWORD555=(Token)match(input,AUTONOMOUS_TRANSACTION_KEYWORD,FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration9096); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AUTONOMOUS_TRANSACTION_KEYWORD555_tree = (CommonTree)adaptor.create(AUTONOMOUS_TRANSACTION_KEYWORD555);
                            adaptor.addChild(root_0, AUTONOMOUS_TRANSACTION_KEYWORD555_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:59: SERIALLY_REUSABLE_KEYWORD
                            {
                            SERIALLY_REUSABLE_KEYWORD556=(Token)match(input,SERIALLY_REUSABLE_KEYWORD,FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration9100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SERIALLY_REUSABLE_KEYWORD556_tree = (CommonTree)adaptor.create(SERIALLY_REUSABLE_KEYWORD556);
                            adaptor.addChild(root_0, SERIALLY_REUSABLE_KEYWORD556_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:8: EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')'
                            {
                            EXCEPTION_INIT_KEYWORD557=(Token)match(input,EXCEPTION_INIT_KEYWORD,FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration9111); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXCEPTION_INIT_KEYWORD557_tree = (CommonTree)adaptor.create(EXCEPTION_INIT_KEYWORD557);
                            adaptor.addChild(root_0, EXCEPTION_INIT_KEYWORD557_tree);
                            }
                            char_literal558=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_variable_declaration9113); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal558_tree = (CommonTree)adaptor.create(char_literal558);
                            adaptor.addChild(root_0, char_literal558_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9115);
                            expression559=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression559.getTree());
                            char_literal560=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration9117); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal560_tree = (CommonTree)adaptor.create(char_literal560);
                            adaptor.addChild(root_0, char_literal560_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9119);
                            expression561=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression561.getTree());
                            char_literal562=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_variable_declaration9121); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal562_tree = (CommonTree)adaptor.create(char_literal562);
                            adaptor.addChild(root_0, char_literal562_tree);
                            }

                            }


                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:8: RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
                            {
                            RESTRICT_REFERENCES_KEYWORD563=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration9133); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RESTRICT_REFERENCES_KEYWORD563_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD563);
                            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD563_tree);
                            }
                            char_literal564=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_variable_declaration9135); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal564_tree = (CommonTree)adaptor.create(char_literal564);
                            adaptor.addChild(root_0, char_literal564_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9137);
                            expression565=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression565.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:51: ( ',' expression )+
                            int cnt182=0;
                            loop182:
                            do {
                                int alt182=2;
                                int LA182_0 = input.LA(1);

                                if ( (LA182_0==COMMA) ) {
                                    alt182=1;
                                }


                                switch (alt182) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:52: ',' expression
                            	    {
                            	    char_literal566=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration9140); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal566_tree = (CommonTree)adaptor.create(char_literal566);
                            	    adaptor.addChild(root_0, char_literal566_tree);
                            	    }
                            	    pushFollow(FOLLOW_expression_in_variable_declaration9142);
                            	    expression567=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression567.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt182 >= 1 ) break loop182;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(182, input);
                                        throw eee;
                                }
                                cnt182++;
                            } while (true);

                            char_literal568=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_variable_declaration9146); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal568_tree = (CommonTree)adaptor.create(char_literal568);
                            adaptor.addChild(root_0, char_literal568_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:812:11: cursor_datatype
                    {
                    pushFollow(FOLLOW_cursor_datatype_in_variable_declaration9163);
                    cursor_datatype569=cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_datatype569.getTree());

                    }
                    break;

            }

            SEPARATOR570=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_variable_declaration9174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR570_tree = (CommonTree)adaptor.create(SEPARATOR570);
            adaptor.addChild(root_0, SEPARATOR570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class variable_declaration_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:1: variable_declaration_part : ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression ;
    public final PL_SQLParser.variable_declaration_part_return variable_declaration_part() throws RecognitionException {
        PL_SQLParser.variable_declaration_part_return retval = new PL_SQLParser.variable_declaration_part_return();
        retval.start = input.LT(1);
        int variable_declaration_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR571=null;
        Token NULL_KEYWORD572=null;
        PL_SQLParser.variable_def_part_return variable_def_part573 = null;

        PL_SQLParser.expression_return expression574 = null;


        CommonTree NOT_OPERATOR571_tree=null;
        CommonTree NULL_KEYWORD572_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:27: ( ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:29: ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:29: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==NOT_OPERATOR) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:30: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR571=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_variable_declaration_part9182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR571_tree = (CommonTree)adaptor.create(NOT_OPERATOR571);
                    adaptor.addChild(root_0, NOT_OPERATOR571_tree);
                    }
                    NULL_KEYWORD572=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_variable_declaration_part9184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD572_tree = (CommonTree)adaptor.create(NULL_KEYWORD572);
                    adaptor.addChild(root_0, NULL_KEYWORD572_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_variable_def_part_in_variable_declaration_part9188);
            variable_def_part573=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part573.getTree());
            pushFollow(FOLLOW_expression_in_variable_declaration_part9190);
            expression574=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression574.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, variable_declaration_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_part"

    public static class variable_def_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_def_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:1: variable_def_part : ( ':=' | DEFAULT_KEYWORD );
    public final PL_SQLParser.variable_def_part_return variable_def_part() throws RecognitionException {
        PL_SQLParser.variable_def_part_return retval = new PL_SQLParser.variable_def_part_return();
        retval.start = input.LT(1);
        int variable_def_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set575=null;

        CommonTree set575_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:19: ( ':=' | DEFAULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set575=(Token)input.LT(1);
            if ( input.LA(1)==DEFAULT_KEYWORD||input.LA(1)==230 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set575));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, variable_def_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_def_part"

    public static class data_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );
    public final PL_SQLParser.data_type_return data_type() throws RecognitionException {
        PL_SQLParser.data_type_return retval = new PL_SQLParser.data_type_return();
        retval.start = input.LT(1);
        int data_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SOME_TYPES576=null;
        Token REF_KEYWORD584=null;
        PL_SQLParser.scale_types_return scale_types577 = null;

        PL_SQLParser.size_types_return size_types578 = null;

        PL_SQLParser.char_types_return char_types579 = null;

        PL_SQLParser.raw_type_return raw_type580 = null;

        PL_SQLParser.timestamp_types_return timestamp_types581 = null;

        PL_SQLParser.interval_year_type_return interval_year_type582 = null;

        PL_SQLParser.interval_day_type_return interval_day_type583 = null;

        PL_SQLParser.universal_identifier_return universal_identifier585 = null;

        PL_SQLParser.special_datatype_return special_datatype586 = null;


        CommonTree SOME_TYPES576_tree=null;
        CommonTree REF_KEYWORD584_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:11: ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype )
            int alt187=10;
            alt187 = dfa187.predict(input);
            switch (alt187) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:13: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES576=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_data_type9208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES576_tree = (CommonTree)adaptor.create(SOME_TYPES576);
                    adaptor.addChild(root_0, SOME_TYPES576_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:26: scale_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_scale_types_in_data_type9212);
                    scale_types577=scale_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scale_types577.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:40: size_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_size_types_in_data_type9216);
                    size_types578=size_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, size_types578.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:53: char_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_char_types_in_data_type9220);
                    char_types579=char_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_types579.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:66: raw_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raw_type_in_data_type9224);
                    raw_type580=raw_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raw_type580.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:13: timestamp_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timestamp_types_in_data_type9240);
                    timestamp_types581=timestamp_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_types581.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:31: interval_year_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_year_type_in_data_type9244);
                    interval_year_type582=interval_year_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_year_type582.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:52: interval_day_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_day_type_in_data_type9248);
                    interval_day_type583=interval_day_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_day_type583.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:13: ( ( REF_KEYWORD )? universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:13: ( ( REF_KEYWORD )? universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:14: ( REF_KEYWORD )? universal_identifier
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:14: ( REF_KEYWORD )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==REF_KEYWORD) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                            {
                            REF_KEYWORD584=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_data_type9266); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            REF_KEYWORD584_tree = (CommonTree)adaptor.create(REF_KEYWORD584);
                            adaptor.addChild(root_0, REF_KEYWORD584_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_universal_identifier_in_data_type9269);
                    universal_identifier585=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier585.getTree());

                    }


                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:50: special_datatype
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_special_datatype_in_data_type9273);
                    special_datatype586=special_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, special_datatype586.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, data_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class char_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:1: char_types : ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? ;
    public final PL_SQLParser.char_types_return char_types() throws RecognitionException {
        PL_SQLParser.char_types_return retval = new PL_SQLParser.char_types_return();
        retval.start = input.LT(1);
        int char_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set587=null;
        Token char_literal588=null;
        Token char_literal589=null;
        Token NUMBER_UNSIGNED590=null;
        Token set591=null;
        Token char_literal592=null;

        CommonTree set587_tree=null;
        CommonTree char_literal588_tree=null;
        CommonTree char_literal589_tree=null;
        CommonTree NUMBER_UNSIGNED590_tree=null;
        CommonTree set591_tree=null;
        CommonTree char_literal592_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:12: ( ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:14: ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            set587=(Token)input.LT(1);
            if ( (input.LA(1)>=CHAR_TYPES && input.LA(1)<=CHAR_TYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set587));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:39: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==LPAREN) ) {
                int LA190_1 = input.LA(2);

                if ( (synpred331_PL_SQL()) ) {
                    alt190=1;
                }
            }
            switch (alt190) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
                    {
                    char_literal588=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_char_types9289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal588_tree = (CommonTree)adaptor.create(char_literal588);
                    adaptor.addChild(root_0, char_literal588_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:44: ( '+' )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==214) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal589=(Token)match(input,214,FOLLOW_214_in_char_types9291); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal589_tree = (CommonTree)adaptor.create(char_literal589);
                            adaptor.addChild(root_0, char_literal589_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED590=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_char_types9294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED590_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED590);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED590_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:65: ( CHAR_TYPE | BYTE_TYPE )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( ((LA189_0>=CHAR_TYPE && LA189_0<=BYTE_TYPE)) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set591=(Token)input.LT(1);
                            if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set591));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    char_literal592=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_char_types9305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal592_tree = (CommonTree)adaptor.create(char_literal592);
                    adaptor.addChild(root_0, char_literal592_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, char_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_types"

    public static class timestamp_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:1: timestamp_types : timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? ;
    public final PL_SQLParser.timestamp_types_return timestamp_types() throws RecognitionException {
        PL_SQLParser.timestamp_types_return retval = new PL_SQLParser.timestamp_types_return();
        retval.start = input.LT(1);
        int timestamp_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WITH_KEYWORD594=null;
        Token LOCAL_KEYWORD595=null;
        Token TIME_KEYWORD596=null;
        Token ZONE_KEYWORD597=null;
        PL_SQLParser.timestamp_type_return timestamp_type593 = null;


        CommonTree WITH_KEYWORD594_tree=null;
        CommonTree LOCAL_KEYWORD595_tree=null;
        CommonTree TIME_KEYWORD596_tree=null;
        CommonTree ZONE_KEYWORD597_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:17: ( timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:19: timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestamp_type_in_timestamp_types9314);
            timestamp_type593=timestamp_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_type593.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:34: ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==WITH_KEYWORD) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:35: WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD
                    {
                    WITH_KEYWORD594=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_timestamp_types9317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD594_tree = (CommonTree)adaptor.create(WITH_KEYWORD594);
                    adaptor.addChild(root_0, WITH_KEYWORD594_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:48: ( LOCAL_KEYWORD )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==LOCAL_KEYWORD) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: LOCAL_KEYWORD
                            {
                            LOCAL_KEYWORD595=(Token)match(input,LOCAL_KEYWORD,FOLLOW_LOCAL_KEYWORD_in_timestamp_types9319); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LOCAL_KEYWORD595_tree = (CommonTree)adaptor.create(LOCAL_KEYWORD595);
                            adaptor.addChild(root_0, LOCAL_KEYWORD595_tree);
                            }

                            }
                            break;

                    }

                    TIME_KEYWORD596=(Token)match(input,TIME_KEYWORD,FOLLOW_TIME_KEYWORD_in_timestamp_types9322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_KEYWORD596_tree = (CommonTree)adaptor.create(TIME_KEYWORD596);
                    adaptor.addChild(root_0, TIME_KEYWORD596_tree);
                    }
                    ZONE_KEYWORD597=(Token)match(input,ZONE_KEYWORD,FOLLOW_ZONE_KEYWORD_in_timestamp_types9324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ZONE_KEYWORD597_tree = (CommonTree)adaptor.create(ZONE_KEYWORD597);
                    adaptor.addChild(root_0, ZONE_KEYWORD597_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, timestamp_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_types"

    public static class interval_year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:1: interval_year_type : INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD ;
    public final PL_SQLParser.interval_year_type_return interval_year_type() throws RecognitionException {
        PL_SQLParser.interval_year_type_return retval = new PL_SQLParser.interval_year_type_return();
        retval.start = input.LT(1);
        int interval_year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD598=null;
        Token TO_KEYWORD600=null;
        Token MONTH_KEYWORD601=null;
        PL_SQLParser.year_type_return year_type599 = null;


        CommonTree INTERVAL_KEYWORD598_tree=null;
        CommonTree TO_KEYWORD600_tree=null;
        CommonTree MONTH_KEYWORD601_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:20: ( INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:22: INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD598=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD598_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD598);
            adaptor.addChild(root_0, INTERVAL_KEYWORD598_tree);
            }
            pushFollow(FOLLOW_year_type_in_interval_year_type9335);
            year_type599=year_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, year_type599.getTree());
            TO_KEYWORD600=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_year_type9337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD600_tree = (CommonTree)adaptor.create(TO_KEYWORD600);
            adaptor.addChild(root_0, TO_KEYWORD600_tree);
            }
            MONTH_KEYWORD601=(Token)match(input,MONTH_KEYWORD,FOLLOW_MONTH_KEYWORD_in_interval_year_type9339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MONTH_KEYWORD601_tree = (CommonTree)adaptor.create(MONTH_KEYWORD601);
            adaptor.addChild(root_0, MONTH_KEYWORD601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, interval_year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_year_type"

    public static class interval_day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:1: interval_day_type : INTERVAL_KEYWORD day_type TO_KEYWORD second_type ;
    public final PL_SQLParser.interval_day_type_return interval_day_type() throws RecognitionException {
        PL_SQLParser.interval_day_type_return retval = new PL_SQLParser.interval_day_type_return();
        retval.start = input.LT(1);
        int interval_day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD602=null;
        Token TO_KEYWORD604=null;
        PL_SQLParser.day_type_return day_type603 = null;

        PL_SQLParser.second_type_return second_type605 = null;


        CommonTree INTERVAL_KEYWORD602_tree=null;
        CommonTree TO_KEYWORD604_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:19: ( INTERVAL_KEYWORD day_type TO_KEYWORD second_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:21: INTERVAL_KEYWORD day_type TO_KEYWORD second_type
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD602=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD602_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD602);
            adaptor.addChild(root_0, INTERVAL_KEYWORD602_tree);
            }
            pushFollow(FOLLOW_day_type_in_interval_day_type9348);
            day_type603=day_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, day_type603.getTree());
            TO_KEYWORD604=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_day_type9350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD604_tree = (CommonTree)adaptor.create(TO_KEYWORD604);
            adaptor.addChild(root_0, TO_KEYWORD604_tree);
            }
            pushFollow(FOLLOW_second_type_in_interval_day_type9352);
            second_type605=second_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, second_type605.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, interval_day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_day_type"

    public static class subtype_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:1: subtype_datatype : SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.subtype_datatype_return subtype_datatype() throws RecognitionException {
        PL_SQLParser.subtype_datatype_return retval = new PL_SQLParser.subtype_datatype_return();
        retval.start = input.LT(1);
        int subtype_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUBTYPE_KEYWORD606=null;
        Token IS_KEYWORD608=null;
        Token NOT_OPERATOR610=null;
        Token NULL_KEYWORD611=null;
        PL_SQLParser.identifier_return identifier607 = null;

        PL_SQLParser.data_type_return data_type609 = null;


        CommonTree SUBTYPE_KEYWORD606_tree=null;
        CommonTree IS_KEYWORD608_tree=null;
        CommonTree NOT_OPERATOR610_tree=null;
        CommonTree NULL_KEYWORD611_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:18: ( SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:20: SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SUBTYPE_KEYWORD606=(Token)match(input,SUBTYPE_KEYWORD,FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBTYPE_KEYWORD606_tree = (CommonTree)adaptor.create(SUBTYPE_KEYWORD606);
            adaptor.addChild(root_0, SUBTYPE_KEYWORD606_tree);
            }
            pushFollow(FOLLOW_identifier_in_subtype_datatype9361);
            identifier607=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier607.getTree());
            IS_KEYWORD608=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_subtype_datatype9363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD608_tree = (CommonTree)adaptor.create(IS_KEYWORD608);
            adaptor.addChild(root_0, IS_KEYWORD608_tree);
            }
            pushFollow(FOLLOW_data_type_in_subtype_datatype9365);
            data_type609=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type609.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:68: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==NOT_OPERATOR) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:69: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR610=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_subtype_datatype9368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR610_tree = (CommonTree)adaptor.create(NOT_OPERATOR610);
                    adaptor.addChild(root_0, NOT_OPERATOR610_tree);
                    }
                    NULL_KEYWORD611=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_subtype_datatype9370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD611_tree = (CommonTree)adaptor.create(NULL_KEYWORD611);
                    adaptor.addChild(root_0, NULL_KEYWORD611_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, subtype_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_datatype"

    public static class record_collection_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_collection_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:1: record_collection_datatype : TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) ;
    public final PL_SQLParser.record_collection_datatype_return record_collection_datatype() throws RecognitionException {
        PL_SQLParser.record_collection_datatype_return retval = new PL_SQLParser.record_collection_datatype_return();
        retval.start = input.LT(1);
        int record_collection_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD612=null;
        Token IS_KEYWORD614=null;
        PL_SQLParser.identifier_return identifier613 = null;

        PL_SQLParser.record_datatype_return record_datatype615 = null;

        PL_SQLParser.collection_table_datatype_return collection_table_datatype616 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype617 = null;

        PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype618 = null;


        CommonTree TYPE_KEYWORD612_tree=null;
        CommonTree IS_KEYWORD614_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:28: ( TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:30: TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            {
            root_0 = (CommonTree)adaptor.nil();

            TYPE_KEYWORD612=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD612_tree = (CommonTree)adaptor.create(TYPE_KEYWORD612);
            adaptor.addChild(root_0, TYPE_KEYWORD612_tree);
            }
            pushFollow(FOLLOW_identifier_in_record_collection_datatype9382);
            identifier613=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier613.getTree());
            IS_KEYWORD614=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_record_collection_datatype9384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD614_tree = (CommonTree)adaptor.create(IS_KEYWORD614);
            adaptor.addChild(root_0, IS_KEYWORD614_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:29: ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            int alt194=4;
            switch ( input.LA(1) ) {
            case RECORD_KEYWORD:
                {
                alt194=1;
                }
                break;
            case TABLE_KEYWORD:
                {
                alt194=2;
                }
                break;
            case VARRAY_KEYWORD:
            case VARYING_KEYWORD:
                {
                alt194=3;
                }
                break;
            case REF_KEYWORD:
                {
                alt194=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:30: record_datatype
                    {
                    pushFollow(FOLLOW_record_datatype_in_record_collection_datatype9416);
                    record_datatype615=record_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_datatype615.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:48: collection_table_datatype
                    {
                    pushFollow(FOLLOW_collection_table_datatype_in_record_collection_datatype9420);
                    collection_table_datatype616=collection_table_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_table_datatype616.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:76: collection_varray_datatype
                    {
                    pushFollow(FOLLOW_collection_varray_datatype_in_record_collection_datatype9424);
                    collection_varray_datatype617=collection_varray_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype617.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:29: ref_cursor_datatype
                    {
                    pushFollow(FOLLOW_ref_cursor_datatype_in_record_collection_datatype9456);
                    ref_cursor_datatype618=ref_cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_cursor_datatype618.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, record_collection_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_collection_datatype"

    public static class record_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:1: record_datatype : RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' ;
    public final PL_SQLParser.record_datatype_return record_datatype() throws RecognitionException {
        PL_SQLParser.record_datatype_return retval = new PL_SQLParser.record_datatype_return();
        retval.start = input.LT(1);
        int record_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RECORD_KEYWORD619=null;
        Token char_literal620=null;
        Token char_literal622=null;
        Token char_literal624=null;
        PL_SQLParser.record_field_declaration_return record_field_declaration621 = null;

        PL_SQLParser.record_field_declaration_return record_field_declaration623 = null;


        CommonTree RECORD_KEYWORD619_tree=null;
        CommonTree char_literal620_tree=null;
        CommonTree char_literal622_tree=null;
        CommonTree char_literal624_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:17: ( RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:19: RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            RECORD_KEYWORD619=(Token)match(input,RECORD_KEYWORD,FOLLOW_RECORD_KEYWORD_in_record_datatype9464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECORD_KEYWORD619_tree = (CommonTree)adaptor.create(RECORD_KEYWORD619);
            adaptor.addChild(root_0, RECORD_KEYWORD619_tree);
            }
            char_literal620=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_record_datatype9466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal620_tree = (CommonTree)adaptor.create(char_literal620);
            adaptor.addChild(root_0, char_literal620_tree);
            }
            pushFollow(FOLLOW_record_field_declaration_in_record_datatype9468);
            record_field_declaration621=record_field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration621.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:63: ( ',' record_field_declaration )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==COMMA) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:64: ',' record_field_declaration
            	    {
            	    char_literal622=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_datatype9471); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal622_tree = (CommonTree)adaptor.create(char_literal622);
            	    adaptor.addChild(root_0, char_literal622_tree);
            	    }
            	    pushFollow(FOLLOW_record_field_declaration_in_record_datatype9473);
            	    record_field_declaration623=record_field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration623.getTree());

            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);

            char_literal624=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_record_datatype9477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal624_tree = (CommonTree)adaptor.create(char_literal624);
            adaptor.addChild(root_0, char_literal624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, record_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_datatype"

    public static class record_field_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_field_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:1: record_field_declaration : identifier data_type ( variable_declaration_part )? ;
    public final PL_SQLParser.record_field_declaration_return record_field_declaration() throws RecognitionException {
        PL_SQLParser.record_field_declaration_return retval = new PL_SQLParser.record_field_declaration_return();
        retval.start = input.LT(1);
        int record_field_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.identifier_return identifier625 = null;

        PL_SQLParser.data_type_return data_type626 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part627 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:26: ( identifier data_type ( variable_declaration_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:28: identifier data_type ( variable_declaration_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_field_declaration9485);
            identifier625=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier625.getTree());
            pushFollow(FOLLOW_data_type_in_record_field_declaration9487);
            data_type626=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type626.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:49: ( variable_declaration_part )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==DEFAULT_KEYWORD||LA196_0==NOT_OPERATOR||LA196_0==230) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                    {
                    pushFollow(FOLLOW_variable_declaration_part_in_record_field_declaration9489);
                    variable_declaration_part627=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part627.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, record_field_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_field_declaration"

    public static class collection_table_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_table_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:830:1: collection_table_datatype : TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? ;
    public final PL_SQLParser.collection_table_datatype_return collection_table_datatype() throws RecognitionException {
        PL_SQLParser.collection_table_datatype_return retval = new PL_SQLParser.collection_table_datatype_return();
        retval.start = input.LT(1);
        int collection_table_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD628=null;
        Token OF_KEYWORD629=null;
        Token NOT_OPERATOR631=null;
        Token NULL_KEYWORD632=null;
        Token INDEX_KEYWORD633=null;
        Token BY_KEYWORD634=null;
        PL_SQLParser.data_type_return data_type630 = null;

        PL_SQLParser.data_type_return data_type635 = null;


        CommonTree TABLE_KEYWORD628_tree=null;
        CommonTree OF_KEYWORD629_tree=null;
        CommonTree NOT_OPERATOR631_tree=null;
        CommonTree NULL_KEYWORD632_tree=null;
        CommonTree INDEX_KEYWORD633_tree=null;
        CommonTree BY_KEYWORD634_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:830:27: ( TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:830:29: TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TABLE_KEYWORD628=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD628_tree = (CommonTree)adaptor.create(TABLE_KEYWORD628);
            adaptor.addChild(root_0, TABLE_KEYWORD628_tree);
            }
            OF_KEYWORD629=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_table_datatype9499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD629_tree = (CommonTree)adaptor.create(OF_KEYWORD629);
            adaptor.addChild(root_0, OF_KEYWORD629_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_table_datatype9501);
            data_type630=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type630.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:830:64: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==NOT_OPERATOR) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:830:65: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR631=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_table_datatype9504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR631_tree = (CommonTree)adaptor.create(NOT_OPERATOR631);
                    adaptor.addChild(root_0, NOT_OPERATOR631_tree);
                    }
                    NULL_KEYWORD632=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_table_datatype9506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD632_tree = (CommonTree)adaptor.create(NULL_KEYWORD632);
                    adaptor.addChild(root_0, NULL_KEYWORD632_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:23: ( INDEX_KEYWORD BY_KEYWORD data_type )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==INDEX_KEYWORD) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:24: INDEX_KEYWORD BY_KEYWORD data_type
                    {
                    INDEX_KEYWORD633=(Token)match(input,INDEX_KEYWORD,FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_KEYWORD633_tree = (CommonTree)adaptor.create(INDEX_KEYWORD633);
                    adaptor.addChild(root_0, INDEX_KEYWORD633_tree);
                    }
                    BY_KEYWORD634=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_collection_table_datatype9535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD634_tree = (CommonTree)adaptor.create(BY_KEYWORD634);
                    adaptor.addChild(root_0, BY_KEYWORD634_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_collection_table_datatype9537);
                    data_type635=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type635.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, collection_table_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_table_datatype"

    public static class collection_varray_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_varray_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:1: collection_varray_datatype : ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.collection_varray_datatype_return collection_varray_datatype() throws RecognitionException {
        PL_SQLParser.collection_varray_datatype_return retval = new PL_SQLParser.collection_varray_datatype_return();
        retval.start = input.LT(1);
        int collection_varray_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token VARRAY_KEYWORD636=null;
        Token VARYING_KEYWORD637=null;
        Token ARRAY_KEYWORD638=null;
        Token char_literal639=null;
        Token char_literal640=null;
        Token NUMBER_UNSIGNED641=null;
        Token char_literal642=null;
        Token OF_KEYWORD643=null;
        Token NOT_OPERATOR645=null;
        Token NULL_KEYWORD646=null;
        PL_SQLParser.data_type_return data_type644 = null;


        CommonTree VARRAY_KEYWORD636_tree=null;
        CommonTree VARYING_KEYWORD637_tree=null;
        CommonTree ARRAY_KEYWORD638_tree=null;
        CommonTree char_literal639_tree=null;
        CommonTree char_literal640_tree=null;
        CommonTree NUMBER_UNSIGNED641_tree=null;
        CommonTree char_literal642_tree=null;
        CommonTree OF_KEYWORD643_tree=null;
        CommonTree NOT_OPERATOR645_tree=null;
        CommonTree NULL_KEYWORD646_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:28: ( ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==VARRAY_KEYWORD) ) {
                alt199=1;
            }
            else if ( (LA199_0==VARYING_KEYWORD) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:31: VARRAY_KEYWORD
                    {
                    VARRAY_KEYWORD636=(Token)match(input,VARRAY_KEYWORD,FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARRAY_KEYWORD636_tree = (CommonTree)adaptor.create(VARRAY_KEYWORD636);
                    adaptor.addChild(root_0, VARRAY_KEYWORD636_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:49: VARYING_KEYWORD ARRAY_KEYWORD
                    {
                    VARYING_KEYWORD637=(Token)match(input,VARYING_KEYWORD,FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARYING_KEYWORD637_tree = (CommonTree)adaptor.create(VARYING_KEYWORD637);
                    adaptor.addChild(root_0, VARYING_KEYWORD637_tree);
                    }
                    ARRAY_KEYWORD638=(Token)match(input,ARRAY_KEYWORD,FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY_KEYWORD638_tree = (CommonTree)adaptor.create(ARRAY_KEYWORD638);
                    adaptor.addChild(root_0, ARRAY_KEYWORD638_tree);
                    }

                    }


                    }
                    break;

            }

            char_literal639=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_collection_varray_datatype9587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal639_tree = (CommonTree)adaptor.create(char_literal639);
            adaptor.addChild(root_0, char_literal639_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:34: ( '+' )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==214) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                    {
                    char_literal640=(Token)match(input,214,FOLLOW_214_in_collection_varray_datatype9589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal640_tree = (CommonTree)adaptor.create(char_literal640);
                    adaptor.addChild(root_0, char_literal640_tree);
                    }

                    }
                    break;

            }

            NUMBER_UNSIGNED641=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_UNSIGNED641_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED641);
            adaptor.addChild(root_0, NUMBER_UNSIGNED641_tree);
            }
            char_literal642=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_collection_varray_datatype9594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal642_tree = (CommonTree)adaptor.create(char_literal642);
            adaptor.addChild(root_0, char_literal642_tree);
            }
            OF_KEYWORD643=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_varray_datatype9596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD643_tree = (CommonTree)adaptor.create(OF_KEYWORD643);
            adaptor.addChild(root_0, OF_KEYWORD643_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_varray_datatype9598);
            data_type644=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type644.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:80: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==NOT_OPERATOR) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:81: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR645=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR645_tree = (CommonTree)adaptor.create(NOT_OPERATOR645);
                    adaptor.addChild(root_0, NOT_OPERATOR645_tree);
                    }
                    NULL_KEYWORD646=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD646_tree = (CommonTree)adaptor.create(NULL_KEYWORD646);
                    adaptor.addChild(root_0, NULL_KEYWORD646_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, collection_varray_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_varray_datatype"

    public static class ref_cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:1: ref_cursor_datatype : REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? ;
    public final PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype() throws RecognitionException {
        PL_SQLParser.ref_cursor_datatype_return retval = new PL_SQLParser.ref_cursor_datatype_return();
        retval.start = input.LT(1);
        int ref_cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REF_KEYWORD647=null;
        Token CURSOR_KEYWORD648=null;
        Token RETURN_KEYWORD649=null;
        PL_SQLParser.data_type_return data_type650 = null;


        CommonTree REF_KEYWORD647_tree=null;
        CommonTree CURSOR_KEYWORD648_tree=null;
        CommonTree RETURN_KEYWORD649_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:21: ( REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:23: REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            REF_KEYWORD647=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REF_KEYWORD647_tree = (CommonTree)adaptor.create(REF_KEYWORD647);
            adaptor.addChild(root_0, REF_KEYWORD647_tree);
            }
            CURSOR_KEYWORD648=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD648_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD648);
            adaptor.addChild(root_0, CURSOR_KEYWORD648_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:50: ( RETURN_KEYWORD data_type )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==RETURN_KEYWORD) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:51: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD649=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD649_tree = (CommonTree)adaptor.create(RETURN_KEYWORD649);
                    adaptor.addChild(root_0, RETURN_KEYWORD649_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_ref_cursor_datatype9619);
                    data_type650=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type650.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, ref_cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_cursor_datatype"

    public static class cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:1: cursor_datatype : CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? ;
    public final PL_SQLParser.cursor_datatype_return cursor_datatype() throws RecognitionException {
        PL_SQLParser.cursor_datatype_return retval = new PL_SQLParser.cursor_datatype_return();
        retval.start = input.LT(1);
        int cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CURSOR_KEYWORD651=null;
        Token RETURN_KEYWORD654=null;
        Token IS_KEYWORD656=null;
        PL_SQLParser.identifier_return identifier652 = null;

        PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration653 = null;

        PL_SQLParser.data_type_return data_type655 = null;

        PL_SQLParser.select_statement_return select_statement657 = null;


        CommonTree CURSOR_KEYWORD651_tree=null;
        CommonTree RETURN_KEYWORD654_tree=null;
        CommonTree IS_KEYWORD656_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:17: ( CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:19: CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CURSOR_KEYWORD651=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD651_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD651);
            adaptor.addChild(root_0, CURSOR_KEYWORD651_tree);
            }
            pushFollow(FOLLOW_identifier_in_cursor_datatype9630);
            identifier652=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier652.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:45: ( cursor_parameter_declaration )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==LPAREN) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: cursor_parameter_declaration
                    {
                    pushFollow(FOLLOW_cursor_parameter_declaration_in_cursor_datatype9632);
                    cursor_parameter_declaration653=cursor_parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter_declaration653.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:19: ( RETURN_KEYWORD data_type )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==RETURN_KEYWORD) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:20: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD654=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_cursor_datatype9654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD654_tree = (CommonTree)adaptor.create(RETURN_KEYWORD654);
                    adaptor.addChild(root_0, RETURN_KEYWORD654_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_cursor_datatype9656);
                    data_type655=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type655.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:47: ( IS_KEYWORD select_statement )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==IS_KEYWORD) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:48: IS_KEYWORD select_statement
                    {
                    IS_KEYWORD656=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_cursor_datatype9661); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD656_tree = (CommonTree)adaptor.create(IS_KEYWORD656);
                    adaptor.addChild(root_0, IS_KEYWORD656_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_datatype9663);
                    select_statement657=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement657.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_datatype"

    public static class cursor_parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:1: cursor_parameter_declaration : '(' cursor_parameter ( ',' cursor_parameter )* ')' ;
    public final PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration() throws RecognitionException {
        PL_SQLParser.cursor_parameter_declaration_return retval = new PL_SQLParser.cursor_parameter_declaration_return();
        retval.start = input.LT(1);
        int cursor_parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal658=null;
        Token char_literal660=null;
        Token char_literal662=null;
        PL_SQLParser.cursor_parameter_return cursor_parameter659 = null;

        PL_SQLParser.cursor_parameter_return cursor_parameter661 = null;


        CommonTree char_literal658_tree=null;
        CommonTree char_literal660_tree=null;
        CommonTree char_literal662_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:30: ( '(' cursor_parameter ( ',' cursor_parameter )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:32: '(' cursor_parameter ( ',' cursor_parameter )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal658=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_parameter_declaration9672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal658_tree = (CommonTree)adaptor.create(char_literal658);
            adaptor.addChild(root_0, char_literal658_tree);
            }
            pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9674);
            cursor_parameter659=cursor_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter659.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:53: ( ',' cursor_parameter )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==COMMA) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:54: ',' cursor_parameter
            	    {
            	    char_literal660=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_parameter_declaration9677); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal660_tree = (CommonTree)adaptor.create(char_literal660);
            	    adaptor.addChild(root_0, char_literal660_tree);
            	    }
            	    pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9679);
            	    cursor_parameter661=cursor_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter661.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);

            char_literal662=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_parameter_declaration9683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal662_tree = (CommonTree)adaptor.create(char_literal662);
            adaptor.addChild(root_0, char_literal662_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, cursor_parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter_declaration"

    public static class cursor_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:1: cursor_parameter : identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? ;
    public final PL_SQLParser.cursor_parameter_return cursor_parameter() throws RecognitionException {
        PL_SQLParser.cursor_parameter_return retval = new PL_SQLParser.cursor_parameter_return();
        retval.start = input.LT(1);
        int cursor_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD664=null;
        PL_SQLParser.identifier_return identifier663 = null;

        PL_SQLParser.data_type_return data_type665 = null;

        PL_SQLParser.variable_def_part_return variable_def_part666 = null;

        PL_SQLParser.expression_return expression667 = null;


        CommonTree IN_KEYWORD664_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:18: ( identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:20: identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_parameter9691);
            identifier663=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier663.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:31: ( IN_KEYWORD )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==IN_KEYWORD) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
                    {
                    IN_KEYWORD664=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_cursor_parameter9693); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD664_tree = (CommonTree)adaptor.create(IN_KEYWORD664);
                    adaptor.addChild(root_0, IN_KEYWORD664_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_cursor_parameter9696);
            data_type665=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type665.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:53: ( variable_def_part expression )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==DEFAULT_KEYWORD||LA208_0==230) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:54: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_cursor_parameter9699);
                    variable_def_part666=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part666.getTree());
                    pushFollow(FOLLOW_expression_in_cursor_parameter9701);
                    expression667=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression667.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, cursor_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter"

    public static class special_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:1: special_datatype : ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) ;
    public final PL_SQLParser.special_datatype_return special_datatype() throws RecognitionException {
        PL_SQLParser.special_datatype_return retval = new PL_SQLParser.special_datatype_return();
        retval.start = input.LT(1);
        int special_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER669=null;
        Token set670=null;
        PL_SQLParser.identifier_return identifier668 = null;


        CommonTree EXT_IDENTIFIER669_tree=null;
        CommonTree set670_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:18: ( ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:20: ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:20: ( identifier | EXT_IDENTIFIER )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENTIFIER||LA209_0==INTERVAL_KEYWORD||LA209_0==RESULT_KEYWORD) ) {
                alt209=1;
            }
            else if ( (LA209_0==EXT_IDENTIFIER) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:21: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_special_datatype9712);
                    identifier668=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier668.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:34: EXT_IDENTIFIER
                    {
                    EXT_IDENTIFIER669=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_special_datatype9716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER669_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER669);
                    adaptor.addChild(root_0, EXT_IDENTIFIER669_tree);
                    }

                    }
                    break;

            }

            set670=(Token)input.LT(1);
            if ( (input.LA(1)>=ROWTYPE_KEYWORD && input.LA(1)<=LIKE_TYPE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set670));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, special_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_datatype"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:1: expression : universal_expression ;
    public final PL_SQLParser.expression_return expression() throws RecognitionException {
        PL_SQLParser.expression_return retval = new PL_SQLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.universal_expression_return universal_expression671 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:12: ( universal_expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:14: universal_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_expression_in_expression9735);
            universal_expression671=universal_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression671.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class in_notin_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_notin_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:1: in_notin_expression : ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) ;
    public final PL_SQLParser.in_notin_expression_return in_notin_expression() throws RecognitionException {
        PL_SQLParser.in_notin_expression_return retval = new PL_SQLParser.in_notin_expression_return();
        retval.start = input.LT(1);
        int in_notin_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR672=null;
        Token IN_KEYWORD673=null;
        Token char_literal675=null;
        Token char_literal677=null;
        PL_SQLParser.universal_expression_return universal_expression674 = null;

        PL_SQLParser.select_statement_return select_statement676 = null;


        CommonTree NOT_OPERATOR672_tree=null;
        CommonTree IN_KEYWORD673_tree=null;
        CommonTree char_literal675_tree=null;
        CommonTree char_literal677_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:21: ( ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:23: ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:23: ( ( NOT_OPERATOR )? IN_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:24: ( NOT_OPERATOR )? IN_KEYWORD
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:24: ( NOT_OPERATOR )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==NOT_OPERATOR) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR672=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_in_notin_expression9743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR672_tree = (CommonTree)adaptor.create(NOT_OPERATOR672);
                    adaptor.addChild(root_0, NOT_OPERATOR672_tree);
                    }

                    }
                    break;

            }

            IN_KEYWORD673=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_in_notin_expression9746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD673_tree = (CommonTree)adaptor.create(IN_KEYWORD673);
            adaptor.addChild(root_0, IN_KEYWORD673_tree);
            }

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:23: ( universal_expression | ( '(' select_statement ')' ) )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==NUMBER_UNSIGNED||LA211_0==STRING||(LA211_0>=IDENTIFIER && LA211_0<=EXT_IDENTIFIER)||LA211_0==NULL_KEYWORD||(LA211_0>=TRUE_KEYWORD && LA211_0<=FALSE_KEYWORD)||LA211_0==INTERVAL_KEYWORD||LA211_0==REPLACE_KEYWORD||LA211_0==IN_KEYWORD||LA211_0==CASE_KEYWORD||(LA211_0>=SQLCODE_KEYWORD && LA211_0<=SQLERRM_KEYWORD)||LA211_0==RESULT_KEYWORD||LA211_0==NOT_OPERATOR||(LA211_0>=214 && LA211_0<=215)) ) {
                alt211=1;
            }
            else if ( (LA211_0==LPAREN) ) {
                int LA211_2 = input.LA(2);

                if ( (synpred355_PL_SQL()) ) {
                    alt211=1;
                }
                else if ( (true) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:25: universal_expression
                    {
                    pushFollow(FOLLOW_universal_expression_in_in_notin_expression9774);
                    universal_expression674=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression674.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:48: ( '(' select_statement ')' )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:48: ( '(' select_statement ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:50: '(' select_statement ')'
                    {
                    char_literal675=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_in_notin_expression9780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal675_tree = (CommonTree)adaptor.create(char_literal675);
                    adaptor.addChild(root_0, char_literal675_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_in_notin_expression9782);
                    select_statement676=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement676.getTree());
                    char_literal677=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_in_notin_expression9784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal677_tree = (CommonTree)adaptor.create(char_literal677);
                    adaptor.addChild(root_0, char_literal677_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, in_notin_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_notin_expression"

    public static class operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );
    public final PL_SQLParser.operator_return operator() throws RecognitionException {
        PL_SQLParser.operator_return retval = new PL_SQLParser.operator_return();
        retval.start = input.LT(1);
        int operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal678=null;
        Token char_literal679=null;
        Token char_literal680=null;
        Token char_literal681=null;
        Token string_literal682=null;
        Token string_literal683=null;
        Token string_literal684=null;
        Token char_literal685=null;
        Token string_literal686=null;
        Token char_literal687=null;
        Token char_literal688=null;
        Token string_literal689=null;
        Token string_literal690=null;
        Token char_literal691=null;
        Token string_literal692=null;
        Token string_literal693=null;
        Token string_literal694=null;
        Token AND_OPERATOR695=null;
        Token OR_OPERATOR696=null;
        Token LIKE_KEYWORD697=null;
        Token NOT_OPERATOR698=null;
        Token BETWEEN_KEYWORD699=null;

        CommonTree char_literal678_tree=null;
        CommonTree char_literal679_tree=null;
        CommonTree char_literal680_tree=null;
        CommonTree char_literal681_tree=null;
        CommonTree string_literal682_tree=null;
        CommonTree string_literal683_tree=null;
        CommonTree string_literal684_tree=null;
        CommonTree char_literal685_tree=null;
        CommonTree string_literal686_tree=null;
        CommonTree char_literal687_tree=null;
        CommonTree char_literal688_tree=null;
        CommonTree string_literal689_tree=null;
        CommonTree string_literal690_tree=null;
        CommonTree char_literal691_tree=null;
        CommonTree string_literal692_tree=null;
        CommonTree string_literal693_tree=null;
        CommonTree string_literal694_tree=null;
        CommonTree AND_OPERATOR695_tree=null;
        CommonTree OR_OPERATOR696_tree=null;
        CommonTree LIKE_KEYWORD697_tree=null;
        CommonTree NOT_OPERATOR698_tree=null;
        CommonTree BETWEEN_KEYWORD699_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:10: ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) )
            int alt213=21;
            alt213 = dfa213.predict(input);
            switch (alt213) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:12: '+'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal678=(Token)match(input,214,FOLLOW_214_in_operator9793); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal678_tree = (CommonTree)adaptor.create(char_literal678);
                    adaptor.addChild(root_0, char_literal678_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:18: '-'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal679=(Token)match(input,215,FOLLOW_215_in_operator9797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal679_tree = (CommonTree)adaptor.create(char_literal679);
                    adaptor.addChild(root_0, char_literal679_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:24: '*'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal680=(Token)match(input,216,FOLLOW_216_in_operator9801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal680_tree = (CommonTree)adaptor.create(char_literal680);
                    adaptor.addChild(root_0, char_literal680_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:30: '/'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal681=(Token)match(input,212,FOLLOW_212_in_operator9805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal681_tree = (CommonTree)adaptor.create(char_literal681);
                    adaptor.addChild(root_0, char_literal681_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:36: '**'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal682=(Token)match(input,217,FOLLOW_217_in_operator9809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal682_tree = (CommonTree)adaptor.create(string_literal682);
                    adaptor.addChild(root_0, string_literal682_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:43: '||'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal683=(Token)match(input,218,FOLLOW_218_in_operator9813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal683_tree = (CommonTree)adaptor.create(string_literal683);
                    adaptor.addChild(root_0, string_literal683_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:50: ':='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal684=(Token)match(input,230,FOLLOW_230_in_operator9817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal684_tree = (CommonTree)adaptor.create(string_literal684);
                    adaptor.addChild(root_0, string_literal684_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:57: '.'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal685=(Token)match(input,231,FOLLOW_231_in_operator9821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal685_tree = (CommonTree)adaptor.create(char_literal685);
                    adaptor.addChild(root_0, char_literal685_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:12: '^='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal686=(Token)match(input,223,FOLLOW_223_in_operator9836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal686_tree = (CommonTree)adaptor.create(string_literal686);
                    adaptor.addChild(root_0, string_literal686_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:19: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal687=(Token)match(input,224,FOLLOW_224_in_operator9840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal687_tree = (CommonTree)adaptor.create(char_literal687);
                    adaptor.addChild(root_0, char_literal687_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:25: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal688=(Token)match(input,225,FOLLOW_225_in_operator9844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal688_tree = (CommonTree)adaptor.create(char_literal688);
                    adaptor.addChild(root_0, char_literal688_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:31: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal689=(Token)match(input,226,FOLLOW_226_in_operator9848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal689_tree = (CommonTree)adaptor.create(string_literal689);
                    adaptor.addChild(root_0, string_literal689_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:38: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal690=(Token)match(input,227,FOLLOW_227_in_operator9852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal690_tree = (CommonTree)adaptor.create(string_literal690);
                    adaptor.addChild(root_0, string_literal690_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:45: '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal691=(Token)match(input,219,FOLLOW_219_in_operator9856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal691_tree = (CommonTree)adaptor.create(char_literal691);
                    adaptor.addChild(root_0, char_literal691_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:51: '<>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal692=(Token)match(input,220,FOLLOW_220_in_operator9860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal692_tree = (CommonTree)adaptor.create(string_literal692);
                    adaptor.addChild(root_0, string_literal692_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:58: '!='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal693=(Token)match(input,221,FOLLOW_221_in_operator9864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal693_tree = (CommonTree)adaptor.create(string_literal693);
                    adaptor.addChild(root_0, string_literal693_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:65: '~='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal694=(Token)match(input,222,FOLLOW_222_in_operator9868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal694_tree = (CommonTree)adaptor.create(string_literal694);
                    adaptor.addChild(root_0, string_literal694_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:12: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR695=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_operator9883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR695_tree = (CommonTree)adaptor.create(AND_OPERATOR695);
                    adaptor.addChild(root_0, AND_OPERATOR695_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:27: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR696=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_operator9887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR696_tree = (CommonTree)adaptor.create(OR_OPERATOR696);
                    adaptor.addChild(root_0, OR_OPERATOR696_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:12: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD697=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_operator9902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD697_tree = (CommonTree)adaptor.create(LIKE_KEYWORD697);
                    adaptor.addChild(root_0, LIKE_KEYWORD697_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:28: ( NOT_OPERATOR )? BETWEEN_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:28: ( NOT_OPERATOR )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==NOT_OPERATOR) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:29: NOT_OPERATOR
                            {
                            NOT_OPERATOR698=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_operator9908); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR698_tree = (CommonTree)adaptor.create(NOT_OPERATOR698);
                            adaptor.addChild(root_0, NOT_OPERATOR698_tree);
                            }

                            }
                            break;

                    }

                    BETWEEN_KEYWORD699=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_operator9912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD699_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD699);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD699_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator"

    public static class unary_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:1: unary_op : ( NOT_OPERATOR | '+' | '-' );
    public final PL_SQLParser.unary_op_return unary_op() throws RecognitionException {
        PL_SQLParser.unary_op_return retval = new PL_SQLParser.unary_op_return();
        retval.start = input.LT(1);
        int unary_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set700=null;

        CommonTree set700_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:10: ( NOT_OPERATOR | '+' | '-' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set700=(Token)input.LT(1);
            if ( input.LA(1)==NOT_OPERATOR||(input.LA(1)>=214 && input.LA(1)<=215) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set700));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, unary_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class postfix_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:1: postfix_op : ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' );
    public final PL_SQLParser.postfix_op_return postfix_op() throws RecognitionException {
        PL_SQLParser.postfix_op_return retval = new PL_SQLParser.postfix_op_return();
        retval.start = input.LT(1);
        int postfix_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IS_KEYWORD701=null;
        Token NOT_OPERATOR702=null;
        Token NULL_KEYWORD703=null;
        Token string_literal704=null;

        CommonTree IS_KEYWORD701_tree=null;
        CommonTree NOT_OPERATOR702_tree=null;
        CommonTree NULL_KEYWORD703_tree=null;
        CommonTree string_literal704_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:12: ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==IS_KEYWORD) ) {
                alt215=1;
            }
            else if ( (LA215_0==228) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:15: IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD
                    {
                    IS_KEYWORD701=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_postfix_op9936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD701_tree = (CommonTree)adaptor.create(IS_KEYWORD701);
                    adaptor.addChild(root_0, IS_KEYWORD701_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:26: ( NOT_OPERATOR )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NOT_OPERATOR) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR702=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_postfix_op9938); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR702_tree = (CommonTree)adaptor.create(NOT_OPERATOR702);
                            adaptor.addChild(root_0, NOT_OPERATOR702_tree);
                            }

                            }
                            break;

                    }

                    NULL_KEYWORD703=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_postfix_op9941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD703_tree = (CommonTree)adaptor.create(NULL_KEYWORD703);
                    adaptor.addChild(root_0, NULL_KEYWORD703_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:56: '(+)'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal704=(Token)match(input,228,FOLLOW_228_in_postfix_op9946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal704_tree = (CommonTree)adaptor.create(string_literal704);
                    adaptor.addChild(root_0, string_literal704_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, postfix_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_op"

    public static class universal_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:1: universal_expression : ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* ;
    public final PL_SQLParser.universal_expression_return universal_expression() throws RecognitionException {
        PL_SQLParser.universal_expression_return retval = new PL_SQLParser.universal_expression_return();
        retval.start = input.LT(1);
        int universal_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal710=null;
        Token char_literal712=null;
        PL_SQLParser.unary_op_return unary_op705 = null;

        PL_SQLParser.universal_factor_return universal_factor706 = null;

        PL_SQLParser.postfix_op_return postfix_op707 = null;

        PL_SQLParser.operator_return operator708 = null;

        PL_SQLParser.universal_expression_return universal_expression709 = null;

        PL_SQLParser.select_statement_return select_statement711 = null;


        CommonTree char_literal710_tree=null;
        CommonTree char_literal712_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:22: ( ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:24: ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:24: ( unary_op )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==NOT_OPERATOR) ) {
                int LA216_2 = input.LA(2);

                if ( (synpred381_PL_SQL()) ) {
                    alt216=1;
                }
            }
            else if ( ((LA216_0>=214 && LA216_0<=215)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: unary_op
                    {
                    pushFollow(FOLLOW_unary_op_in_universal_expression9954);
                    unary_op705=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op705.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_factor_in_universal_expression9957);
            universal_factor706=universal_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_factor706.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:51: ( postfix_op )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==IS_KEYWORD||LA217_0==228) ) {
                int LA217_1 = input.LA(2);

                if ( (synpred382_PL_SQL()) ) {
                    alt217=1;
                }
            }
            switch (alt217) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: postfix_op
                    {
                    pushFollow(FOLLOW_postfix_op_in_universal_expression9959);
                    postfix_op707=postfix_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_op707.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( ((LA219_0>=AND_OPERATOR && LA219_0<=OR_OPERATOR)||LA219_0==LIKE_KEYWORD||LA219_0==BETWEEN_KEYWORD||LA219_0==NOT_OPERATOR||LA219_0==212||(LA219_0>=214 && LA219_0<=227)||(LA219_0>=230 && LA219_0<=231)) ) {
                    int LA219_2 = input.LA(2);

                    if ( (synpred384_PL_SQL()) ) {
                        alt219=1;
                    }


                }


                switch (alt219) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:64: operator ( universal_expression | ( '(' select_statement ')' ) )
            	    {
            	    pushFollow(FOLLOW_operator_in_universal_expression9963);
            	    operator708=operator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator708.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:73: ( universal_expression | ( '(' select_statement ')' ) )
            	    int alt218=2;
            	    int LA218_0 = input.LA(1);

            	    if ( (LA218_0==LPAREN) ) {
            	        int LA218_1 = input.LA(2);

            	        if ( (synpred383_PL_SQL()) ) {
            	            alt218=1;
            	        }
            	        else if ( (true) ) {
            	            alt218=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 218, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA218_0==NUMBER_UNSIGNED||LA218_0==STRING||(LA218_0>=IDENTIFIER && LA218_0<=EXT_IDENTIFIER)||LA218_0==NULL_KEYWORD||(LA218_0>=TRUE_KEYWORD && LA218_0<=FALSE_KEYWORD)||LA218_0==INTERVAL_KEYWORD||LA218_0==REPLACE_KEYWORD||LA218_0==IN_KEYWORD||LA218_0==CASE_KEYWORD||(LA218_0>=SQLCODE_KEYWORD && LA218_0<=SQLERRM_KEYWORD)||LA218_0==RESULT_KEYWORD||LA218_0==NOT_OPERATOR||(LA218_0>=214 && LA218_0<=215)) ) {
            	        alt218=1;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 218, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt218) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:74: universal_expression
            	            {
            	            pushFollow(FOLLOW_universal_expression_in_universal_expression9966);
            	            universal_expression709=universal_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression709.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:97: ( '(' select_statement ')' )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:97: ( '(' select_statement ')' )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:98: '(' select_statement ')'
            	            {
            	            char_literal710=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_universal_expression9971); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal710_tree = (CommonTree)adaptor.create(char_literal710);
            	            adaptor.addChild(root_0, char_literal710_tree);
            	            }
            	            pushFollow(FOLLOW_select_statement_in_universal_expression9973);
            	            select_statement711=select_statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement711.getTree());
            	            char_literal712=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_universal_expression9975); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal712_tree = (CommonTree)adaptor.create(char_literal712);
            	            adaptor.addChild(root_0, char_literal712_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, universal_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_expression"

    public static class universal_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );
    public final PL_SQLParser.universal_factor_return universal_factor() throws RecognitionException {
        PL_SQLParser.universal_factor_return retval = new PL_SQLParser.universal_factor_return();
        retval.start = input.LT(1);
        int universal_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRUE_KEYWORD713=null;
        Token FALSE_KEYWORD714=null;
        Token NUMBER_UNSIGNED715=null;
        Token STRING717=null;
        Token NULL_KEYWORD718=null;
        Token char_literal723=null;
        Token char_literal725=null;
        Token char_literal727=null;
        PL_SQLParser.in_notin_expression_return in_notin_expression716 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression719 = null;

        PL_SQLParser.sub_identifier_return sub_identifier720 = null;

        PL_SQLParser.call_statement_param_return call_statement_param721 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression722 = null;

        PL_SQLParser.universal_expression_return universal_expression724 = null;

        PL_SQLParser.universal_expression_return universal_expression726 = null;


        CommonTree TRUE_KEYWORD713_tree=null;
        CommonTree FALSE_KEYWORD714_tree=null;
        CommonTree NUMBER_UNSIGNED715_tree=null;
        CommonTree STRING717_tree=null;
        CommonTree NULL_KEYWORD718_tree=null;
        CommonTree char_literal723_tree=null;
        CommonTree char_literal725_tree=null;
        CommonTree char_literal727_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:18: ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) )
            int alt223=9;
            alt223 = dfa223.predict(input);
            switch (alt223) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:20: TRUE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRUE_KEYWORD713=(Token)match(input,TRUE_KEYWORD,FOLLOW_TRUE_KEYWORD_in_universal_factor9987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE_KEYWORD713_tree = (CommonTree)adaptor.create(TRUE_KEYWORD713);
                    adaptor.addChild(root_0, TRUE_KEYWORD713_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:35: FALSE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FALSE_KEYWORD714=(Token)match(input,FALSE_KEYWORD,FOLLOW_FALSE_KEYWORD_in_universal_factor9991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE_KEYWORD714_tree = (CommonTree)adaptor.create(FALSE_KEYWORD714);
                    adaptor.addChild(root_0, FALSE_KEYWORD714_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:51: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED715=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_universal_factor9995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED715_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED715);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED715_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:855:20: in_notin_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor10018);
                    in_notin_expression716=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression716.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:20: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING717=(Token)match(input,STRING,FOLLOW_STRING_in_universal_factor10041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING717_tree = (CommonTree)adaptor.create(STRING717);
                    adaptor.addChild(root_0, STRING717_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:29: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD718=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_universal_factor10045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD718_tree = (CommonTree)adaptor.create(NULL_KEYWORD718);
                    adaptor.addChild(root_0, NULL_KEYWORD718_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:44: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_universal_factor10049);
                    case_statement_expression719=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression719.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:20: sub_identifier ( call_statement_param ( in_notin_expression )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_in_universal_factor10072);
                    sub_identifier720=sub_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier720.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:35: ( call_statement_param ( in_notin_expression )? )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==LPAREN) ) {
                        int LA221_1 = input.LA(2);

                        if ( (synpred393_PL_SQL()) ) {
                            alt221=1;
                        }
                    }
                    switch (alt221) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:36: call_statement_param ( in_notin_expression )?
                            {
                            pushFollow(FOLLOW_call_statement_param_in_universal_factor10075);
                            call_statement_param721=call_statement_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement_param721.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:57: ( in_notin_expression )?
                            int alt220=2;
                            int LA220_0 = input.LA(1);

                            if ( (LA220_0==IN_KEYWORD||LA220_0==NOT_OPERATOR) ) {
                                int LA220_1 = input.LA(2);

                                if ( (synpred392_PL_SQL()) ) {
                                    alt220=1;
                                }
                            }
                            switch (alt220) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:58: in_notin_expression
                                    {
                                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor10078);
                                    in_notin_expression722=in_notin_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression722.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:21: '(' universal_expression ( ',' universal_expression )* ')'
                    {
                    char_literal723=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_universal_factor10106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal723_tree = (CommonTree)adaptor.create(char_literal723);
                    adaptor.addChild(root_0, char_literal723_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_universal_factor10108);
                    universal_expression724=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression724.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:46: ( ',' universal_expression )*
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);

                        if ( (LA222_0==COMMA) ) {
                            alt222=1;
                        }


                        switch (alt222) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:47: ',' universal_expression
                    	    {
                    	    char_literal725=(Token)match(input,COMMA,FOLLOW_COMMA_in_universal_factor10111); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal725_tree = (CommonTree)adaptor.create(char_literal725);
                    	    adaptor.addChild(root_0, char_literal725_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_universal_factor10113);
                    	    universal_expression726=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression726.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop222;
                        }
                    } while (true);

                    char_literal727=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_universal_factor10118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal727_tree = (CommonTree)adaptor.create(char_literal727);
                    adaptor.addChild(root_0, char_literal727_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, universal_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_factor"

    public static class sub_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:1: sub_identifier : ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function );
    public final PL_SQLParser.sub_identifier_return sub_identifier() throws RecognitionException {
        PL_SQLParser.sub_identifier_return retval = new PL_SQLParser.sub_identifier_return();
        retval.start = input.LT(1);
        int sub_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REPLACE_KEYWORD729=null;
        PL_SQLParser.sub_identifier_factor_return sub_identifier_factor728 = null;

        PL_SQLParser.sqlcode_function_return sqlcode_function730 = null;

        PL_SQLParser.sqlerrm_function_return sqlerrm_function731 = null;


        CommonTree REPLACE_KEYWORD729_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:16: ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function )
            int alt224=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt224=1;
                }
                break;
            case REPLACE_KEYWORD:
                {
                alt224=2;
                }
                break;
            case SQLCODE_KEYWORD:
                {
                alt224=3;
                }
                break;
            case SQLERRM_KEYWORD:
                {
                alt224=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:18: sub_identifier_factor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_factor_in_sub_identifier10126);
                    sub_identifier_factor728=sub_identifier_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier_factor728.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:42: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD729=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sub_identifier10130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD729_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD729);
                    adaptor.addChild(root_0, REPLACE_KEYWORD729_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:60: sqlcode_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlcode_function_in_sub_identifier10134);
                    sqlcode_function730=sqlcode_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcode_function730.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:79: sqlerrm_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlerrm_function_in_sub_identifier10138);
                    sqlerrm_function731=sqlerrm_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlerrm_function731.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, sub_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier"

    public static class sub_identifier_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:1: sub_identifier_factor : universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? ;
    public final PL_SQLParser.sub_identifier_factor_return sub_identifier_factor() throws RecognitionException {
        PL_SQLParser.sub_identifier_factor_return retval = new PL_SQLParser.sub_identifier_factor_return();
        retval.start = input.LT(1);
        int sub_identifier_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOTFOUND_KEYWORD733=null;
        Token FOUND_KEYWORD734=null;
        Token ISOPEN_KEYWORD735=null;
        Token ROWCOUNT_KEYWORD736=null;
        PL_SQLParser.universal_identifier_return universal_identifier732 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression737 = null;


        CommonTree NOTFOUND_KEYWORD733_tree=null;
        CommonTree FOUND_KEYWORD734_tree=null;
        CommonTree ISOPEN_KEYWORD735_tree=null;
        CommonTree ROWCOUNT_KEYWORD736_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:23: ( universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:25: universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_identifier_in_sub_identifier_factor10145);
            universal_identifier732=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier732.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            int alt225=6;
            switch ( input.LA(1) ) {
                case ROWCOUNT_KEYWORD:
                    {
                    alt225=4;
                    }
                    break;
                case ISOPEN_KEYWORD:
                    {
                    alt225=3;
                    }
                    break;
                case FOUND_KEYWORD:
                    {
                    alt225=2;
                    }
                    break;
                case NOTFOUND_KEYWORD:
                    {
                    alt225=1;
                    }
                    break;
                case IN_KEYWORD:
                case NOT_OPERATOR:
                    {
                    int LA225_5 = input.LA(2);

                    if ( (synpred403_PL_SQL()) ) {
                        alt225=5;
                    }
                    }
                    break;
            }

            switch (alt225) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:47: NOTFOUND_KEYWORD
                    {
                    NOTFOUND_KEYWORD733=(Token)match(input,NOTFOUND_KEYWORD,FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor10148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTFOUND_KEYWORD733_tree = (CommonTree)adaptor.create(NOTFOUND_KEYWORD733);
                    adaptor.addChild(root_0, NOTFOUND_KEYWORD733_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:66: FOUND_KEYWORD
                    {
                    FOUND_KEYWORD734=(Token)match(input,FOUND_KEYWORD,FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor10152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOUND_KEYWORD734_tree = (CommonTree)adaptor.create(FOUND_KEYWORD734);
                    adaptor.addChild(root_0, FOUND_KEYWORD734_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:25: ISOPEN_KEYWORD
                    {
                    ISOPEN_KEYWORD735=(Token)match(input,ISOPEN_KEYWORD,FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor10180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISOPEN_KEYWORD735_tree = (CommonTree)adaptor.create(ISOPEN_KEYWORD735);
                    adaptor.addChild(root_0, ISOPEN_KEYWORD735_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:42: ROWCOUNT_KEYWORD
                    {
                    ROWCOUNT_KEYWORD736=(Token)match(input,ROWCOUNT_KEYWORD,FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor10184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWCOUNT_KEYWORD736_tree = (CommonTree)adaptor.create(ROWCOUNT_KEYWORD736);
                    adaptor.addChild(root_0, ROWCOUNT_KEYWORD736_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:61: in_notin_expression
                    {
                    pushFollow(FOLLOW_in_notin_expression_in_sub_identifier_factor10188);
                    in_notin_expression737=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression737.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, sub_identifier_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier_factor"

    public static class call_statement_param_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_statement_param"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:1: call_statement_param : ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) );
    public final PL_SQLParser.call_statement_param_return call_statement_param() throws RecognitionException {
        PL_SQLParser.call_statement_param_return retval = new PL_SQLParser.call_statement_param_return();
        retval.start = input.LT(1);
        int call_statement_param_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal738=null;
        Token char_literal740=null;
        Token char_literal742=null;
        Token char_literal743=null;
        Token string_literal745=null;
        Token char_literal747=null;
        Token string_literal749=null;
        Token char_literal751=null;
        PL_SQLParser.universal_expression_return universal_expression739 = null;

        PL_SQLParser.universal_expression_return universal_expression741 = null;

        PL_SQLParser.identifier_return identifier744 = null;

        PL_SQLParser.universal_expression_return universal_expression746 = null;

        PL_SQLParser.identifier_return identifier748 = null;

        PL_SQLParser.universal_expression_return universal_expression750 = null;


        CommonTree char_literal738_tree=null;
        CommonTree char_literal740_tree=null;
        CommonTree char_literal742_tree=null;
        CommonTree char_literal743_tree=null;
        CommonTree string_literal745_tree=null;
        CommonTree char_literal747_tree=null;
        CommonTree string_literal749_tree=null;
        CommonTree char_literal751_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:22: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==LPAREN) ) {
                int LA229_1 = input.LA(2);

                if ( (synpred406_PL_SQL()) ) {
                    alt229=1;
                }
                else if ( (true) ) {
                    alt229=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
                    {
                    char_literal738=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement_param10198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal738_tree = (CommonTree)adaptor.create(char_literal738);
                    adaptor.addChild(root_0, char_literal738_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:29: ( universal_expression ( ',' universal_expression )* )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==NUMBER_UNSIGNED||LA227_0==STRING||(LA227_0>=IDENTIFIER && LA227_0<=EXT_IDENTIFIER)||LA227_0==NULL_KEYWORD||(LA227_0>=TRUE_KEYWORD && LA227_0<=FALSE_KEYWORD)||LA227_0==INTERVAL_KEYWORD||LA227_0==REPLACE_KEYWORD||LA227_0==IN_KEYWORD||LA227_0==CASE_KEYWORD||(LA227_0>=SQLCODE_KEYWORD && LA227_0<=SQLERRM_KEYWORD)||LA227_0==RESULT_KEYWORD||LA227_0==LPAREN||LA227_0==NOT_OPERATOR||(LA227_0>=214 && LA227_0<=215)) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:30: universal_expression ( ',' universal_expression )*
                            {
                            pushFollow(FOLLOW_universal_expression_in_call_statement_param10201);
                            universal_expression739=universal_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression739.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:51: ( ',' universal_expression )*
                            loop226:
                            do {
                                int alt226=2;
                                int LA226_0 = input.LA(1);

                                if ( (LA226_0==COMMA) ) {
                                    alt226=1;
                                }


                                switch (alt226) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:52: ',' universal_expression
                            	    {
                            	    char_literal740=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10204); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal740_tree = (CommonTree)adaptor.create(char_literal740);
                            	    adaptor.addChild(root_0, char_literal740_tree);
                            	    }
                            	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10206);
                            	    universal_expression741=universal_expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression741.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop226;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal742=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement_param10213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal742_tree = (CommonTree)adaptor.create(char_literal742);
                    adaptor.addChild(root_0, char_literal742_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:25: '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')'
                    {
                    char_literal743=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement_param10242); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal743_tree = (CommonTree)adaptor.create(char_literal743);
                    adaptor.addChild(root_0, char_literal743_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_call_statement_param10244);
                    identifier744=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier744.getTree());
                    string_literal745=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10246); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal745_tree = (CommonTree)adaptor.create(string_literal745);
                    adaptor.addChild(root_0, string_literal745_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_call_statement_param10248);
                    universal_expression746=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression746.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:66: ( ',' identifier '=>' universal_expression )*
                    loop228:
                    do {
                        int alt228=2;
                        int LA228_0 = input.LA(1);

                        if ( (LA228_0==COMMA) ) {
                            alt228=1;
                        }


                        switch (alt228) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:67: ',' identifier '=>' universal_expression
                    	    {
                    	    char_literal747=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10251); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal747_tree = (CommonTree)adaptor.create(char_literal747);
                    	    adaptor.addChild(root_0, char_literal747_tree);
                    	    }
                    	    pushFollow(FOLLOW_identifier_in_call_statement_param10253);
                    	    identifier748=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier748.getTree());
                    	    string_literal749=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10255); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal749_tree = (CommonTree)adaptor.create(string_literal749);
                    	    adaptor.addChild(root_0, string_literal749_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10257);
                    	    universal_expression750=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression750.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop228;
                        }
                    } while (true);

                    char_literal751=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement_param10262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal751_tree = (CommonTree)adaptor.create(char_literal751);
                    adaptor.addChild(root_0, char_literal751_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, call_statement_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_statement_param"

    public static class exception_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:1: exception_section : EXCEPTION_KEYWORD ( exception_handler )+ ;
    public final PL_SQLParser.exception_section_return exception_section() throws RecognitionException {
        PL_SQLParser.exception_section_return retval = new PL_SQLParser.exception_section_return();
        retval.start = input.LT(1);
        int exception_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXCEPTION_KEYWORD752=null;
        PL_SQLParser.exception_handler_return exception_handler753 = null;


        CommonTree EXCEPTION_KEYWORD752_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:19: ( EXCEPTION_KEYWORD ( exception_handler )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:21: EXCEPTION_KEYWORD ( exception_handler )+
            {
            root_0 = (CommonTree)adaptor.nil();

            EXCEPTION_KEYWORD752=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_exception_section10271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPTION_KEYWORD752_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD752);
            adaptor.addChild(root_0, EXCEPTION_KEYWORD752_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:39: ( exception_handler )+
            int cnt230=0;
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==WHEN_KEYWORD) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:40: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_section10274);
            	    exception_handler753=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler753.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt230 >= 1 ) break loop230;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(230, input);
                        throw eee;
                }
                cnt230++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, exception_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_section"

    public static class exception_handler_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:1: exception_handler : WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ ;
    public final PL_SQLParser.exception_handler_return exception_handler() throws RecognitionException {
        PL_SQLParser.exception_handler_return retval = new PL_SQLParser.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHEN_KEYWORD754=null;
        Token OR_OPERATOR756=null;
        Token THEN_KEYWORD758=null;
        PL_SQLParser.universal_identifier_return universal_identifier755 = null;

        PL_SQLParser.universal_identifier_return universal_identifier757 = null;

        PL_SQLParser.executable_section_return executable_section759 = null;


        CommonTree WHEN_KEYWORD754_tree=null;
        CommonTree OR_OPERATOR756_tree=null;
        CommonTree THEN_KEYWORD758_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:19: ( WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:21: WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+
            {
            root_0 = (CommonTree)adaptor.nil();

            WHEN_KEYWORD754=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exception_handler10283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN_KEYWORD754_tree = (CommonTree)adaptor.create(WHEN_KEYWORD754);
            adaptor.addChild(root_0, WHEN_KEYWORD754_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_exception_handler10285);
            universal_identifier755=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier755.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:55: ( OR_OPERATOR universal_identifier )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==OR_OPERATOR) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:56: OR_OPERATOR universal_identifier
            	    {
            	    OR_OPERATOR756=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_exception_handler10288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR_OPERATOR756_tree = (CommonTree)adaptor.create(OR_OPERATOR756);
            	    adaptor.addChild(root_0, OR_OPERATOR756_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_exception_handler10290);
            	    universal_identifier757=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier757.getTree());

            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);

            THEN_KEYWORD758=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_exception_handler10314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD758_tree = (CommonTree)adaptor.create(THEN_KEYWORD758);
            adaptor.addChild(root_0, THEN_KEYWORD758_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:34: ( executable_section )+
            int cnt232=0;
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==NUMBER_UNSIGNED||LA232_0==STRING||(LA232_0>=IDENTIFIER && LA232_0<=EXT_IDENTIFIER)||LA232_0==BEGIN_KEYWORD||LA232_0==DECLARE_KEYWORD||LA232_0==NULL_KEYWORD||(LA232_0>=TRUE_KEYWORD && LA232_0<=FALSE_KEYWORD)||LA232_0==INTERVAL_KEYWORD||LA232_0==REPLACE_KEYWORD||(LA232_0>=RETURN_KEYWORD && LA232_0<=IN_KEYWORD)||LA232_0==IF_KEYWORD||(LA232_0>=GOTO_KEYWORD && LA232_0<=FOR_KEYWORD)||LA232_0==SELECT_KEYWORD||(LA232_0>=RAISE_KEYWORD && LA232_0<=PRAGMA_KEYWORD)||(LA232_0>=CASE_KEYWORD && LA232_0<=CLOSE_KEYWORD)||LA232_0==COMMIT_KEYWORD||LA232_0==CONTINUE_KEYWORD||(LA232_0>=DELETE_KEYWORD && LA232_0<=EXECUTE_KEYWORD)||LA232_0==EXIT_KEYWORD||LA232_0==FETCH_KEYWORD||LA232_0==FORALL_KEYWORD||(LA232_0>=INSERT_KEYWORD && LA232_0<=OPEN_KEYWORD)||(LA232_0>=ROLLBACK_KEYWORD && LA232_0<=SAVEPOINT_KEYWORD)||LA232_0==SET_KEYWORD||(LA232_0>=SQLCODE_KEYWORD && LA232_0<=UPDATE_KEYWORD)||LA232_0==RESULT_KEYWORD||LA232_0==LPAREN||LA232_0==NOT_OPERATOR||LA232_0==210||(LA232_0>=214 && LA232_0<=215)) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:35: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_exception_handler10317);
            	    executable_section759=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section759.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt232 >= 1 ) break loop232;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(232, input);
                        throw eee;
                }
                cnt232++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    public static class scale_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scale_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:1: scale_types : SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? ;
    public final PL_SQLParser.scale_types_return scale_types() throws RecognitionException {
        PL_SQLParser.scale_types_return retval = new PL_SQLParser.scale_types_return();
        retval.start = input.LT(1);
        int scale_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SCALE_TYPES760=null;
        Token char_literal761=null;
        Token char_literal762=null;
        Token NUMBER_UNSIGNED763=null;
        Token COMMA764=null;
        Token set765=null;
        Token NUMBER_UNSIGNED766=null;
        Token char_literal767=null;

        CommonTree SCALE_TYPES760_tree=null;
        CommonTree char_literal761_tree=null;
        CommonTree char_literal762_tree=null;
        CommonTree NUMBER_UNSIGNED763_tree=null;
        CommonTree COMMA764_tree=null;
        CommonTree set765_tree=null;
        CommonTree NUMBER_UNSIGNED766_tree=null;
        CommonTree char_literal767_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:2: ( SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:4: SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SCALE_TYPES760=(Token)match(input,SCALE_TYPES,FOLLOW_SCALE_TYPES_in_scale_types10328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCALE_TYPES760_tree = (CommonTree)adaptor.create(SCALE_TYPES760);
            adaptor.addChild(root_0, SCALE_TYPES760_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:16: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==LPAREN) ) {
                int LA236_1 = input.LA(2);

                if ( (synpred415_PL_SQL()) ) {
                    alt236=1;
                }
            }
            switch (alt236) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
                    {
                    char_literal761=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_scale_types10331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal761_tree = (CommonTree)adaptor.create(char_literal761);
                    adaptor.addChild(root_0, char_literal761_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:21: ( '+' )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==214) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal762=(Token)match(input,214,FOLLOW_214_in_scale_types10333); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal762_tree = (CommonTree)adaptor.create(char_literal762);
                            adaptor.addChild(root_0, char_literal762_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED763=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED763_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED763);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED763_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==COMMA) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                            {
                            COMMA764=(Token)match(input,COMMA,FOLLOW_COMMA_in_scale_types10339); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA764_tree = (CommonTree)adaptor.create(COMMA764);
                            adaptor.addChild(root_0, COMMA764_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:49: ( '+' | '-' )?
                            int alt234=2;
                            int LA234_0 = input.LA(1);

                            if ( ((LA234_0>=214 && LA234_0<=215)) ) {
                                alt234=1;
                            }
                            switch (alt234) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                                    {
                                    set765=(Token)input.LT(1);
                                    if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                                        input.consume();
                                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set765));
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        throw mse;
                                    }


                                    }
                                    break;

                            }

                            NUMBER_UNSIGNED766=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10350); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER_UNSIGNED766_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED766);
                            adaptor.addChild(root_0, NUMBER_UNSIGNED766_tree);
                            }

                            }
                            break;

                    }

                    char_literal767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_scale_types10354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal767_tree = (CommonTree)adaptor.create(char_literal767);
                    adaptor.addChild(root_0, char_literal767_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, scale_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scale_types"

    public static class size_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "size_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:1: size_types : SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.size_types_return size_types() throws RecognitionException {
        PL_SQLParser.size_types_return retval = new PL_SQLParser.size_types_return();
        retval.start = input.LT(1);
        int size_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SIZE_TYPES768=null;
        Token char_literal769=null;
        Token char_literal770=null;
        Token NUMBER_UNSIGNED771=null;
        Token char_literal772=null;

        CommonTree SIZE_TYPES768_tree=null;
        CommonTree char_literal769_tree=null;
        CommonTree char_literal770_tree=null;
        CommonTree NUMBER_UNSIGNED771_tree=null;
        CommonTree char_literal772_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:2: ( SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:4: SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SIZE_TYPES768=(Token)match(input,SIZE_TYPES,FOLLOW_SIZE_TYPES_in_size_types10365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SIZE_TYPES768_tree = (CommonTree)adaptor.create(SIZE_TYPES768);
            adaptor.addChild(root_0, SIZE_TYPES768_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:15: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==LPAREN) ) {
                int LA238_1 = input.LA(2);

                if ( (synpred417_PL_SQL()) ) {
                    alt238=1;
                }
            }
            switch (alt238) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal769=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_size_types10369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal769_tree = (CommonTree)adaptor.create(char_literal769);
                    adaptor.addChild(root_0, char_literal769_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:21: ( '+' )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==214) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal770=(Token)match(input,214,FOLLOW_214_in_size_types10371); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal770_tree = (CommonTree)adaptor.create(char_literal770);
                            adaptor.addChild(root_0, char_literal770_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED771=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_size_types10374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED771_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED771);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED771_tree);
                    }
                    char_literal772=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_size_types10376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal772_tree = (CommonTree)adaptor.create(char_literal772);
                    adaptor.addChild(root_0, char_literal772_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, size_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "size_types"

    public static class raw_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raw_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:1: raw_type : RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.raw_type_return raw_type() throws RecognitionException {
        PL_SQLParser.raw_type_return retval = new PL_SQLParser.raw_type_return();
        retval.start = input.LT(1);
        int raw_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAW_TYPE773=null;
        Token char_literal774=null;
        Token char_literal775=null;
        Token NUMBER_UNSIGNED776=null;
        Token char_literal777=null;

        CommonTree RAW_TYPE773_tree=null;
        CommonTree char_literal774_tree=null;
        CommonTree char_literal775_tree=null;
        CommonTree NUMBER_UNSIGNED776_tree=null;
        CommonTree char_literal777_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:9: ( RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:11: RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAW_TYPE773=(Token)match(input,RAW_TYPE,FOLLOW_RAW_TYPE_in_raw_type10386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAW_TYPE773_tree = (CommonTree)adaptor.create(RAW_TYPE773);
            adaptor.addChild(root_0, RAW_TYPE773_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:20: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==LPAREN) ) {
                int LA240_2 = input.LA(2);

                if ( (synpred419_PL_SQL()) ) {
                    alt240=1;
                }
            }
            switch (alt240) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal774=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_raw_type10390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal774_tree = (CommonTree)adaptor.create(char_literal774);
                    adaptor.addChild(root_0, char_literal774_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:26: ( '+' )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==214) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal775=(Token)match(input,214,FOLLOW_214_in_raw_type10392); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal775_tree = (CommonTree)adaptor.create(char_literal775);
                            adaptor.addChild(root_0, char_literal775_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED776=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_raw_type10395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED776_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED776);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED776_tree);
                    }
                    char_literal777=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_raw_type10397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal777_tree = (CommonTree)adaptor.create(char_literal777);
                    adaptor.addChild(root_0, char_literal777_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, raw_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raw_type"

    public static class year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:876:1: year_type : YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.year_type_return year_type() throws RecognitionException {
        PL_SQLParser.year_type_return retval = new PL_SQLParser.year_type_return();
        retval.start = input.LT(1);
        int year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token YEAR_TYPE778=null;
        Token char_literal779=null;
        Token char_literal780=null;
        Token NUMBER_UNSIGNED781=null;
        Token char_literal782=null;

        CommonTree YEAR_TYPE778_tree=null;
        CommonTree char_literal779_tree=null;
        CommonTree char_literal780_tree=null;
        CommonTree NUMBER_UNSIGNED781_tree=null;
        CommonTree char_literal782_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:2: ( YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:4: YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            YEAR_TYPE778=(Token)match(input,YEAR_TYPE,FOLLOW_YEAR_TYPE_in_year_type10409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YEAR_TYPE778_tree = (CommonTree)adaptor.create(YEAR_TYPE778);
            adaptor.addChild(root_0, YEAR_TYPE778_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:14: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==LPAREN) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:16: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal779=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_year_type10413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal779_tree = (CommonTree)adaptor.create(char_literal779);
                    adaptor.addChild(root_0, char_literal779_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:20: ( '+' )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==214) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal780=(Token)match(input,214,FOLLOW_214_in_year_type10415); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal780_tree = (CommonTree)adaptor.create(char_literal780);
                            adaptor.addChild(root_0, char_literal780_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED781=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_year_type10418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED781_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED781);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED781_tree);
                    }
                    char_literal782=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_year_type10420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal782_tree = (CommonTree)adaptor.create(char_literal782);
                    adaptor.addChild(root_0, char_literal782_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "year_type"

    public static class timestamp_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:879:1: timestamp_type : TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.timestamp_type_return timestamp_type() throws RecognitionException {
        PL_SQLParser.timestamp_type_return retval = new PL_SQLParser.timestamp_type_return();
        retval.start = input.LT(1);
        int timestamp_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TIMESTAMP_TYPE783=null;
        Token char_literal784=null;
        Token char_literal785=null;
        Token NUMBER_UNSIGNED786=null;
        Token char_literal787=null;

        CommonTree TIMESTAMP_TYPE783_tree=null;
        CommonTree char_literal784_tree=null;
        CommonTree char_literal785_tree=null;
        CommonTree NUMBER_UNSIGNED786_tree=null;
        CommonTree char_literal787_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:2: ( TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:4: TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TIMESTAMP_TYPE783=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TIMESTAMP_TYPE783_tree = (CommonTree)adaptor.create(TIMESTAMP_TYPE783);
            adaptor.addChild(root_0, TIMESTAMP_TYPE783_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:19: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==LPAREN) ) {
                int LA244_1 = input.LA(2);

                if ( (synpred423_PL_SQL()) ) {
                    alt244=1;
                }
            }
            switch (alt244) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal784=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_timestamp_type10436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal784_tree = (CommonTree)adaptor.create(char_literal784);
                    adaptor.addChild(root_0, char_literal784_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:25: ( '+' )?
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==214) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal785=(Token)match(input,214,FOLLOW_214_in_timestamp_type10438); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal785_tree = (CommonTree)adaptor.create(char_literal785);
                            adaptor.addChild(root_0, char_literal785_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED786=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED786_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED786);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED786_tree);
                    }
                    char_literal787=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_timestamp_type10443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal787_tree = (CommonTree)adaptor.create(char_literal787);
                    adaptor.addChild(root_0, char_literal787_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, timestamp_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_type"

    public static class day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:882:1: day_type : DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.day_type_return day_type() throws RecognitionException {
        PL_SQLParser.day_type_return retval = new PL_SQLParser.day_type_return();
        retval.start = input.LT(1);
        int day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DAY_TYPE788=null;
        Token char_literal789=null;
        Token char_literal790=null;
        Token NUMBER_UNSIGNED791=null;
        Token char_literal792=null;

        CommonTree DAY_TYPE788_tree=null;
        CommonTree char_literal789_tree=null;
        CommonTree char_literal790_tree=null;
        CommonTree NUMBER_UNSIGNED791_tree=null;
        CommonTree char_literal792_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:2: ( DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:4: DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            DAY_TYPE788=(Token)match(input,DAY_TYPE,FOLLOW_DAY_TYPE_in_day_type10455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DAY_TYPE788_tree = (CommonTree)adaptor.create(DAY_TYPE788);
            adaptor.addChild(root_0, DAY_TYPE788_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:13: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==LPAREN) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:15: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal789=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_day_type10459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal789_tree = (CommonTree)adaptor.create(char_literal789);
                    adaptor.addChild(root_0, char_literal789_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:19: ( '+' )?
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==214) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal790=(Token)match(input,214,FOLLOW_214_in_day_type10461); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal790_tree = (CommonTree)adaptor.create(char_literal790);
                            adaptor.addChild(root_0, char_literal790_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED791=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_day_type10464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED791_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED791);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED791_tree);
                    }
                    char_literal792=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_day_type10466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal792_tree = (CommonTree)adaptor.create(char_literal792);
                    adaptor.addChild(root_0, char_literal792_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "day_type"

    public static class second_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "second_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:885:1: second_type : SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.second_type_return second_type() throws RecognitionException {
        PL_SQLParser.second_type_return retval = new PL_SQLParser.second_type_return();
        retval.start = input.LT(1);
        int second_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SECOND_TYPE793=null;
        Token char_literal794=null;
        Token char_literal795=null;
        Token NUMBER_UNSIGNED796=null;
        Token char_literal797=null;

        CommonTree SECOND_TYPE793_tree=null;
        CommonTree char_literal794_tree=null;
        CommonTree char_literal795_tree=null;
        CommonTree NUMBER_UNSIGNED796_tree=null;
        CommonTree char_literal797_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:2: ( SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:4: SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SECOND_TYPE793=(Token)match(input,SECOND_TYPE,FOLLOW_SECOND_TYPE_in_second_type10478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SECOND_TYPE793_tree = (CommonTree)adaptor.create(SECOND_TYPE793);
            adaptor.addChild(root_0, SECOND_TYPE793_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:16: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==LPAREN) ) {
                int LA248_2 = input.LA(2);

                if ( (synpred427_PL_SQL()) ) {
                    alt248=1;
                }
            }
            switch (alt248) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal794=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_second_type10482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal794_tree = (CommonTree)adaptor.create(char_literal794);
                    adaptor.addChild(root_0, char_literal794_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:22: ( '+' )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==214) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal795=(Token)match(input,214,FOLLOW_214_in_second_type10484); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal795_tree = (CommonTree)adaptor.create(char_literal795);
                            adaptor.addChild(root_0, char_literal795_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED796=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_second_type10487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED796_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED796);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED796_tree);
                    }
                    char_literal797=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_second_type10489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal797_tree = (CommonTree)adaptor.create(char_literal797);
                    adaptor.addChild(root_0, char_literal797_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, second_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "second_type"

    // $ANTLR start synpred35_PL_SQL
    public final void synpred35_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:23: ( ( PACKAGE_KEYWORD package_spec ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:23: ( PACKAGE_KEYWORD package_spec )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:23: ( PACKAGE_KEYWORD package_spec )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:24: PACKAGE_KEYWORD package_spec
        {
        match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_synpred35_PL_SQL5199); if (state.failed) return ;
        pushFollow(FOLLOW_package_spec_in_synpred35_PL_SQL5201);
        package_spec();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred35_PL_SQL

    // $ANTLR start synpred68_PL_SQL
    public final void synpred68_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:37: ( dml_event_clause_factor )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:37: dml_event_clause_factor
        {
        pushFollow(FOLLOW_dml_event_clause_factor_in_synpred68_PL_SQL5697);
        dml_event_clause_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_PL_SQL

    // $ANTLR start synpred72_PL_SQL
    public final void synpred72_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:43: ( referencing_clause )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:43: referencing_clause
        {
        pushFollow(FOLLOW_referencing_clause_in_synpred72_PL_SQL5752);
        referencing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_PL_SQL

    // $ANTLR start synpred83_PL_SQL
    public final void synpred83_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:20: ( ( TYPE_KEYWORD type_spec_declaration ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:20: ( TYPE_KEYWORD type_spec_declaration )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:20: ( TYPE_KEYWORD type_spec_declaration )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:21: TYPE_KEYWORD type_spec_declaration
        {
        match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_synpred83_PL_SQL5887); if (state.failed) return ;
        pushFollow(FOLLOW_type_spec_declaration_in_synpred83_PL_SQL5889);
        type_spec_declaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred83_PL_SQL

    // $ANTLR start synpred89_PL_SQL
    public final void synpred89_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:19: ( object_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:19: object_type
        {
        pushFollow(FOLLOW_object_type_in_synpred89_PL_SQL6029);
        object_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_PL_SQL

    // $ANTLR start synpred90_PL_SQL
    public final void synpred90_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:33: ( varray_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:33: varray_type
        {
        pushFollow(FOLLOW_varray_type_in_synpred90_PL_SQL6033);
        varray_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_PL_SQL

    // $ANTLR start synpred94_PL_SQL
    public final void synpred94_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:17: ( ( NOT_OPERATOR )? FINAL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:17: ( NOT_OPERATOR )? FINAL_KEYWORD
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:17: ( NOT_OPERATOR )?
        int alt265=2;
        int LA265_0 = input.LA(1);

        if ( (LA265_0==NOT_OPERATOR) ) {
            alt265=1;
        }
        switch (alt265) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                {
                match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL6093); if (state.failed) return ;

                }
                break;

        }

        match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL6096); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_PL_SQL

    // $ANTLR start synpred101_PL_SQL
    public final void synpred101_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:16: ( inheritance_clauses )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:16: inheritance_clauses
        {
        pushFollow(FOLLOW_inheritance_clauses_in_synpred101_PL_SQL6140);
        inheritance_clauses();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_PL_SQL

    // $ANTLR start synpred104_PL_SQL
    public final void synpred104_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:101: ( ',' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:101: ','
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred104_PL_SQL6156); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_PL_SQL

    // $ANTLR start synpred105_PL_SQL
    public final void synpred105_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:38: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
        int alt269=3;
        switch ( input.LA(1) ) {
        case MEMBER_KEYWORD:
        case STATIC_KEYWORD:
            {
            alt269=1;
            }
            break;
        case FINAL_KEYWORD:
        case INSTANTIABLE_KEYWORD:
        case CONSTRUCTOR_KEYWORD:
            {
            alt269=2;
            }
            break;
        case MAP_KEYWORD:
        case ORDER_KEYWORD:
            {
            alt269=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 269, 0, input);

            throw nvae;
        }

        switch (alt269) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:39: subprogram_spec
                {
                pushFollow(FOLLOW_subprogram_spec_in_synpred105_PL_SQL6145);
                subprogram_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:57: constructor_spec
                {
                pushFollow(FOLLOW_constructor_spec_in_synpred105_PL_SQL6149);
                constructor_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:76: map_order_function_spec
                {
                pushFollow(FOLLOW_map_order_function_spec_in_synpred105_PL_SQL6153);
                map_order_function_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:101: ( ',' )?
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==COMMA) ) {
            alt270=1;
        }
        switch (alt270) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred105_PL_SQL6156); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_PL_SQL

    // $ANTLR start synpred137_PL_SQL
    public final void synpred137_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:21: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:21: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred137_PL_SQL6646);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_PL_SQL

    // $ANTLR start synpred189_PL_SQL
    public final void synpred189_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:36: ( sql_operator )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:36: sql_operator
        {
        pushFollow(FOLLOW_sql_operator_in_synpred189_PL_SQL7076);
        sql_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_PL_SQL

    // $ANTLR start synpred191_PL_SQL
    public final void synpred191_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:66: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:66: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL7084); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_PL_SQL

    // $ANTLR start synpred192_PL_SQL
    public final void synpred192_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:79: ( NOT_OPERATOR IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:79: NOT_OPERATOR IN_KEYWORD
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred192_PL_SQL7088); if (state.failed) return ;
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred192_PL_SQL7090); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_PL_SQL

    // $ANTLR start synpred201_PL_SQL
    public final void synpred201_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:16: ( SET_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:16: SET_KEYWORD
        {
        match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_synpred201_PL_SQL7171); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_PL_SQL

    // $ANTLR start synpred207_PL_SQL
    public final void synpred207_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:33: ( REPLACE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:33: REPLACE_KEYWORD
        {
        match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_synpred207_PL_SQL7210); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_PL_SQL

    // $ANTLR start synpred208_PL_SQL
    public final void synpred208_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:16: ( NUMBER_UNSIGNED )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:16: NUMBER_UNSIGNED
        {
        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred208_PL_SQL7229); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_PL_SQL

    // $ANTLR start synpred210_PL_SQL
    public final void synpred210_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:50: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:50: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred210_PL_SQL7237);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_PL_SQL

    // $ANTLR start synpred211_PL_SQL
    public final void synpred211_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:73: ( case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:73: case_statement_expression
        {
        pushFollow(FOLLOW_case_statement_expression_in_synpred211_PL_SQL7241);
        case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_PL_SQL

    // $ANTLR start synpred212_PL_SQL
    public final void synpred212_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:16: ( STRING )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:16: STRING
        {
        match(input,STRING,FOLLOW_STRING_in_synpred212_PL_SQL7260); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_PL_SQL

    // $ANTLR start synpred213_PL_SQL
    public final void synpred213_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:25: ( COMMA )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:25: COMMA
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred213_PL_SQL7264); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_PL_SQL

    // $ANTLR start synpred216_PL_SQL
    public final void synpred216_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:62: ( NOT_OPERATOR )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:62: NOT_OPERATOR
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL7276); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_PL_SQL

    // $ANTLR start synpred217_PL_SQL
    public final void synpred217_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:16: ( IS_KEYWORD NOT_OPERATOR NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL7295); if (state.failed) return ;
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred217_PL_SQL7297); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL7299); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_PL_SQL

    // $ANTLR start synpred218_PL_SQL
    public final void synpred218_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:55: ( IS_KEYWORD NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:55: IS_KEYWORD NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred218_PL_SQL7303); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7305); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_PL_SQL

    // $ANTLR start synpred219_PL_SQL
    public final void synpred219_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:81: ( NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:81: NULL_KEYWORD
        {
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred219_PL_SQL7309); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_PL_SQL

    // $ANTLR start synpred222_PL_SQL
    public final void synpred222_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: ( sql_statements )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: sql_statements
        {
        pushFollow(FOLLOW_sql_statements_in_synpred222_PL_SQL7352);
        sql_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_PL_SQL

    // $ANTLR start synpred223_PL_SQL
    public final void synpred223_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:16: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:16: expression
        {
        pushFollow(FOLLOW_expression_in_synpred223_PL_SQL7372);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_PL_SQL

    // $ANTLR start synpred227_PL_SQL
    public final void synpred227_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:36: ( ( sql_not_parsed | ON_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:36: ( sql_not_parsed | ON_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:36: ( sql_not_parsed | ON_KEYWORD )
        int alt277=2;
        int LA277_0 = input.LA(1);

        if ( ((LA277_0>=NUMBER_UNSIGNED && LA277_0<=OR_OPERATOR)||(LA277_0>=STRING && LA277_0<=SOME_TYPES)||(LA277_0>=KEYWORD && LA277_0<=ALIAS)||LA277_0==COMMA||LA277_0==NULL_KEYWORD||(LA277_0>=TRUE_KEYWORD && LA277_0<=FALSE_KEYWORD)||LA277_0==WITH_KEYWORD||LA277_0==INTERVAL_KEYWORD||LA277_0==IS_KEYWORD||LA277_0==REPLACE_KEYWORD||LA277_0==AS_KEYWORD||LA277_0==IN_KEYWORD||(LA277_0>=SELECT_KEYWORD && LA277_0<=COUNT_KEYWORD)||LA277_0==LIKE_KEYWORD||LA277_0==CASE_KEYWORD||(LA277_0>=TABLE_KEYWORD && LA277_0<=OF_KEYWORD)||LA277_0==BY_KEYWORD||LA277_0==COMMIT_KEYWORD||LA277_0==DELETE_KEYWORD||LA277_0==INTO_KEYWORD||(LA277_0>=BULK_KEYWORD && LA277_0<=COLLECT_KEYWORD)||(LA277_0>=VALUES_KEYWORD && LA277_0<=BETWEEN_KEYWORD)||(LA277_0>=INSERT_KEYWORD && LA277_0<=MERGE_KEYWORD)||(LA277_0>=RETURNING_KEYWORD && LA277_0<=SAVEPOINT_KEYWORD)||LA277_0==SET_KEYWORD||(LA277_0>=SQLCODE_KEYWORD && LA277_0<=EXISTS_KEYWORD)||LA277_0==ROW_KEYWORD||LA277_0==RESULT_KEYWORD||LA277_0==JOIN_KEYWORD||LA277_0==LPAREN||LA277_0==NOT_OPERATOR||LA277_0==THE_REST||LA277_0==212||(LA277_0>=214 && LA277_0<=228)) ) {
            alt277=1;
        }
        else if ( (LA277_0==ON_KEYWORD) ) {
            alt277=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 277, 0, input);

            throw nvae;
        }
        switch (alt277) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:37: sql_not_parsed
                {
                pushFollow(FOLLOW_sql_not_parsed_in_synpred227_PL_SQL7403);
                sql_not_parsed();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:54: ON_KEYWORD
                {
                match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred227_PL_SQL7407); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred227_PL_SQL

    // $ANTLR start synpred228_PL_SQL
    public final void synpred228_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:68: ( ( FOR_KEYWORD UPDATE_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:69: FOR_KEYWORD UPDATE_KEYWORD
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred228_PL_SQL7413); if (state.failed) return ;
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred228_PL_SQL7415); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred228_PL_SQL

    // $ANTLR start synpred229_PL_SQL
    public final void synpred229_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:35: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:35: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred229_PL_SQL7427);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_PL_SQL

    // $ANTLR start synpred230_PL_SQL
    public final void synpred230_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7438);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_PL_SQL

    // $ANTLR start synpred231_PL_SQL
    public final void synpred231_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7450);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_PL_SQL

    // $ANTLR start synpred232_PL_SQL
    public final void synpred232_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:52: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:52: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7464);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_PL_SQL

    // $ANTLR start synpred233_PL_SQL
    public final void synpred233_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:34: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:34: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred233_PL_SQL7476);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_PL_SQL

    // $ANTLR start synpred234_PL_SQL
    public final void synpred234_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:51: ( ON_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:51: ON_KEYWORD
        {
        match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred234_PL_SQL7480); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_PL_SQL

    // $ANTLR start synpred235_PL_SQL
    public final void synpred235_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:19: ( USING_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:19: USING_KEYWORD
        {
        match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_synpred235_PL_SQL7502); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_PL_SQL

    // $ANTLR start synpred236_PL_SQL
    public final void synpred236_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:35: ( WHEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:35: WHEN_KEYWORD
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred236_PL_SQL7506); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_PL_SQL

    // $ANTLR start synpred237_PL_SQL
    public final void synpred237_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:50: ( THEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:50: THEN_KEYWORD
        {
        match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_synpred237_PL_SQL7510); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_PL_SQL

    // $ANTLR start synpred238_PL_SQL
    public final void synpred238_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:65: ( INSERT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:65: INSERT_KEYWORD
        {
        match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_synpred238_PL_SQL7514); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_PL_SQL

    // $ANTLR start synpred239_PL_SQL
    public final void synpred239_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:19: ( UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:19: UPDATE_KEYWORD
        {
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred239_PL_SQL7536); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_PL_SQL

    // $ANTLR start synpred240_PL_SQL
    public final void synpred240_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:39: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:39: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7547);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_PL_SQL

    // $ANTLR start synpred241_PL_SQL
    public final void synpred241_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:62: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:62: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred241_PL_SQL7569);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_PL_SQL

    // $ANTLR start synpred242_PL_SQL
    public final void synpred242_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred242_PL_SQL7581);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_PL_SQL

    // $ANTLR start synpred243_PL_SQL
    public final void synpred243_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:35: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:35: expression
        {
        pushFollow(FOLLOW_expression_in_synpred243_PL_SQL7603);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_PL_SQL

    // $ANTLR start synpred250_PL_SQL
    public final void synpred250_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:78: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:78: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred250_PL_SQL7743);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_PL_SQL

    // $ANTLR start synpred253_PL_SQL
    public final void synpred253_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:23: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
        {
        pushFollow(FOLLOW_expression_in_synpred253_PL_SQL7814);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
        int alt280=2;
        int LA280_0 = input.LA(1);

        if ( (LA280_0==229) ) {
            alt280=1;
        }
        else if ( (LA280_0==LOOP_KEYWORD) ) {
            alt280=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 280, 0, input);

            throw nvae;
        }
        switch (alt280) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:36: for_loop_statement_part
                {
                pushFollow(FOLLOW_for_loop_statement_part_in_synpred253_PL_SQL7817);
                for_loop_statement_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:62: cursor_for_loop_statement1
                {
                pushFollow(FOLLOW_cursor_for_loop_statement1_in_synpred253_PL_SQL7821);
                cursor_for_loop_statement1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred253_PL_SQL

    // $ANTLR start synpred254_PL_SQL
    public final void synpred254_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:33: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:33: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred254_PL_SQL7892);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_PL_SQL

    // $ANTLR start synpred255_PL_SQL
    public final void synpred255_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:29: ( simple_case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:29: simple_case_statement_expression
        {
        pushFollow(FOLLOW_simple_case_statement_expression_in_synpred255_PL_SQL7900);
        simple_case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_PL_SQL

    // $ANTLR start synpred260_PL_SQL
    public final void synpred260_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred260_PL_SQL8015); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_PL_SQL

    // $ANTLR start synpred261_PL_SQL
    public final void synpred261_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred261_PL_SQL8018);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_PL_SQL

    // $ANTLR start synpred266_PL_SQL
    public final void synpred266_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred266_PL_SQL8167); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_PL_SQL

    // $ANTLR start synpred267_PL_SQL
    public final void synpred267_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred267_PL_SQL8170);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_PL_SQL

    // $ANTLR start synpred268_PL_SQL
    public final void synpred268_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:39: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:39: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred268_PL_SQL8253);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_PL_SQL

    // $ANTLR start synpred269_PL_SQL
    public final void synpred269_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:52: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:52: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred269_PL_SQL8257); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred269_PL_SQL8259);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_PL_SQL

    // $ANTLR start synpred277_PL_SQL
    public final void synpred277_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:31: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:31: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred277_PL_SQL8458); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_PL_SQL

    // $ANTLR start synpred279_PL_SQL
    public final void synpred279_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:58: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:58: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:58: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:59: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8467); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred279_PL_SQL8469); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred279_PL_SQL

    // $ANTLR start synpred280_PL_SQL
    public final void synpred280_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:22: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:22: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred280_PL_SQL8495); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_PL_SQL

    // $ANTLR start synpred282_PL_SQL
    public final void synpred282_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:49: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:49: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:49: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:50: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred282_PL_SQL8504); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred282_PL_SQL8506); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred282_PL_SQL

    // $ANTLR start synpred284_PL_SQL
    public final void synpred284_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:31: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:31: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred284_PL_SQL8522);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_PL_SQL

    // $ANTLR start synpred285_PL_SQL
    public final void synpred285_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:44: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:44: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred285_PL_SQL8526); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred285_PL_SQL8528);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_PL_SQL

    // $ANTLR start synpred292_PL_SQL
    public final void synpred292_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:52: ( open_params )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:52: open_params
        {
        pushFollow(FOLLOW_open_params_in_synpred292_PL_SQL8768);
        open_params();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_PL_SQL

    // $ANTLR start synpred296_PL_SQL
    public final void synpred296_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:19: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred296_PL_SQL8789); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:31: ( select_statement | STRING | universal_identifier )
        int alt288=3;
        switch ( input.LA(1) ) {
        case SELECT_KEYWORD:
            {
            alt288=1;
            }
            break;
        case STRING:
            {
            alt288=2;
            }
            break;
        case IDENTIFIER:
        case EXT_IDENTIFIER:
        case INTERVAL_KEYWORD:
        case RESULT_KEYWORD:
            {
            alt288=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 288, 0, input);

            throw nvae;
        }

        switch (alt288) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:32: select_statement
                {
                pushFollow(FOLLOW_select_statement_in_synpred296_PL_SQL8792);
                select_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:51: STRING
                {
                match(input,STRING,FOLLOW_STRING_in_synpred296_PL_SQL8796); if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:60: universal_identifier
                {
                pushFollow(FOLLOW_universal_identifier_in_synpred296_PL_SQL8800);
                universal_identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:82: ( using_clause )?
        int alt289=2;
        int LA289_0 = input.LA(1);

        if ( (LA289_0==USING_KEYWORD) ) {
            alt289=1;
        }
        switch (alt289) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred296_PL_SQL8803);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred296_PL_SQL

    // $ANTLR start synpred300_PL_SQL
    public final void synpred300_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:37: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred300_PL_SQL8841); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:41: ( '+' | '-' )?
        int alt290=2;
        int LA290_0 = input.LA(1);

        if ( ((LA290_0>=214 && LA290_0<=215)) ) {
            alt290=1;
        }
        switch (alt290) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred300_PL_SQL8850); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred300_PL_SQL8852); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_PL_SQL

    // $ANTLR start synpred305_PL_SQL
    public final void synpred305_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:25: ( ( identifier data_type ( variable_declaration_part )? ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:25: ( identifier data_type ( variable_declaration_part )? )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:25: ( identifier data_type ( variable_declaration_part )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:26: identifier data_type ( variable_declaration_part )?
        {
        pushFollow(FOLLOW_identifier_in_synpred305_PL_SQL8954);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred305_PL_SQL8956);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:24: ( variable_declaration_part )?
        int alt291=2;
        int LA291_0 = input.LA(1);

        if ( (LA291_0==DEFAULT_KEYWORD||LA291_0==NOT_OPERATOR||LA291_0==230) ) {
            alt291=1;
        }
        switch (alt291) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                {
                pushFollow(FOLLOW_variable_declaration_part_in_synpred305_PL_SQL8982);
                variable_declaration_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred305_PL_SQL

    // $ANTLR start synpred306_PL_SQL
    public final void synpred306_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:9: ( ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
        {
        pushFollow(FOLLOW_identifier_in_synpred306_PL_SQL9000);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_synpred306_PL_SQL9002); if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred306_PL_SQL9004);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variable_declaration_part_in_synpred306_PL_SQL9030);
        variable_declaration_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred306_PL_SQL

    // $ANTLR start synpred309_PL_SQL
    public final void synpred309_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:11: ( ( identifier EXCEPTION_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:11: ( identifier EXCEPTION_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:11: ( identifier EXCEPTION_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:12: identifier EXCEPTION_KEYWORD
        {
        pushFollow(FOLLOW_identifier_in_synpred309_PL_SQL9068);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_synpred309_PL_SQL9070); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred309_PL_SQL

    // $ANTLR start synpred323_PL_SQL
    public final void synpred323_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:31: ( interval_year_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:31: interval_year_type
        {
        pushFollow(FOLLOW_interval_year_type_in_synpred323_PL_SQL9244);
        interval_year_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_PL_SQL

    // $ANTLR start synpred324_PL_SQL
    public final void synpred324_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:52: ( interval_day_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:52: interval_day_type
        {
        pushFollow(FOLLOW_interval_day_type_in_synpred324_PL_SQL9248);
        interval_day_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_PL_SQL

    // $ANTLR start synpred326_PL_SQL
    public final void synpred326_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:13: ( ( ( REF_KEYWORD )? universal_identifier ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:13: ( ( REF_KEYWORD )? universal_identifier )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:13: ( ( REF_KEYWORD )? universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:14: ( REF_KEYWORD )? universal_identifier
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:14: ( REF_KEYWORD )?
        int alt294=2;
        int LA294_0 = input.LA(1);

        if ( (LA294_0==REF_KEYWORD) ) {
            alt294=1;
        }
        switch (alt294) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                {
                match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_synpred326_PL_SQL9266); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_universal_identifier_in_synpred326_PL_SQL9269);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred326_PL_SQL

    // $ANTLR start synpred331_PL_SQL
    public final void synpred331_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:40: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred331_PL_SQL9289); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:44: ( '+' )?
        int alt295=2;
        int LA295_0 = input.LA(1);

        if ( (LA295_0==214) ) {
            alt295=1;
        }
        switch (alt295) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred331_PL_SQL9291); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred331_PL_SQL9294); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:65: ( CHAR_TYPE | BYTE_TYPE )?
        int alt296=2;
        int LA296_0 = input.LA(1);

        if ( ((LA296_0>=CHAR_TYPE && LA296_0<=BYTE_TYPE)) ) {
            alt296=1;
        }
        switch (alt296) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred331_PL_SQL9305); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_PL_SQL

    // $ANTLR start synpred355_PL_SQL
    public final void synpred355_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:25: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:25: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred355_PL_SQL9774);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_PL_SQL

    // $ANTLR start synpred381_PL_SQL
    public final void synpred381_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:24: ( unary_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:24: unary_op
        {
        pushFollow(FOLLOW_unary_op_in_synpred381_PL_SQL9954);
        unary_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_PL_SQL

    // $ANTLR start synpred382_PL_SQL
    public final void synpred382_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:51: ( postfix_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:51: postfix_op
        {
        pushFollow(FOLLOW_postfix_op_in_synpred382_PL_SQL9959);
        postfix_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_PL_SQL

    // $ANTLR start synpred383_PL_SQL
    public final void synpred383_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:74: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:74: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred383_PL_SQL9966);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_PL_SQL

    // $ANTLR start synpred384_PL_SQL
    public final void synpred384_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:64: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:64: operator ( universal_expression | ( '(' select_statement ')' ) )
        {
        pushFollow(FOLLOW_operator_in_synpred384_PL_SQL9963);
        operator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:73: ( universal_expression | ( '(' select_statement ')' ) )
        int alt299=2;
        int LA299_0 = input.LA(1);

        if ( (LA299_0==NUMBER_UNSIGNED||LA299_0==STRING||(LA299_0>=IDENTIFIER && LA299_0<=EXT_IDENTIFIER)||LA299_0==NULL_KEYWORD||(LA299_0>=TRUE_KEYWORD && LA299_0<=FALSE_KEYWORD)||LA299_0==INTERVAL_KEYWORD||LA299_0==REPLACE_KEYWORD||LA299_0==IN_KEYWORD||LA299_0==CASE_KEYWORD||(LA299_0>=SQLCODE_KEYWORD && LA299_0<=SQLERRM_KEYWORD)||LA299_0==RESULT_KEYWORD||LA299_0==NOT_OPERATOR||(LA299_0>=214 && LA299_0<=215)) ) {
            alt299=1;
        }
        else if ( (LA299_0==LPAREN) ) {
            int LA299_2 = input.LA(2);

            if ( (synpred383_PL_SQL()) ) {
                alt299=1;
            }
            else if ( (true) ) {
                alt299=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 299, 0, input);

            throw nvae;
        }
        switch (alt299) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:74: universal_expression
                {
                pushFollow(FOLLOW_universal_expression_in_synpred384_PL_SQL9966);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:97: ( '(' select_statement ')' )
                {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:97: ( '(' select_statement ')' )
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:98: '(' select_statement ')'
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred384_PL_SQL9971); if (state.failed) return ;
                pushFollow(FOLLOW_select_statement_in_synpred384_PL_SQL9973);
                select_statement();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred384_PL_SQL9975); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred384_PL_SQL

    // $ANTLR start synpred392_PL_SQL
    public final void synpred392_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:58: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:58: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred392_PL_SQL10078);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_PL_SQL

    // $ANTLR start synpred393_PL_SQL
    public final void synpred393_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:36: ( call_statement_param ( in_notin_expression )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:36: call_statement_param ( in_notin_expression )?
        {
        pushFollow(FOLLOW_call_statement_param_in_synpred393_PL_SQL10075);
        call_statement_param();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:57: ( in_notin_expression )?
        int alt300=2;
        int LA300_0 = input.LA(1);

        if ( (LA300_0==IN_KEYWORD||LA300_0==NOT_OPERATOR) ) {
            alt300=1;
        }
        switch (alt300) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:58: in_notin_expression
                {
                pushFollow(FOLLOW_in_notin_expression_in_synpred393_PL_SQL10078);
                in_notin_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred393_PL_SQL

    // $ANTLR start synpred403_PL_SQL
    public final void synpred403_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:61: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:61: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred403_PL_SQL10188);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_PL_SQL

    // $ANTLR start synpred406_PL_SQL
    public final void synpred406_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:24: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred406_PL_SQL10198); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:29: ( universal_expression ( ',' universal_expression )* )?
        int alt305=2;
        int LA305_0 = input.LA(1);

        if ( (LA305_0==NUMBER_UNSIGNED||LA305_0==STRING||(LA305_0>=IDENTIFIER && LA305_0<=EXT_IDENTIFIER)||LA305_0==NULL_KEYWORD||(LA305_0>=TRUE_KEYWORD && LA305_0<=FALSE_KEYWORD)||LA305_0==INTERVAL_KEYWORD||LA305_0==REPLACE_KEYWORD||LA305_0==IN_KEYWORD||LA305_0==CASE_KEYWORD||(LA305_0>=SQLCODE_KEYWORD && LA305_0<=SQLERRM_KEYWORD)||LA305_0==RESULT_KEYWORD||LA305_0==LPAREN||LA305_0==NOT_OPERATOR||(LA305_0>=214 && LA305_0<=215)) ) {
            alt305=1;
        }
        switch (alt305) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:30: universal_expression ( ',' universal_expression )*
                {
                pushFollow(FOLLOW_universal_expression_in_synpred406_PL_SQL10201);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:51: ( ',' universal_expression )*
                loop304:
                do {
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==COMMA) ) {
                        alt304=1;
                    }


                    switch (alt304) {
                	case 1 :
                	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:52: ',' universal_expression
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred406_PL_SQL10204); if (state.failed) return ;
                	    pushFollow(FOLLOW_universal_expression_in_synpred406_PL_SQL10206);
                	    universal_expression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop304;
                    }
                } while (true);


                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred406_PL_SQL10213); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred406_PL_SQL

    // $ANTLR start synpred415_PL_SQL
    public final void synpred415_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:17: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred415_PL_SQL10331); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:21: ( '+' )?
        int alt307=2;
        int LA307_0 = input.LA(1);

        if ( (LA307_0==214) ) {
            alt307=1;
        }
        switch (alt307) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred415_PL_SQL10333); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred415_PL_SQL10336); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
        int alt309=2;
        int LA309_0 = input.LA(1);

        if ( (LA309_0==COMMA) ) {
            alt309=1;
        }
        switch (alt309) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred415_PL_SQL10339); if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:49: ( '+' | '-' )?
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( ((LA308_0>=214 && LA308_0<=215)) ) {
                    alt308=1;
                }
                switch (alt308) {
                    case 1 :
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                        {
                        if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                            input.consume();
                            state.errorRecovery=false;state.failed=false;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }

                match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred415_PL_SQL10350); if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred415_PL_SQL10354); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_PL_SQL

    // $ANTLR start synpred417_PL_SQL
    public final void synpred417_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:17: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred417_PL_SQL10369); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:21: ( '+' )?
        int alt310=2;
        int LA310_0 = input.LA(1);

        if ( (LA310_0==214) ) {
            alt310=1;
        }
        switch (alt310) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred417_PL_SQL10371); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10374); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred417_PL_SQL10376); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_PL_SQL

    // $ANTLR start synpred419_PL_SQL
    public final void synpred419_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:22: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred419_PL_SQL10390); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:26: ( '+' )?
        int alt311=2;
        int LA311_0 = input.LA(1);

        if ( (LA311_0==214) ) {
            alt311=1;
        }
        switch (alt311) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred419_PL_SQL10392); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred419_PL_SQL10395); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred419_PL_SQL10397); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_PL_SQL

    // $ANTLR start synpred423_PL_SQL
    public final void synpred423_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:21: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred423_PL_SQL10436); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:25: ( '+' )?
        int alt313=2;
        int LA313_0 = input.LA(1);

        if ( (LA313_0==214) ) {
            alt313=1;
        }
        switch (alt313) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred423_PL_SQL10438); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred423_PL_SQL10441); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred423_PL_SQL10443); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_PL_SQL

    // $ANTLR start synpred427_PL_SQL
    public final void synpred427_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:18: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred427_PL_SQL10482); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:22: ( '+' )?
        int alt315=2;
        int LA315_0 = input.LA(1);

        if ( (LA315_0==214) ) {
            alt315=1;
        }
        switch (alt315) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred427_PL_SQL10484); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred427_PL_SQL10487); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred427_PL_SQL10489); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_PL_SQL

    // Delegated rules

    public final boolean synpred241_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA223 dfa223 = new DFA223(this);
    static final String DFA116_eotS =
        "\22\uffff";
    static final String DFA116_eofS =
        "\22\uffff";
    static final String DFA116_minS =
        "\1\4\21\uffff";
    static final String DFA116_maxS =
        "\1\u00d7\21\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21";
    static final String DFA116_specialS =
        "\22\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\1\6\uffff\1\1\14\uffff\2\1\12\uffff\1\1\4\uffff\2\1\5\uffff"+
            "\1\1\6\uffff\1\1\2\uffff\1\7\1\1\12\uffff\1\10\2\uffff\1\2\1"+
            "\3\1\4\1\5\1\uffff\1\6\3\uffff\1\11\1\20\1\uffff\1\1\1\12\7"+
            "\uffff\1\6\1\uffff\1\13\1\uffff\1\6\1\14\1\uffff\1\15\4\uffff"+
            "\1\16\1\uffff\1\17\6\uffff\3\6\1\21\4\uffff\2\6\1\uffff\1\6"+
            "\5\uffff\2\1\1\6\32\uffff\1\1\15\uffff\1\1\7\uffff\1\1\36\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "702:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );";
        }
    }
    static final String DFA117_eotS =
        "\13\uffff";
    static final String DFA117_eofS =
        "\13\uffff";
    static final String DFA117_minS =
        "\1\116\12\uffff";
    static final String DFA117_maxS =
        "\1\u0086\12\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA117_specialS =
        "\13\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\1\17\uffff\1\2\3\uffff\1\3\20\uffff\1\5\1\6\1\7\5\uffff"+
            "\1\10\1\11\1\uffff\1\12\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "708:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );";
        }
    }
    static final String DFA119_eotS =
        "\67\uffff";
    static final String DFA119_eofS =
        "\67\uffff";
    static final String DFA119_minS =
        "\1\4\3\uffff\1\0\3\uffff\1\0\2\uffff\1\0\6\uffff\1\0\5\uffff\1"+
        "\0\1\uffff\1\0\2\uffff\1\0\6\uffff\1\0\2\uffff\1\0\4\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\3\uffff\1\0\2\uffff";
    static final String DFA119_maxS =
        "\1\u00e4\3\uffff\1\0\3\uffff\1\0\2\uffff\1\0\6\uffff\1\0\5\uffff"+
        "\1\0\1\uffff\1\0\2\uffff\1\0\6\uffff\1\0\2\uffff\1\0\4\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\2\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\44\1\12\1\42\1\uffff\1\25\1\45\1\10\1\uffff\1\6\1\36"+
        "\1\uffff\1\17\1\22\1\16\1\1\1\20\1\23\1\uffff\1\5\1\14\1\4\1\11"+
        "\1\35\1\uffff\1\31\1\uffff\1\32\1\2\1\uffff\1\37\1\40\1\45\1\46"+
        "\1\15\1\24\1\uffff\1\3\1\33\1\uffff\1\26\1\3\1\34\1\13\1\uffff\1"+
        "\47\1\uffff\1\41\1\uffff\1\30\1\21\1\7\1\uffff\1\43\1\27";
    static final String DFA119_specialS =
        "\4\uffff\1\0\3\uffff\1\1\2\uffff\1\2\6\uffff\1\3\5\uffff\1\4\1"+
        "\uffff\1\5\2\uffff\1\6\6\uffff\1\7\2\uffff\1\10\4\uffff\1\11\1\uffff"+
        "\1\12\1\uffff\1\13\3\uffff\1\14\2\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\47\1\52\1\27\4\uffff\1\32\1\2\12\uffff\1\34\2\60\1\17\1"+
            "\uffff\1\44\7\uffff\1\56\4\uffff\2\40\1\uffff\1\62\3\uffff\1"+
            "\60\3\uffff\1\35\2\uffff\1\4\1\uffff\1\63\1\uffff\1\22\22\uffff"+
            "\1\1\1\66\1\uffff\1\3\3\uffff\1\30\1\uffff\1\15\1\65\1\uffff"+
            "\1\20\3\uffff\1\1\3\uffff\1\1\3\uffff\1\25\1\uffff\1\53\1\24"+
            "\6\uffff\1\7\1\26\1\uffff\3\1\4\uffff\1\42\2\1\1\uffff\1\13"+
            "\5\uffff\2\40\1\1\1\43\13\uffff\1\16\15\uffff\1\60\2\uffff\1"+
            "\21\12\uffff\1\54\7\uffff\1\10\31\uffff\1\41\2\uffff\1\51\1"+
            "\uffff\2\64\15\51",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "714:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_4 = input.LA(1);

                         
                        int index119_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_PL_SQL()) ) {s = 5;}

                        else if ( (synpred223_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index119_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_8 = input.LA(1);

                         
                        int index119_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_PL_SQL()) ) {s = 9;}

                        else if ( (synpred216_PL_SQL()) ) {s = 10;}

                        else if ( (synpred223_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index119_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA119_11 = input.LA(1);

                         
                        int index119_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_PL_SQL()) ) {s = 12;}

                        else if ( (synpred222_PL_SQL()) ) {s = 1;}

                         
                        input.seek(index119_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA119_18 = input.LA(1);

                         
                        int index119_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_PL_SQL()) ) {s = 19;}

                        else if ( (synpred223_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index119_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA119_24 = input.LA(1);

                         
                        int index119_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_PL_SQL()) ) {s = 25;}

                        else if ( (synpred223_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index119_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA119_26 = input.LA(1);

                         
                        int index119_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_PL_SQL()) ) {s = 27;}

                        else if ( (synpred223_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index119_26);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA119_29 = input.LA(1);

                         
                        int index119_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred217_PL_SQL()) ) {s = 30;}

                        else if ( (synpred218_PL_SQL()) ) {s = 31;}

                         
                        input.seek(index119_29);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA119_36 = input.LA(1);

                         
                        int index119_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_PL_SQL()) ) {s = 37;}

                        else if ( (synpred213_PL_SQL()) ) {s = 38;}

                         
                        input.seek(index119_36);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA119_39 = input.LA(1);

                         
                        int index119_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_PL_SQL()) ) {s = 40;}

                        else if ( (synpred223_PL_SQL()) ) {s = 32;}

                         
                        input.seek(index119_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA119_44 = input.LA(1);

                         
                        int index119_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_PL_SQL()) ) {s = 32;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index119_44);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA119_46 = input.LA(1);

                         
                        int index119_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_PL_SQL()) ) {s = 47;}

                        else if ( (synpred223_PL_SQL()) ) {s = 32;}

                         
                        input.seek(index119_46);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA119_48 = input.LA(1);

                         
                        int index119_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_PL_SQL()) ) {s = 49;}

                        else if ( (synpred223_PL_SQL()) ) {s = 32;}

                         
                        input.seek(index119_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA119_52 = input.LA(1);

                         
                        int index119_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_PL_SQL()) ) {s = 41;}

                        else if ( (synpred223_PL_SQL()) ) {s = 32;}

                         
                        input.seek(index119_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\21\uffff";
    static final String DFA126_eofS =
        "\21\uffff";
    static final String DFA126_minS =
        "\1\4\1\0\2\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\1\uffff"+
        "\1\0\1\uffff";
    static final String DFA126_maxS =
        "\1\u00e4\1\0\2\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\1"+
        "\uffff\1\0\1\uffff";
    static final String DFA126_acceptS =
        "\2\uffff\1\3\1\10\1\uffff\1\1\1\7\1\uffff\1\2\2\uffff\1\6\1\10"+
        "\1\uffff\1\5\1\uffff\1\4";
    static final String DFA126_specialS =
        "\1\uffff\1\0\2\uffff\1\1\2\uffff\1\2\1\uffff\1\3\1\4\2\uffff\1"+
        "\5\1\uffff\1\6\1\uffff}>";
    static final String[] DFA126_transitionS = {
            "\3\11\4\uffff\2\11\12\uffff\4\11\1\14\1\11\1\uffff\3\14\1\uffff"+
            "\1\17\1\15\1\11\4\uffff\2\11\1\uffff\1\11\3\uffff\1\11\3\uffff"+
            "\1\11\2\uffff\1\11\1\uffff\1\11\1\14\1\11\12\uffff\2\14\1\uffff"+
            "\4\14\1\uffff\2\11\1\uffff\1\11\2\14\1\uffff\1\11\1\14\2\11"+
            "\1\uffff\1\11\3\uffff\1\11\1\uffff\1\14\1\uffff\1\11\1\14\1"+
            "\uffff\1\14\1\11\1\1\2\11\1\14\1\uffff\1\14\3\uffff\2\11\1\uffff"+
            "\1\12\2\11\1\14\3\uffff\3\11\1\uffff\1\11\5\uffff\2\11\1\4\1"+
            "\11\4\uffff\1\7\6\uffff\1\11\15\uffff\1\11\2\uffff\1\11\12\uffff"+
            "\1\11\1\14\6\uffff\1\11\31\uffff\1\11\1\14\1\uffff\1\11\1\uffff"+
            "\17\11",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "()+ loopback of 733:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_1 = input.LA(1);

                         
                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_4 = input.LA(1);

                         
                        int index126_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_PL_SQL()) ) {s = 5;}

                        else if ( (synpred239_PL_SQL()) ) {s = 6;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_7 = input.LA(1);

                         
                        int index126_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 8;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_9 = input.LA(1);

                         
                        int index126_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_10 = input.LA(1);

                         
                        int index126_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_PL_SQL()) ) {s = 5;}

                        else if ( (synpred238_PL_SQL()) ) {s = 11;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index126_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA126_13 = input.LA(1);

                         
                        int index126_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_PL_SQL()) ) {s = 14;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index126_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA126_15 = input.LA(1);

                         
                        int index126_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_PL_SQL()) ) {s = 16;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index126_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA187_eotS =
        "\15\uffff";
    static final String DFA187_eofS =
        "\15\uffff";
    static final String DFA187_minS =
        "\1\14\5\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA187_maxS =
        "\1\u00a1\5\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA187_acceptS =
        "\1\uffff\1\4\1\3\1\11\1\6\1\2\1\uffff\1\12\1\uffff\1\7\1\10\1\5"+
        "\1\1";
    static final String DFA187_specialS =
        "\6\uffff\1\0\1\uffff\1\1\4\uffff}>";
    static final String[] DFA187_transitionS = {
            "\1\14\1\5\1\2\2\1\1\uffff\1\13\1\4\4\uffff\2\6\26\uffff\1\10"+
            "\56\uffff\1\3\101\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "816:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_6 = input.LA(1);

                         
                        int index187_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_PL_SQL()) ) {s = 3;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index187_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_8 = input.LA(1);

                         
                        int index187_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_PL_SQL()) ) {s = 9;}

                        else if ( (synpred324_PL_SQL()) ) {s = 10;}

                        else if ( (synpred326_PL_SQL()) ) {s = 3;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index187_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA213_eotS =
        "\26\uffff";
    static final String DFA213_eofS =
        "\26\uffff";
    static final String DFA213_minS =
        "\1\5\25\uffff";
    static final String DFA213_maxS =
        "\1\u00e7\25\uffff";
    static final String DFA213_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String DFA213_specialS =
        "\26\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\22\1\23\112\uffff\1\24\37\uffff\1\25\105\uffff\1\25\34\uffff"+
            "\1\4\1\uffff\1\1\1\2\1\3\1\5\1\6\1\16\1\17\1\20\1\21\1\11\1"+
            "\12\1\13\1\14\1\15\2\uffff\1\7\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "847:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );";
        }
    }
    static final String DFA223_eotS =
        "\12\uffff";
    static final String DFA223_eofS =
        "\12\uffff";
    static final String DFA223_minS =
        "\1\4\11\uffff";
    static final String DFA223_maxS =
        "\1\u00b7\11\uffff";
    static final String DFA223_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA223_specialS =
        "\12\uffff}>";
    static final String[] DFA223_transitionS = {
            "\1\3\6\uffff\1\5\14\uffff\2\10\12\uffff\1\6\4\uffff\1\1\1\2"+
            "\5\uffff\1\10\6\uffff\1\10\3\uffff\1\4\31\uffff\1\7\56\uffff"+
            "\2\10\33\uffff\1\10\15\uffff\1\11\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
    static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
    static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
    static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
    static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
    static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
    static final short[][] DFA223_transition;

    static {
        int numStates = DFA223_transitionS.length;
        DFA223_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = DFA223_eot;
            this.eof = DFA223_eof;
            this.min = DFA223_min;
            this.max = DFA223_max;
            this.accept = DFA223_accept;
            this.special = DFA223_special;
            this.transition = DFA223_transition;
        }
        public String getDescription() {
            return "854:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );";
        }
    }
 

    public static final BitSet FOLLOW_source_element_in_grammar_def4695 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_grammar_def4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_source_element4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_replace_part_in_source_element4731 = new BitSet(new long[]{0x0100010000000000L,0x0080000000000020L,0x0000000000000100L});
    public static final BitSet FOLLOW_function_declaration_in_source_element4753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_source_element4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_declaration_in_source_element4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trigger_declaration_in_source_element4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_source_element4788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_universal_identifier4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_universal_identifier4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_label4824 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_label4826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_label4828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_KEYWORD_in_create_replace_part4835 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_create_replace_part4838 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_create_replace_part4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_as_is_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4860 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4863 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4873 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameter_declaration4884 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4886 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4888 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4891 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0001000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4894 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4896 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration4925 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4927 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4929 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4932 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0001000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4935 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4937 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameter_declaration4943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_function_spec4950 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_name_in_function_spec4968 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_function_spec4970 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_function_spec4989 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_function_spec4991 = new BitSet(new long[]{0x4000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_invoker_clause_in_function_spec4993 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_function_spec_add2_in_function_spec4997 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_universal_identifier_in_function_name5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_function_name5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_KEYWORD_in_invoker_clause5017 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_invoker_clause5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_spec_add20 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration5051 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration5053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5091 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec5093 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_procedure_spec5095 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_invoker_clause_in_procedure_spec5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_procedure_name5123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_procedure_name5127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration5134 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_procedure_declaration5136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_function_procedure_body5175 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_function_procedure_body5178 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_function_procedure_body5183 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_function_procedure_body5187 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_function_procedure_body5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5199 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_package_declaration5201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5217 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_package_body_in_package_declaration5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_spec_name_in_package_spec5235 = new BitSet(new long[]{0x4210000000000000L});
    public static final BitSet FOLLOW_invoker_clause_in_package_spec5237 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_spec5240 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_spec5258 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec2_in_package_spec5262 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_spec5282 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec5284 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_package_spec5290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_spec25298 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec25300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_spec25331 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec25333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec_name5350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_spec_name5354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_package_body5361 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_body_name_in_package_body5363 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_body5365 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_body5383 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_package_body5387 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_package_body5391 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_package_body5411 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_package_body5414 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_body5435 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body5437 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_body5440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_package_body5443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body_name5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_body_name5455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5462 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_declaration5465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_trigger_type_in_trigger_declaration5467 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0080800200700070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_follows_part_in_trigger_declaration5469 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0080800200600070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_trigger_part_in_trigger_declaration5472 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_anonymous_block_in_trigger_declaration5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_trigger_name5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_trigger_name5507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_KEYWORD_in_follows_part5514 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_follows_part5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_trigger_part5523 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_trigger_part5533 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_trigger_part5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_KEYWORD_in_trigger_type5545 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_KEYWORD_in_trigger_type5574 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTEAD_KEYWORD_in_trigger_type5603 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_trigger_type5605 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_trigger_type5627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5634 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger5636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_non_dml_trigger5647 = new BitSet(new long[]{0x0001000001000040L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_non_dml_trigger5649 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_non_dml_trigger5654 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_non_dml_trigger5656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_dml_event_clause5665 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_dml_event_clause5669 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5695 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5697 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_dml_event_clause5722 = new BitSet(new long[]{0x0000000000000000L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5725 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_part_in_dml_event_clause5750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_dml_event_clause5752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_dml_event_clause5776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_EACH_KEYWORD_in_dml_event_clause5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_dml_event_clause5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5789 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_factor5792 = new BitSet(new long[]{0x0001000013000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_clause_factor5794 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_dml_event_clause_part5804 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200002000L});
    public static final BitSet FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5810 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_dml_event_clause_part5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_part5814 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_part5818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_set_in_referencing_clause5830 = new BitSet(new long[]{0x0201000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_referencing_clause5863 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_OLD_KEYWORD_in_referencing_clause5867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_NEW_KEYWORD_in_referencing_clause5871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_identifier_in_referencing_clause5875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration5887 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_type_declaration5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration5941 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_type_body_declaration_in_type_declaration5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_name_in_type_spec_declaration5959 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_oid_part_in_type_spec_declaration5961 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_invoker_clause_in_type_spec_declaration5964 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_spec_types_in_type_spec_declaration5967 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_spec_declaration5993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_type_spec_declaration5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_spec_name6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_spec_name6008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OID_KEYWORD_in_type_oid_part6015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_type_oid_part6017 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_type_oid_part6019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_type_oid_part6021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_type_spec_types6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_type_spec_types6033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_in_type_spec_types6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_object_type6046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OBJECT_KEYWORD_in_object_type6048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008080000C000000L});
    public static final BitSet FOLLOW_UNDER_KEYWORD_in_object_type6054 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_object_type6056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008080000C000000L});
    public static final BitSet FOLLOW_object_type_part_in_object_type6074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008000000C000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type6093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_object_type6096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000008000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type6101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_object_type6104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_object_type_part6113 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_object_type_part6116 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_object_type_part6118 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0081000EFC000000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part6120 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0081000EFC000000L});
    public static final BitSet FOLLOW_element_spec_in_object_type_part6126 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0081000CFC000000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0081000CFC000000L});
    public static final BitSet FOLLOW_RPAREN_in_object_type_part6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_element_spec6140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec6145 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec6149 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec6153 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_COMMA_in_element_spec6156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec6176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_clause6184 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause6186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_clause6188 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6190 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause6193 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6195 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_clause6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6214 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec6216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_spec6223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6229 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6231 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec6252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_spec6254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_constructor_spec_part6262 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6265 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part6267 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_constructor_spec_part6269 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6271 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_constructor_spec_part6300 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part6302 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec_part6305 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6307 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_spec_part6312 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6340 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_constructor_spec_part6342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_spec6351 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec6360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec6364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_inheritance_clauses6372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_set_in_inheritance_clauses6375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_varray_type6392 = new BitSet(new long[]{0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_varray_type6394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_nested_table_type6401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_nested_table_type6403 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_nested_table_type6405 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_nested_table_type6407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_type_body_declaration6414 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_body_name_in_type_body_declaration6416 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_type_body_declaration6418 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_subprogram_declaration_in_type_body_declaration6446 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_declaration6450 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_COMMA_in_type_body_declaration6453 = new BitSet(new long[]{0x0100000080000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_type_body_declaration6459 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_body_declaration6485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_type_body_declaration6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_body_name6496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_body_name6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_declaration6507 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x00000000EC000000L});
    public static final BitSet FOLLOW_function_declaration_in_subprogram_declaration6542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_subprogram_declaration6546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprogram_declaration6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_declaration6558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6564 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6566 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_declaration6594 = new BitSet(new long[]{0x0210000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_declaration6596 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_constructor_declaration6599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration6606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6614 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_map_order_func_declaration6616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_block6624 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_block6628 = new BitSet(new long[]{0x0D890713C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_exception_section_in_block6633 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_block6644 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_block6646 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_block6649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_block6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_declare_section_in_anonymous_block6712 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_anonymous_block6715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_executable_section6722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_section6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_executable_case_section6735 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_statements_in_executable_case_section6739 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_SEPARATOR_in_executable_case_section6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_case_section6747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement6755 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_statements_in_statement6759 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_statement6761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statements6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statements6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statements6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statements6793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_loop_statement_in_statements6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_statements6801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statements6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statements6822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statements6826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_statements6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statements6847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_statement_in_statements6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statements6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_statements6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statements6876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_inline_statement_in_statements6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_statements6897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_sql_statements6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_sql_statements6908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_sql_statements6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_sql_statements6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_sql_statements6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_sql_statements6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_sql_statements6945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_sql_statements6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_sql_statements6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_statement_in_sql_statements6974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sql_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_sql_not_parsed7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEYWORD_in_sql_not_parsed7072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_sql_not_parsed7076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_sql_not_parsed7080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7088 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_sql_not_parsed7109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_sql_not_parsed7113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_sql_not_parsed7121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_sql_not_parsed7140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed7144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_sql_not_parsed7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_sql_not_parsed7171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_sql_not_parsed7175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_sql_not_parsed7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_sql_not_parsed7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_KEYWORD_in_sql_not_parsed7187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sql_not_parsed7237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_sql_not_parsed7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_sql_not_parsed7260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_not_parsed7264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_sql_not_parsed7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_sql_not_parsed7272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7297 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7303 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_sql_not_parsed7333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_sql_not_parsed7352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_sql_not_parsed7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THE_REST_in_sql_not_parsed7376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_sql_not_parsed7381 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00818012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_sql_not_parsed7384 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00818012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_RPAREN_in_sql_not_parsed7388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_KEYWORD_in_select_statement7399 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_select_statement7403 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_select_statement7407 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_select_statement7413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_select_statement7415 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_COMMIT_KEYWORD_in_commit_statement7425 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_commit_statement7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_delete_statement7435 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_delete_statement7438 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_insert_statement7447 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_insert_statement7450 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_LOCK_KEYWORD_in_lock_table_statement7459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_lock_table_statement7461 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_lock_table_statement7464 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_MERGE_KEYWORD_in_merge_statement7473 = new BitSet(new long[]{0x0A91161C17801870L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_merge_statement7476 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_merge_statement7480 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_merge_statement7502 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_merge_statement7506 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_merge_statement7510 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_merge_statement7514 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_merge_statement7536 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7545 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_rollback_statement7547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7555 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_savepoint_statement7557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_set_transaction_statement7564 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7566 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_set_transaction_statement7569 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_update_statement7578 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_update_statement7581 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_GOTO_KEYWORD_in_goto_statement7592 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_return_statement7601 = new BitSet(new long[]{0x0881061003000812L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_return_statement7603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7611 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_if_statement7613 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7615 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7618 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSIF_KEYWORD_in_if_statement7638 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_if_statement7640 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7642 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7645 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_if_statement7667 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7670 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_if_statement7691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7732 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_loop_statement7735 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_loop_statement7739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7741 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_loop_statement7743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_KEYWORD_in_while_loop_statement7770 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_while_loop_statement7772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_while_loop_statement7774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_for_loop_statement7781 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_for_loop_statement7783 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_for_loop_statement7785 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7787 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_for_loop_statement7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_229_in_for_loop_statement_part7859 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement_part7861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_for_loop_statement_part7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement17870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_for_loop_statement27877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_for_loop_statement27879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_for_loop_statement27881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement27883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_KEYWORD_in_raise_statement7890 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_raise_statement7892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_case_statement_expression7900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_expression_in_case_statement_expression7904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7911 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7913 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7941 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7943 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7945 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7948 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7979 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7982 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_simple_case_statement_expression8013 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8015 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_simple_case_statement_expression8018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8066 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression8093 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_searched_case_statement_expression8095 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression8097 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression8100 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression8131 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression8134 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_searched_case_statement_expression8165 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8167 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_searched_case_statement_expression8170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_KEYWORD_in_close_statement8242 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_close_statement8244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_KEYWORD_in_continue_statement8251 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_continue_statement8253 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_continue_statement8257 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_continue_statement8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8268 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8270 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_execute_immediate_statement8272 = new BitSet(new long[]{0x0400000000000002L,0x040001C000000000L});
    public static final BitSet FOLLOW_set_in_execute_immediate_statement8304 = new BitSet(new long[]{0x0000000000000002L,0x000001C000000000L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate_statement8344 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8348 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate_statement8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_into_clause8391 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8393 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_into_clause8396 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8398 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8407 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8409 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8411 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8441 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_bulk_collect_into_clause8444 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8446 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_using_clause8455 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8458 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8462 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8467 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8469 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_using_clause8474 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause8492 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8495 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8499 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8504 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8506 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_using_clause8511 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_EXIT_KEYWORD_in_exit_statement8520 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_exit_statement8522 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exit_statement8526 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_exit_statement8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FETCH_KEYWORD_in_fetch_statement8537 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8539 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_fetch_statement8562 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_LIMIT_KEYWORD_in_fetch_statement8565 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_clause_in_fetch_statement8575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_KEYWORD_in_forall_statement8583 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_forall_statement8585 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_forall_statement8587 = new BitSet(new long[]{0x0881061003000810L,0x0001800080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement8589 = new BitSet(new long[]{0x0000000000000000L,0x5838200440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SAVE_KEYWORD_in_forall_statement8611 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8613 = new BitSet(new long[]{0x0000000000000000L,0x5838000440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_sql_statements_in_forall_statement8617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_229_in_bounds_clause8627 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDICES_KEYWORD_in_bounds_clause8651 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8653 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8655 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8675 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8677 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_bounds_clause8679 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_bounds_clause8706 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8708 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8719 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_inline_statement8749 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8751 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_inline_statement8753 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_inline_statement8757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_KEYWORD_in_open_statement8764 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000800000000000L});
    public static final BitSet FOLLOW_open_params_in_open_statement8768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_open_statement8789 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_open_statement8792 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_open_statement8796 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8800 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_open_statement8803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_open_params8813 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_open_params8815 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_open_params8818 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_open_params8820 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_open_params8824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sqlerrm_function8841 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_sqlerrm_function8843 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sqlerrm_function8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8861 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_anonymous_block_declare_section8899 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_anonymous_block_declare_section8939 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_procedure_declaration_in_anonymous_block_declare_section8943 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8954 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8956 = new BitSet(new long[]{0x0000002008000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8982 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration9000 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_variable_declaration9002 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration9004 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration9030 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subtype_datatype_in_variable_declaration9043 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_record_collection_datatype_in_variable_declaration9055 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration9068 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration9070 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_variable_declaration9093 = new BitSet(new long[]{0x0000000000000000L,0x2200000000110000L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration9096 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration9100 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration9111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_variable_declaration9113 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9115 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration9117 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_variable_declaration9121 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration9133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_variable_declaration9135 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9137 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration9140 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9142 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_variable_declaration9146 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_cursor_datatype_in_variable_declaration9163 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_variable_declaration9174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_variable_declaration_part9182 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_variable_declaration_part9184 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_variable_declaration_part9188 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration_part9190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variable_def_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_data_type9208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scale_types_in_data_type9212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_size_types_in_data_type9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_types_in_data_type9220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raw_type_in_data_type9224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_types_in_data_type9240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_data_type9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_data_type9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_data_type9266 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_data_type9269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_datatype_in_data_type9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_char_types9280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_char_types9289 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_char_types9291 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_char_types9294 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_char_types9296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_char_types9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_type_in_timestamp_types9314 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_timestamp_types9317 = new BitSet(new long[]{0x0000600000000000L});
    public static final BitSet FOLLOW_LOCAL_KEYWORD_in_timestamp_types9319 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_TIME_KEYWORD_in_timestamp_types9322 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ZONE_KEYWORD_in_timestamp_types9324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9333 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_year_type_in_interval_year_type9335 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_year_type9337 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_MONTH_KEYWORD_in_interval_year_type9339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9346 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_day_type_in_interval_day_type9348 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_day_type9350 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_second_type_in_interval_day_type9352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9359 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_subtype_datatype9361 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_subtype_datatype9363 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_subtype_datatype9365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_subtype_datatype9368 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_subtype_datatype9370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9380 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_record_collection_datatype9382 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_record_collection_datatype9384 = new BitSet(new long[]{0x0020000000000000L,0x0000000098800000L});
    public static final BitSet FOLLOW_record_datatype_in_record_collection_datatype9416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_table_datatype_in_record_collection_datatype9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_record_collection_datatype9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_cursor_datatype_in_record_collection_datatype9456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_KEYWORD_in_record_datatype9464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_record_datatype9466 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9468 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_record_datatype9471 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9473 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_record_datatype9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_field_declaration9485 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_record_field_declaration9487 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_record_field_declaration9489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9497 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_table_datatype9499 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9501 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_table_datatype9504 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_table_datatype9506 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9533 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_collection_table_datatype9535 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9552 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_collection_varray_datatype9587 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_collection_varray_datatype9589 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_collection_varray_datatype9594 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_varray_datatype9596 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_varray_datatype9598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9601 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9612 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9614 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9617 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_ref_cursor_datatype9619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9628 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_cursor_datatype9630 = new BitSet(new long[]{0x0410000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_cursor_parameter_declaration_in_cursor_datatype9632 = new BitSet(new long[]{0x0410000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_cursor_datatype9654 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_datatype9656 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_cursor_datatype9661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_datatype9663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_parameter_declaration9672 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9674 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cursor_parameter_declaration9677 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9679 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_parameter_declaration9683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_parameter9691 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_cursor_parameter9693 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_parameter9696 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_cursor_parameter9699 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_cursor_parameter9701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_special_datatype9712 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_special_datatype9716 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_set_in_special_datatype9719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_expression9735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_in_notin_expression9743 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_in_notin_expression9746 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_in_notin_expression9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_in_notin_expression9780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_in_notin_expression9782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_in_notin_expression9784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_operator9793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_operator9797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_operator9801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_operator9805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_operator9809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_operator9813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_230_in_operator9817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_231_in_operator9821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_operator9836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_operator9840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_operator9844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_operator9848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_operator9852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_operator9856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_operator9860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_operator9864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_operator9868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_operator9883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_operator9887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_operator9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_operator9908 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_operator9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_postfix_op9936 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_postfix_op9938 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_postfix_op9941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_postfix_op9946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_universal_expression9954 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_factor_in_universal_expression9957 = new BitSet(new long[]{0x0010000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000DFFFD00000L});
    public static final BitSet FOLLOW_postfix_op_in_universal_expression9959 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_operator_in_universal_expression9963 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_expression9966 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_LPAREN_in_universal_expression9971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_universal_expression9973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_universal_expression9975 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_TRUE_KEYWORD_in_universal_factor9987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_KEYWORD_in_universal_factor9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_universal_factor9995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor10018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_universal_factor10041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_universal_factor10045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_universal_factor10049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_in_universal_factor10072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_call_statement_param_in_universal_factor10075 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor10078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_universal_factor10106 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor10108 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_universal_factor10111 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor10113 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_universal_factor10118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_factor_in_sub_identifier10126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sub_identifier10130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcode_function_in_sub_identifier10134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlerrm_function_in_sub_identifier10138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sub_identifier_factor10145 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x008000000000000FL});
    public static final BitSet FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor10148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor10152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor10180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_sub_identifier_factor10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_call_statement_param10198 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0081800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10201 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10204 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10206 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_call_statement_param10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_call_statement_param10242 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10244 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10246 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10248 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10251 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10253 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10255 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10257 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_call_statement_param10262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_exception_section10271 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_section10274 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exception_handler10283 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10285 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_exception_handler10288 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10290 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_exception_handler10314 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_exception_handler10317 = new BitSet(new long[]{0x0D89071143000812L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_SCALE_TYPES_in_scale_types10328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_scale_types10331 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_scale_types10333 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10336 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_scale_types10339 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_scale_types10341 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_scale_types10354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_TYPES_in_size_types10365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_size_types10369 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_size_types10371 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_size_types10374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_size_types10376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_TYPE_in_raw_type10386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_raw_type10390 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_raw_type10392 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_raw_type10395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_raw_type10397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_TYPE_in_year_type10409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_year_type10413 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_year_type10415 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_year_type10418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_year_type10420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_timestamp_type10436 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_timestamp_type10438 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_timestamp_type10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_TYPE_in_day_type10455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_day_type10459 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_day_type10461 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_day_type10464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_day_type10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECOND_TYPE_in_second_type10478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_second_type10482 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_second_type10484 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_second_type10487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_second_type10489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_synpred35_PL_SQL5199 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_synpred35_PL_SQL5201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_synpred68_PL_SQL5697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_clause_in_synpred72_PL_SQL5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_synpred83_PL_SQL5887 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_synpred83_PL_SQL5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_synpred89_PL_SQL6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_synpred90_PL_SQL6033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL6093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_synpred101_PL_SQL6140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred104_PL_SQL6156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_synpred105_PL_SQL6145 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_constructor_spec_in_synpred105_PL_SQL6149 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_synpred105_PL_SQL6153 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_PL_SQL6156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred137_PL_SQL6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_synpred189_PL_SQL7076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred192_PL_SQL7088 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred192_PL_SQL7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_synpred201_PL_SQL7171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_synpred207_PL_SQL7210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred208_PL_SQL7229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred210_PL_SQL7237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_synpred211_PL_SQL7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred212_PL_SQL7260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred213_PL_SQL7264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL7276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred217_PL_SQL7297 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred218_PL_SQL7303 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred219_PL_SQL7309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_synpred222_PL_SQL7352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred223_PL_SQL7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred227_PL_SQL7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred227_PL_SQL7407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred228_PL_SQL7413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred228_PL_SQL7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred229_PL_SQL7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred233_PL_SQL7476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred234_PL_SQL7480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_synpred235_PL_SQL7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred236_PL_SQL7506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_synpred237_PL_SQL7510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_synpred238_PL_SQL7514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred239_PL_SQL7536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred241_PL_SQL7569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred242_PL_SQL7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred243_PL_SQL7603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred250_PL_SQL7743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred253_PL_SQL7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_synpred253_PL_SQL7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_synpred253_PL_SQL7821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred254_PL_SQL7892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_synpred255_PL_SQL7900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred260_PL_SQL8015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred261_PL_SQL8018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred266_PL_SQL8167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred267_PL_SQL8170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred268_PL_SQL8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred269_PL_SQL8257 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_synpred269_PL_SQL8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred277_PL_SQL8458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8467 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred279_PL_SQL8469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred280_PL_SQL8495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred282_PL_SQL8504 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred282_PL_SQL8506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred284_PL_SQL8522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred285_PL_SQL8526 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_synpred285_PL_SQL8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_params_in_synpred292_PL_SQL8768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred296_PL_SQL8789 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred296_PL_SQL8792 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_synpred296_PL_SQL8796 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred296_PL_SQL8800 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_synpred296_PL_SQL8803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred300_PL_SQL8841 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_synpred300_PL_SQL8843 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred300_PL_SQL8850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred300_PL_SQL8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred305_PL_SQL8954 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred305_PL_SQL8956 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred305_PL_SQL8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred306_PL_SQL9000 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_synpred306_PL_SQL9002 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred306_PL_SQL9004 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred306_PL_SQL9030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred309_PL_SQL9068 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_synpred309_PL_SQL9070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_synpred323_PL_SQL9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_synpred324_PL_SQL9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_synpred326_PL_SQL9266 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred326_PL_SQL9269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred331_PL_SQL9289 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred331_PL_SQL9291 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred331_PL_SQL9294 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_synpred331_PL_SQL9296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred331_PL_SQL9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred355_PL_SQL9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_synpred381_PL_SQL9954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_op_in_synpred382_PL_SQL9959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred383_PL_SQL9966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred384_PL_SQL9963 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred384_PL_SQL9966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred384_PL_SQL9971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_synpred384_PL_SQL9973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred384_PL_SQL9975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred392_PL_SQL10078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_statement_param_in_synpred393_PL_SQL10075 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred393_PL_SQL10078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred403_PL_SQL10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred406_PL_SQL10198 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0081800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred406_PL_SQL10201 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred406_PL_SQL10204 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred406_PL_SQL10206 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred406_PL_SQL10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred415_PL_SQL10331 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred415_PL_SQL10333 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred415_PL_SQL10336 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred415_PL_SQL10339 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_synpred415_PL_SQL10341 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred415_PL_SQL10350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred415_PL_SQL10354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred417_PL_SQL10369 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred417_PL_SQL10371 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred417_PL_SQL10376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred419_PL_SQL10390 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred419_PL_SQL10392 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred419_PL_SQL10395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred419_PL_SQL10397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred423_PL_SQL10436 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred423_PL_SQL10438 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred423_PL_SQL10441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred423_PL_SQL10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred427_PL_SQL10482 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred427_PL_SQL10484 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred427_PL_SQL10487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred427_PL_SQL10489 = new BitSet(new long[]{0x0000000000000002L});

}