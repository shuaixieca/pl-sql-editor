// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g 2010-03-31 17:24:08
package org.netbeans.modules.languages.pl_sql.antlr;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class PL_SQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER_UNSIGNED", "AND_OPERATOR", "OR_OPERATOR", "NOT_OPEARTOR", "STRING", "SOME_TYPES", "SCALE_TYPES", "SIZE_TYPES", "CHAR_TYPES", "CHAR_TYPE", "BYTE_TYPE", "RAW_TYPE", "TIMESTAMP_TYPE", "YEAR_TYPE", "DAY_TYPE", "SECOND_TYPE", "KEYWORD", "IDENTIFIER", "EXT_IDENTIFIER", "ALIAS", "BLOCK_COMMENT", "LINE_COMMENT", "WHITESPACE", "O", "R", "A", "N", "D", "T", "NOT_OPERATOR", "DIGITS", "EXP_DIGITS", "U", "L", "P", "S", "I", "E", "G", "V", "Y", "M", "B", "F", "W", "C", "H", "DIGIT", "X", "BEGIN_KEYWORD", "END_KEYWORD", "DECLARE_KEYWORD", "EXCEPTION_KEYWORD", "WHEN_KEYWORD", "THEN_KEYWORD", "NULL_KEYWORD", "NOT_NULL_KEYWORD", "DEFAULT_KEYWORD", "ROWTYPE_KEYWORD", "LIKE_TYPE_KEYWORD", "TYPE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "CONSTANT_KEYWORD", "WITH_KEYWORD", "LOCAL_KEYWORD", "TIME_KEYWORD", "Z", "ZONE_KEYWORD", "INTERVAL_KEYWORD", "TO_KEYWORD", "MONTH_KEYWORD", "SUBTYPE_KEYWORD", "IS_KEYWORD", "RECORD_KEYWORD", "CREATE_KEYWORD", "REPLACE_KEYWORD", "FUNCTION_KEYWORD", "AS_KEYWORD", "RETURN_KEYWORD", "IN_KEYWORD", "OUT_KEYWORD", "NOCOPY_KEYWORD", "AUTHID_KEYWORD", "CURRENT_USER_KEYWORD", "DEFINER_KEYWORD", "DETERMINISTIC_KEYWORD", "PARALLEL_ENABLED_KEYWORD", "PIPELINED_KEYWORD", "RESULT_CACHE_KEYWORD", "PROCEDURE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "ELSIF_KEYWORD", "ENDIF_KEYWORD", "IS_NULL_KEYWORD", "IS_NOT_NULL_KEYWORD", "NOT_IN_KEYWORD", "GOTO_KEYWORD", "LOOP_KEYWORD", "END_LOOP_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "REVERSE_KEYWORD", "SELECT_KEYWORD", "COUNT_KEYWORD", "EXCEPTION_INIT_KEYWORD", "K", "LIKE_KEYWORD", "RAISE_KEYWORD", "PRAGMA_KEYWORD", "AUTONOMOUS_TRANSACTION_KEYWORD", "CASE_KEYWORD", "END_CASE_KEYWORD", "CLOSE_KEYWORD", "TABLE_KEYWORD", "OF_KEYWORD", "INDEX_KEYWORD", "BY_KEYWORD", "VARRAY_KEYWORD", "VARYING_KEYWORD", "ARRAY_KEYWORD", "COMMIT_KEYWORD", "REF_KEYWORD", "CONTINUE_KEYWORD", "CURSOR_KEYWORD", "DELETE_KEYWORD", "EXECUTE_KEYWORD", "IMMEDIATE_KEYWORD", "EXIT_KEYWORD", "INTO_KEYWORD", "USING_KEYWORD", "BULK_KEYWORD", "COLLECT_KEYWORD", "FETCH_KEYWORD", "LIMIT_KEYWORD", "FORALL_KEYWORD", "SAVE_KEYWORD", "EXCEPTIONS_KEYWORD", "INDICES_KEYWORD", "VALUES_KEYWORD", "BETWEEN_KEYWORD", "INLINE_KEYWORD", "INSERT_KEYWORD", "LOCK_KEYWORD", "MERGE_KEYWORD", "OPEN_KEYWORD", "PACKAGE_KEYWORD", "BODY_KEYWORD", "RESTRICT_REFERENCES_KEYWORD", "RETURNING_KEYWORD", "ROLLBACK_KEYWORD", "SAVEPOINT_KEYWORD", "SERIALLY_REUSABLE_KEYWORD", "SET_KEYWORD", "TRANSACTION_KEYWORD", "NOTFOUND_KEYWORD", "FOUND_KEYWORD", "ISOPEN_KEYWORD", "ROWCOUNT_KEYWORD", "Q", "SQLCODE_KEYWORD", "SQLERRM_KEYWORD", "UPDATE_KEYWORD", "EXISTS_KEYWORD", "TRIGGER_KEYWORD", "BEFORE_KEYWORD", "AFTER_KEYWORD", "INSTEAD_KEYWORD", "ON_KEYWORD", "NESTED_KEYWORD", "REFERENCING_KEYWORD", "OLD_KEYWORD", "NEW_KEYWORD", "PARENT_KEYWORD", "EACH_KEYWORD", "ROW_KEYWORD", "FOLLOWS_KEYWORD", "ENABLE_KEYWORD", "DISABLE_KEYWORD", "OID_KEYWORD", "J", "OBJECT_KEYWORD", "UNDER_KEYWORD", "FINAL_KEYWORD", "INSTANTIABLE_KEYWORD", "OVERRIDING_KEYWORD", "MEMBER_KEYWORD", "STATIC_KEYWORD", "CONSTRUCTOR_KEYWORD", "SELF_KEYWORD", "RESULT_KEYWORD", "MAP_KEYWORD", "ORDER_KEYWORD", "JOIN_KEYWORD", "CHARS", "SEPARATOR", "COMMA", "PARAM_VALUE", "QUOTATION_MARK", "THE_REST", "'<<'", "'>>'", "'('", "')'", "'/'", "'\\''", "'+'", "'-'", "'*'", "'**'", "'||'", "'='", "'<>'", "'!='", "'~='", "'^='", "'>'", "'<'", "'<='", "'>='", "'(+)'", "'..'", "':='", "'.'"
    };
    public static final int VARRAY_KEYWORD=123;
    public static final int TRIGGER_KEYWORD=169;
    public static final int RESULT_KEYWORD=195;
    public static final int EXIT_KEYWORD=133;
    public static final int V=43;
    public static final int DISABLE_KEYWORD=183;
    public static final int RESTRICT_REFERENCES_KEYWORD=153;
    public static final int ALIAS=23;
    public static final int WHILE_KEYWORD=105;
    public static final int AUTONOMOUS_TRANSACTION_KEYWORD=115;
    public static final int U=36;
    public static final int BEGIN_KEYWORD=53;
    public static final int ELSE_KEYWORD=96;
    public static final int SOME_TYPES=9;
    public static final int COLLECT_KEYWORD=137;
    public static final int T__214=214;
    public static final int CONSTANT_KEYWORD=67;
    public static final int INTERVAL_KEYWORD=73;
    public static final int VALUES_KEYWORD=144;
    public static final int PRAGMA_KEYWORD=114;
    public static final int R=28;
    public static final int MEMBER_KEYWORD=191;
    public static final int ZONE_KEYWORD=72;
    public static final int CHARS=199;
    public static final int CREATE_KEYWORD=79;
    public static final int Q=164;
    public static final int ROLLBACK_KEYWORD=155;
    public static final int CLOSE_KEYWORD=118;
    public static final int T__220=220;
    public static final int END_CASE_KEYWORD=117;
    public static final int TRUE_KEYWORD=65;
    public static final int DEFINER_KEYWORD=89;
    public static final int CONTINUE_KEYWORD=128;
    public static final int CURRENT_USER_KEYWORD=88;
    public static final int LOOP_KEYWORD=103;
    public static final int EXECUTE_KEYWORD=131;
    public static final int W=48;
    public static final int T__218=218;
    public static final int DELETE_KEYWORD=130;
    public static final int INDEX_KEYWORD=121;
    public static final int STRING=8;
    public static final int RESULT_CACHE_KEYWORD=93;
    public static final int BEFORE_KEYWORD=170;
    public static final int EACH_KEYWORD=179;
    public static final int FOLLOWS_KEYWORD=181;
    public static final int X=52;
    public static final int T__215=215;
    public static final int UNDER_KEYWORD=187;
    public static final int UPDATE_KEYWORD=167;
    public static final int AND_OPERATOR=5;
    public static final int NOT_IN_KEYWORD=101;
    public static final int CHAR_TYPE=13;
    public static final int OPEN_KEYWORD=150;
    public static final int J=185;
    public static final int OR_OPERATOR=6;
    public static final int T__219=219;
    public static final int OID_KEYWORD=184;
    public static final int USING_KEYWORD=135;
    public static final int O=27;
    public static final int PARAM_VALUE=202;
    public static final int CURSOR_KEYWORD=129;
    public static final int ARRAY_KEYWORD=125;
    public static final int P=38;
    public static final int REFERENCING_KEYWORD=175;
    public static final int ISOPEN_KEYWORD=162;
    public static final int OF_KEYWORD=120;
    public static final int S=39;
    public static final int SELF_KEYWORD=194;
    public static final int OVERRIDING_KEYWORD=190;
    public static final int DECLARE_KEYWORD=55;
    public static final int VARYING_KEYWORD=124;
    public static final int THE_REST=204;
    public static final int BETWEEN_KEYWORD=145;
    public static final int M=45;
    public static final int EXCEPTION_INIT_KEYWORD=110;
    public static final int T=32;
    public static final int T__210=210;
    public static final int FALSE_KEYWORD=66;
    public static final int NOT_OPERATOR=33;
    public static final int REF_KEYWORD=127;
    public static final int EXP_DIGITS=35;
    public static final int SIZE_TYPES=11;
    public static final int SQLCODE_KEYWORD=165;
    public static final int DETERMINISTIC_KEYWORD=90;
    public static final int KEYWORD=20;
    public static final int EXCEPTION_KEYWORD=56;
    public static final int T__216=216;
    public static final int SCALE_TYPES=10;
    public static final int T__224=224;
    public static final int INSERT_KEYWORD=147;
    public static final int MONTH_KEYWORD=75;
    public static final int FORALL_KEYWORD=140;
    public static final int N=30;
    public static final int SQLERRM_KEYWORD=166;
    public static final int CASE_KEYWORD=116;
    public static final int PACKAGE_KEYWORD=151;
    public static final int INLINE_KEYWORD=146;
    public static final int AS_KEYWORD=82;
    public static final int DAY_TYPE=18;
    public static final int T__217=217;
    public static final int ROWCOUNT_KEYWORD=163;
    public static final int JOIN_KEYWORD=198;
    public static final int ELSIF_KEYWORD=97;
    public static final int ENDIF_KEYWORD=98;
    public static final int COUNT_KEYWORD=109;
    public static final int PARENT_KEYWORD=178;
    public static final int FINAL_KEYWORD=188;
    public static final int SUBTYPE_KEYWORD=76;
    public static final int COMMA=201;
    public static final int FETCH_KEYWORD=138;
    public static final int FUNCTION_KEYWORD=81;
    public static final int STATIC_KEYWORD=192;
    public static final int EXISTS_KEYWORD=168;
    public static final int TABLE_KEYWORD=119;
    public static final int COMMIT_KEYWORD=126;
    public static final int NESTED_KEYWORD=174;
    public static final int T__208=208;
    public static final int IS_NOT_NULL_KEYWORD=100;
    public static final int IS_KEYWORD=77;
    public static final int BULK_KEYWORD=136;
    public static final int D=31;
    public static final int T__211=211;
    public static final int PROCEDURE_KEYWORD=94;
    public static final int IF_KEYWORD=95;
    public static final int YEAR_TYPE=17;
    public static final int LIKE_TYPE_KEYWORD=63;
    public static final int RAISE_KEYWORD=113;
    public static final int CHAR_TYPES=12;
    public static final int TIME_KEYWORD=70;
    public static final int ORDER_KEYWORD=197;
    public static final int CONSTRUCTOR_KEYWORD=193;
    public static final int SAVEPOINT_KEYWORD=156;
    public static final int ROWTYPE_KEYWORD=62;
    public static final int T__209=209;
    public static final int NOT_NULL_KEYWORD=60;
    public static final int RETURN_KEYWORD=83;
    public static final int PIPELINED_KEYWORD=92;
    public static final int MAP_KEYWORD=196;
    public static final int TIMESTAMP_TYPE=16;
    public static final int NOT_OPEARTOR=7;
    public static final int NOTFOUND_KEYWORD=160;
    public static final int T__205=205;
    public static final int AUTHID_KEYWORD=87;
    public static final int A=29;
    public static final int IN_KEYWORD=84;
    public static final int LINE_COMMENT=25;
    public static final int WITH_KEYWORD=68;
    public static final int INSTEAD_KEYWORD=172;
    public static final int PARALLEL_ENABLED_KEYWORD=91;
    public static final int ENABLE_KEYWORD=182;
    public static final int BYTE_TYPE=14;
    public static final int WHEN_KEYWORD=57;
    public static final int T__207=207;
    public static final int C=49;
    public static final int T__212=212;
    public static final int T__206=206;
    public static final int L=37;
    public static final int ROW_KEYWORD=180;
    public static final int SECOND_TYPE=19;
    public static final int LOCAL_KEYWORD=69;
    public static final int END_KEYWORD=54;
    public static final int AFTER_KEYWORD=171;
    public static final int LIMIT_KEYWORD=139;
    public static final int SET_KEYWORD=158;
    public static final int SERIALLY_REUSABLE_KEYWORD=157;
    public static final int IDENTIFIER=21;
    public static final int TYPE_KEYWORD=64;
    public static final int LOCK_KEYWORD=148;
    public static final int ON_KEYWORD=173;
    public static final int BODY_KEYWORD=152;
    public static final int IS_NULL_KEYWORD=99;
    public static final int FOUND_KEYWORD=161;
    public static final int MERGE_KEYWORD=149;
    public static final int I=40;
    public static final int OBJECT_KEYWORD=186;
    public static final int T__227=227;
    public static final int F=47;
    public static final int TRANSACTION_KEYWORD=159;
    public static final int INSTANTIABLE_KEYWORD=189;
    public static final int SAVE_KEYWORD=141;
    public static final int RAW_TYPE=15;
    public static final int END_LOOP_KEYWORD=104;
    public static final int EXCEPTIONS_KEYWORD=142;
    public static final int QUOTATION_MARK=203;
    public static final int T__222=222;
    public static final int LIKE_KEYWORD=112;
    public static final int RETURNING_KEYWORD=154;
    public static final int NEW_KEYWORD=177;
    public static final int K=111;
    public static final int RECORD_KEYWORD=78;
    public static final int B=46;
    public static final int OUT_KEYWORD=85;
    public static final int NULL_KEYWORD=59;
    public static final int INTO_KEYWORD=134;
    public static final int DIGIT=51;
    public static final int T__226=226;
    public static final int DEFAULT_KEYWORD=61;
    public static final int T__225=225;
    public static final int OLD_KEYWORD=176;
    public static final int DIGITS=34;
    public static final int H=50;
    public static final int T__223=223;
    public static final int IMMEDIATE_KEYWORD=132;
    public static final int NUMBER_UNSIGNED=4;
    public static final int G=42;
    public static final int BLOCK_COMMENT=24;
    public static final int FOR_KEYWORD=106;
    public static final int EXT_IDENTIFIER=22;
    public static final int WHITESPACE=26;
    public static final int TO_KEYWORD=74;
    public static final int Z=71;
    public static final int THEN_KEYWORD=58;
    public static final int REVERSE_KEYWORD=107;
    public static final int BY_KEYWORD=122;
    public static final int SEPARATOR=200;
    public static final int T__228=228;
    public static final int EOF=-1;
    public static final int SELECT_KEYWORD=108;
    public static final int REPLACE_KEYWORD=80;
    public static final int GOTO_KEYWORD=102;
    public static final int INDICES_KEYWORD=143;
    public static final int T__213=213;
    public static final int NOCOPY_KEYWORD=86;
    public static final int Y=44;
    public static final int T__221=221;
    public static final int E=41;

    // delegates
    // delegators


        public PL_SQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PL_SQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PL_SQLParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g"; }



    public class SyntaxError {

        public RecognitionException exception;
        public String message;
        public int line;
        public int charPositionInLine;
    }
    	public List<SyntaxError> syntaxErrors = new ArrayList<SyntaxError>();

    	@Override
    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		String message = super.getErrorMessage(e, tokenNames);
    		SyntaxError syntaxError = new SyntaxError();
    		syntaxError.exception = e;
    		syntaxError.message = message;
    		syntaxError.line = e.line;
    		syntaxError.charPositionInLine = e.charPositionInLine;
    		syntaxErrors.add(syntaxError);
    		return message;
    	}

    	@Override
    	public void emitErrorMessage(String msg) {
    	}
    	
    /*protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException
    {
    throw new MismatchedTokenException(ttype, input);
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input,
    RecognitionException e,
    BitSet follow)
    throws RecognitionException
    {
    throw e;
    }
    }
    // Alter code generation so catch-clauses get replace with
    // this action.
    @rulecatch {
    catch (RecognitionException e) {
    throw e;
    }*/


    public static class grammar_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grammar_def"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:435:1: grammar_def : source_element EOF ;
    public final PL_SQLParser.grammar_def_return grammar_def() throws RecognitionException {
        PL_SQLParser.grammar_def_return retval = new PL_SQLParser.grammar_def_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF2=null;
        PL_SQLParser.source_element_return source_element1 = null;


        Object EOF2_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:436:2: ( source_element EOF )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:436:4: source_element EOF
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_source_element_in_grammar_def4538);
            source_element1=source_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, source_element1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_grammar_def4541); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "grammar_def"

    public static class source_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "source_element"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:439:1: source_element : ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) ) );
    public final PL_SQLParser.source_element_return source_element() throws RecognitionException {
        PL_SQLParser.source_element_return retval = new PL_SQLParser.source_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.anonymous_block_return anonymous_block3 = null;

        PL_SQLParser.create_replace_part_return create_replace_part4 = null;

        PL_SQLParser.function_declaration_return function_declaration5 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration6 = null;

        PL_SQLParser.package_spec_return package_spec7 = null;

        PL_SQLParser.package_body_return package_body8 = null;

        PL_SQLParser.trigger_declaration_return trigger_declaration9 = null;

        PL_SQLParser.type_spec_declaration_return type_spec_declaration10 = null;

        PL_SQLParser.type_body_declaration_return type_body_declaration11 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:439:16: ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BEGIN_KEYWORD||LA3_0==DECLARE_KEYWORD) ) {
                alt3=1;
            }
            else if ( (LA3_0==TYPE_KEYWORD||LA3_0==CREATE_KEYWORD||LA3_0==FUNCTION_KEYWORD||LA3_0==PROCEDURE_KEYWORD||LA3_0==PACKAGE_KEYWORD||LA3_0==TRIGGER_KEYWORD) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:439:18: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_source_element4551);
                    anonymous_block3=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block3.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:440:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:440:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:440:19: ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:440:19: ( create_replace_part )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==CREATE_KEYWORD) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: create_replace_part
                            {
                            pushFollow(FOLLOW_create_replace_part_in_source_element4574);
                            create_replace_part4=create_replace_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_replace_part4.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:19: ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )
                    int alt2=7;
                    alt2 = dfa2.predict(input);
                    switch (alt2) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:20: function_declaration
                            {
                            pushFollow(FOLLOW_function_declaration_in_source_element4596);
                            function_declaration5=function_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration5.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:43: procedure_declaration
                            {
                            pushFollow(FOLLOW_procedure_declaration_in_source_element4600);
                            procedure_declaration6=procedure_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration6.getTree());

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:67: package_spec
                            {
                            pushFollow(FOLLOW_package_spec_in_source_element4604);
                            package_spec7=package_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec7.getTree());

                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:82: package_body
                            {
                            pushFollow(FOLLOW_package_body_in_source_element4608);
                            package_body8=package_body();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body8.getTree());

                            }
                            break;
                        case 5 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:20: trigger_declaration
                            {
                            pushFollow(FOLLOW_trigger_declaration_in_source_element4631);
                            trigger_declaration9=trigger_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_declaration9.getTree());

                            }
                            break;
                        case 6 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:42: type_spec_declaration
                            {
                            pushFollow(FOLLOW_type_spec_declaration_in_source_element4635);
                            type_spec_declaration10=type_spec_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_declaration10.getTree());

                            }
                            break;
                        case 7 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:66: type_body_declaration
                            {
                            pushFollow(FOLLOW_type_body_declaration_in_source_element4639);
                            type_body_declaration11=type_body_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_declaration11.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "source_element"

    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:1: identifier : ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD );
    public final PL_SQLParser.identifier_return identifier() throws RecognitionException {
        PL_SQLParser.identifier_return retval = new PL_SQLParser.identifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set12=null;

        Object set12_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:12: ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==INTERVAL_KEYWORD||input.LA(1)==RESULT_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class universal_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:1: universal_identifier : ( identifier | EXT_IDENTIFIER );
    public final PL_SQLParser.universal_identifier_return universal_identifier() throws RecognitionException {
        PL_SQLParser.universal_identifier_return retval = new PL_SQLParser.universal_identifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXT_IDENTIFIER14=null;
        PL_SQLParser.identifier_return identifier13 = null;


        Object EXT_IDENTIFIER14_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:22: ( identifier | EXT_IDENTIFIER )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER||LA4_0==INTERVAL_KEYWORD||LA4_0==RESULT_KEYWORD) ) {
                alt4=1;
            }
            else if ( (LA4_0==EXT_IDENTIFIER) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:24: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_universal_identifier4663);
                    identifier13=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier13.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:37: EXT_IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    EXT_IDENTIFIER14=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_universal_identifier4667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER14_tree = (Object)adaptor.create(EXT_IDENTIFIER14);
                    adaptor.addChild(root_0, EXT_IDENTIFIER14_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "universal_identifier"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:445:1: label : '<<' identifier '>>' ;
    public final PL_SQLParser.label_return label() throws RecognitionException {
        PL_SQLParser.label_return retval = new PL_SQLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal15=null;
        Token string_literal17=null;
        PL_SQLParser.identifier_return identifier16 = null;


        Object string_literal15_tree=null;
        Object string_literal17_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:445:7: ( '<<' identifier '>>' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:445:9: '<<' identifier '>>'
            {
            root_0 = (Object)adaptor.nil();

            string_literal15=(Token)match(input,205,FOLLOW_205_in_label4674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (Object)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }
            pushFollow(FOLLOW_identifier_in_label4676);
            identifier16=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier16.getTree());
            string_literal17=(Token)match(input,206,FOLLOW_206_in_label4678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal17_tree = (Object)adaptor.create(string_literal17);
            adaptor.addChild(root_0, string_literal17_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class create_replace_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_replace_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:1: create_replace_part : CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? ;
    public final PL_SQLParser.create_replace_part_return create_replace_part() throws RecognitionException {
        PL_SQLParser.create_replace_part_return retval = new PL_SQLParser.create_replace_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CREATE_KEYWORD18=null;
        Token OR_OPERATOR19=null;
        Token REPLACE_KEYWORD20=null;

        Object CREATE_KEYWORD18_tree=null;
        Object OR_OPERATOR19_tree=null;
        Object REPLACE_KEYWORD20_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:21: ( CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:23: CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            CREATE_KEYWORD18=(Token)match(input,CREATE_KEYWORD,FOLLOW_CREATE_KEYWORD_in_create_replace_part4685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE_KEYWORD18_tree = (Object)adaptor.create(CREATE_KEYWORD18);
            adaptor.addChild(root_0, CREATE_KEYWORD18_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:38: ( OR_OPERATOR REPLACE_KEYWORD )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==OR_OPERATOR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:39: OR_OPERATOR REPLACE_KEYWORD
                    {
                    OR_OPERATOR19=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_create_replace_part4688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR19_tree = (Object)adaptor.create(OR_OPERATOR19);
                    adaptor.addChild(root_0, OR_OPERATOR19_tree);
                    }
                    REPLACE_KEYWORD20=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_create_replace_part4690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD20_tree = (Object)adaptor.create(REPLACE_KEYWORD20);
                    adaptor.addChild(root_0, REPLACE_KEYWORD20_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "create_replace_part"

    public static class as_is_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_is_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:447:1: as_is_part : ( IS_KEYWORD | AS_KEYWORD );
    public final PL_SQLParser.as_is_part_return as_is_part() throws RecognitionException {
        PL_SQLParser.as_is_part_return retval = new PL_SQLParser.as_is_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set21=null;

        Object set21_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:447:12: ( IS_KEYWORD | AS_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set21=(Token)input.LT(1);
            if ( input.LA(1)==IS_KEYWORD||input.LA(1)==AS_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set21));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "as_is_part"

    public static class parameter_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:1: parameter_type : ( IN_KEYWORD | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) | ( IN_KEYWORD OUT_KEYWORD ( NOCOPY_KEYWORD )? ) );
    public final PL_SQLParser.parameter_type_return parameter_type() throws RecognitionException {
        PL_SQLParser.parameter_type_return retval = new PL_SQLParser.parameter_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IN_KEYWORD22=null;
        Token OUT_KEYWORD23=null;
        Token NOCOPY_KEYWORD24=null;
        Token IN_KEYWORD25=null;
        Token OUT_KEYWORD26=null;
        Token NOCOPY_KEYWORD27=null;

        Object IN_KEYWORD22_tree=null;
        Object OUT_KEYWORD23_tree=null;
        Object NOCOPY_KEYWORD24_tree=null;
        Object IN_KEYWORD25_tree=null;
        Object OUT_KEYWORD26_tree=null;
        Object NOCOPY_KEYWORD27_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:16: ( IN_KEYWORD | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) | ( IN_KEYWORD OUT_KEYWORD ( NOCOPY_KEYWORD )? ) )
            int alt8=3;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==IN_KEYWORD) ) {
                int LA8_1 = input.LA(2);

                if ( (LA8_1==OUT_KEYWORD) ) {
                    alt8=3;
                }
                else if ( (LA8_1==EOF||(LA8_1>=SOME_TYPES && LA8_1<=CHAR_TYPE)||(LA8_1>=RAW_TYPE && LA8_1<=TIMESTAMP_TYPE)||(LA8_1>=IDENTIFIER && LA8_1<=EXT_IDENTIFIER)||LA8_1==INTERVAL_KEYWORD||LA8_1==REF_KEYWORD||LA8_1==RESULT_KEYWORD) ) {
                    alt8=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA8_0==OUT_KEYWORD) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:18: IN_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IN_KEYWORD22=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4710); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD22_tree = (Object)adaptor.create(IN_KEYWORD22);
                    adaptor.addChild(root_0, IN_KEYWORD22_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:31: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:31: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:32: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    OUT_KEYWORD23=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD23_tree = (Object)adaptor.create(OUT_KEYWORD23);
                    adaptor.addChild(root_0, OUT_KEYWORD23_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:44: ( NOCOPY_KEYWORD )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NOCOPY_KEYWORD) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD24=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4717); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD24_tree = (Object)adaptor.create(NOCOPY_KEYWORD24);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD24_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:63: ( IN_KEYWORD OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:63: ( IN_KEYWORD OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:64: IN_KEYWORD OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    IN_KEYWORD25=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD25_tree = (Object)adaptor.create(IN_KEYWORD25);
                    adaptor.addChild(root_0, IN_KEYWORD25_tree);
                    }
                    OUT_KEYWORD26=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD26_tree = (Object)adaptor.create(OUT_KEYWORD26);
                    adaptor.addChild(root_0, OUT_KEYWORD26_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:87: ( NOCOPY_KEYWORD )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==NOCOPY_KEYWORD) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD27=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4728); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD27_tree = (Object)adaptor.create(NOCOPY_KEYWORD27);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD27_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:1: parameter_declaration : '(' identifier ( parameter_type )? data_type variable_def_part ( expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' ;
    public final PL_SQLParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PL_SQLParser.parameter_declaration_return retval = new PL_SQLParser.parameter_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal28=null;
        Token char_literal34=null;
        Token char_literal40=null;
        PL_SQLParser.identifier_return identifier29 = null;

        PL_SQLParser.parameter_type_return parameter_type30 = null;

        PL_SQLParser.data_type_return data_type31 = null;

        PL_SQLParser.variable_def_part_return variable_def_part32 = null;

        PL_SQLParser.expression_return expression33 = null;

        PL_SQLParser.identifier_return identifier35 = null;

        PL_SQLParser.parameter_type_return parameter_type36 = null;

        PL_SQLParser.data_type_return data_type37 = null;

        PL_SQLParser.variable_def_part_return variable_def_part38 = null;

        PL_SQLParser.expression_return expression39 = null;


        Object char_literal28_tree=null;
        Object char_literal34_tree=null;
        Object char_literal40_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:23: ( '(' identifier ( parameter_type )? data_type variable_def_part ( expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:25: '(' identifier ( parameter_type )? data_type variable_def_part ( expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal28=(Token)match(input,207,FOLLOW_207_in_parameter_declaration4737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal28_tree = (Object)adaptor.create(char_literal28);
            adaptor.addChild(root_0, char_literal28_tree);
            }
            pushFollow(FOLLOW_identifier_in_parameter_declaration4739);
            identifier29=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier29.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:40: ( parameter_type )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=IN_KEYWORD && LA9_0<=OUT_KEYWORD)) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
                    {
                    pushFollow(FOLLOW_parameter_type_in_parameter_declaration4741);
                    parameter_type30=parameter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type30.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_parameter_declaration4744);
            data_type31=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type31.getTree());
            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4746);
            variable_def_part32=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part32.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:84: ( expression )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==NUMBER_UNSIGNED||LA10_0==STRING||(LA10_0>=IDENTIFIER && LA10_0<=EXT_IDENTIFIER)||LA10_0==NOT_OPERATOR||LA10_0==NULL_KEYWORD||(LA10_0>=TRUE_KEYWORD && LA10_0<=FALSE_KEYWORD)||LA10_0==INTERVAL_KEYWORD||LA10_0==REPLACE_KEYWORD||LA10_0==IN_KEYWORD||LA10_0==NOT_IN_KEYWORD||LA10_0==CASE_KEYWORD||(LA10_0>=SQLCODE_KEYWORD && LA10_0<=SQLERRM_KEYWORD)||LA10_0==RESULT_KEYWORD||LA10_0==207||(LA10_0>=211 && LA10_0<=212)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_parameter_declaration4748);
                    expression33=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression33.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:25: ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==COMMA) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:26: ',' identifier ( parameter_type )? data_type ( variable_def_part expression )?
            	    {
            	    char_literal34=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration4776); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal34_tree = (Object)adaptor.create(char_literal34);
            	    adaptor.addChild(root_0, char_literal34_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_parameter_declaration4778);
            	    identifier35=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier35.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:41: ( parameter_type )?
            	    int alt11=2;
            	    int LA11_0 = input.LA(1);

            	    if ( ((LA11_0>=IN_KEYWORD && LA11_0<=OUT_KEYWORD)) ) {
            	        alt11=1;
            	    }
            	    switch (alt11) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
            	            {
            	            pushFollow(FOLLOW_parameter_type_in_parameter_declaration4780);
            	            parameter_type36=parameter_type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type36.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_parameter_declaration4783);
            	    data_type37=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type37.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:67: ( variable_def_part expression )?
            	    int alt12=2;
            	    int LA12_0 = input.LA(1);

            	    if ( (LA12_0==DEFAULT_KEYWORD||LA12_0==227) ) {
            	        alt12=1;
            	    }
            	    switch (alt12) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:68: variable_def_part expression
            	            {
            	            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4786);
            	            variable_def_part38=variable_def_part();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part38.getTree());
            	            pushFollow(FOLLOW_expression_in_parameter_declaration4788);
            	            expression39=expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression39.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            char_literal40=(Token)match(input,208,FOLLOW_208_in_parameter_declaration4794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal40_tree = (Object)adaptor.create(char_literal40);
            adaptor.addChild(root_0, char_literal40_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:1: function_spec : FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* ;
    public final PL_SQLParser.function_spec_return function_spec() throws RecognitionException {
        PL_SQLParser.function_spec_return retval = new PL_SQLParser.function_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FUNCTION_KEYWORD41=null;
        Token RETURN_KEYWORD44=null;
        PL_SQLParser.function_name_return function_name42 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration43 = null;

        PL_SQLParser.data_type_return data_type45 = null;

        PL_SQLParser.invoker_clause_return invoker_clause46 = null;

        PL_SQLParser.function_spec_add2_return function_spec_add247 = null;


        Object FUNCTION_KEYWORD41_tree=null;
        Object RETURN_KEYWORD44_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:15: ( FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:17: FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )*
            {
            root_0 = (Object)adaptor.nil();

            FUNCTION_KEYWORD41=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_function_spec4801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD41_tree = (Object)adaptor.create(FUNCTION_KEYWORD41);
            adaptor.addChild(root_0, FUNCTION_KEYWORD41_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4819);
            function_name42=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name42.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:31: ( parameter_declaration )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==207) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_function_spec4821);
                    parameter_declaration43=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration43.getTree());

                    }
                    break;

            }

            RETURN_KEYWORD44=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_function_spec4840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD44_tree = (Object)adaptor.create(RETURN_KEYWORD44);
            adaptor.addChild(root_0, RETURN_KEYWORD44_tree);
            }
            pushFollow(FOLLOW_data_type_in_function_spec4842);
            data_type45=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type45.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:42: ( invoker_clause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==AUTHID_KEYWORD) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_function_spec4844);
                    invoker_clause46=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause46.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:58: ( function_spec_add2 )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( ((LA16_0>=DETERMINISTIC_KEYWORD && LA16_0<=RESULT_CACHE_KEYWORD)) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:59: function_spec_add2
            	    {
            	    pushFollow(FOLLOW_function_spec_add2_in_function_spec4848);
            	    function_spec_add247=function_spec_add2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec_add247.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class function_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:454:1: function_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.function_name_return function_name() throws RecognitionException {
        PL_SQLParser.function_name_return retval = new PL_SQLParser.function_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS49=null;
        PL_SQLParser.universal_identifier_return universal_identifier48 = null;


        Object ALIAS49_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:454:15: ( universal_identifier | ALIAS )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( ((LA17_0>=IDENTIFIER && LA17_0<=EXT_IDENTIFIER)||LA17_0==INTERVAL_KEYWORD||LA17_0==RESULT_KEYWORD) ) {
                alt17=1;
            }
            else if ( (LA17_0==ALIAS) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:454:17: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_function_name4857);
                    universal_identifier48=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier48.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:454:40: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS49=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_function_name4861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS49_tree = (Object)adaptor.create(ALIAS49);
                    adaptor.addChild(root_0, ALIAS49_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class invoker_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invoker_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:1: invoker_clause : AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) ;
    public final PL_SQLParser.invoker_clause_return invoker_clause() throws RecognitionException {
        PL_SQLParser.invoker_clause_return retval = new PL_SQLParser.invoker_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AUTHID_KEYWORD50=null;
        Token set51=null;

        Object AUTHID_KEYWORD50_tree=null;
        Object set51_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:16: ( AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:18: AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            AUTHID_KEYWORD50=(Token)match(input,AUTHID_KEYWORD,FOLLOW_AUTHID_KEYWORD_in_invoker_clause4868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUTHID_KEYWORD50_tree = (Object)adaptor.create(AUTHID_KEYWORD50);
            adaptor.addChild(root_0, AUTHID_KEYWORD50_tree);
            }
            set51=(Token)input.LT(1);
            if ( (input.LA(1)>=CURRENT_USER_KEYWORD && input.LA(1)<=DEFINER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set51));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invoker_clause"

    public static class function_spec_add2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec_add2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:1: function_spec_add2 : ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD );
    public final PL_SQLParser.function_spec_add2_return function_spec_add2() throws RecognitionException {
        PL_SQLParser.function_spec_add2_return retval = new PL_SQLParser.function_spec_add2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set52=null;

        Object set52_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:20: ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set52=(Token)input.LT(1);
            if ( (input.LA(1)>=DETERMINISTIC_KEYWORD && input.LA(1)<=RESULT_CACHE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set52));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_spec_add2"

    public static class function_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:1: function_declaration : function_spec function_procedure_body ;
    public final PL_SQLParser.function_declaration_return function_declaration() throws RecognitionException {
        PL_SQLParser.function_declaration_return retval = new PL_SQLParser.function_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.function_spec_return function_spec53 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body54 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:22: ( function_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:24: function_spec function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_function_spec_in_function_declaration4902);
            function_spec53=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec53.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_function_declaration4904);
            function_procedure_body54=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body54.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:1: procedure_spec : PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? ;
    public final PL_SQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
        PL_SQLParser.procedure_spec_return retval = new PL_SQLParser.procedure_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PROCEDURE_KEYWORD55=null;
        PL_SQLParser.procedure_name_return procedure_name56 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration57 = null;

        PL_SQLParser.invoker_clause_return invoker_clause58 = null;


        Object PROCEDURE_KEYWORD55_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:16: ( PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:18: PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )?
            {
            root_0 = (Object)adaptor.nil();

            PROCEDURE_KEYWORD55=(Token)match(input,PROCEDURE_KEYWORD,FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec4911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE_KEYWORD55_tree = (Object)adaptor.create(PROCEDURE_KEYWORD55);
            adaptor.addChild(root_0, PROCEDURE_KEYWORD55_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec4913);
            procedure_name56=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name56.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:51: ( parameter_declaration )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==207) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_procedure_spec4915);
                    parameter_declaration57=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration57.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:459:18: ( invoker_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AUTHID_KEYWORD) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_procedure_spec4935);
                    invoker_clause58=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause58.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class procedure_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:1: procedure_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.procedure_name_return procedure_name() throws RecognitionException {
        PL_SQLParser.procedure_name_return retval = new PL_SQLParser.procedure_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS60=null;
        PL_SQLParser.universal_identifier_return universal_identifier59 = null;


        Object ALIAS60_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:16: ( universal_identifier | ALIAS )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( ((LA20_0>=IDENTIFIER && LA20_0<=EXT_IDENTIFIER)||LA20_0==INTERVAL_KEYWORD||LA20_0==RESULT_KEYWORD) ) {
                alt20=1;
            }
            else if ( (LA20_0==ALIAS) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_procedure_name4943);
                    universal_identifier59=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier59.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS60=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_procedure_name4947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS60_tree = (Object)adaptor.create(ALIAS60);
                    adaptor.addChild(root_0, ALIAS60_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:461:1: procedure_declaration : procedure_spec function_procedure_body ;
    public final PL_SQLParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PL_SQLParser.procedure_declaration_return retval = new PL_SQLParser.procedure_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec61 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body62 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:461:23: ( procedure_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:461:25: procedure_spec function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration4954);
            procedure_spec61=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec61.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_procedure_declaration4956);
            function_procedure_body62=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body62.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class function_procedure_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_procedure_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:1: function_procedure_body : as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block ;
    public final PL_SQLParser.function_procedure_body_return function_procedure_body() throws RecognitionException {
        PL_SQLParser.function_procedure_body_return retval = new PL_SQLParser.function_procedure_body_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part63 = null;

        PL_SQLParser.variable_declaration_return variable_declaration64 = null;

        PL_SQLParser.function_declaration_return function_declaration65 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration66 = null;

        PL_SQLParser.block_return block67 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:25: ( as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:27: as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_function_procedure_body4963);
            as_is_part63=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part63.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:38: ( variable_declaration )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==IDENTIFIER||LA21_0==TYPE_KEYWORD||LA21_0==INTERVAL_KEYWORD||LA21_0==SUBTYPE_KEYWORD||LA21_0==PRAGMA_KEYWORD||LA21_0==CURSOR_KEYWORD||LA21_0==RESULT_KEYWORD) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:39: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_function_procedure_body4966);
            	    variable_declaration64=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration64.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:62: ( function_declaration | procedure_declaration )*
            loop22:
            do {
                int alt22=3;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==FUNCTION_KEYWORD) ) {
                    alt22=1;
                }
                else if ( (LA22_0==PROCEDURE_KEYWORD) ) {
                    alt22=2;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:63: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_function_procedure_body4971);
            	    function_declaration65=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration65.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:86: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_function_procedure_body4975);
            	    procedure_declaration66=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration66.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            pushFollow(FOLLOW_block_in_function_procedure_body4979);
            block67=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block67.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_procedure_body"

    public static class package_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:1: package_spec : PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_spec_return package_spec() throws RecognitionException {
        PL_SQLParser.package_spec_return retval = new PL_SQLParser.package_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PACKAGE_KEYWORD68=null;
        Token char_literal75=null;
        Token END_KEYWORD76=null;
        Token SEPARATOR78=null;
        Token char_literal79=null;
        PL_SQLParser.package_spec_name_return package_spec_name69 = null;

        PL_SQLParser.invoker_clause_return invoker_clause70 = null;

        PL_SQLParser.as_is_part_return as_is_part71 = null;

        PL_SQLParser.variable_declaration_return variable_declaration72 = null;

        PL_SQLParser.function_spec_return function_spec73 = null;

        PL_SQLParser.procedure_spec_return procedure_spec74 = null;

        PL_SQLParser.universal_identifier_return universal_identifier77 = null;


        Object PACKAGE_KEYWORD68_tree=null;
        Object char_literal75_tree=null;
        Object END_KEYWORD76_tree=null;
        Object SEPARATOR78_tree=null;
        Object char_literal79_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:14: ( PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:16: PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            PACKAGE_KEYWORD68=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_spec4986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE_KEYWORD68_tree = (Object)adaptor.create(PACKAGE_KEYWORD68);
            adaptor.addChild(root_0, PACKAGE_KEYWORD68_tree);
            }
            pushFollow(FOLLOW_package_spec_name_in_package_spec4988);
            package_spec_name69=package_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec_name69.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:50: ( invoker_clause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==AUTHID_KEYWORD) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_package_spec4990);
                    invoker_clause70=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause70.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_as_is_part_in_package_spec4993);
            as_is_part71=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part71.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:16: ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==IDENTIFIER||LA25_0==TYPE_KEYWORD||LA25_0==INTERVAL_KEYWORD||LA25_0==SUBTYPE_KEYWORD||LA25_0==PRAGMA_KEYWORD||LA25_0==CURSOR_KEYWORD||LA25_0==RESULT_KEYWORD) ) {
                    alt25=1;
                }
                else if ( (LA25_0==FUNCTION_KEYWORD||LA25_0==PROCEDURE_KEYWORD) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_spec5011);
            	    variable_declaration72=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration72.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:40: ( ( function_spec | procedure_spec ) ';' )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:40: ( ( function_spec | procedure_spec ) ';' )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:41: ( function_spec | procedure_spec ) ';'
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:41: ( function_spec | procedure_spec )
            	    int alt24=2;
            	    int LA24_0 = input.LA(1);

            	    if ( (LA24_0==FUNCTION_KEYWORD) ) {
            	        alt24=1;
            	    }
            	    else if ( (LA24_0==PROCEDURE_KEYWORD) ) {
            	        alt24=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 24, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt24) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:42: function_spec
            	            {
            	            pushFollow(FOLLOW_function_spec_in_package_spec5017);
            	            function_spec73=function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec73.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:58: procedure_spec
            	            {
            	            pushFollow(FOLLOW_procedure_spec_in_package_spec5021);
            	            procedure_spec74=procedure_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec74.getTree());

            	            }
            	            break;

            	    }

            	    char_literal75=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5024); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal75_tree = (Object)adaptor.create(char_literal75);
            	    adaptor.addChild(root_0, char_literal75_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            END_KEYWORD76=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_spec5045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD76_tree = (Object)adaptor.create(END_KEYWORD76);
            adaptor.addChild(root_0, END_KEYWORD76_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:465:28: ( universal_identifier )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( ((LA26_0>=IDENTIFIER && LA26_0<=EXT_IDENTIFIER)||LA26_0==INTERVAL_KEYWORD||LA26_0==RESULT_KEYWORD) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_spec5047);
                    universal_identifier77=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier77.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:465:50: ( SEPARATOR )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SEPARATOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR78=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR78_tree = (Object)adaptor.create(SEPARATOR78);
                    adaptor.addChild(root_0, SEPARATOR78_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:465:61: ( '/' )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==209) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal79=(Token)match(input,209,FOLLOW_209_in_package_spec5053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal79_tree = (Object)adaptor.create(char_literal79);
                    adaptor.addChild(root_0, char_literal79_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_spec_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:1: package_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_spec_name_return package_spec_name() throws RecognitionException {
        PL_SQLParser.package_spec_name_return retval = new PL_SQLParser.package_spec_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS81=null;
        PL_SQLParser.universal_identifier_return universal_identifier80 = null;


        Object ALIAS81_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:19: ( universal_identifier | ALIAS )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( ((LA29_0>=IDENTIFIER && LA29_0<=EXT_IDENTIFIER)||LA29_0==INTERVAL_KEYWORD||LA29_0==RESULT_KEYWORD) ) {
                alt29=1;
            }
            else if ( (LA29_0==ALIAS) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:21: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_spec_name5061);
                    universal_identifier80=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier80.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:44: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS81=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_spec_name5065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS81_tree = (Object)adaptor.create(ALIAS81);
                    adaptor.addChild(root_0, ALIAS81_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_spec_name"

    public static class package_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:1: package_body : PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_body_return package_body() throws RecognitionException {
        PL_SQLParser.package_body_return retval = new PL_SQLParser.package_body_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PACKAGE_KEYWORD82=null;
        Token BODY_KEYWORD83=null;
        Token BEGIN_KEYWORD89=null;
        Token END_KEYWORD91=null;
        Token SEPARATOR93=null;
        Token char_literal94=null;
        PL_SQLParser.package_body_name_return package_body_name84 = null;

        PL_SQLParser.as_is_part_return as_is_part85 = null;

        PL_SQLParser.variable_declaration_return variable_declaration86 = null;

        PL_SQLParser.function_declaration_return function_declaration87 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration88 = null;

        PL_SQLParser.executable_section_return executable_section90 = null;

        PL_SQLParser.universal_identifier_return universal_identifier92 = null;


        Object PACKAGE_KEYWORD82_tree=null;
        Object BODY_KEYWORD83_tree=null;
        Object BEGIN_KEYWORD89_tree=null;
        Object END_KEYWORD91_tree=null;
        Object SEPARATOR93_tree=null;
        Object char_literal94_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:14: ( PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:16: PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            PACKAGE_KEYWORD82=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_body5072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE_KEYWORD82_tree = (Object)adaptor.create(PACKAGE_KEYWORD82);
            adaptor.addChild(root_0, PACKAGE_KEYWORD82_tree);
            }
            BODY_KEYWORD83=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_package_body5074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD83_tree = (Object)adaptor.create(BODY_KEYWORD83);
            adaptor.addChild(root_0, BODY_KEYWORD83_tree);
            }
            pushFollow(FOLLOW_package_body_name_in_package_body5076);
            package_body_name84=package_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body_name84.getTree());
            pushFollow(FOLLOW_as_is_part_in_package_body5078);
            as_is_part85=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part85.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:16: ( variable_declaration | function_declaration | procedure_declaration )*
            loop30:
            do {
                int alt30=4;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case TYPE_KEYWORD:
                case INTERVAL_KEYWORD:
                case SUBTYPE_KEYWORD:
                case PRAGMA_KEYWORD:
                case CURSOR_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt30=1;
                    }
                    break;
                case FUNCTION_KEYWORD:
                    {
                    alt30=2;
                    }
                    break;
                case PROCEDURE_KEYWORD:
                    {
                    alt30=3;
                    }
                    break;

                }

                switch (alt30) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_body5096);
            	    variable_declaration86=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration86.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:40: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_package_body5100);
            	    function_declaration87=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration87.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:63: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_package_body5104);
            	    procedure_declaration88=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration88.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:16: ( BEGIN_KEYWORD ( executable_section )+ )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BEGIN_KEYWORD) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:17: BEGIN_KEYWORD ( executable_section )+
                    {
                    BEGIN_KEYWORD89=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_package_body5124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEGIN_KEYWORD89_tree = (Object)adaptor.create(BEGIN_KEYWORD89);
                    adaptor.addChild(root_0, BEGIN_KEYWORD89_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:31: ( executable_section )+
                    int cnt31=0;
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==NUMBER_UNSIGNED||LA31_0==STRING||(LA31_0>=IDENTIFIER && LA31_0<=EXT_IDENTIFIER)||LA31_0==NOT_OPERATOR||LA31_0==BEGIN_KEYWORD||LA31_0==DECLARE_KEYWORD||LA31_0==NULL_KEYWORD||(LA31_0>=TRUE_KEYWORD && LA31_0<=FALSE_KEYWORD)||LA31_0==INTERVAL_KEYWORD||LA31_0==REPLACE_KEYWORD||(LA31_0>=RETURN_KEYWORD && LA31_0<=IN_KEYWORD)||LA31_0==IF_KEYWORD||(LA31_0>=NOT_IN_KEYWORD && LA31_0<=LOOP_KEYWORD)||(LA31_0>=WHILE_KEYWORD && LA31_0<=FOR_KEYWORD)||LA31_0==SELECT_KEYWORD||(LA31_0>=RAISE_KEYWORD && LA31_0<=PRAGMA_KEYWORD)||LA31_0==CASE_KEYWORD||LA31_0==CLOSE_KEYWORD||LA31_0==COMMIT_KEYWORD||LA31_0==CONTINUE_KEYWORD||(LA31_0>=DELETE_KEYWORD && LA31_0<=EXECUTE_KEYWORD)||LA31_0==EXIT_KEYWORD||LA31_0==FETCH_KEYWORD||LA31_0==FORALL_KEYWORD||(LA31_0>=INSERT_KEYWORD && LA31_0<=OPEN_KEYWORD)||(LA31_0>=ROLLBACK_KEYWORD && LA31_0<=SAVEPOINT_KEYWORD)||LA31_0==SET_KEYWORD||(LA31_0>=SQLCODE_KEYWORD && LA31_0<=UPDATE_KEYWORD)||LA31_0==RESULT_KEYWORD||LA31_0==205||LA31_0==207||(LA31_0>=211 && LA31_0<=212)) ) {
                            alt31=1;
                        }


                        switch (alt31) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:32: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_package_body5127);
                    	    executable_section90=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section90.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt31 >= 1 ) break loop31;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(31, input);
                                throw eee;
                        }
                        cnt31++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD91=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_body5148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD91_tree = (Object)adaptor.create(END_KEYWORD91);
            adaptor.addChild(root_0, END_KEYWORD91_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:28: ( universal_identifier )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=IDENTIFIER && LA33_0<=EXT_IDENTIFIER)||LA33_0==INTERVAL_KEYWORD||LA33_0==RESULT_KEYWORD) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_body5150);
                    universal_identifier92=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier92.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:50: ( SEPARATOR )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==SEPARATOR) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR93=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_body5153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR93_tree = (Object)adaptor.create(SEPARATOR93);
                    adaptor.addChild(root_0, SEPARATOR93_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:61: ( '/' )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==209) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal94=(Token)match(input,209,FOLLOW_209_in_package_body5156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal94_tree = (Object)adaptor.create(char_literal94);
                    adaptor.addChild(root_0, char_literal94_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_body_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:1: package_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_body_name_return package_body_name() throws RecognitionException {
        PL_SQLParser.package_body_name_return retval = new PL_SQLParser.package_body_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS96=null;
        PL_SQLParser.universal_identifier_return universal_identifier95 = null;


        Object ALIAS96_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:19: ( universal_identifier | ALIAS )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( ((LA36_0>=IDENTIFIER && LA36_0<=EXT_IDENTIFIER)||LA36_0==INTERVAL_KEYWORD||LA36_0==RESULT_KEYWORD) ) {
                alt36=1;
            }
            else if ( (LA36_0==ALIAS) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:21: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_body_name5164);
                    universal_identifier95=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier95.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:44: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS96=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_body_name5168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS96_tree = (Object)adaptor.create(ALIAS96);
                    adaptor.addChild(root_0, ALIAS96_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_body_name"

    public static class trigger_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:1: trigger_declaration : TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block ;
    public final PL_SQLParser.trigger_declaration_return trigger_declaration() throws RecognitionException {
        PL_SQLParser.trigger_declaration_return retval = new PL_SQLParser.trigger_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TRIGGER_KEYWORD97=null;
        PL_SQLParser.trigger_name_return trigger_name98 = null;

        PL_SQLParser.trigger_type_return trigger_type99 = null;

        PL_SQLParser.follows_part_return follows_part100 = null;

        PL_SQLParser.trigger_part_return trigger_part101 = null;

        PL_SQLParser.anonymous_block_return anonymous_block102 = null;


        Object TRIGGER_KEYWORD97_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:21: ( TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:23: TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block
            {
            root_0 = (Object)adaptor.nil();

            TRIGGER_KEYWORD97=(Token)match(input,TRIGGER_KEYWORD,FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRIGGER_KEYWORD97_tree = (Object)adaptor.create(TRIGGER_KEYWORD97);
            adaptor.addChild(root_0, TRIGGER_KEYWORD97_tree);
            }
            pushFollow(FOLLOW_trigger_name_in_trigger_declaration5177);
            trigger_name98=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_name98.getTree());
            pushFollow(FOLLOW_trigger_type_in_trigger_declaration5179);
            trigger_type99=trigger_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_type99.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:65: ( follows_part )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FOLLOWS_KEYWORD) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: follows_part
                    {
                    pushFollow(FOLLOW_follows_part_in_trigger_declaration5181);
                    follows_part100=follows_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_part100.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_trigger_part_in_trigger_declaration5184);
            trigger_part101=trigger_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_part101.getTree());
            pushFollow(FOLLOW_anonymous_block_in_trigger_declaration5208);
            anonymous_block102=anonymous_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block102.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "trigger_declaration"

    public static class trigger_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:1: trigger_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.trigger_name_return trigger_name() throws RecognitionException {
        PL_SQLParser.trigger_name_return retval = new PL_SQLParser.trigger_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS104=null;
        PL_SQLParser.universal_identifier_return universal_identifier103 = null;


        Object ALIAS104_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:14: ( universal_identifier | ALIAS )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0>=IDENTIFIER && LA38_0<=EXT_IDENTIFIER)||LA38_0==INTERVAL_KEYWORD||LA38_0==RESULT_KEYWORD) ) {
                alt38=1;
            }
            else if ( (LA38_0==ALIAS) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:16: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_trigger_name5215);
                    universal_identifier103=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier103.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:39: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS104=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_trigger_name5219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS104_tree = (Object)adaptor.create(ALIAS104);
                    adaptor.addChild(root_0, ALIAS104_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "trigger_name"

    public static class follows_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:1: follows_part : FOLLOWS_KEYWORD universal_identifier ;
    public final PL_SQLParser.follows_part_return follows_part() throws RecognitionException {
        PL_SQLParser.follows_part_return retval = new PL_SQLParser.follows_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FOLLOWS_KEYWORD105=null;
        PL_SQLParser.universal_identifier_return universal_identifier106 = null;


        Object FOLLOWS_KEYWORD105_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:14: ( FOLLOWS_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:16: FOLLOWS_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            FOLLOWS_KEYWORD105=(Token)match(input,FOLLOWS_KEYWORD,FOLLOW_FOLLOWS_KEYWORD_in_follows_part5226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOLLOWS_KEYWORD105_tree = (Object)adaptor.create(FOLLOWS_KEYWORD105);
            adaptor.addChild(root_0, FOLLOWS_KEYWORD105_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_follows_part5228);
            universal_identifier106=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier106.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "follows_part"

    public static class trigger_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:1: trigger_part : ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? ;
    public final PL_SQLParser.trigger_part_return trigger_part() throws RecognitionException {
        PL_SQLParser.trigger_part_return retval = new PL_SQLParser.trigger_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set107=null;
        Token WHEN_KEYWORD108=null;
        PL_SQLParser.universal_expression_return universal_expression109 = null;


        Object set107_tree=null;
        Object WHEN_KEYWORD108_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:14: ( ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=ENABLE_KEYWORD && LA39_0<=DISABLE_KEYWORD)) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set107=(Token)input.LT(1);
                    if ( (input.LA(1)>=ENABLE_KEYWORD && input.LA(1)<=DISABLE_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set107));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:52: ( WHEN_KEYWORD universal_expression )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==WHEN_KEYWORD) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:476:53: WHEN_KEYWORD universal_expression
                    {
                    WHEN_KEYWORD108=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_trigger_part5245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD108_tree = (Object)adaptor.create(WHEN_KEYWORD108);
                    adaptor.addChild(root_0, WHEN_KEYWORD108_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_trigger_part5247);
                    universal_expression109=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "trigger_part"

    public static class trigger_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:1: trigger_type : ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger );
    public final PL_SQLParser.trigger_type_return trigger_type() throws RecognitionException {
        PL_SQLParser.trigger_type_return retval = new PL_SQLParser.trigger_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BEFORE_KEYWORD110=null;
        Token AFTER_KEYWORD113=null;
        Token INSTEAD_KEYWORD116=null;
        Token OF_KEYWORD117=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause111 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger112 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause114 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger115 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause118 = null;

        PL_SQLParser.compound_dml_trigger_return compound_dml_trigger119 = null;


        Object BEFORE_KEYWORD110_tree=null;
        Object AFTER_KEYWORD113_tree=null;
        Object INSTEAD_KEYWORD116_tree=null;
        Object OF_KEYWORD117_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:14: ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger )
            int alt43=4;
            switch ( input.LA(1) ) {
            case BEFORE_KEYWORD:
                {
                alt43=1;
                }
                break;
            case AFTER_KEYWORD:
                {
                alt43=2;
                }
                break;
            case INSTEAD_KEYWORD:
                {
                alt43=3;
                }
                break;
            case FOR_KEYWORD:
                {
                alt43=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:17: BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    BEFORE_KEYWORD110=(Token)match(input,BEFORE_KEYWORD,FOLLOW_BEFORE_KEYWORD_in_trigger_type5257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEFORE_KEYWORD110_tree = (Object)adaptor.create(BEFORE_KEYWORD110);
                    adaptor.addChild(root_0, BEFORE_KEYWORD110_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:32: ( dml_event_clause | non_dml_trigger )
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==DELETE_KEYWORD||LA41_0==INSERT_KEYWORD||LA41_0==UPDATE_KEYWORD) ) {
                        alt41=1;
                    }
                    else if ( (LA41_0==IDENTIFIER||LA41_0==INTERVAL_KEYWORD||LA41_0==RESULT_KEYWORD) ) {
                        alt41=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 0, input);

                        throw nvae;
                    }
                    switch (alt41) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:33: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5260);
                            dml_event_clause111=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause111.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:52: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5264);
                            non_dml_trigger112=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger112.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:17: AFTER_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    AFTER_KEYWORD113=(Token)match(input,AFTER_KEYWORD,FOLLOW_AFTER_KEYWORD_in_trigger_type5286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AFTER_KEYWORD113_tree = (Object)adaptor.create(AFTER_KEYWORD113);
                    adaptor.addChild(root_0, AFTER_KEYWORD113_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:31: ( dml_event_clause | non_dml_trigger )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==DELETE_KEYWORD||LA42_0==INSERT_KEYWORD||LA42_0==UPDATE_KEYWORD) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==IDENTIFIER||LA42_0==INTERVAL_KEYWORD||LA42_0==RESULT_KEYWORD) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:32: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5289);
                            dml_event_clause114=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause114.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:51: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5293);
                            non_dml_trigger115=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger115.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:17: INSTEAD_KEYWORD OF_KEYWORD dml_event_clause
                    {
                    INSTEAD_KEYWORD116=(Token)match(input,INSTEAD_KEYWORD,FOLLOW_INSTEAD_KEYWORD_in_trigger_type5315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTEAD_KEYWORD116_tree = (Object)adaptor.create(INSTEAD_KEYWORD116);
                    adaptor.addChild(root_0, INSTEAD_KEYWORD116_tree);
                    }
                    OF_KEYWORD117=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_trigger_type5317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD117_tree = (Object)adaptor.create(OF_KEYWORD117);
                    adaptor.addChild(root_0, OF_KEYWORD117_tree);
                    }
                    pushFollow(FOLLOW_dml_event_clause_in_trigger_type5319);
                    dml_event_clause118=dml_event_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause118.getTree());

                    }


                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:16: compound_dml_trigger
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_dml_trigger_in_trigger_type5339);
                    compound_dml_trigger119=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_dml_trigger119.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "trigger_type"

    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:1: compound_dml_trigger : FOR_KEYWORD dml_event_clause ( referencing_clause )? ;
    public final PL_SQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        PL_SQLParser.compound_dml_trigger_return retval = new PL_SQLParser.compound_dml_trigger_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FOR_KEYWORD120=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause121 = null;

        PL_SQLParser.referencing_clause_return referencing_clause122 = null;


        Object FOR_KEYWORD120_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:22: ( FOR_KEYWORD dml_event_clause ( referencing_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:24: FOR_KEYWORD dml_event_clause ( referencing_clause )?
            {
            root_0 = (Object)adaptor.nil();

            FOR_KEYWORD120=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD120_tree = (Object)adaptor.create(FOR_KEYWORD120);
            adaptor.addChild(root_0, FOR_KEYWORD120_tree);
            }
            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger5348);
            dml_event_clause121=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause121.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:53: ( referencing_clause )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==REFERENCING_KEYWORD) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger5350);
                    referencing_clause122=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause122.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"

    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:1: non_dml_trigger : ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier ;
    public final PL_SQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        PL_SQLParser.non_dml_trigger_return retval = new PL_SQLParser.non_dml_trigger_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OR_OPERATOR124=null;
        Token ON_KEYWORD125=null;
        PL_SQLParser.identifier_return identifier123 = null;

        PL_SQLParser.universal_identifier_return universal_identifier126 = null;


        Object OR_OPERATOR124_tree=null;
        Object ON_KEYWORD125_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:17: ( ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:19: ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:19: ( identifier ( OR_OPERATOR )? )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==IDENTIFIER||LA46_0==INTERVAL_KEYWORD||LA46_0==RESULT_KEYWORD) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:20: identifier ( OR_OPERATOR )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_non_dml_trigger5359);
            	    identifier123=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier123.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:31: ( OR_OPERATOR )?
            	    int alt45=2;
            	    int LA45_0 = input.LA(1);

            	    if ( (LA45_0==OR_OPERATOR) ) {
            	        alt45=1;
            	    }
            	    switch (alt45) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR124=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_non_dml_trigger5361); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR124_tree = (Object)adaptor.create(OR_OPERATOR124);
            	            adaptor.addChild(root_0, OR_OPERATOR124_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);

            ON_KEYWORD125=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_non_dml_trigger5366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD125_tree = (Object)adaptor.create(ON_KEYWORD125);
            adaptor.addChild(root_0, ON_KEYWORD125_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_non_dml_trigger5368);
            universal_identifier126=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier126.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"

    public static class dml_event_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:1: dml_event_clause : ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? ;
    public final PL_SQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
        PL_SQLParser.dml_event_clause_return retval = new PL_SQLParser.dml_event_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INSERT_KEYWORD127=null;
        Token DELETE_KEYWORD128=null;
        Token UPDATE_KEYWORD129=null;
        Token OR_OPERATOR131=null;
        Token FOR_KEYWORD135=null;
        Token EACH_KEYWORD136=null;
        Token ROW_KEYWORD137=null;
        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor130 = null;

        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor132 = null;

        PL_SQLParser.dml_event_clause_part_return dml_event_clause_part133 = null;

        PL_SQLParser.referencing_clause_return referencing_clause134 = null;


        Object INSERT_KEYWORD127_tree=null;
        Object DELETE_KEYWORD128_tree=null;
        Object UPDATE_KEYWORD129_tree=null;
        Object OR_OPERATOR131_tree=null;
        Object FOR_KEYWORD135_tree=null;
        Object EACH_KEYWORD136_tree=null;
        Object ROW_KEYWORD137_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:18: ( ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==DELETE_KEYWORD||LA51_0==INSERT_KEYWORD||LA51_0==UPDATE_KEYWORD) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) )
            	    int alt48=3;
            	    switch ( input.LA(1) ) {
            	    case INSERT_KEYWORD:
            	        {
            	        alt48=1;
            	        }
            	        break;
            	    case DELETE_KEYWORD:
            	        {
            	        alt48=2;
            	        }
            	        break;
            	    case UPDATE_KEYWORD:
            	        {
            	        alt48=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 48, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:22: INSERT_KEYWORD
            	            {
            	            INSERT_KEYWORD127=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_dml_event_clause5377); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INSERT_KEYWORD127_tree = (Object)adaptor.create(INSERT_KEYWORD127);
            	            adaptor.addChild(root_0, INSERT_KEYWORD127_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:39: DELETE_KEYWORD
            	            {
            	            DELETE_KEYWORD128=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_dml_event_clause5381); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DELETE_KEYWORD128_tree = (Object)adaptor.create(DELETE_KEYWORD128);
            	            adaptor.addChild(root_0, DELETE_KEYWORD128_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:22: UPDATE_KEYWORD ( dml_event_clause_factor )?
            	            {
            	            UPDATE_KEYWORD129=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5407); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UPDATE_KEYWORD129_tree = (Object)adaptor.create(UPDATE_KEYWORD129);
            	            adaptor.addChild(root_0, UPDATE_KEYWORD129_tree);
            	            }
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:37: ( dml_event_clause_factor )?
            	            int alt47=2;
            	            int LA47_0 = input.LA(1);

            	            if ( (LA47_0==OF_KEYWORD) ) {
            	                int LA47_1 = input.LA(2);

            	                if ( (LA47_1==IDENTIFIER||LA47_1==INTERVAL_KEYWORD||LA47_1==RESULT_KEYWORD) ) {
            	                    int LA47_3 = input.LA(3);

            	                    if ( (synpred69_PL_SQL()) ) {
            	                        alt47=1;
            	                    }
            	                }
            	                else if ( (LA47_1==EXT_IDENTIFIER) ) {
            	                    int LA47_4 = input.LA(3);

            	                    if ( (synpred69_PL_SQL()) ) {
            	                        alt47=1;
            	                    }
            	                }
            	            }
            	            switch (alt47) {
            	                case 1 :
            	                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	                    {
            	                    pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5409);
            	                    dml_event_clause_factor130=dml_event_clause_factor();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor130.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:21: ( OR_OPERATOR )?
            	    int alt49=2;
            	    int LA49_0 = input.LA(1);

            	    if ( (LA49_0==OR_OPERATOR) ) {
            	        alt49=1;
            	    }
            	    switch (alt49) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR131=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_dml_event_clause5434); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR131_tree = (Object)adaptor.create(OR_OPERATOR131);
            	            adaptor.addChild(root_0, OR_OPERATOR131_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:34: ( dml_event_clause_factor )?
            	    int alt50=2;
            	    int LA50_0 = input.LA(1);

            	    if ( (LA50_0==OF_KEYWORD) ) {
            	        alt50=1;
            	    }
            	    switch (alt50) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	            {
            	            pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5437);
            	            dml_event_clause_factor132=dml_event_clause_factor();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor132.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);

            pushFollow(FOLLOW_dml_event_clause_part_in_dml_event_clause5462);
            dml_event_clause_part133=dml_event_clause_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_part133.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:43: ( referencing_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==REFERENCING_KEYWORD) ) {
                int LA52_1 = input.LA(2);

                if ( ((LA52_1>=OLD_KEYWORD && LA52_1<=PARENT_KEYWORD)) ) {
                    switch ( input.LA(3) ) {
                        case AS_KEYWORD:
                            {
                            switch ( input.LA(4) ) {
                                case OLD_KEYWORD:
                                    {
                                    int LA52_5 = input.LA(5);

                                    if ( (synpred73_PL_SQL()) ) {
                                        alt52=1;
                                    }
                                    }
                                    break;
                                case NEW_KEYWORD:
                                    {
                                    int LA52_6 = input.LA(5);

                                    if ( (synpred73_PL_SQL()) ) {
                                        alt52=1;
                                    }
                                    }
                                    break;
                                case IDENTIFIER:
                                case INTERVAL_KEYWORD:
                                case RESULT_KEYWORD:
                                    {
                                    int LA52_7 = input.LA(5);

                                    if ( (synpred73_PL_SQL()) ) {
                                        alt52=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case OLD_KEYWORD:
                            {
                            int LA52_5 = input.LA(4);

                            if ( (synpred73_PL_SQL()) ) {
                                alt52=1;
                            }
                            }
                            break;
                        case NEW_KEYWORD:
                            {
                            int LA52_6 = input.LA(4);

                            if ( (synpred73_PL_SQL()) ) {
                                alt52=1;
                            }
                            }
                            break;
                        case IDENTIFIER:
                        case INTERVAL_KEYWORD:
                        case RESULT_KEYWORD:
                            {
                            int LA52_7 = input.LA(4);

                            if ( (synpred73_PL_SQL()) ) {
                                alt52=1;
                            }
                            }
                            break;
                    }

                }
            }
            switch (alt52) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_dml_event_clause5464);
                    referencing_clause134=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause134.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:21: ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==FOR_KEYWORD) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:22: FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD
                    {
                    FOR_KEYWORD135=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_dml_event_clause5488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD135_tree = (Object)adaptor.create(FOR_KEYWORD135);
                    adaptor.addChild(root_0, FOR_KEYWORD135_tree);
                    }
                    EACH_KEYWORD136=(Token)match(input,EACH_KEYWORD,FOLLOW_EACH_KEYWORD_in_dml_event_clause5490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EACH_KEYWORD136_tree = (Object)adaptor.create(EACH_KEYWORD136);
                    adaptor.addChild(root_0, EACH_KEYWORD136_tree);
                    }
                    ROW_KEYWORD137=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_dml_event_clause5492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD137_tree = (Object)adaptor.create(ROW_KEYWORD137);
                    adaptor.addChild(root_0, ROW_KEYWORD137_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"

    public static class dml_event_clause_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:1: dml_event_clause_factor : OF_KEYWORD ( universal_identifier ( COMMA )? )+ ;
    public final PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor() throws RecognitionException {
        PL_SQLParser.dml_event_clause_factor_return retval = new PL_SQLParser.dml_event_clause_factor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OF_KEYWORD138=null;
        Token COMMA140=null;
        PL_SQLParser.universal_identifier_return universal_identifier139 = null;


        Object OF_KEYWORD138_tree=null;
        Object COMMA140_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:25: ( OF_KEYWORD ( universal_identifier ( COMMA )? )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:27: OF_KEYWORD ( universal_identifier ( COMMA )? )+
            {
            root_0 = (Object)adaptor.nil();

            OF_KEYWORD138=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD138_tree = (Object)adaptor.create(OF_KEYWORD138);
            adaptor.addChild(root_0, OF_KEYWORD138_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:38: ( universal_identifier ( COMMA )? )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( ((LA55_0>=IDENTIFIER && LA55_0<=EXT_IDENTIFIER)||LA55_0==INTERVAL_KEYWORD||LA55_0==RESULT_KEYWORD) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:39: universal_identifier ( COMMA )?
            	    {
            	    pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_factor5504);
            	    universal_identifier139=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier139.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:60: ( COMMA )?
            	    int alt54=2;
            	    int LA54_0 = input.LA(1);

            	    if ( (LA54_0==COMMA) ) {
            	        alt54=1;
            	    }
            	    switch (alt54) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: COMMA
            	            {
            	            COMMA140=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_clause_factor5506); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA140_tree = (Object)adaptor.create(COMMA140);
            	            adaptor.addChild(root_0, COMMA140_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_factor"

    public static class dml_event_clause_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:1: dml_event_clause_part : ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) ;
    public final PL_SQLParser.dml_event_clause_part_return dml_event_clause_part() throws RecognitionException {
        PL_SQLParser.dml_event_clause_part_return retval = new PL_SQLParser.dml_event_clause_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ON_KEYWORD141=null;
        Token NESTED_KEYWORD142=null;
        Token TABLE_KEYWORD143=null;
        Token OF_KEYWORD145=null;
        PL_SQLParser.identifier_return identifier144 = null;

        PL_SQLParser.universal_identifier_return universal_identifier146 = null;


        Object ON_KEYWORD141_tree=null;
        Object NESTED_KEYWORD142_tree=null;
        Object TABLE_KEYWORD143_tree=null;
        Object OF_KEYWORD145_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:23: ( ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:25: ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            {
            root_0 = (Object)adaptor.nil();

            ON_KEYWORD141=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_dml_event_clause_part5516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD141_tree = (Object)adaptor.create(ON_KEYWORD141);
            adaptor.addChild(root_0, ON_KEYWORD141_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:36: ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==NESTED_KEYWORD) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:38: NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD
                    {
                    NESTED_KEYWORD142=(Token)match(input,NESTED_KEYWORD,FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_KEYWORD142_tree = (Object)adaptor.create(NESTED_KEYWORD142);
                    adaptor.addChild(root_0, NESTED_KEYWORD142_tree);
                    }
                    TABLE_KEYWORD143=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD143_tree = (Object)adaptor.create(TABLE_KEYWORD143);
                    adaptor.addChild(root_0, TABLE_KEYWORD143_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_dml_event_clause_part5524);
                    identifier144=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier144.getTree());
                    OF_KEYWORD145=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_part5526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD145_tree = (Object)adaptor.create(OF_KEYWORD145);
                    adaptor.addChild(root_0, OF_KEYWORD145_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_part5530);
            universal_identifier146=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier146.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_part"

    public static class referencing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:1: referencing_clause : REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ ;
    public final PL_SQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
        PL_SQLParser.referencing_clause_return retval = new PL_SQLParser.referencing_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REFERENCING_KEYWORD147=null;
        Token set148=null;
        Token AS_KEYWORD149=null;
        Token OLD_KEYWORD150=null;
        Token NEW_KEYWORD151=null;
        PL_SQLParser.identifier_return identifier152 = null;


        Object REFERENCING_KEYWORD147_tree=null;
        Object set148_tree=null;
        Object AS_KEYWORD149_tree=null;
        Object OLD_KEYWORD150_tree=null;
        Object NEW_KEYWORD151_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:20: ( REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:22: REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            {
            root_0 = (Object)adaptor.nil();

            REFERENCING_KEYWORD147=(Token)match(input,REFERENCING_KEYWORD,FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCING_KEYWORD147_tree = (Object)adaptor.create(REFERENCING_KEYWORD147);
            adaptor.addChild(root_0, REFERENCING_KEYWORD147_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:42: ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            int cnt59=0;
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( ((LA59_0>=OLD_KEYWORD && LA59_0<=PARENT_KEYWORD)) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:44: ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    {
            	    set148=(Token)input.LT(1);
            	    if ( (input.LA(1)>=OLD_KEYWORD && input.LA(1)<=PARENT_KEYWORD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set148));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:22: ( AS_KEYWORD )?
            	    int alt57=2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==AS_KEYWORD) ) {
            	        alt57=1;
            	    }
            	    switch (alt57) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: AS_KEYWORD
            	            {
            	            AS_KEYWORD149=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_referencing_clause5575); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AS_KEYWORD149_tree = (Object)adaptor.create(AS_KEYWORD149);
            	            adaptor.addChild(root_0, AS_KEYWORD149_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:34: ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    int alt58=3;
            	    switch ( input.LA(1) ) {
            	    case OLD_KEYWORD:
            	        {
            	        alt58=1;
            	        }
            	        break;
            	    case NEW_KEYWORD:
            	        {
            	        alt58=2;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    case INTERVAL_KEYWORD:
            	    case RESULT_KEYWORD:
            	        {
            	        alt58=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 58, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt58) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:35: OLD_KEYWORD
            	            {
            	            OLD_KEYWORD150=(Token)match(input,OLD_KEYWORD,FOLLOW_OLD_KEYWORD_in_referencing_clause5579); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OLD_KEYWORD150_tree = (Object)adaptor.create(OLD_KEYWORD150);
            	            adaptor.addChild(root_0, OLD_KEYWORD150_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:49: NEW_KEYWORD
            	            {
            	            NEW_KEYWORD151=(Token)match(input,NEW_KEYWORD,FOLLOW_NEW_KEYWORD_in_referencing_clause5583); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NEW_KEYWORD151_tree = (Object)adaptor.create(NEW_KEYWORD151);
            	            adaptor.addChild(root_0, NEW_KEYWORD151_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:63: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_referencing_clause5587);
            	            identifier152=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier152.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt59 >= 1 ) break loop59;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(59, input);
                        throw eee;
                }
                cnt59++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"

    public static class type_spec_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:1: type_spec_declaration : TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_spec_declaration_return type_spec_declaration() throws RecognitionException {
        PL_SQLParser.type_spec_declaration_return retval = new PL_SQLParser.type_spec_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TYPE_KEYWORD153=null;
        Token SEPARATOR158=null;
        Token char_literal159=null;
        PL_SQLParser.type_spec_name_return type_spec_name154 = null;

        PL_SQLParser.type_oid_part_return type_oid_part155 = null;

        PL_SQLParser.invoker_clause_return invoker_clause156 = null;

        PL_SQLParser.type_spec_types_return type_spec_types157 = null;


        Object TYPE_KEYWORD153_tree=null;
        Object SEPARATOR158_tree=null;
        Object char_literal159_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:23: ( TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:25: TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD153=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_spec_declaration5598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD153_tree = (Object)adaptor.create(TYPE_KEYWORD153);
            adaptor.addChild(root_0, TYPE_KEYWORD153_tree);
            }
            pushFollow(FOLLOW_type_spec_name_in_type_spec_declaration5600);
            type_spec_name154=type_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_name154.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:53: ( type_oid_part )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==OID_KEYWORD) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: type_oid_part
                    {
                    pushFollow(FOLLOW_type_oid_part_in_type_spec_declaration5602);
                    type_oid_part155=type_oid_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_oid_part155.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:68: ( invoker_clause )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AUTHID_KEYWORD) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_type_spec_declaration5605);
                    invoker_clause156=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause156.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_types_in_type_spec_declaration5608);
            type_spec_types157=type_spec_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_types157.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:25: ( SEPARATOR )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==SEPARATOR) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR158=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_spec_declaration5634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR158_tree = (Object)adaptor.create(SEPARATOR158);
                    adaptor.addChild(root_0, SEPARATOR158_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:36: ( '/' )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==209) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal159=(Token)match(input,209,FOLLOW_209_in_type_spec_declaration5637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal159_tree = (Object)adaptor.create(char_literal159);
                    adaptor.addChild(root_0, char_literal159_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_spec_declaration"

    public static class type_spec_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:1: type_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_spec_name_return type_spec_name() throws RecognitionException {
        PL_SQLParser.type_spec_name_return retval = new PL_SQLParser.type_spec_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS161=null;
        PL_SQLParser.universal_identifier_return universal_identifier160 = null;


        Object ALIAS161_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:16: ( universal_identifier | ALIAS )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=IDENTIFIER && LA64_0<=EXT_IDENTIFIER)||LA64_0==INTERVAL_KEYWORD||LA64_0==RESULT_KEYWORD) ) {
                alt64=1;
            }
            else if ( (LA64_0==ALIAS) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_spec_name5645);
                    universal_identifier160=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier160.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS161=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_spec_name5649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS161_tree = (Object)adaptor.create(ALIAS161);
                    adaptor.addChild(root_0, ALIAS161_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_spec_name"

    public static class type_oid_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_oid_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:1: type_oid_part : OID_KEYWORD '\\'' universal_identifier '\\'' ;
    public final PL_SQLParser.type_oid_part_return type_oid_part() throws RecognitionException {
        PL_SQLParser.type_oid_part_return retval = new PL_SQLParser.type_oid_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OID_KEYWORD162=null;
        Token char_literal163=null;
        Token char_literal165=null;
        PL_SQLParser.universal_identifier_return universal_identifier164 = null;


        Object OID_KEYWORD162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal165_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:15: ( OID_KEYWORD '\\'' universal_identifier '\\'' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:17: OID_KEYWORD '\\'' universal_identifier '\\''
            {
            root_0 = (Object)adaptor.nil();

            OID_KEYWORD162=(Token)match(input,OID_KEYWORD,FOLLOW_OID_KEYWORD_in_type_oid_part5656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OID_KEYWORD162_tree = (Object)adaptor.create(OID_KEYWORD162);
            adaptor.addChild(root_0, OID_KEYWORD162_tree);
            }
            char_literal163=(Token)match(input,210,FOLLOW_210_in_type_oid_part5658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal163_tree = (Object)adaptor.create(char_literal163);
            adaptor.addChild(root_0, char_literal163_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_type_oid_part5660);
            universal_identifier164=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier164.getTree());
            char_literal165=(Token)match(input,210,FOLLOW_210_in_type_oid_part5662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal165_tree = (Object)adaptor.create(char_literal165);
            adaptor.addChild(root_0, char_literal165_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_oid_part"

    public static class type_spec_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:1: type_spec_types : ( object_type | varray_type | nested_table_type );
    public final PL_SQLParser.type_spec_types_return type_spec_types() throws RecognitionException {
        PL_SQLParser.type_spec_types_return retval = new PL_SQLParser.type_spec_types_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.object_type_return object_type166 = null;

        PL_SQLParser.varray_type_return varray_type167 = null;

        PL_SQLParser.nested_table_type_return nested_table_type168 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:17: ( object_type | varray_type | nested_table_type )
            int alt65=3;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IS_KEYWORD||LA65_0==AS_KEYWORD) ) {
                switch ( input.LA(2) ) {
                case VARRAY_KEYWORD:
                case VARYING_KEYWORD:
                    {
                    alt65=2;
                    }
                    break;
                case OBJECT_KEYWORD:
                    {
                    alt65=1;
                    }
                    break;
                case TABLE_KEYWORD:
                    {
                    alt65=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA65_0==UNDER_KEYWORD) ) {
                alt65=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:19: object_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_object_type_in_type_spec_types5670);
                    object_type166=object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type166.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:33: varray_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varray_type_in_type_spec_types5674);
                    varray_type167=varray_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_type167.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:47: nested_table_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nested_table_type_in_type_spec_types5678);
                    nested_table_type168=nested_table_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_type168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_spec_types"

    public static class object_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:1: object_type : ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? ;
    public final PL_SQLParser.object_type_return object_type() throws RecognitionException {
        PL_SQLParser.object_type_return retval = new PL_SQLParser.object_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OBJECT_KEYWORD170=null;
        Token UNDER_KEYWORD171=null;
        Token NOT_OPERATOR174=null;
        Token FINAL_KEYWORD175=null;
        Token NOT_OPERATOR176=null;
        Token INSTANTIABLE_KEYWORD177=null;
        PL_SQLParser.as_is_part_return as_is_part169 = null;

        PL_SQLParser.universal_identifier_return universal_identifier172 = null;

        PL_SQLParser.object_type_part_return object_type_part173 = null;


        Object OBJECT_KEYWORD170_tree=null;
        Object UNDER_KEYWORD171_tree=null;
        Object NOT_OPERATOR174_tree=null;
        Object FINAL_KEYWORD175_tree=null;
        Object NOT_OPERATOR176_tree=null;
        Object INSTANTIABLE_KEYWORD177_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:13: ( ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IS_KEYWORD||LA66_0==AS_KEYWORD) ) {
                alt66=1;
            }
            else if ( (LA66_0==UNDER_KEYWORD) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:16: ( as_is_part OBJECT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:16: ( as_is_part OBJECT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:17: as_is_part OBJECT_KEYWORD
                    {
                    pushFollow(FOLLOW_as_is_part_in_object_type5687);
                    as_is_part169=as_is_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part169.getTree());
                    OBJECT_KEYWORD170=(Token)match(input,OBJECT_KEYWORD,FOLLOW_OBJECT_KEYWORD_in_object_type5689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OBJECT_KEYWORD170_tree = (Object)adaptor.create(OBJECT_KEYWORD170);
                    adaptor.addChild(root_0, OBJECT_KEYWORD170_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:46: ( UNDER_KEYWORD universal_identifier )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:46: ( UNDER_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:47: UNDER_KEYWORD universal_identifier
                    {
                    UNDER_KEYWORD171=(Token)match(input,UNDER_KEYWORD,FOLLOW_UNDER_KEYWORD_in_object_type5695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDER_KEYWORD171_tree = (Object)adaptor.create(UNDER_KEYWORD171);
                    adaptor.addChild(root_0, UNDER_KEYWORD171_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_object_type5697);
                    universal_identifier172=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier172.getTree());

                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:498:15: ( object_type_part )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==207) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: object_type_part
                    {
                    pushFollow(FOLLOW_object_type_part_in_object_type5715);
                    object_type_part173=object_type_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type_part173.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:16: ( ( NOT_OPERATOR )? FINAL_KEYWORD )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==NOT_OPERATOR) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==FINAL_KEYWORD) ) {
                    alt69=1;
                }
            }
            else if ( (LA69_0==FINAL_KEYWORD) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:17: ( NOT_OPERATOR )? FINAL_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:17: ( NOT_OPERATOR )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==NOT_OPERATOR) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR174=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5734); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR174_tree = (Object)adaptor.create(NOT_OPERATOR174);
                            adaptor.addChild(root_0, NOT_OPERATOR174_tree);
                            }

                            }
                            break;

                    }

                    FINAL_KEYWORD175=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_object_type5737); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD175_tree = (Object)adaptor.create(FINAL_KEYWORD175);
                    adaptor.addChild(root_0, FINAL_KEYWORD175_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:47: ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==NOT_OPERATOR||LA71_0==INSTANTIABLE_KEYWORD) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:48: ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:48: ( NOT_OPERATOR )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==NOT_OPERATOR) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR176=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5742); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR176_tree = (Object)adaptor.create(NOT_OPERATOR176);
                            adaptor.addChild(root_0, NOT_OPERATOR176_tree);
                            }

                            }
                            break;

                    }

                    INSTANTIABLE_KEYWORD177=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD177_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD177);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD177_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "object_type"

    public static class object_type_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:1: object_type_part : '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' ;
    public final PL_SQLParser.object_type_part_return object_type_part() throws RecognitionException {
        PL_SQLParser.object_type_part_return retval = new PL_SQLParser.object_type_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal178=null;
        Token char_literal181=null;
        Token char_literal183=null;
        Token char_literal184=null;
        PL_SQLParser.identifier_return identifier179 = null;

        PL_SQLParser.data_type_return data_type180 = null;

        PL_SQLParser.element_spec_return element_spec182 = null;


        Object char_literal178_tree=null;
        Object char_literal181_tree=null;
        Object char_literal183_tree=null;
        Object char_literal184_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:18: ( '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:20: '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal178=(Token)match(input,207,FOLLOW_207_in_object_type_part5754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal178_tree = (Object)adaptor.create(char_literal178);
            adaptor.addChild(root_0, char_literal178_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:24: ( identifier data_type ( ',' )? )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==IDENTIFIER||LA73_0==INTERVAL_KEYWORD||LA73_0==RESULT_KEYWORD) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:25: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_object_type_part5757);
            	    identifier179=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier179.getTree());
            	    pushFollow(FOLLOW_data_type_in_object_type_part5759);
            	    data_type180=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type180.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:46: ( ',' )?
            	    int alt72=2;
            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0==COMMA) ) {
            	        alt72=1;
            	    }
            	    switch (alt72) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal181=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5761); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal181_tree = (Object)adaptor.create(char_literal181);
            	            adaptor.addChild(root_0, char_literal181_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:53: ( element_spec ( ',' )? )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==NOT_OPERATOR||(LA75_0>=FINAL_KEYWORD && LA75_0<=CONSTRUCTOR_KEYWORD)||(LA75_0>=MAP_KEYWORD && LA75_0<=ORDER_KEYWORD)) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:54: element_spec ( ',' )?
            	    {
            	    pushFollow(FOLLOW_element_spec_in_object_type_part5767);
            	    element_spec182=element_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec182.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:67: ( ',' )?
            	    int alt74=2;
            	    int LA74_0 = input.LA(1);

            	    if ( (LA74_0==COMMA) ) {
            	        alt74=1;
            	    }
            	    switch (alt74) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal183=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5769); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal183_tree = (Object)adaptor.create(char_literal183);
            	            adaptor.addChild(root_0, char_literal183_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            char_literal184=(Token)match(input,208,FOLLOW_208_in_object_type_part5774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal184_tree = (Object)adaptor.create(char_literal184);
            adaptor.addChild(root_0, char_literal184_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "object_type_part"

    public static class element_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:1: element_spec : ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? ;
    public final PL_SQLParser.element_spec_return element_spec() throws RecognitionException {
        PL_SQLParser.element_spec_return retval = new PL_SQLParser.element_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal189=null;
        PL_SQLParser.inheritance_clauses_return inheritance_clauses185 = null;

        PL_SQLParser.subprogram_spec_return subprogram_spec186 = null;

        PL_SQLParser.constructor_spec_return constructor_spec187 = null;

        PL_SQLParser.map_order_function_spec_return map_order_function_spec188 = null;

        PL_SQLParser.pragma_clause_return pragma_clause190 = null;


        Object char_literal189_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:14: ( ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:16: ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:16: ( inheritance_clauses )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case NOT_OPERATOR:
                case OVERRIDING_KEYWORD:
                    {
                    alt76=1;
                    }
                    break;
                case FINAL_KEYWORD:
                    {
                    int LA76_2 = input.LA(2);

                    if ( (synpred101_PL_SQL()) ) {
                        alt76=1;
                    }
                    }
                    break;
                case INSTANTIABLE_KEYWORD:
                    {
                    int LA76_4 = input.LA(2);

                    if ( (synpred101_PL_SQL()) ) {
                        alt76=1;
                    }
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: inheritance_clauses
                    {
                    pushFollow(FOLLOW_inheritance_clauses_in_element_spec5781);
                    inheritance_clauses185=inheritance_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inheritance_clauses185.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:37: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case FINAL_KEYWORD:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt79=1;
                    }


                    }
                    break;
                case MEMBER_KEYWORD:
                case STATIC_KEYWORD:
                    {
                    int LA79_3 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt79=1;
                    }


                    }
                    break;
                case INSTANTIABLE_KEYWORD:
                    {
                    int LA79_4 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt79=1;
                    }


                    }
                    break;
                case CONSTRUCTOR_KEYWORD:
                    {
                    int LA79_5 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt79=1;
                    }


                    }
                    break;
                case MAP_KEYWORD:
                case ORDER_KEYWORD:
                    {
                    int LA79_6 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
            	    int alt77=3;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_KEYWORD:
            	    case STATIC_KEYWORD:
            	        {
            	        alt77=1;
            	        }
            	        break;
            	    case FINAL_KEYWORD:
            	    case INSTANTIABLE_KEYWORD:
            	    case CONSTRUCTOR_KEYWORD:
            	        {
            	        alt77=2;
            	        }
            	        break;
            	    case MAP_KEYWORD:
            	    case ORDER_KEYWORD:
            	        {
            	        alt77=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 77, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt77) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:39: subprogram_spec
            	            {
            	            pushFollow(FOLLOW_subprogram_spec_in_element_spec5786);
            	            subprogram_spec186=subprogram_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec186.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:57: constructor_spec
            	            {
            	            pushFollow(FOLLOW_constructor_spec_in_element_spec5790);
            	            constructor_spec187=constructor_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec187.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:76: map_order_function_spec
            	            {
            	            pushFollow(FOLLOW_map_order_function_spec_in_element_spec5794);
            	            map_order_function_spec188=map_order_function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec188.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:101: ( ',' )?
            	    int alt78=2;
            	    int LA78_0 = input.LA(1);

            	    if ( (LA78_0==COMMA) ) {
            	        int LA78_1 = input.LA(2);

            	        if ( (synpred104_PL_SQL()) ) {
            	            alt78=1;
            	        }
            	    }
            	    switch (alt78) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal189=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec5797); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal189_tree = (Object)adaptor.create(char_literal189);
            	            adaptor.addChild(root_0, char_literal189_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:16: ( pragma_clause )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==PRAGMA_KEYWORD) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec5817);
                    pragma_clause190=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_clause190.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "element_spec"

    public static class pragma_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:1: pragma_clause : PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ;
    public final PL_SQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
        PL_SQLParser.pragma_clause_return retval = new PL_SQLParser.pragma_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PRAGMA_KEYWORD191=null;
        Token RESTRICT_REFERENCES_KEYWORD192=null;
        Token char_literal193=null;
        Token char_literal195=null;
        Token char_literal197=null;
        PL_SQLParser.expression_return expression194 = null;

        PL_SQLParser.expression_return expression196 = null;


        Object PRAGMA_KEYWORD191_tree=null;
        Object RESTRICT_REFERENCES_KEYWORD192_tree=null;
        Object char_literal193_tree=null;
        Object char_literal195_tree=null;
        Object char_literal197_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:15: ( PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:17: PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
            {
            root_0 = (Object)adaptor.nil();

            PRAGMA_KEYWORD191=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD191_tree = (Object)adaptor.create(PRAGMA_KEYWORD191);
            adaptor.addChild(root_0, PRAGMA_KEYWORD191_tree);
            }
            RESTRICT_REFERENCES_KEYWORD192=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESTRICT_REFERENCES_KEYWORD192_tree = (Object)adaptor.create(RESTRICT_REFERENCES_KEYWORD192);
            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD192_tree);
            }
            char_literal193=(Token)match(input,207,FOLLOW_207_in_pragma_clause5829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal193_tree = (Object)adaptor.create(char_literal193);
            adaptor.addChild(root_0, char_literal193_tree);
            }
            pushFollow(FOLLOW_expression_in_pragma_clause5831);
            expression194=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression194.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:75: ( ',' expression )+
            int cnt81=0;
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:76: ',' expression
            	    {
            	    char_literal195=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause5834); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal195_tree = (Object)adaptor.create(char_literal195);
            	    adaptor.addChild(root_0, char_literal195_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_pragma_clause5836);
            	    expression196=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression196.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);

            char_literal197=(Token)match(input,208,FOLLOW_208_in_pragma_clause5840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal197_tree = (Object)adaptor.create(char_literal197);
            adaptor.addChild(root_0, char_literal197_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"

    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:1: map_order_function_spec : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec ;
    public final PL_SQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        PL_SQLParser.map_order_function_spec_return retval = new PL_SQLParser.map_order_function_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set198=null;
        Token MEMBER_KEYWORD199=null;
        PL_SQLParser.function_spec_return function_spec200 = null;


        Object set198_tree=null;
        Object MEMBER_KEYWORD199_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:25: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:27: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec
            {
            root_0 = (Object)adaptor.nil();

            set198=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set198));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD199=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec5855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD199_tree = (Object)adaptor.create(MEMBER_KEYWORD199);
            adaptor.addChild(root_0, MEMBER_KEYWORD199_tree);
            }
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec5857);
            function_spec200=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec200.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"

    public static class constructor_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:1: constructor_spec : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? ;
    public final PL_SQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
        PL_SQLParser.constructor_spec_return retval = new PL_SQLParser.constructor_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FINAL_KEYWORD201=null;
        Token INSTANTIABLE_KEYWORD202=null;
        Token CONSTRUCTOR_KEYWORD203=null;
        Token FUNCTION_KEYWORD204=null;
        PL_SQLParser.data_type_return data_type205 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part206 = null;


        Object FINAL_KEYWORD201_tree=null;
        Object INSTANTIABLE_KEYWORD202_tree=null;
        Object CONSTRUCTOR_KEYWORD203_tree=null;
        Object FUNCTION_KEYWORD204_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:18: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:20: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:20: ( FINAL_KEYWORD )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==FINAL_KEYWORD) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD201=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_spec5864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD201_tree = (Object)adaptor.create(FINAL_KEYWORD201);
                    adaptor.addChild(root_0, FINAL_KEYWORD201_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:35: ( INSTANTIABLE_KEYWORD )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==INSTANTIABLE_KEYWORD) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD202=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec5867); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD202_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD202);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD202_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD203=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec5870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD203_tree = (Object)adaptor.create(CONSTRUCTOR_KEYWORD203);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD203_tree);
            }
            FUNCTION_KEYWORD204=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_spec5872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD204_tree = (Object)adaptor.create(FUNCTION_KEYWORD204);
            adaptor.addChild(root_0, FUNCTION_KEYWORD204_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_spec5893);
            data_type205=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type205.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:30: ( constructor_spec_part )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==207) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_spec5895);
                    constructor_spec_part206=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part206.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"

    public static class constructor_spec_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:1: constructor_spec_part : '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD ;
    public final PL_SQLParser.constructor_spec_part_return constructor_spec_part() throws RecognitionException {
        PL_SQLParser.constructor_spec_part_return retval = new PL_SQLParser.constructor_spec_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal207=null;
        Token SELF_KEYWORD208=null;
        Token IN_KEYWORD209=null;
        Token OUT_KEYWORD210=null;
        Token char_literal211=null;
        Token char_literal214=null;
        Token char_literal215=null;
        Token RETURN_KEYWORD216=null;
        Token SELF_KEYWORD217=null;
        Token AS_KEYWORD218=null;
        Token RESULT_KEYWORD219=null;
        PL_SQLParser.identifier_return identifier212 = null;

        PL_SQLParser.data_type_return data_type213 = null;


        Object char_literal207_tree=null;
        Object SELF_KEYWORD208_tree=null;
        Object IN_KEYWORD209_tree=null;
        Object OUT_KEYWORD210_tree=null;
        Object char_literal211_tree=null;
        Object char_literal214_tree=null;
        Object char_literal215_tree=null;
        Object RETURN_KEYWORD216_tree=null;
        Object SELF_KEYWORD217_tree=null;
        Object AS_KEYWORD218_tree=null;
        Object RESULT_KEYWORD219_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:23: ( '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:25: '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            char_literal207=(Token)match(input,207,FOLLOW_207_in_constructor_spec_part5903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal207_tree = (Object)adaptor.create(char_literal207);
            adaptor.addChild(root_0, char_literal207_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:29: ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==SELF_KEYWORD) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:30: SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ','
                    {
                    SELF_KEYWORD208=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part5906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF_KEYWORD208_tree = (Object)adaptor.create(SELF_KEYWORD208);
                    adaptor.addChild(root_0, SELF_KEYWORD208_tree);
                    }
                    IN_KEYWORD209=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part5908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD209_tree = (Object)adaptor.create(IN_KEYWORD209);
                    adaptor.addChild(root_0, IN_KEYWORD209_tree);
                    }
                    OUT_KEYWORD210=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_constructor_spec_part5910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD210_tree = (Object)adaptor.create(OUT_KEYWORD210);
                    adaptor.addChild(root_0, OUT_KEYWORD210_tree);
                    }
                    char_literal211=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part5912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal211_tree = (Object)adaptor.create(char_literal211);
                    adaptor.addChild(root_0, char_literal211_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:25: ( identifier data_type ( ',' )? )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==IDENTIFIER||LA87_0==INTERVAL_KEYWORD||LA87_0==RESULT_KEYWORD) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:26: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_constructor_spec_part5941);
            	    identifier212=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier212.getTree());
            	    pushFollow(FOLLOW_data_type_in_constructor_spec_part5943);
            	    data_type213=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type213.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:47: ( ',' )?
            	    int alt86=2;
            	    int LA86_0 = input.LA(1);

            	    if ( (LA86_0==COMMA) ) {
            	        alt86=1;
            	    }
            	    switch (alt86) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal214=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part5945); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal214_tree = (Object)adaptor.create(char_literal214);
            	            adaptor.addChild(root_0, char_literal214_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);

            char_literal215=(Token)match(input,208,FOLLOW_208_in_constructor_spec_part5950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal215_tree = (Object)adaptor.create(char_literal215);
            adaptor.addChild(root_0, char_literal215_tree);
            }
            RETURN_KEYWORD216=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_constructor_spec_part5976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD216_tree = (Object)adaptor.create(RETURN_KEYWORD216);
            adaptor.addChild(root_0, RETURN_KEYWORD216_tree);
            }
            SELF_KEYWORD217=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part5978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELF_KEYWORD217_tree = (Object)adaptor.create(SELF_KEYWORD217);
            adaptor.addChild(root_0, SELF_KEYWORD217_tree);
            }
            AS_KEYWORD218=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_constructor_spec_part5980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_KEYWORD218_tree = (Object)adaptor.create(AS_KEYWORD218);
            adaptor.addChild(root_0, AS_KEYWORD218_tree);
            }
            RESULT_KEYWORD219=(Token)match(input,RESULT_KEYWORD,FOLLOW_RESULT_KEYWORD_in_constructor_spec_part5982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESULT_KEYWORD219_tree = (Object)adaptor.create(RESULT_KEYWORD219);
            adaptor.addChild(root_0, RESULT_KEYWORD219_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructor_spec_part"

    public static class subprogram_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:1: subprogram_spec : ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) ;
    public final PL_SQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
        PL_SQLParser.subprogram_spec_return retval = new PL_SQLParser.subprogram_spec_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set220=null;
        PL_SQLParser.function_spec_return function_spec221 = null;

        PL_SQLParser.procedure_spec_return procedure_spec222 = null;


        Object set220_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:17: ( ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:19: ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec )
            {
            root_0 = (Object)adaptor.nil();

            set220=(Token)input.LT(1);
            if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set220));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:53: ( function_spec | procedure_spec )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==FUNCTION_KEYWORD) ) {
                alt88=1;
            }
            else if ( (LA88_0==PROCEDURE_KEYWORD) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:54: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec5998);
                    function_spec221=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec221.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:70: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec6002);
                    procedure_spec222=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec222.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"

    public static class inheritance_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritance_clauses"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:1: inheritance_clauses : ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) ;
    public final PL_SQLParser.inheritance_clauses_return inheritance_clauses() throws RecognitionException {
        PL_SQLParser.inheritance_clauses_return retval = new PL_SQLParser.inheritance_clauses_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NOT_OPERATOR223=null;
        Token set224=null;

        Object NOT_OPERATOR223_tree=null;
        Object set224_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:21: ( ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:23: ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:23: ( NOT_OPERATOR )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==NOT_OPERATOR) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR223=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_inheritance_clauses6010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR223_tree = (Object)adaptor.create(NOT_OPERATOR223);
                    adaptor.addChild(root_0, NOT_OPERATOR223_tree);
                    }

                    }
                    break;

            }

            set224=(Token)input.LT(1);
            if ( (input.LA(1)>=FINAL_KEYWORD && input.LA(1)<=OVERRIDING_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set224));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inheritance_clauses"

    public static class varray_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:512:1: varray_type : as_is_part collection_varray_datatype ;
    public final PL_SQLParser.varray_type_return varray_type() throws RecognitionException {
        PL_SQLParser.varray_type_return retval = new PL_SQLParser.varray_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part225 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype226 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:512:13: ( as_is_part collection_varray_datatype )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:512:15: as_is_part collection_varray_datatype
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_varray_type6030);
            as_is_part225=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part225.getTree());
            pushFollow(FOLLOW_collection_varray_datatype_in_varray_type6032);
            collection_varray_datatype226=collection_varray_datatype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype226.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varray_type"

    public static class nested_table_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:1: nested_table_type : as_is_part TABLE_KEYWORD OF_KEYWORD data_type ;
    public final PL_SQLParser.nested_table_type_return nested_table_type() throws RecognitionException {
        PL_SQLParser.nested_table_type_return retval = new PL_SQLParser.nested_table_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TABLE_KEYWORD228=null;
        Token OF_KEYWORD229=null;
        PL_SQLParser.as_is_part_return as_is_part227 = null;

        PL_SQLParser.data_type_return data_type230 = null;


        Object TABLE_KEYWORD228_tree=null;
        Object OF_KEYWORD229_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:19: ( as_is_part TABLE_KEYWORD OF_KEYWORD data_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:21: as_is_part TABLE_KEYWORD OF_KEYWORD data_type
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_nested_table_type6039);
            as_is_part227=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part227.getTree());
            TABLE_KEYWORD228=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_nested_table_type6041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD228_tree = (Object)adaptor.create(TABLE_KEYWORD228);
            adaptor.addChild(root_0, TABLE_KEYWORD228_tree);
            }
            OF_KEYWORD229=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_nested_table_type6043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD229_tree = (Object)adaptor.create(OF_KEYWORD229);
            adaptor.addChild(root_0, OF_KEYWORD229_tree);
            }
            pushFollow(FOLLOW_data_type_in_nested_table_type6045);
            data_type230=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type230.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nested_table_type"

    public static class type_body_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:1: type_body_declaration : TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_body_declaration_return type_body_declaration() throws RecognitionException {
        PL_SQLParser.type_body_declaration_return retval = new PL_SQLParser.type_body_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TYPE_KEYWORD231=null;
        Token BODY_KEYWORD232=null;
        Token char_literal237=null;
        Token END_KEYWORD238=null;
        Token SEPARATOR239=null;
        Token char_literal240=null;
        PL_SQLParser.type_body_name_return type_body_name233 = null;

        PL_SQLParser.as_is_part_return as_is_part234 = null;

        PL_SQLParser.subprogram_declaration_return subprogram_declaration235 = null;

        PL_SQLParser.map_order_func_declaration_return map_order_func_declaration236 = null;


        Object TYPE_KEYWORD231_tree=null;
        Object BODY_KEYWORD232_tree=null;
        Object char_literal237_tree=null;
        Object END_KEYWORD238_tree=null;
        Object SEPARATOR239_tree=null;
        Object char_literal240_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:23: ( TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:25: TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD231=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_body_declaration6052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD231_tree = (Object)adaptor.create(TYPE_KEYWORD231);
            adaptor.addChild(root_0, TYPE_KEYWORD231_tree);
            }
            BODY_KEYWORD232=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_type_body_declaration6054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD232_tree = (Object)adaptor.create(BODY_KEYWORD232);
            adaptor.addChild(root_0, BODY_KEYWORD232_tree);
            }
            pushFollow(FOLLOW_type_body_name_in_type_body_declaration6056);
            type_body_name233=type_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_name233.getTree());
            pushFollow(FOLLOW_as_is_part_in_type_body_declaration6058);
            as_is_part234=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part234.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:25: ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==FUNCTION_KEYWORD||LA92_0==PROCEDURE_KEYWORD||(LA92_0>=FINAL_KEYWORD && LA92_0<=INSTANTIABLE_KEYWORD)||(LA92_0>=MEMBER_KEYWORD && LA92_0<=CONSTRUCTOR_KEYWORD)||(LA92_0>=MAP_KEYWORD && LA92_0<=ORDER_KEYWORD)) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:26: ( subprogram_declaration | map_order_func_declaration ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:26: ( subprogram_declaration | map_order_func_declaration )
            	    int alt90=2;
            	    int LA90_0 = input.LA(1);

            	    if ( (LA90_0==FUNCTION_KEYWORD||LA90_0==PROCEDURE_KEYWORD||(LA90_0>=FINAL_KEYWORD && LA90_0<=INSTANTIABLE_KEYWORD)||(LA90_0>=MEMBER_KEYWORD && LA90_0<=CONSTRUCTOR_KEYWORD)) ) {
            	        alt90=1;
            	    }
            	    else if ( ((LA90_0>=MAP_KEYWORD && LA90_0<=ORDER_KEYWORD)) ) {
            	        alt90=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 90, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt90) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:27: subprogram_declaration
            	            {
            	            pushFollow(FOLLOW_subprogram_declaration_in_type_body_declaration6086);
            	            subprogram_declaration235=subprogram_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_declaration235.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:52: map_order_func_declaration
            	            {
            	            pushFollow(FOLLOW_map_order_func_declaration_in_type_body_declaration6090);
            	            map_order_func_declaration236=map_order_func_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration236.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:80: ( ',' )?
            	    int alt91=2;
            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==COMMA) ) {
            	        alt91=1;
            	    }
            	    switch (alt91) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal237=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body_declaration6093); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal237_tree = (Object)adaptor.create(char_literal237);
            	            adaptor.addChild(root_0, char_literal237_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);

            END_KEYWORD238=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_type_body_declaration6099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD238_tree = (Object)adaptor.create(END_KEYWORD238);
            adaptor.addChild(root_0, END_KEYWORD238_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:516:25: ( SEPARATOR )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==SEPARATOR) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR239=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_body_declaration6125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR239_tree = (Object)adaptor.create(SEPARATOR239);
                    adaptor.addChild(root_0, SEPARATOR239_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:516:36: ( '/' )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==209) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal240=(Token)match(input,209,FOLLOW_209_in_type_body_declaration6128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = (Object)adaptor.create(char_literal240);
                    adaptor.addChild(root_0, char_literal240_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_declaration"

    public static class type_body_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:1: type_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_body_name_return type_body_name() throws RecognitionException {
        PL_SQLParser.type_body_name_return retval = new PL_SQLParser.type_body_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ALIAS242=null;
        PL_SQLParser.universal_identifier_return universal_identifier241 = null;


        Object ALIAS242_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:16: ( universal_identifier | ALIAS )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( ((LA95_0>=IDENTIFIER && LA95_0<=EXT_IDENTIFIER)||LA95_0==INTERVAL_KEYWORD||LA95_0==RESULT_KEYWORD) ) {
                alt95=1;
            }
            else if ( (LA95_0==ALIAS) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_body_name6136);
                    universal_identifier241=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier241.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS242=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_body_name6140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS242_tree = (Object)adaptor.create(ALIAS242);
                    adaptor.addChild(root_0, ALIAS242_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_name"

    public static class subprogram_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:1: subprogram_declaration : ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) ;
    public final PL_SQLParser.subprogram_declaration_return subprogram_declaration() throws RecognitionException {
        PL_SQLParser.subprogram_declaration_return retval = new PL_SQLParser.subprogram_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set243=null;
        PL_SQLParser.function_declaration_return function_declaration244 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration245 = null;

        PL_SQLParser.constructor_declaration_return constructor_declaration246 = null;


        Object set243_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:24: ( ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=MEMBER_KEYWORD && LA96_0<=STATIC_KEYWORD)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set243=(Token)input.LT(1);
                    if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set243));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:26: ( function_declaration | procedure_declaration | constructor_declaration )
            int alt97=3;
            switch ( input.LA(1) ) {
            case FUNCTION_KEYWORD:
                {
                alt97=1;
                }
                break;
            case PROCEDURE_KEYWORD:
                {
                alt97=2;
                }
                break;
            case FINAL_KEYWORD:
            case INSTANTIABLE_KEYWORD:
            case CONSTRUCTOR_KEYWORD:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:27: function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_subprogram_declaration6182);
                    function_declaration244=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration244.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:50: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_subprogram_declaration6186);
                    procedure_declaration245=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration245.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:74: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprogram_declaration6190);
                    constructor_declaration246=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration246.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subprogram_declaration"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:1: constructor_declaration : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body ;
    public final PL_SQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        PL_SQLParser.constructor_declaration_return retval = new PL_SQLParser.constructor_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FINAL_KEYWORD247=null;
        Token INSTANTIABLE_KEYWORD248=null;
        Token CONSTRUCTOR_KEYWORD249=null;
        Token FUNCTION_KEYWORD250=null;
        PL_SQLParser.data_type_return data_type251 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part252 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body253 = null;


        Object FINAL_KEYWORD247_tree=null;
        Object INSTANTIABLE_KEYWORD248_tree=null;
        Object CONSTRUCTOR_KEYWORD249_tree=null;
        Object FUNCTION_KEYWORD250_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:25: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:27: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:27: ( FINAL_KEYWORD )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==FINAL_KEYWORD) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD247=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_declaration6198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD247_tree = (Object)adaptor.create(FINAL_KEYWORD247);
                    adaptor.addChild(root_0, FINAL_KEYWORD247_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:42: ( INSTANTIABLE_KEYWORD )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==INSTANTIABLE_KEYWORD) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD248=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD248_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD248);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD248_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD249=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD249_tree = (Object)adaptor.create(CONSTRUCTOR_KEYWORD249);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD249_tree);
            }
            FUNCTION_KEYWORD250=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD250_tree = (Object)adaptor.create(FUNCTION_KEYWORD250);
            adaptor.addChild(root_0, FUNCTION_KEYWORD250_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_declaration6234);
            data_type251=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type251.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:521:37: ( constructor_spec_part )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==207) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_declaration6236);
                    constructor_spec_part252=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part252.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_procedure_body_in_constructor_declaration6239);
            function_procedure_body253=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body253.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_func_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:1: map_order_func_declaration : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration ;
    public final PL_SQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        PL_SQLParser.map_order_func_declaration_return retval = new PL_SQLParser.map_order_func_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set254=null;
        Token MEMBER_KEYWORD255=null;
        PL_SQLParser.function_declaration_return function_declaration256 = null;


        Object set254_tree=null;
        Object MEMBER_KEYWORD255_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:28: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:30: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration
            {
            root_0 = (Object)adaptor.nil();

            set254=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set254));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD255=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD255_tree = (Object)adaptor.create(MEMBER_KEYWORD255);
            adaptor.addChild(root_0, MEMBER_KEYWORD255_tree);
            }
            pushFollow(FOLLOW_function_declaration_in_map_order_func_declaration6256);
            function_declaration256=function_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration256.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:524:1: block : BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.block_return block() throws RecognitionException {
        PL_SQLParser.block_return retval = new PL_SQLParser.block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BEGIN_KEYWORD257=null;
        Token END_KEYWORD260=null;
        Token SEPARATOR262=null;
        Token char_literal263=null;
        PL_SQLParser.executable_section_return executable_section258 = null;

        PL_SQLParser.exception_section_return exception_section259 = null;

        PL_SQLParser.universal_identifier_return universal_identifier261 = null;


        Object BEGIN_KEYWORD257_tree=null;
        Object END_KEYWORD260_tree=null;
        Object SEPARATOR262_tree=null;
        Object char_literal263_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:524:7: ( BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:524:9: BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            BEGIN_KEYWORD257=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_block6264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BEGIN_KEYWORD257_tree = (Object)adaptor.create(BEGIN_KEYWORD257);
            adaptor.addChild(root_0, BEGIN_KEYWORD257_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:525:13: ( executable_section )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==NUMBER_UNSIGNED||LA101_0==STRING||(LA101_0>=IDENTIFIER && LA101_0<=EXT_IDENTIFIER)||LA101_0==NOT_OPERATOR||LA101_0==BEGIN_KEYWORD||LA101_0==DECLARE_KEYWORD||LA101_0==NULL_KEYWORD||(LA101_0>=TRUE_KEYWORD && LA101_0<=FALSE_KEYWORD)||LA101_0==INTERVAL_KEYWORD||LA101_0==REPLACE_KEYWORD||(LA101_0>=RETURN_KEYWORD && LA101_0<=IN_KEYWORD)||LA101_0==IF_KEYWORD||(LA101_0>=NOT_IN_KEYWORD && LA101_0<=LOOP_KEYWORD)||(LA101_0>=WHILE_KEYWORD && LA101_0<=FOR_KEYWORD)||LA101_0==SELECT_KEYWORD||(LA101_0>=RAISE_KEYWORD && LA101_0<=PRAGMA_KEYWORD)||LA101_0==CASE_KEYWORD||LA101_0==CLOSE_KEYWORD||LA101_0==COMMIT_KEYWORD||LA101_0==CONTINUE_KEYWORD||(LA101_0>=DELETE_KEYWORD && LA101_0<=EXECUTE_KEYWORD)||LA101_0==EXIT_KEYWORD||LA101_0==FETCH_KEYWORD||LA101_0==FORALL_KEYWORD||(LA101_0>=INSERT_KEYWORD && LA101_0<=OPEN_KEYWORD)||(LA101_0>=ROLLBACK_KEYWORD && LA101_0<=SAVEPOINT_KEYWORD)||LA101_0==SET_KEYWORD||(LA101_0>=SQLCODE_KEYWORD && LA101_0<=UPDATE_KEYWORD)||LA101_0==RESULT_KEYWORD||LA101_0==205||LA101_0==207||(LA101_0>=211 && LA101_0<=212)) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:525:14: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_block6279);
            	    executable_section258=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section258.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:526:13: ( exception_section )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==EXCEPTION_KEYWORD) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: exception_section
                    {
                    pushFollow(FOLLOW_exception_section_in_block6295);
                    exception_section259=exception_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_section259.getTree());

                    }
                    break;

            }

            END_KEYWORD260=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_block6306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD260_tree = (Object)adaptor.create(END_KEYWORD260);
            adaptor.addChild(root_0, END_KEYWORD260_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:21: ( universal_identifier )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==IDENTIFIER||LA103_0==INTERVAL_KEYWORD||LA103_0==RESULT_KEYWORD) ) {
                int LA103_1 = input.LA(2);

                if ( (synpred136_PL_SQL()) ) {
                    alt103=1;
                }
            }
            else if ( (LA103_0==EXT_IDENTIFIER) ) {
                int LA103_2 = input.LA(2);

                if ( (synpred136_PL_SQL()) ) {
                    alt103=1;
                }
            }
            switch (alt103) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_block6308);
                    universal_identifier261=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier261.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:43: ( SEPARATOR )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==SEPARATOR) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR262=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_block6311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR262_tree = (Object)adaptor.create(SEPARATOR262);
                    adaptor.addChild(root_0, SEPARATOR262_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:528:9: ( '/' )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==209) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal263=(Token)match(input,209,FOLLOW_209_in_block6322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal263_tree = (Object)adaptor.create(char_literal263);
                    adaptor.addChild(root_0, char_literal263_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class anonymous_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:1: anonymous_block : ( anonymous_block_declare_section )? block ;
    public final PL_SQLParser.anonymous_block_return anonymous_block() throws RecognitionException {
        PL_SQLParser.anonymous_block_return retval = new PL_SQLParser.anonymous_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section264 = null;

        PL_SQLParser.block_return block265 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:17: ( ( anonymous_block_declare_section )? block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:19: ( anonymous_block_declare_section )? block
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:19: ( anonymous_block_declare_section )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==DECLARE_KEYWORD) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: anonymous_block_declare_section
                    {
                    pushFollow(FOLLOW_anonymous_block_declare_section_in_anonymous_block6330);
                    anonymous_block_declare_section264=anonymous_block_declare_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block_declare_section264.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_block6333);
            block265=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block265.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anonymous_block"

    public static class executable_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:530:1: executable_section : ( statement | anonymous_block );
    public final PL_SQLParser.executable_section_return executable_section() throws RecognitionException {
        PL_SQLParser.executable_section_return retval = new PL_SQLParser.executable_section_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.statement_return statement266 = null;

        PL_SQLParser.anonymous_block_return anonymous_block267 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:530:20: ( statement | anonymous_block )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==NUMBER_UNSIGNED||LA107_0==STRING||(LA107_0>=IDENTIFIER && LA107_0<=EXT_IDENTIFIER)||LA107_0==NOT_OPERATOR||LA107_0==NULL_KEYWORD||(LA107_0>=TRUE_KEYWORD && LA107_0<=FALSE_KEYWORD)||LA107_0==INTERVAL_KEYWORD||LA107_0==REPLACE_KEYWORD||(LA107_0>=RETURN_KEYWORD && LA107_0<=IN_KEYWORD)||LA107_0==IF_KEYWORD||(LA107_0>=NOT_IN_KEYWORD && LA107_0<=LOOP_KEYWORD)||(LA107_0>=WHILE_KEYWORD && LA107_0<=FOR_KEYWORD)||LA107_0==SELECT_KEYWORD||(LA107_0>=RAISE_KEYWORD && LA107_0<=PRAGMA_KEYWORD)||LA107_0==CASE_KEYWORD||LA107_0==CLOSE_KEYWORD||LA107_0==COMMIT_KEYWORD||LA107_0==CONTINUE_KEYWORD||(LA107_0>=DELETE_KEYWORD && LA107_0<=EXECUTE_KEYWORD)||LA107_0==EXIT_KEYWORD||LA107_0==FETCH_KEYWORD||LA107_0==FORALL_KEYWORD||(LA107_0>=INSERT_KEYWORD && LA107_0<=OPEN_KEYWORD)||(LA107_0>=ROLLBACK_KEYWORD && LA107_0<=SAVEPOINT_KEYWORD)||LA107_0==SET_KEYWORD||(LA107_0>=SQLCODE_KEYWORD && LA107_0<=UPDATE_KEYWORD)||LA107_0==RESULT_KEYWORD||LA107_0==205||LA107_0==207||(LA107_0>=211 && LA107_0<=212)) ) {
                alt107=1;
            }
            else if ( (LA107_0==BEGIN_KEYWORD||LA107_0==DECLARE_KEYWORD) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:530:22: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_executable_section6340);
                    statement266=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement266.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:530:34: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_section6344);
                    anonymous_block267=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block267.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "executable_section"

    public static class executable_case_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_case_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:1: executable_case_section : ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block );
    public final PL_SQLParser.executable_case_section_return executable_case_section() throws RecognitionException {
        PL_SQLParser.executable_case_section_return retval = new PL_SQLParser.executable_case_section_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEPARATOR270=null;
        PL_SQLParser.label_return label268 = null;

        PL_SQLParser.statements_return statements269 = null;

        PL_SQLParser.anonymous_block_return anonymous_block271 = null;


        Object SEPARATOR270_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:25: ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NUMBER_UNSIGNED||LA110_0==STRING||(LA110_0>=IDENTIFIER && LA110_0<=EXT_IDENTIFIER)||LA110_0==NOT_OPERATOR||LA110_0==NULL_KEYWORD||(LA110_0>=TRUE_KEYWORD && LA110_0<=FALSE_KEYWORD)||LA110_0==INTERVAL_KEYWORD||LA110_0==REPLACE_KEYWORD||(LA110_0>=RETURN_KEYWORD && LA110_0<=IN_KEYWORD)||LA110_0==IF_KEYWORD||(LA110_0>=NOT_IN_KEYWORD && LA110_0<=LOOP_KEYWORD)||(LA110_0>=WHILE_KEYWORD && LA110_0<=FOR_KEYWORD)||LA110_0==SELECT_KEYWORD||(LA110_0>=RAISE_KEYWORD && LA110_0<=PRAGMA_KEYWORD)||LA110_0==CASE_KEYWORD||LA110_0==CLOSE_KEYWORD||LA110_0==COMMIT_KEYWORD||LA110_0==CONTINUE_KEYWORD||(LA110_0>=DELETE_KEYWORD && LA110_0<=EXECUTE_KEYWORD)||LA110_0==EXIT_KEYWORD||LA110_0==FETCH_KEYWORD||LA110_0==FORALL_KEYWORD||(LA110_0>=INSERT_KEYWORD && LA110_0<=OPEN_KEYWORD)||(LA110_0>=ROLLBACK_KEYWORD && LA110_0<=SAVEPOINT_KEYWORD)||LA110_0==SET_KEYWORD||(LA110_0>=SQLCODE_KEYWORD && LA110_0<=UPDATE_KEYWORD)||LA110_0==RESULT_KEYWORD||LA110_0==205||LA110_0==207||(LA110_0>=211 && LA110_0<=212)) ) {
                alt110=1;
            }
            else if ( (LA110_0==BEGIN_KEYWORD||LA110_0==DECLARE_KEYWORD) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:27: ( ( label )* statements ( SEPARATOR )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:27: ( ( label )* statements ( SEPARATOR )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:28: ( label )* statements ( SEPARATOR )?
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:28: ( label )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==205) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:29: label
                    	    {
                    	    pushFollow(FOLLOW_label_in_executable_case_section6353);
                    	    label268=label();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label268.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);

                    pushFollow(FOLLOW_statements_in_executable_case_section6357);
                    statements269=statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statements269.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:48: ( SEPARATOR )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==SEPARATOR) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                            {
                            SEPARATOR270=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_executable_case_section6359); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEPARATOR270_tree = (Object)adaptor.create(SEPARATOR270);
                            adaptor.addChild(root_0, SEPARATOR270_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:62: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_case_section6365);
                    anonymous_block271=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "executable_case_section"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:1: statement : ( label )* statements SEPARATOR ;
    public final PL_SQLParser.statement_return statement() throws RecognitionException {
        PL_SQLParser.statement_return retval = new PL_SQLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEPARATOR274=null;
        PL_SQLParser.label_return label272 = null;

        PL_SQLParser.statements_return statements273 = null;


        Object SEPARATOR274_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:11: ( ( label )* statements SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:13: ( label )* statements SEPARATOR
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:13: ( label )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==205) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:14: label
            	    {
            	    pushFollow(FOLLOW_label_in_statement6373);
            	    label272=label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label272.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            pushFollow(FOLLOW_statements_in_statement6377);
            statements273=statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statements273.getTree());
            SEPARATOR274=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_statement6379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR274_tree = (Object)adaptor.create(SEPARATOR274);
            adaptor.addChild(root_0, SEPARATOR274_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );
    public final PL_SQLParser.statements_return statements() throws RecognitionException {
        PL_SQLParser.statements_return retval = new PL_SQLParser.statements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.expression_return expression275 = null;

        PL_SQLParser.goto_statement_return goto_statement276 = null;

        PL_SQLParser.loop_statement_return loop_statement277 = null;

        PL_SQLParser.while_loop_statement_return while_loop_statement278 = null;

        PL_SQLParser.for_loop_statement_return for_loop_statement279 = null;

        PL_SQLParser.sql_statements_return sql_statements280 = null;

        PL_SQLParser.return_statement_return return_statement281 = null;

        PL_SQLParser.if_statement_return if_statement282 = null;

        PL_SQLParser.raise_statement_return raise_statement283 = null;

        PL_SQLParser.close_statement_return close_statement284 = null;

        PL_SQLParser.continue_statement_return continue_statement285 = null;

        PL_SQLParser.execute_immediate_statement_return execute_immediate_statement286 = null;

        PL_SQLParser.exit_statement_return exit_statement287 = null;

        PL_SQLParser.fetch_statement_return fetch_statement288 = null;

        PL_SQLParser.forall_statement_return forall_statement289 = null;

        PL_SQLParser.pragma_inline_statement_return pragma_inline_statement290 = null;

        PL_SQLParser.open_statement_return open_statement291 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:12: ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement )
            int alt112=17;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NOT_OPERATOR:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case NOT_IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case 207:
            case 211:
            case 212:
                {
                alt112=1;
                }
                break;
            case GOTO_KEYWORD:
                {
                alt112=2;
                }
                break;
            case LOOP_KEYWORD:
                {
                alt112=3;
                }
                break;
            case WHILE_KEYWORD:
                {
                alt112=4;
                }
                break;
            case FOR_KEYWORD:
                {
                alt112=5;
                }
                break;
            case SELECT_KEYWORD:
            case COMMIT_KEYWORD:
            case DELETE_KEYWORD:
            case INSERT_KEYWORD:
            case LOCK_KEYWORD:
            case MERGE_KEYWORD:
            case ROLLBACK_KEYWORD:
            case SAVEPOINT_KEYWORD:
            case SET_KEYWORD:
            case UPDATE_KEYWORD:
                {
                alt112=6;
                }
                break;
            case RETURN_KEYWORD:
                {
                alt112=7;
                }
                break;
            case IF_KEYWORD:
                {
                alt112=8;
                }
                break;
            case RAISE_KEYWORD:
                {
                alt112=9;
                }
                break;
            case CLOSE_KEYWORD:
                {
                alt112=10;
                }
                break;
            case CONTINUE_KEYWORD:
                {
                alt112=11;
                }
                break;
            case EXECUTE_KEYWORD:
                {
                alt112=12;
                }
                break;
            case EXIT_KEYWORD:
                {
                alt112=13;
                }
                break;
            case FETCH_KEYWORD:
                {
                alt112=14;
                }
                break;
            case FORALL_KEYWORD:
                {
                alt112=15;
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt112=16;
                }
                break;
            case OPEN_KEYWORD:
                {
                alt112=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }

            switch (alt112) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:14: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statements6386);
                    expression275=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression275.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:27: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statements6390);
                    goto_statement276=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement276.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:44: loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statements6394);
                    loop_statement277=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement277.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:14: while_loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_while_loop_statement_in_statements6411);
                    while_loop_statement278=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_loop_statement278.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:37: for_loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_for_loop_statement_in_statements6415);
                    for_loop_statement279=for_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement279.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:58: sql_statements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_statements6419);
                    sql_statements280=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements280.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:14: return_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statements6436);
                    return_statement281=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement281.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:33: if_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statements6440);
                    if_statement282=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement282.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:48: raise_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statements6444);
                    raise_statement283=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement283.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:66: close_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_statements6448);
                    close_statement284=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement284.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:14: continue_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_statements6465);
                    continue_statement285=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement285.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:35: execute_immediate_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_execute_immediate_statement_in_statements6469);
                    execute_immediate_statement286=execute_immediate_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate_statement286.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:65: exit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statements6473);
                    exit_statement287=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement287.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:14: fetch_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_statements6490);
                    fetch_statement288=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement288.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:32: forall_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forall_statement_in_statements6494);
                    forall_statement289=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement289.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:51: pragma_inline_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pragma_inline_statement_in_statements6498);
                    pragma_inline_statement290=pragma_inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_inline_statement290.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:538:14: open_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_statements6515);
                    open_statement291=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statements"

    public static class sql_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );
    public final PL_SQLParser.sql_statements_return sql_statements() throws RecognitionException {
        PL_SQLParser.sql_statements_return retval = new PL_SQLParser.sql_statements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.select_statement_return select_statement292 = null;

        PL_SQLParser.commit_statement_return commit_statement293 = null;

        PL_SQLParser.delete_statement_return delete_statement294 = null;

        PL_SQLParser.update_statement_return update_statement295 = null;

        PL_SQLParser.insert_statement_return insert_statement296 = null;

        PL_SQLParser.lock_table_statement_return lock_table_statement297 = null;

        PL_SQLParser.merge_statement_return merge_statement298 = null;

        PL_SQLParser.rollback_statement_return rollback_statement299 = null;

        PL_SQLParser.savepoint_statement_return savepoint_statement300 = null;

        PL_SQLParser.set_transaction_statement_return set_transaction_statement301 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:16: ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement )
            int alt113=10;
            switch ( input.LA(1) ) {
            case SELECT_KEYWORD:
                {
                alt113=1;
                }
                break;
            case COMMIT_KEYWORD:
                {
                alt113=2;
                }
                break;
            case DELETE_KEYWORD:
                {
                alt113=3;
                }
                break;
            case UPDATE_KEYWORD:
                {
                alt113=4;
                }
                break;
            case INSERT_KEYWORD:
                {
                alt113=5;
                }
                break;
            case LOCK_KEYWORD:
                {
                alt113=6;
                }
                break;
            case MERGE_KEYWORD:
                {
                alt113=7;
                }
                break;
            case ROLLBACK_KEYWORD:
                {
                alt113=8;
                }
                break;
            case SAVEPOINT_KEYWORD:
                {
                alt113=9;
                }
                break;
            case SET_KEYWORD:
                {
                alt113=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:18: select_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_sql_statements6522);
                    select_statement292=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement292.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:37: commit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_sql_statements6526);
                    commit_statement293=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement293.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:56: delete_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_sql_statements6530);
                    delete_statement294=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement294.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:75: update_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_sql_statements6534);
                    update_statement295=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement295.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:540:18: insert_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_sql_statements6555);
                    insert_statement296=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement296.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:540:37: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_sql_statements6559);
                    lock_table_statement297=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement297.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:540:60: merge_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_sql_statements6563);
                    merge_statement298=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement298.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:18: rollback_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_sql_statements6584);
                    rollback_statement299=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement299.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:39: savepoint_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_sql_statements6588);
                    savepoint_statement300=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement300.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:61: set_transaction_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_statement_in_sql_statements6592);
                    set_transaction_statement301=set_transaction_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_statement301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sql_statements"

    public static class sql_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:542:1: sql_operator : ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' );
    public final PL_SQLParser.sql_operator_return sql_operator() throws RecognitionException {
        PL_SQLParser.sql_operator_return retval = new PL_SQLParser.sql_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set302=null;

        Object set302_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:542:14: ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set302=(Token)input.LT(1);
            if ( input.LA(1)==COMMA||input.LA(1)==209||(input.LA(1)>=211 && input.LA(1)<=225) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set302));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sql_operator"

    public static class sql_not_parsed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_not_parsed"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:544:1: sql_not_parsed : THE_REST ;
    public final PL_SQLParser.sql_not_parsed_return sql_not_parsed() throws RecognitionException {
        PL_SQLParser.sql_not_parsed_return retval = new PL_SQLParser.sql_not_parsed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THE_REST303=null;

        Object THE_REST303_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:544:16: ( THE_REST )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:544:18: THE_REST
            {
            root_0 = (Object)adaptor.nil();

            THE_REST303=(Token)match(input,THE_REST,FOLLOW_THE_REST_in_sql_not_parsed6685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THE_REST303_tree = (Object)adaptor.create(THE_REST303);
            adaptor.addChild(root_0, THE_REST303_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sql_not_parsed"

    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:1: select_statement : SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ ;
    public final PL_SQLParser.select_statement_return select_statement() throws RecognitionException {
        PL_SQLParser.select_statement_return retval = new PL_SQLParser.select_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SELECT_KEYWORD304=null;
        Token ON_KEYWORD306=null;
        Token FOR_KEYWORD307=null;
        Token UPDATE_KEYWORD308=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed305 = null;


        Object SELECT_KEYWORD304_tree=null;
        Object ON_KEYWORD306_tree=null;
        Object FOR_KEYWORD307_tree=null;
        Object UPDATE_KEYWORD308_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:18: ( SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:20: SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            {
            root_0 = (Object)adaptor.nil();

            SELECT_KEYWORD304=(Token)match(input,SELECT_KEYWORD,FOLLOW_SELECT_KEYWORD_in_select_statement6712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT_KEYWORD304_tree = (Object)adaptor.create(SELECT_KEYWORD304);
            adaptor.addChild(root_0, SELECT_KEYWORD304_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:35: ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            int cnt115=0;
            loop115:
            do {
                int alt115=3;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==FOR_KEYWORD) ) {
                    int LA115_2 = input.LA(2);

                    if ( (LA115_2==UPDATE_KEYWORD) ) {
                        alt115=2;
                    }


                }
                else if ( (LA115_0==ON_KEYWORD||LA115_0==THE_REST) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:36: ( sql_not_parsed | ON_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:36: ( sql_not_parsed | ON_KEYWORD )
            	    int alt114=2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0==THE_REST) ) {
            	        alt114=1;
            	    }
            	    else if ( (LA114_0==ON_KEYWORD) ) {
            	        alt114=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 114, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt114) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:37: sql_not_parsed
            	            {
            	            pushFollow(FOLLOW_sql_not_parsed_in_select_statement6716);
            	            sql_not_parsed305=sql_not_parsed();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed305.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:54: ON_KEYWORD
            	            {
            	            ON_KEYWORD306=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_select_statement6720); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ON_KEYWORD306_tree = (Object)adaptor.create(ON_KEYWORD306);
            	            adaptor.addChild(root_0, ON_KEYWORD306_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:558:69: FOR_KEYWORD UPDATE_KEYWORD
            	    {
            	    FOR_KEYWORD307=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_select_statement6726); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR_KEYWORD307_tree = (Object)adaptor.create(FOR_KEYWORD307);
            	    adaptor.addChild(root_0, FOR_KEYWORD307_tree);
            	    }
            	    UPDATE_KEYWORD308=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_select_statement6728); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD308_tree = (Object)adaptor.create(UPDATE_KEYWORD308);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD308_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class commit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:559:1: commit_statement : COMMIT_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.commit_statement_return commit_statement() throws RecognitionException {
        PL_SQLParser.commit_statement_return retval = new PL_SQLParser.commit_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMIT_KEYWORD309=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed310 = null;


        Object COMMIT_KEYWORD309_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:559:18: ( COMMIT_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:559:20: COMMIT_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (Object)adaptor.nil();

            COMMIT_KEYWORD309=(Token)match(input,COMMIT_KEYWORD,FOLLOW_COMMIT_KEYWORD_in_commit_statement6738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMIT_KEYWORD309_tree = (Object)adaptor.create(COMMIT_KEYWORD309);
            adaptor.addChild(root_0, COMMIT_KEYWORD309_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:559:35: ( sql_not_parsed )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==THE_REST) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_commit_statement6740);
                    sql_not_parsed310=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed310.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class delete_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:1: delete_statement : DELETE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.delete_statement_return delete_statement() throws RecognitionException {
        PL_SQLParser.delete_statement_return retval = new PL_SQLParser.delete_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DELETE_KEYWORD311=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed312 = null;


        Object DELETE_KEYWORD311_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:18: ( DELETE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:20: DELETE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            DELETE_KEYWORD311=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_delete_statement6748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE_KEYWORD311_tree = (Object)adaptor.create(DELETE_KEYWORD311);
            adaptor.addChild(root_0, DELETE_KEYWORD311_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:35: ( sql_not_parsed )+
            int cnt117=0;
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==THE_REST) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_delete_statement6751);
            	    sql_not_parsed312=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed312.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt117 >= 1 ) break loop117;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(117, input);
                        throw eee;
                }
                cnt117++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:1: insert_statement : INSERT_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.insert_statement_return insert_statement() throws RecognitionException {
        PL_SQLParser.insert_statement_return retval = new PL_SQLParser.insert_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INSERT_KEYWORD313=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed314 = null;


        Object INSERT_KEYWORD313_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:18: ( INSERT_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:20: INSERT_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            INSERT_KEYWORD313=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_insert_statement6760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT_KEYWORD313_tree = (Object)adaptor.create(INSERT_KEYWORD313);
            adaptor.addChild(root_0, INSERT_KEYWORD313_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:35: ( sql_not_parsed )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==THE_REST) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_insert_statement6763);
            	    sql_not_parsed314=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed314.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:1: lock_table_statement : LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PL_SQLParser.lock_table_statement_return retval = new PL_SQLParser.lock_table_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LOCK_KEYWORD315=null;
        Token TABLE_KEYWORD316=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed317 = null;


        Object LOCK_KEYWORD315_tree=null;
        Object TABLE_KEYWORD316_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:22: ( LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:24: LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            LOCK_KEYWORD315=(Token)match(input,LOCK_KEYWORD,FOLLOW_LOCK_KEYWORD_in_lock_table_statement6772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOCK_KEYWORD315_tree = (Object)adaptor.create(LOCK_KEYWORD315);
            adaptor.addChild(root_0, LOCK_KEYWORD315_tree);
            }
            TABLE_KEYWORD316=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_lock_table_statement6774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD316_tree = (Object)adaptor.create(TABLE_KEYWORD316);
            adaptor.addChild(root_0, TABLE_KEYWORD316_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:51: ( sql_not_parsed )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==THE_REST) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:52: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_lock_table_statement6777);
            	    sql_not_parsed317=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed317.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class merge_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:1: merge_statement : MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ ;
    public final PL_SQLParser.merge_statement_return merge_statement() throws RecognitionException {
        PL_SQLParser.merge_statement_return retval = new PL_SQLParser.merge_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token MERGE_KEYWORD318=null;
        Token ON_KEYWORD320=null;
        Token USING_KEYWORD321=null;
        Token WHEN_KEYWORD322=null;
        Token THEN_KEYWORD323=null;
        Token INSERT_KEYWORD324=null;
        Token UPDATE_KEYWORD325=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed319 = null;


        Object MERGE_KEYWORD318_tree=null;
        Object ON_KEYWORD320_tree=null;
        Object USING_KEYWORD321_tree=null;
        Object WHEN_KEYWORD322_tree=null;
        Object THEN_KEYWORD323_tree=null;
        Object INSERT_KEYWORD324_tree=null;
        Object UPDATE_KEYWORD325_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:17: ( MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:19: MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            {
            root_0 = (Object)adaptor.nil();

            MERGE_KEYWORD318=(Token)match(input,MERGE_KEYWORD,FOLLOW_MERGE_KEYWORD_in_merge_statement6786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MERGE_KEYWORD318_tree = (Object)adaptor.create(MERGE_KEYWORD318);
            adaptor.addChild(root_0, MERGE_KEYWORD318_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            int cnt120=0;
            loop120:
            do {
                int alt120=8;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:34: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_merge_statement6789);
            	    sql_not_parsed319=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed319.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:51: ON_KEYWORD
            	    {
            	    ON_KEYWORD320=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_merge_statement6793); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON_KEYWORD320_tree = (Object)adaptor.create(ON_KEYWORD320);
            	    adaptor.addChild(root_0, ON_KEYWORD320_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:19: USING_KEYWORD
            	    {
            	    USING_KEYWORD321=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_merge_statement6815); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING_KEYWORD321_tree = (Object)adaptor.create(USING_KEYWORD321);
            	    adaptor.addChild(root_0, USING_KEYWORD321_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:35: WHEN_KEYWORD
            	    {
            	    WHEN_KEYWORD322=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_merge_statement6819); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD322_tree = (Object)adaptor.create(WHEN_KEYWORD322);
            	    adaptor.addChild(root_0, WHEN_KEYWORD322_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:50: THEN_KEYWORD
            	    {
            	    THEN_KEYWORD323=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_merge_statement6823); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD323_tree = (Object)adaptor.create(THEN_KEYWORD323);
            	    adaptor.addChild(root_0, THEN_KEYWORD323_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:65: INSERT_KEYWORD
            	    {
            	    INSERT_KEYWORD324=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_merge_statement6827); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    INSERT_KEYWORD324_tree = (Object)adaptor.create(INSERT_KEYWORD324);
            	    adaptor.addChild(root_0, INSERT_KEYWORD324_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:19: UPDATE_KEYWORD
            	    {
            	    UPDATE_KEYWORD325=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_merge_statement6849); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD325_tree = (Object)adaptor.create(UPDATE_KEYWORD325);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD325_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:1: rollback_statement : ROLLBACK_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
        PL_SQLParser.rollback_statement_return retval = new PL_SQLParser.rollback_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ROLLBACK_KEYWORD326=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed327 = null;


        Object ROLLBACK_KEYWORD326_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:20: ( ROLLBACK_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:22: ROLLBACK_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (Object)adaptor.nil();

            ROLLBACK_KEYWORD326=(Token)match(input,ROLLBACK_KEYWORD,FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement6858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ROLLBACK_KEYWORD326_tree = (Object)adaptor.create(ROLLBACK_KEYWORD326);
            adaptor.addChild(root_0, ROLLBACK_KEYWORD326_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:39: ( sql_not_parsed )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==THE_REST) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_rollback_statement6860);
                    sql_not_parsed327=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed327.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:1: savepoint_statement : SAVEPOINT_KEYWORD identifier ;
    public final PL_SQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PL_SQLParser.savepoint_statement_return retval = new PL_SQLParser.savepoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SAVEPOINT_KEYWORD328=null;
        PL_SQLParser.identifier_return identifier329 = null;


        Object SAVEPOINT_KEYWORD328_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:21: ( SAVEPOINT_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:23: SAVEPOINT_KEYWORD identifier
            {
            root_0 = (Object)adaptor.nil();

            SAVEPOINT_KEYWORD328=(Token)match(input,SAVEPOINT_KEYWORD,FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement6868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAVEPOINT_KEYWORD328_tree = (Object)adaptor.create(SAVEPOINT_KEYWORD328);
            adaptor.addChild(root_0, SAVEPOINT_KEYWORD328_tree);
            }
            pushFollow(FOLLOW_identifier_in_savepoint_statement6870);
            identifier329=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier329.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class set_transaction_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:1: set_transaction_statement : SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.set_transaction_statement_return set_transaction_statement() throws RecognitionException {
        PL_SQLParser.set_transaction_statement_return retval = new PL_SQLParser.set_transaction_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SET_KEYWORD330=null;
        Token TRANSACTION_KEYWORD331=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed332 = null;


        Object SET_KEYWORD330_tree=null;
        Object TRANSACTION_KEYWORD331_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:27: ( SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:29: SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            SET_KEYWORD330=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_set_transaction_statement6877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET_KEYWORD330_tree = (Object)adaptor.create(SET_KEYWORD330);
            adaptor.addChild(root_0, SET_KEYWORD330_tree);
            }
            TRANSACTION_KEYWORD331=(Token)match(input,TRANSACTION_KEYWORD,FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement6879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRANSACTION_KEYWORD331_tree = (Object)adaptor.create(TRANSACTION_KEYWORD331);
            adaptor.addChild(root_0, TRANSACTION_KEYWORD331_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:61: ( sql_not_parsed )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==THE_REST) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:62: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_set_transaction_statement6882);
            	    sql_not_parsed332=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed332.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "set_transaction_statement"

    public static class update_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:1: update_statement : UPDATE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.update_statement_return update_statement() throws RecognitionException {
        PL_SQLParser.update_statement_return retval = new PL_SQLParser.update_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token UPDATE_KEYWORD333=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed334 = null;


        Object UPDATE_KEYWORD333_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:18: ( UPDATE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:20: UPDATE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            UPDATE_KEYWORD333=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_update_statement6891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATE_KEYWORD333_tree = (Object)adaptor.create(UPDATE_KEYWORD333);
            adaptor.addChild(root_0, UPDATE_KEYWORD333_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:35: ( sql_not_parsed )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==THE_REST) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_update_statement6894);
            	    sql_not_parsed334=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed334.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:572:1: goto_statement : GOTO_KEYWORD identifier ;
    public final PL_SQLParser.goto_statement_return goto_statement() throws RecognitionException {
        PL_SQLParser.goto_statement_return retval = new PL_SQLParser.goto_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token GOTO_KEYWORD335=null;
        PL_SQLParser.identifier_return identifier336 = null;


        Object GOTO_KEYWORD335_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:572:16: ( GOTO_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:572:18: GOTO_KEYWORD identifier
            {
            root_0 = (Object)adaptor.nil();

            GOTO_KEYWORD335=(Token)match(input,GOTO_KEYWORD,FOLLOW_GOTO_KEYWORD_in_goto_statement6905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOTO_KEYWORD335_tree = (Object)adaptor.create(GOTO_KEYWORD335);
            adaptor.addChild(root_0, GOTO_KEYWORD335_tree);
            }
            pushFollow(FOLLOW_identifier_in_goto_statement6907);
            identifier336=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier336.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:1: return_statement : RETURN_KEYWORD ( expression )? ;
    public final PL_SQLParser.return_statement_return return_statement() throws RecognitionException {
        PL_SQLParser.return_statement_return retval = new PL_SQLParser.return_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RETURN_KEYWORD337=null;
        PL_SQLParser.expression_return expression338 = null;


        Object RETURN_KEYWORD337_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:18: ( RETURN_KEYWORD ( expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:20: RETURN_KEYWORD ( expression )?
            {
            root_0 = (Object)adaptor.nil();

            RETURN_KEYWORD337=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_return_statement6914); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD337_tree = (Object)adaptor.create(RETURN_KEYWORD337);
            adaptor.addChild(root_0, RETURN_KEYWORD337_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:35: ( expression )?
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement6916);
                    expression338=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression338.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:1: if_statement : IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? ENDIF_KEYWORD ;
    public final PL_SQLParser.if_statement_return if_statement() throws RecognitionException {
        PL_SQLParser.if_statement_return retval = new PL_SQLParser.if_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IF_KEYWORD339=null;
        Token THEN_KEYWORD341=null;
        Token ELSIF_KEYWORD343=null;
        Token THEN_KEYWORD345=null;
        Token ELSE_KEYWORD347=null;
        Token ENDIF_KEYWORD349=null;
        PL_SQLParser.expression_return expression340 = null;

        PL_SQLParser.executable_section_return executable_section342 = null;

        PL_SQLParser.expression_return expression344 = null;

        PL_SQLParser.executable_section_return executable_section346 = null;

        PL_SQLParser.executable_section_return executable_section348 = null;


        Object IF_KEYWORD339_tree=null;
        Object THEN_KEYWORD341_tree=null;
        Object ELSIF_KEYWORD343_tree=null;
        Object THEN_KEYWORD345_tree=null;
        Object ELSE_KEYWORD347_tree=null;
        Object ENDIF_KEYWORD349_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:14: ( IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? ENDIF_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:16: IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? ENDIF_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            IF_KEYWORD339=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement6924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF_KEYWORD339_tree = (Object)adaptor.create(IF_KEYWORD339);
            adaptor.addChild(root_0, IF_KEYWORD339_tree);
            }
            pushFollow(FOLLOW_expression_in_if_statement6926);
            expression340=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression340.getTree());
            THEN_KEYWORD341=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement6928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD341_tree = (Object)adaptor.create(THEN_KEYWORD341);
            adaptor.addChild(root_0, THEN_KEYWORD341_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:51: ( executable_section )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==NUMBER_UNSIGNED||LA125_0==STRING||(LA125_0>=IDENTIFIER && LA125_0<=EXT_IDENTIFIER)||LA125_0==NOT_OPERATOR||LA125_0==BEGIN_KEYWORD||LA125_0==DECLARE_KEYWORD||LA125_0==NULL_KEYWORD||(LA125_0>=TRUE_KEYWORD && LA125_0<=FALSE_KEYWORD)||LA125_0==INTERVAL_KEYWORD||LA125_0==REPLACE_KEYWORD||(LA125_0>=RETURN_KEYWORD && LA125_0<=IN_KEYWORD)||LA125_0==IF_KEYWORD||(LA125_0>=NOT_IN_KEYWORD && LA125_0<=LOOP_KEYWORD)||(LA125_0>=WHILE_KEYWORD && LA125_0<=FOR_KEYWORD)||LA125_0==SELECT_KEYWORD||(LA125_0>=RAISE_KEYWORD && LA125_0<=PRAGMA_KEYWORD)||LA125_0==CASE_KEYWORD||LA125_0==CLOSE_KEYWORD||LA125_0==COMMIT_KEYWORD||LA125_0==CONTINUE_KEYWORD||(LA125_0>=DELETE_KEYWORD && LA125_0<=EXECUTE_KEYWORD)||LA125_0==EXIT_KEYWORD||LA125_0==FETCH_KEYWORD||LA125_0==FORALL_KEYWORD||(LA125_0>=INSERT_KEYWORD && LA125_0<=OPEN_KEYWORD)||(LA125_0>=ROLLBACK_KEYWORD && LA125_0<=SAVEPOINT_KEYWORD)||LA125_0==SET_KEYWORD||(LA125_0>=SQLCODE_KEYWORD && LA125_0<=UPDATE_KEYWORD)||LA125_0==RESULT_KEYWORD||LA125_0==205||LA125_0==207||(LA125_0>=211 && LA125_0<=212)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:52: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_if_statement6931);
            	    executable_section342=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section342.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:16: ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==ELSIF_KEYWORD) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:17: ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+
            	    {
            	    ELSIF_KEYWORD343=(Token)match(input,ELSIF_KEYWORD,FOLLOW_ELSIF_KEYWORD_in_if_statement6951); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ELSIF_KEYWORD343_tree = (Object)adaptor.create(ELSIF_KEYWORD343);
            	    adaptor.addChild(root_0, ELSIF_KEYWORD343_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_if_statement6953);
            	    expression344=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression344.getTree());
            	    THEN_KEYWORD345=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement6955); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD345_tree = (Object)adaptor.create(THEN_KEYWORD345);
            	    adaptor.addChild(root_0, THEN_KEYWORD345_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:55: ( executable_section )+
            	    int cnt126=0;
            	    loop126:
            	    do {
            	        int alt126=2;
            	        int LA126_0 = input.LA(1);

            	        if ( (LA126_0==NUMBER_UNSIGNED||LA126_0==STRING||(LA126_0>=IDENTIFIER && LA126_0<=EXT_IDENTIFIER)||LA126_0==NOT_OPERATOR||LA126_0==BEGIN_KEYWORD||LA126_0==DECLARE_KEYWORD||LA126_0==NULL_KEYWORD||(LA126_0>=TRUE_KEYWORD && LA126_0<=FALSE_KEYWORD)||LA126_0==INTERVAL_KEYWORD||LA126_0==REPLACE_KEYWORD||(LA126_0>=RETURN_KEYWORD && LA126_0<=IN_KEYWORD)||LA126_0==IF_KEYWORD||(LA126_0>=NOT_IN_KEYWORD && LA126_0<=LOOP_KEYWORD)||(LA126_0>=WHILE_KEYWORD && LA126_0<=FOR_KEYWORD)||LA126_0==SELECT_KEYWORD||(LA126_0>=RAISE_KEYWORD && LA126_0<=PRAGMA_KEYWORD)||LA126_0==CASE_KEYWORD||LA126_0==CLOSE_KEYWORD||LA126_0==COMMIT_KEYWORD||LA126_0==CONTINUE_KEYWORD||(LA126_0>=DELETE_KEYWORD && LA126_0<=EXECUTE_KEYWORD)||LA126_0==EXIT_KEYWORD||LA126_0==FETCH_KEYWORD||LA126_0==FORALL_KEYWORD||(LA126_0>=INSERT_KEYWORD && LA126_0<=OPEN_KEYWORD)||(LA126_0>=ROLLBACK_KEYWORD && LA126_0<=SAVEPOINT_KEYWORD)||LA126_0==SET_KEYWORD||(LA126_0>=SQLCODE_KEYWORD && LA126_0<=UPDATE_KEYWORD)||LA126_0==RESULT_KEYWORD||LA126_0==205||LA126_0==207||(LA126_0>=211 && LA126_0<=212)) ) {
            	            alt126=1;
            	        }


            	        switch (alt126) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:56: executable_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_section_in_if_statement6958);
            	    	    executable_section346=executable_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section346.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt126 >= 1 ) break loop126;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(126, input);
            	                throw eee;
            	        }
            	        cnt126++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:16: ( ELSE_KEYWORD ( executable_section )+ )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ELSE_KEYWORD) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:17: ELSE_KEYWORD ( executable_section )+
                    {
                    ELSE_KEYWORD347=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_if_statement6980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD347_tree = (Object)adaptor.create(ELSE_KEYWORD347);
                    adaptor.addChild(root_0, ELSE_KEYWORD347_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:30: ( executable_section )+
                    int cnt128=0;
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==NUMBER_UNSIGNED||LA128_0==STRING||(LA128_0>=IDENTIFIER && LA128_0<=EXT_IDENTIFIER)||LA128_0==NOT_OPERATOR||LA128_0==BEGIN_KEYWORD||LA128_0==DECLARE_KEYWORD||LA128_0==NULL_KEYWORD||(LA128_0>=TRUE_KEYWORD && LA128_0<=FALSE_KEYWORD)||LA128_0==INTERVAL_KEYWORD||LA128_0==REPLACE_KEYWORD||(LA128_0>=RETURN_KEYWORD && LA128_0<=IN_KEYWORD)||LA128_0==IF_KEYWORD||(LA128_0>=NOT_IN_KEYWORD && LA128_0<=LOOP_KEYWORD)||(LA128_0>=WHILE_KEYWORD && LA128_0<=FOR_KEYWORD)||LA128_0==SELECT_KEYWORD||(LA128_0>=RAISE_KEYWORD && LA128_0<=PRAGMA_KEYWORD)||LA128_0==CASE_KEYWORD||LA128_0==CLOSE_KEYWORD||LA128_0==COMMIT_KEYWORD||LA128_0==CONTINUE_KEYWORD||(LA128_0>=DELETE_KEYWORD && LA128_0<=EXECUTE_KEYWORD)||LA128_0==EXIT_KEYWORD||LA128_0==FETCH_KEYWORD||LA128_0==FORALL_KEYWORD||(LA128_0>=INSERT_KEYWORD && LA128_0<=OPEN_KEYWORD)||(LA128_0>=ROLLBACK_KEYWORD && LA128_0<=SAVEPOINT_KEYWORD)||LA128_0==SET_KEYWORD||(LA128_0>=SQLCODE_KEYWORD && LA128_0<=UPDATE_KEYWORD)||LA128_0==RESULT_KEYWORD||LA128_0==205||LA128_0==207||(LA128_0>=211 && LA128_0<=212)) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:31: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_if_statement6983);
                    	    executable_section348=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt128 >= 1 ) break loop128;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(128, input);
                                throw eee;
                        }
                        cnt128++;
                    } while (true);


                    }
                    break;

            }

            ENDIF_KEYWORD349=(Token)match(input,ENDIF_KEYWORD,FOLLOW_ENDIF_KEYWORD_in_if_statement7004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDIF_KEYWORD349_tree = (Object)adaptor.create(ENDIF_KEYWORD349);
            adaptor.addChild(root_0, ENDIF_KEYWORD349_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:1: loop_statement : LOOP_KEYWORD ( executable_section )+ END_LOOP_KEYWORD ( identifier )? ;
    public final PL_SQLParser.loop_statement_return loop_statement() throws RecognitionException {
        PL_SQLParser.loop_statement_return retval = new PL_SQLParser.loop_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LOOP_KEYWORD350=null;
        Token END_LOOP_KEYWORD352=null;
        PL_SQLParser.executable_section_return executable_section351 = null;

        PL_SQLParser.identifier_return identifier353 = null;


        Object LOOP_KEYWORD350_tree=null;
        Object END_LOOP_KEYWORD352_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:16: ( LOOP_KEYWORD ( executable_section )+ END_LOOP_KEYWORD ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:18: LOOP_KEYWORD ( executable_section )+ END_LOOP_KEYWORD ( identifier )?
            {
            root_0 = (Object)adaptor.nil();

            LOOP_KEYWORD350=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOOP_KEYWORD350_tree = (Object)adaptor.create(LOOP_KEYWORD350);
            adaptor.addChild(root_0, LOOP_KEYWORD350_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:31: ( executable_section )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==NUMBER_UNSIGNED||LA130_0==STRING||(LA130_0>=IDENTIFIER && LA130_0<=EXT_IDENTIFIER)||LA130_0==NOT_OPERATOR||LA130_0==BEGIN_KEYWORD||LA130_0==DECLARE_KEYWORD||LA130_0==NULL_KEYWORD||(LA130_0>=TRUE_KEYWORD && LA130_0<=FALSE_KEYWORD)||LA130_0==INTERVAL_KEYWORD||LA130_0==REPLACE_KEYWORD||(LA130_0>=RETURN_KEYWORD && LA130_0<=IN_KEYWORD)||LA130_0==IF_KEYWORD||(LA130_0>=NOT_IN_KEYWORD && LA130_0<=LOOP_KEYWORD)||(LA130_0>=WHILE_KEYWORD && LA130_0<=FOR_KEYWORD)||LA130_0==SELECT_KEYWORD||(LA130_0>=RAISE_KEYWORD && LA130_0<=PRAGMA_KEYWORD)||LA130_0==CASE_KEYWORD||LA130_0==CLOSE_KEYWORD||LA130_0==COMMIT_KEYWORD||LA130_0==CONTINUE_KEYWORD||(LA130_0>=DELETE_KEYWORD && LA130_0<=EXECUTE_KEYWORD)||LA130_0==EXIT_KEYWORD||LA130_0==FETCH_KEYWORD||LA130_0==FORALL_KEYWORD||(LA130_0>=INSERT_KEYWORD && LA130_0<=OPEN_KEYWORD)||(LA130_0>=ROLLBACK_KEYWORD && LA130_0<=SAVEPOINT_KEYWORD)||LA130_0==SET_KEYWORD||(LA130_0>=SQLCODE_KEYWORD && LA130_0<=UPDATE_KEYWORD)||LA130_0==RESULT_KEYWORD||LA130_0==205||LA130_0==207||(LA130_0>=211 && LA130_0<=212)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:32: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_loop_statement7014);
            	    executable_section351=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section351.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);

            END_LOOP_KEYWORD352=(Token)match(input,END_LOOP_KEYWORD,FOLLOW_END_LOOP_KEYWORD_in_loop_statement7018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_LOOP_KEYWORD352_tree = (Object)adaptor.create(END_LOOP_KEYWORD352);
            adaptor.addChild(root_0, END_LOOP_KEYWORD352_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:70: ( identifier )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==IDENTIFIER||LA131_0==INTERVAL_KEYWORD||LA131_0==RESULT_KEYWORD) ) {
                int LA131_1 = input.LA(2);

                if ( (synpred210_PL_SQL()) ) {
                    alt131=1;
                }
            }
            switch (alt131) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_loop_statement7020);
                    identifier353=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier353.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:579:1: while_loop_statement : WHILE_KEYWORD expression loop_statement ;
    public final PL_SQLParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        PL_SQLParser.while_loop_statement_return retval = new PL_SQLParser.while_loop_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHILE_KEYWORD354=null;
        PL_SQLParser.expression_return expression355 = null;

        PL_SQLParser.loop_statement_return loop_statement356 = null;


        Object WHILE_KEYWORD354_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:579:22: ( WHILE_KEYWORD expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:579:24: WHILE_KEYWORD expression loop_statement
            {
            root_0 = (Object)adaptor.nil();

            WHILE_KEYWORD354=(Token)match(input,WHILE_KEYWORD,FOLLOW_WHILE_KEYWORD_in_while_loop_statement7028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE_KEYWORD354_tree = (Object)adaptor.create(WHILE_KEYWORD354);
            adaptor.addChild(root_0, WHILE_KEYWORD354_tree);
            }
            pushFollow(FOLLOW_expression_in_while_loop_statement7030);
            expression355=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression355.getTree());
            pushFollow(FOLLOW_loop_statement_in_while_loop_statement7032);
            loop_statement356=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement356.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class for_loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:1: for_loop_statement : FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) ;
    public final PL_SQLParser.for_loop_statement_return for_loop_statement() throws RecognitionException {
        PL_SQLParser.for_loop_statement_return retval = new PL_SQLParser.for_loop_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FOR_KEYWORD357=null;
        Token IN_KEYWORD359=null;
        Token REVERSE_KEYWORD360=null;
        PL_SQLParser.identifier_return identifier358 = null;

        PL_SQLParser.expression_return expression361 = null;

        PL_SQLParser.for_loop_statement_part_return for_loop_statement_part362 = null;

        PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1363 = null;

        PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2364 = null;


        Object FOR_KEYWORD357_tree=null;
        Object IN_KEYWORD359_tree=null;
        Object REVERSE_KEYWORD360_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:20: ( FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:22: FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            {
            root_0 = (Object)adaptor.nil();

            FOR_KEYWORD357=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_for_loop_statement7039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD357_tree = (Object)adaptor.create(FOR_KEYWORD357);
            adaptor.addChild(root_0, FOR_KEYWORD357_tree);
            }
            pushFollow(FOLLOW_identifier_in_for_loop_statement7041);
            identifier358=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier358.getTree());
            IN_KEYWORD359=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_for_loop_statement7043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD359_tree = (Object)adaptor.create(IN_KEYWORD359);
            adaptor.addChild(root_0, IN_KEYWORD359_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:56: ( REVERSE_KEYWORD )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==REVERSE_KEYWORD) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REVERSE_KEYWORD
                    {
                    REVERSE_KEYWORD360=(Token)match(input,REVERSE_KEYWORD,FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_KEYWORD360_tree = (Object)adaptor.create(REVERSE_KEYWORD360);
                    adaptor.addChild(root_0, REVERSE_KEYWORD360_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:22: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==NUMBER_UNSIGNED||LA134_0==STRING||(LA134_0>=IDENTIFIER && LA134_0<=EXT_IDENTIFIER)||LA134_0==NOT_OPERATOR||LA134_0==NULL_KEYWORD||(LA134_0>=TRUE_KEYWORD && LA134_0<=FALSE_KEYWORD)||LA134_0==INTERVAL_KEYWORD||LA134_0==REPLACE_KEYWORD||LA134_0==IN_KEYWORD||LA134_0==NOT_IN_KEYWORD||LA134_0==CASE_KEYWORD||(LA134_0>=SQLCODE_KEYWORD && LA134_0<=SQLERRM_KEYWORD)||LA134_0==RESULT_KEYWORD||(LA134_0>=211 && LA134_0<=212)) ) {
                alt134=1;
            }
            else if ( (LA134_0==207) ) {
                int LA134_2 = input.LA(2);

                if ( (LA134_2==NUMBER_UNSIGNED||LA134_2==STRING||(LA134_2>=IDENTIFIER && LA134_2<=EXT_IDENTIFIER)||LA134_2==NOT_OPERATOR||LA134_2==NULL_KEYWORD||(LA134_2>=TRUE_KEYWORD && LA134_2<=FALSE_KEYWORD)||LA134_2==INTERVAL_KEYWORD||LA134_2==REPLACE_KEYWORD||LA134_2==IN_KEYWORD||LA134_2==NOT_IN_KEYWORD||LA134_2==CASE_KEYWORD||(LA134_2>=SQLCODE_KEYWORD && LA134_2<=SQLERRM_KEYWORD)||LA134_2==RESULT_KEYWORD||LA134_2==207||(LA134_2>=211 && LA134_2<=212)) ) {
                    alt134=1;
                }
                else if ( (LA134_2==SELECT_KEYWORD) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
                    {
                    pushFollow(FOLLOW_expression_in_for_loop_statement7072);
                    expression361=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==226) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==LOOP_KEYWORD) ) {
                        alt133=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);

                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:36: for_loop_statement_part
                            {
                            pushFollow(FOLLOW_for_loop_statement_part_in_for_loop_statement7075);
                            for_loop_statement_part362=for_loop_statement_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement_part362.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:62: cursor_for_loop_statement1
                            {
                            pushFollow(FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7079);
                            cursor_for_loop_statement1363=cursor_for_loop_statement1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement1363.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:582:24: cursor_for_loop_statement2
                    {
                    pushFollow(FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7108);
                    cursor_for_loop_statement2364=cursor_for_loop_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement2364.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement"

    public static class for_loop_statement_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:1: for_loop_statement_part : '..' expression loop_statement ;
    public final PL_SQLParser.for_loop_statement_part_return for_loop_statement_part() throws RecognitionException {
        PL_SQLParser.for_loop_statement_part_return retval = new PL_SQLParser.for_loop_statement_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal365=null;
        PL_SQLParser.expression_return expression366 = null;

        PL_SQLParser.loop_statement_return loop_statement367 = null;


        Object string_literal365_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:25: ( '..' expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:28: '..' expression loop_statement
            {
            root_0 = (Object)adaptor.nil();

            string_literal365=(Token)match(input,226,FOLLOW_226_in_for_loop_statement_part7117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal365_tree = (Object)adaptor.create(string_literal365);
            adaptor.addChild(root_0, string_literal365_tree);
            }
            pushFollow(FOLLOW_expression_in_for_loop_statement_part7119);
            expression366=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression366.getTree());
            pushFollow(FOLLOW_loop_statement_in_for_loop_statement_part7121);
            loop_statement367=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement367.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement_part"

    public static class cursor_for_loop_statement1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement1"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:584:1: cursor_for_loop_statement1 : loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement1_return retval = new PL_SQLParser.cursor_for_loop_statement1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.loop_statement_return loop_statement368 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:584:28: ( loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:584:30: loop_statement
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement17128);
            loop_statement368=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement368.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement1"

    public static class cursor_for_loop_statement2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:1: cursor_for_loop_statement2 : '(' select_statement ')' loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement2_return retval = new PL_SQLParser.cursor_for_loop_statement2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal369=null;
        Token char_literal371=null;
        PL_SQLParser.select_statement_return select_statement370 = null;

        PL_SQLParser.loop_statement_return loop_statement372 = null;


        Object char_literal369_tree=null;
        Object char_literal371_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:28: ( '(' select_statement ')' loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:30: '(' select_statement ')' loop_statement
            {
            root_0 = (Object)adaptor.nil();

            char_literal369=(Token)match(input,207,FOLLOW_207_in_cursor_for_loop_statement27135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal369_tree = (Object)adaptor.create(char_literal369);
            adaptor.addChild(root_0, char_literal369_tree);
            }
            pushFollow(FOLLOW_select_statement_in_cursor_for_loop_statement27137);
            select_statement370=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement370.getTree());
            char_literal371=(Token)match(input,208,FOLLOW_208_in_cursor_for_loop_statement27139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal371_tree = (Object)adaptor.create(char_literal371);
            adaptor.addChild(root_0, char_literal371_tree);
            }
            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement27141);
            loop_statement372=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement372.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement2"

    public static class raise_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:1: raise_statement : RAISE_KEYWORD ( universal_identifier )? ;
    public final PL_SQLParser.raise_statement_return raise_statement() throws RecognitionException {
        PL_SQLParser.raise_statement_return retval = new PL_SQLParser.raise_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RAISE_KEYWORD373=null;
        PL_SQLParser.universal_identifier_return universal_identifier374 = null;


        Object RAISE_KEYWORD373_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:17: ( RAISE_KEYWORD ( universal_identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:19: RAISE_KEYWORD ( universal_identifier )?
            {
            root_0 = (Object)adaptor.nil();

            RAISE_KEYWORD373=(Token)match(input,RAISE_KEYWORD,FOLLOW_RAISE_KEYWORD_in_raise_statement7148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE_KEYWORD373_tree = (Object)adaptor.create(RAISE_KEYWORD373);
            adaptor.addChild(root_0, RAISE_KEYWORD373_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:33: ( universal_identifier )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==IDENTIFIER||LA135_0==INTERVAL_KEYWORD||LA135_0==RESULT_KEYWORD) ) {
                int LA135_1 = input.LA(2);

                if ( (synpred214_PL_SQL()) ) {
                    alt135=1;
                }
            }
            else if ( (LA135_0==EXT_IDENTIFIER) ) {
                int LA135_2 = input.LA(2);

                if ( (synpred214_PL_SQL()) ) {
                    alt135=1;
                }
            }
            switch (alt135) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_raise_statement7150);
                    universal_identifier374=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier374.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:1: case_statement_expression : ( simple_case_statement_expression | searched_case_statement_expression );
    public final PL_SQLParser.case_statement_expression_return case_statement_expression() throws RecognitionException {
        PL_SQLParser.case_statement_expression_return retval = new PL_SQLParser.case_statement_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression375 = null;

        PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression376 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:27: ( simple_case_statement_expression | searched_case_statement_expression )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==CASE_KEYWORD) ) {
                int LA136_1 = input.LA(2);

                if ( (LA136_1==NUMBER_UNSIGNED||LA136_1==STRING||(LA136_1>=IDENTIFIER && LA136_1<=EXT_IDENTIFIER)||LA136_1==NOT_OPERATOR||LA136_1==NULL_KEYWORD||(LA136_1>=TRUE_KEYWORD && LA136_1<=FALSE_KEYWORD)||LA136_1==INTERVAL_KEYWORD||LA136_1==REPLACE_KEYWORD||LA136_1==IN_KEYWORD||LA136_1==NOT_IN_KEYWORD||LA136_1==CASE_KEYWORD||(LA136_1>=SQLCODE_KEYWORD && LA136_1<=SQLERRM_KEYWORD)||LA136_1==RESULT_KEYWORD||LA136_1==207||(LA136_1>=211 && LA136_1<=212)) ) {
                    alt136=1;
                }
                else if ( (LA136_1==WHEN_KEYWORD) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:29: simple_case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_expression_in_case_statement_expression7158);
                    simple_case_statement_expression375=simple_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement_expression375.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:64: searched_case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_expression_in_case_statement_expression7162);
                    searched_case_statement_expression376=searched_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement_expression376.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_statement_expression"

    public static class simple_case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:1: simple_case_statement_expression : CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) ) ;
    public final PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression() throws RecognitionException {
        PL_SQLParser.simple_case_statement_expression_return retval = new PL_SQLParser.simple_case_statement_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CASE_KEYWORD377=null;
        Token WHEN_KEYWORD379=null;
        Token THEN_KEYWORD381=null;
        Token ELSE_KEYWORD383=null;
        Token END_KEYWORD385=null;
        Token END_CASE_KEYWORD386=null;
        PL_SQLParser.expression_return expression378 = null;

        PL_SQLParser.expression_return expression380 = null;

        PL_SQLParser.executable_case_section_return executable_case_section382 = null;

        PL_SQLParser.executable_case_section_return executable_case_section384 = null;

        PL_SQLParser.identifier_return identifier387 = null;


        Object CASE_KEYWORD377_tree=null;
        Object WHEN_KEYWORD379_tree=null;
        Object THEN_KEYWORD381_tree=null;
        Object ELSE_KEYWORD383_tree=null;
        Object END_KEYWORD385_tree=null;
        Object END_CASE_KEYWORD386_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:34: ( CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:36: CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) )
            {
            root_0 = (Object)adaptor.nil();

            CASE_KEYWORD377=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE_KEYWORD377_tree = (Object)adaptor.create(CASE_KEYWORD377);
            adaptor.addChild(root_0, CASE_KEYWORD377_tree);
            }
            pushFollow(FOLLOW_expression_in_simple_case_statement_expression7171);
            expression378=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression378.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==WHEN_KEYWORD) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD379=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7199); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD379_tree = (Object)adaptor.create(WHEN_KEYWORD379);
            	    adaptor.addChild(root_0, WHEN_KEYWORD379_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_simple_case_statement_expression7201);
            	    expression380=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression380.getTree());
            	    THEN_KEYWORD381=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7203); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD381_tree = (Object)adaptor.create(THEN_KEYWORD381);
            	    adaptor.addChild(root_0, THEN_KEYWORD381_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:63: ( executable_case_section )+
            	    int cnt137=0;
            	    loop137:
            	    do {
            	        int alt137=2;
            	        int LA137_0 = input.LA(1);

            	        if ( (LA137_0==NUMBER_UNSIGNED||LA137_0==STRING||(LA137_0>=IDENTIFIER && LA137_0<=EXT_IDENTIFIER)||LA137_0==NOT_OPERATOR||LA137_0==BEGIN_KEYWORD||LA137_0==DECLARE_KEYWORD||LA137_0==NULL_KEYWORD||(LA137_0>=TRUE_KEYWORD && LA137_0<=FALSE_KEYWORD)||LA137_0==INTERVAL_KEYWORD||LA137_0==REPLACE_KEYWORD||(LA137_0>=RETURN_KEYWORD && LA137_0<=IN_KEYWORD)||LA137_0==IF_KEYWORD||(LA137_0>=NOT_IN_KEYWORD && LA137_0<=LOOP_KEYWORD)||(LA137_0>=WHILE_KEYWORD && LA137_0<=FOR_KEYWORD)||LA137_0==SELECT_KEYWORD||(LA137_0>=RAISE_KEYWORD && LA137_0<=PRAGMA_KEYWORD)||LA137_0==CASE_KEYWORD||LA137_0==CLOSE_KEYWORD||LA137_0==COMMIT_KEYWORD||LA137_0==CONTINUE_KEYWORD||(LA137_0>=DELETE_KEYWORD && LA137_0<=EXECUTE_KEYWORD)||LA137_0==EXIT_KEYWORD||LA137_0==FETCH_KEYWORD||LA137_0==FORALL_KEYWORD||(LA137_0>=INSERT_KEYWORD && LA137_0<=OPEN_KEYWORD)||(LA137_0>=ROLLBACK_KEYWORD && LA137_0<=SAVEPOINT_KEYWORD)||LA137_0==SET_KEYWORD||(LA137_0>=SQLCODE_KEYWORD && LA137_0<=UPDATE_KEYWORD)||LA137_0==RESULT_KEYWORD||LA137_0==205||LA137_0==207||(LA137_0>=211 && LA137_0<=212)) ) {
            	            alt137=1;
            	        }


            	        switch (alt137) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7206);
            	    	    executable_case_section382=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section382.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt137 >= 1 ) break loop137;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(137, input);
            	                throw eee;
            	        }
            	        cnt137++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==ELSE_KEYWORD) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD383=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD383_tree = (Object)adaptor.create(ELSE_KEYWORD383);
                    adaptor.addChild(root_0, ELSE_KEYWORD383_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:39: ( executable_case_section )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==NUMBER_UNSIGNED||LA139_0==STRING||(LA139_0>=IDENTIFIER && LA139_0<=EXT_IDENTIFIER)||LA139_0==NOT_OPERATOR||LA139_0==BEGIN_KEYWORD||LA139_0==DECLARE_KEYWORD||LA139_0==NULL_KEYWORD||(LA139_0>=TRUE_KEYWORD && LA139_0<=FALSE_KEYWORD)||LA139_0==INTERVAL_KEYWORD||LA139_0==REPLACE_KEYWORD||(LA139_0>=RETURN_KEYWORD && LA139_0<=IN_KEYWORD)||LA139_0==IF_KEYWORD||(LA139_0>=NOT_IN_KEYWORD && LA139_0<=LOOP_KEYWORD)||(LA139_0>=WHILE_KEYWORD && LA139_0<=FOR_KEYWORD)||LA139_0==SELECT_KEYWORD||(LA139_0>=RAISE_KEYWORD && LA139_0<=PRAGMA_KEYWORD)||LA139_0==CASE_KEYWORD||LA139_0==CLOSE_KEYWORD||LA139_0==COMMIT_KEYWORD||LA139_0==CONTINUE_KEYWORD||(LA139_0>=DELETE_KEYWORD && LA139_0<=EXECUTE_KEYWORD)||LA139_0==EXIT_KEYWORD||LA139_0==FETCH_KEYWORD||LA139_0==FORALL_KEYWORD||(LA139_0>=INSERT_KEYWORD && LA139_0<=OPEN_KEYWORD)||(LA139_0>=ROLLBACK_KEYWORD && LA139_0<=SAVEPOINT_KEYWORD)||LA139_0==SET_KEYWORD||(LA139_0>=SQLCODE_KEYWORD && LA139_0<=UPDATE_KEYWORD)||LA139_0==RESULT_KEYWORD||LA139_0==205||LA139_0==207||(LA139_0>=211 && LA139_0<=212)) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7240);
                    	    executable_case_section384=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section384.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:25: ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==END_KEYWORD) ) {
                alt142=1;
            }
            else if ( (LA142_0==END_CASE_KEYWORD) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:26: END_KEYWORD
                    {
                    END_KEYWORD385=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_simple_case_statement_expression7271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    END_KEYWORD385_tree = (Object)adaptor.create(END_KEYWORD385);
                    adaptor.addChild(root_0, END_KEYWORD385_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:40: ( END_CASE_KEYWORD ( identifier )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:40: ( END_CASE_KEYWORD ( identifier )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:41: END_CASE_KEYWORD ( identifier )?
                    {
                    END_CASE_KEYWORD386=(Token)match(input,END_CASE_KEYWORD,FOLLOW_END_CASE_KEYWORD_in_simple_case_statement_expression7276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    END_CASE_KEYWORD386_tree = (Object)adaptor.create(END_CASE_KEYWORD386);
                    adaptor.addChild(root_0, END_CASE_KEYWORD386_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:58: ( identifier )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==IDENTIFIER||LA141_0==INTERVAL_KEYWORD||LA141_0==RESULT_KEYWORD) ) {
                        int LA141_1 = input.LA(2);

                        if ( (synpred221_PL_SQL()) ) {
                            alt141=1;
                        }
                    }
                    switch (alt141) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                            {
                            pushFollow(FOLLOW_identifier_in_simple_case_statement_expression7278);
                            identifier387=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier387.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement_expression"

    public static class searched_case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:1: searched_case_statement_expression : CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) ) ;
    public final PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression() throws RecognitionException {
        PL_SQLParser.searched_case_statement_expression_return retval = new PL_SQLParser.searched_case_statement_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CASE_KEYWORD388=null;
        Token WHEN_KEYWORD389=null;
        Token THEN_KEYWORD391=null;
        Token ELSE_KEYWORD393=null;
        Token END_KEYWORD395=null;
        Token END_CASE_KEYWORD396=null;
        PL_SQLParser.expression_return expression390 = null;

        PL_SQLParser.executable_case_section_return executable_case_section392 = null;

        PL_SQLParser.executable_case_section_return executable_case_section394 = null;

        PL_SQLParser.identifier_return identifier397 = null;


        Object CASE_KEYWORD388_tree=null;
        Object WHEN_KEYWORD389_tree=null;
        Object THEN_KEYWORD391_tree=null;
        Object ELSE_KEYWORD393_tree=null;
        Object END_KEYWORD395_tree=null;
        Object END_CASE_KEYWORD396_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:36: ( CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:38: CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) )
            {
            root_0 = (Object)adaptor.nil();

            CASE_KEYWORD388=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE_KEYWORD388_tree = (Object)adaptor.create(CASE_KEYWORD388);
            adaptor.addChild(root_0, CASE_KEYWORD388_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==WHEN_KEYWORD) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD389=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7315); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD389_tree = (Object)adaptor.create(WHEN_KEYWORD389);
            	    adaptor.addChild(root_0, WHEN_KEYWORD389_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_searched_case_statement_expression7317);
            	    expression390=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression390.getTree());
            	    THEN_KEYWORD391=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7319); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD391_tree = (Object)adaptor.create(THEN_KEYWORD391);
            	    adaptor.addChild(root_0, THEN_KEYWORD391_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:63: ( executable_case_section )+
            	    int cnt143=0;
            	    loop143:
            	    do {
            	        int alt143=2;
            	        int LA143_0 = input.LA(1);

            	        if ( (LA143_0==NUMBER_UNSIGNED||LA143_0==STRING||(LA143_0>=IDENTIFIER && LA143_0<=EXT_IDENTIFIER)||LA143_0==NOT_OPERATOR||LA143_0==BEGIN_KEYWORD||LA143_0==DECLARE_KEYWORD||LA143_0==NULL_KEYWORD||(LA143_0>=TRUE_KEYWORD && LA143_0<=FALSE_KEYWORD)||LA143_0==INTERVAL_KEYWORD||LA143_0==REPLACE_KEYWORD||(LA143_0>=RETURN_KEYWORD && LA143_0<=IN_KEYWORD)||LA143_0==IF_KEYWORD||(LA143_0>=NOT_IN_KEYWORD && LA143_0<=LOOP_KEYWORD)||(LA143_0>=WHILE_KEYWORD && LA143_0<=FOR_KEYWORD)||LA143_0==SELECT_KEYWORD||(LA143_0>=RAISE_KEYWORD && LA143_0<=PRAGMA_KEYWORD)||LA143_0==CASE_KEYWORD||LA143_0==CLOSE_KEYWORD||LA143_0==COMMIT_KEYWORD||LA143_0==CONTINUE_KEYWORD||(LA143_0>=DELETE_KEYWORD && LA143_0<=EXECUTE_KEYWORD)||LA143_0==EXIT_KEYWORD||LA143_0==FETCH_KEYWORD||LA143_0==FORALL_KEYWORD||(LA143_0>=INSERT_KEYWORD && LA143_0<=OPEN_KEYWORD)||(LA143_0>=ROLLBACK_KEYWORD && LA143_0<=SAVEPOINT_KEYWORD)||LA143_0==SET_KEYWORD||(LA143_0>=SQLCODE_KEYWORD && LA143_0<=UPDATE_KEYWORD)||LA143_0==RESULT_KEYWORD||LA143_0==205||LA143_0==207||(LA143_0>=211 && LA143_0<=212)) ) {
            	            alt143=1;
            	        }


            	        switch (alt143) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7322);
            	    	    executable_case_section392=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section392.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt143 >= 1 ) break loop143;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(143, input);
            	                throw eee;
            	        }
            	        cnt143++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ELSE_KEYWORD) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD393=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD393_tree = (Object)adaptor.create(ELSE_KEYWORD393);
                    adaptor.addChild(root_0, ELSE_KEYWORD393_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:39: ( executable_case_section )+
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==NUMBER_UNSIGNED||LA145_0==STRING||(LA145_0>=IDENTIFIER && LA145_0<=EXT_IDENTIFIER)||LA145_0==NOT_OPERATOR||LA145_0==BEGIN_KEYWORD||LA145_0==DECLARE_KEYWORD||LA145_0==NULL_KEYWORD||(LA145_0>=TRUE_KEYWORD && LA145_0<=FALSE_KEYWORD)||LA145_0==INTERVAL_KEYWORD||LA145_0==REPLACE_KEYWORD||(LA145_0>=RETURN_KEYWORD && LA145_0<=IN_KEYWORD)||LA145_0==IF_KEYWORD||(LA145_0>=NOT_IN_KEYWORD && LA145_0<=LOOP_KEYWORD)||(LA145_0>=WHILE_KEYWORD && LA145_0<=FOR_KEYWORD)||LA145_0==SELECT_KEYWORD||(LA145_0>=RAISE_KEYWORD && LA145_0<=PRAGMA_KEYWORD)||LA145_0==CASE_KEYWORD||LA145_0==CLOSE_KEYWORD||LA145_0==COMMIT_KEYWORD||LA145_0==CONTINUE_KEYWORD||(LA145_0>=DELETE_KEYWORD && LA145_0<=EXECUTE_KEYWORD)||LA145_0==EXIT_KEYWORD||LA145_0==FETCH_KEYWORD||LA145_0==FORALL_KEYWORD||(LA145_0>=INSERT_KEYWORD && LA145_0<=OPEN_KEYWORD)||(LA145_0>=ROLLBACK_KEYWORD && LA145_0<=SAVEPOINT_KEYWORD)||LA145_0==SET_KEYWORD||(LA145_0>=SQLCODE_KEYWORD && LA145_0<=UPDATE_KEYWORD)||LA145_0==RESULT_KEYWORD||LA145_0==205||LA145_0==207||(LA145_0>=211 && LA145_0<=212)) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7356);
                    	    executable_case_section394=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section394.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:25: ( END_KEYWORD | ( END_CASE_KEYWORD ( identifier )? ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==END_KEYWORD) ) {
                alt148=1;
            }
            else if ( (LA148_0==END_CASE_KEYWORD) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:26: END_KEYWORD
                    {
                    END_KEYWORD395=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_searched_case_statement_expression7387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    END_KEYWORD395_tree = (Object)adaptor.create(END_KEYWORD395);
                    adaptor.addChild(root_0, END_KEYWORD395_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:40: ( END_CASE_KEYWORD ( identifier )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:40: ( END_CASE_KEYWORD ( identifier )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:41: END_CASE_KEYWORD ( identifier )?
                    {
                    END_CASE_KEYWORD396=(Token)match(input,END_CASE_KEYWORD,FOLLOW_END_CASE_KEYWORD_in_searched_case_statement_expression7392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    END_CASE_KEYWORD396_tree = (Object)adaptor.create(END_CASE_KEYWORD396);
                    adaptor.addChild(root_0, END_CASE_KEYWORD396_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:58: ( identifier )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==IDENTIFIER||LA147_0==INTERVAL_KEYWORD||LA147_0==RESULT_KEYWORD) ) {
                        int LA147_1 = input.LA(2);

                        if ( (synpred227_PL_SQL()) ) {
                            alt147=1;
                        }
                    }
                    switch (alt147) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                            {
                            pushFollow(FOLLOW_identifier_in_searched_case_statement_expression7394);
                            identifier397=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier397.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement_expression"

    public static class close_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:1: close_statement : CLOSE_KEYWORD universal_identifier ;
    public final PL_SQLParser.close_statement_return close_statement() throws RecognitionException {
        PL_SQLParser.close_statement_return retval = new PL_SQLParser.close_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CLOSE_KEYWORD398=null;
        PL_SQLParser.universal_identifier_return universal_identifier399 = null;


        Object CLOSE_KEYWORD398_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:17: ( CLOSE_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:19: CLOSE_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            CLOSE_KEYWORD398=(Token)match(input,CLOSE_KEYWORD,FOLLOW_CLOSE_KEYWORD_in_close_statement7404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_KEYWORD398_tree = (Object)adaptor.create(CLOSE_KEYWORD398);
            adaptor.addChild(root_0, CLOSE_KEYWORD398_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_close_statement7406);
            universal_identifier399=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier399.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:1: continue_statement : CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.continue_statement_return continue_statement() throws RecognitionException {
        PL_SQLParser.continue_statement_return retval = new PL_SQLParser.continue_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CONTINUE_KEYWORD400=null;
        Token WHEN_KEYWORD402=null;
        PL_SQLParser.identifier_return identifier401 = null;

        PL_SQLParser.expression_return expression403 = null;


        Object CONTINUE_KEYWORD400_tree=null;
        Object WHEN_KEYWORD402_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:20: ( CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:22: CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (Object)adaptor.nil();

            CONTINUE_KEYWORD400=(Token)match(input,CONTINUE_KEYWORD,FOLLOW_CONTINUE_KEYWORD_in_continue_statement7413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE_KEYWORD400_tree = (Object)adaptor.create(CONTINUE_KEYWORD400);
            adaptor.addChild(root_0, CONTINUE_KEYWORD400_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:39: ( identifier )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==IDENTIFIER||LA149_0==INTERVAL_KEYWORD||LA149_0==RESULT_KEYWORD) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred228_PL_SQL()) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_continue_statement7415);
                    identifier401=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier401.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:51: ( WHEN_KEYWORD expression )?
            int alt150=2;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD402=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_continue_statement7419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD402_tree = (Object)adaptor.create(WHEN_KEYWORD402);
                    adaptor.addChild(root_0, WHEN_KEYWORD402_tree);
                    }
                    pushFollow(FOLLOW_expression_in_continue_statement7421);
                    expression403=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression403.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class execute_immediate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_immediate_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:1: execute_immediate_statement : EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? ;
    public final PL_SQLParser.execute_immediate_statement_return execute_immediate_statement() throws RecognitionException {
        PL_SQLParser.execute_immediate_statement_return retval = new PL_SQLParser.execute_immediate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXECUTE_KEYWORD404=null;
        Token IMMEDIATE_KEYWORD405=null;
        Token set407=null;
        PL_SQLParser.expression_return expression406 = null;

        PL_SQLParser.into_clause_return into_clause408 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause409 = null;

        PL_SQLParser.using_clause_return using_clause410 = null;


        Object EXECUTE_KEYWORD404_tree=null;
        Object IMMEDIATE_KEYWORD405_tree=null;
        Object set407_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:29: ( EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:31: EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )?
            {
            root_0 = (Object)adaptor.nil();

            EXECUTE_KEYWORD404=(Token)match(input,EXECUTE_KEYWORD,FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement7430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECUTE_KEYWORD404_tree = (Object)adaptor.create(EXECUTE_KEYWORD404);
            adaptor.addChild(root_0, EXECUTE_KEYWORD404_tree);
            }
            IMMEDIATE_KEYWORD405=(Token)match(input,IMMEDIATE_KEYWORD,FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement7432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMMEDIATE_KEYWORD405_tree = (Object)adaptor.create(IMMEDIATE_KEYWORD405);
            adaptor.addChild(root_0, IMMEDIATE_KEYWORD405_tree);
            }
            pushFollow(FOLLOW_expression_in_execute_immediate_statement7434);
            expression406=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression406.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:31: ( RETURN_KEYWORD | RETURNING_KEYWORD )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==RETURN_KEYWORD||LA151_0==RETURNING_KEYWORD) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set407=(Token)input.LT(1);
                    if ( input.LA(1)==RETURN_KEYWORD||input.LA(1)==RETURNING_KEYWORD ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set407));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:31: ( into_clause | bulk_collect_into_clause )?
            int alt152=3;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==INTO_KEYWORD) ) {
                alt152=1;
            }
            else if ( (LA152_0==BULK_KEYWORD) ) {
                alt152=2;
            }
            switch (alt152) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:32: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate_statement7506);
                    into_clause408=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause408.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:46: bulk_collect_into_clause
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement7510);
                    bulk_collect_into_clause409=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause409.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:31: ( using_clause )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==USING_KEYWORD) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate_statement7544);
                    using_clause410=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause410.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "execute_immediate_statement"

    public static class into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:1: into_clause : INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.into_clause_return into_clause() throws RecognitionException {
        PL_SQLParser.into_clause_return retval = new PL_SQLParser.into_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INTO_KEYWORD411=null;
        Token char_literal413=null;
        PL_SQLParser.universal_identifier_return universal_identifier412 = null;

        PL_SQLParser.universal_identifier_return universal_identifier414 = null;


        Object INTO_KEYWORD411_tree=null;
        Object char_literal413_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:13: ( INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:15: INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (Object)adaptor.nil();

            INTO_KEYWORD411=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_into_clause7553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD411_tree = (Object)adaptor.create(INTO_KEYWORD411);
            adaptor.addChild(root_0, INTO_KEYWORD411_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_into_clause7555);
            universal_identifier412=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier412.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:49: ( ',' universal_identifier )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==COMMA) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:50: ',' universal_identifier
            	    {
            	    char_literal413=(Token)match(input,COMMA,FOLLOW_COMMA_in_into_clause7558); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal413_tree = (Object)adaptor.create(char_literal413);
            	    adaptor.addChild(root_0, char_literal413_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_into_clause7560);
            	    universal_identifier414=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier414.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "into_clause"

    public static class bulk_collect_into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_collect_into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:1: bulk_collect_into_clause : BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause() throws RecognitionException {
        PL_SQLParser.bulk_collect_into_clause_return retval = new PL_SQLParser.bulk_collect_into_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BULK_KEYWORD415=null;
        Token COLLECT_KEYWORD416=null;
        Token INTO_KEYWORD417=null;
        Token char_literal419=null;
        PL_SQLParser.universal_identifier_return universal_identifier418 = null;

        PL_SQLParser.universal_identifier_return universal_identifier420 = null;


        Object BULK_KEYWORD415_tree=null;
        Object COLLECT_KEYWORD416_tree=null;
        Object INTO_KEYWORD417_tree=null;
        Object char_literal419_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:26: ( BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:28: BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (Object)adaptor.nil();

            BULK_KEYWORD415=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause7569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BULK_KEYWORD415_tree = (Object)adaptor.create(BULK_KEYWORD415);
            adaptor.addChild(root_0, BULK_KEYWORD415_tree);
            }
            COLLECT_KEYWORD416=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause7571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLLECT_KEYWORD416_tree = (Object)adaptor.create(COLLECT_KEYWORD416);
            adaptor.addChild(root_0, COLLECT_KEYWORD416_tree);
            }
            INTO_KEYWORD417=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause7573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD417_tree = (Object)adaptor.create(INTO_KEYWORD417);
            adaptor.addChild(root_0, INTO_KEYWORD417_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause7603);
            universal_identifier418=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier418.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:49: ( ',' universal_identifier )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==COMMA) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:50: ',' universal_identifier
            	    {
            	    char_literal419=(Token)match(input,COMMA,FOLLOW_COMMA_in_bulk_collect_into_clause7606); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal419_tree = (Object)adaptor.create(char_literal419);
            	    adaptor.addChild(root_0, char_literal419_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause7608);
            	    universal_identifier420=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier420.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bulk_collect_into_clause"

    public static class using_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:1: using_clause : USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* ;
    public final PL_SQLParser.using_clause_return using_clause() throws RecognitionException {
        PL_SQLParser.using_clause_return retval = new PL_SQLParser.using_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token USING_KEYWORD421=null;
        Token IN_KEYWORD422=null;
        Token OUT_KEYWORD423=null;
        Token IN_KEYWORD424=null;
        Token OUT_KEYWORD425=null;
        Token char_literal427=null;
        Token IN_KEYWORD428=null;
        Token OUT_KEYWORD429=null;
        Token IN_KEYWORD430=null;
        Token OUT_KEYWORD431=null;
        PL_SQLParser.expression_return expression426 = null;

        PL_SQLParser.expression_return expression432 = null;


        Object USING_KEYWORD421_tree=null;
        Object IN_KEYWORD422_tree=null;
        Object OUT_KEYWORD423_tree=null;
        Object IN_KEYWORD424_tree=null;
        Object OUT_KEYWORD425_tree=null;
        Object char_literal427_tree=null;
        Object IN_KEYWORD428_tree=null;
        Object OUT_KEYWORD429_tree=null;
        Object IN_KEYWORD430_tree=null;
        Object OUT_KEYWORD431_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:14: ( USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:16: USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            {
            root_0 = (Object)adaptor.nil();

            USING_KEYWORD421=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_using_clause7617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_KEYWORD421_tree = (Object)adaptor.create(USING_KEYWORD421);
            adaptor.addChild(root_0, USING_KEYWORD421_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            int alt156=4;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:31: IN_KEYWORD
                    {
                    IN_KEYWORD422=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD422_tree = (Object)adaptor.create(IN_KEYWORD422);
                    adaptor.addChild(root_0, IN_KEYWORD422_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:44: OUT_KEYWORD
                    {
                    OUT_KEYWORD423=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD423_tree = (Object)adaptor.create(OUT_KEYWORD423);
                    adaptor.addChild(root_0, OUT_KEYWORD423_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:58: ( IN_KEYWORD OUT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:58: ( IN_KEYWORD OUT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:59: IN_KEYWORD OUT_KEYWORD
                    {
                    IN_KEYWORD424=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD424_tree = (Object)adaptor.create(IN_KEYWORD424);
                    adaptor.addChild(root_0, IN_KEYWORD424_tree);
                    }
                    OUT_KEYWORD425=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD425_tree = (Object)adaptor.create(OUT_KEYWORD425);
                    adaptor.addChild(root_0, OUT_KEYWORD425_tree);
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_using_clause7636);
            expression426=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression426.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:16: ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:17: ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression
            	    {
            	    char_literal427=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause7654); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal427_tree = (Object)adaptor.create(char_literal427);
            	    adaptor.addChild(root_0, char_literal427_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            	    int alt157=4;
            	    alt157 = dfa157.predict(input);
            	    switch (alt157) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:22: IN_KEYWORD
            	            {
            	            IN_KEYWORD428=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7657); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD428_tree = (Object)adaptor.create(IN_KEYWORD428);
            	            adaptor.addChild(root_0, IN_KEYWORD428_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:35: OUT_KEYWORD
            	            {
            	            OUT_KEYWORD429=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7661); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD429_tree = (Object)adaptor.create(OUT_KEYWORD429);
            	            adaptor.addChild(root_0, OUT_KEYWORD429_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( IN_KEYWORD OUT_KEYWORD )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( IN_KEYWORD OUT_KEYWORD )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:50: IN_KEYWORD OUT_KEYWORD
            	            {
            	            IN_KEYWORD430=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7666); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD430_tree = (Object)adaptor.create(IN_KEYWORD430);
            	            adaptor.addChild(root_0, IN_KEYWORD430_tree);
            	            }
            	            OUT_KEYWORD431=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7668); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD431_tree = (Object)adaptor.create(OUT_KEYWORD431);
            	            adaptor.addChild(root_0, OUT_KEYWORD431_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expression_in_using_clause7673);
            	    expression432=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression432.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class exit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:1: exit_statement : EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.exit_statement_return exit_statement() throws RecognitionException {
        PL_SQLParser.exit_statement_return retval = new PL_SQLParser.exit_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXIT_KEYWORD433=null;
        Token WHEN_KEYWORD435=null;
        PL_SQLParser.identifier_return identifier434 = null;

        PL_SQLParser.expression_return expression436 = null;


        Object EXIT_KEYWORD433_tree=null;
        Object WHEN_KEYWORD435_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:16: ( EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:18: EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (Object)adaptor.nil();

            EXIT_KEYWORD433=(Token)match(input,EXIT_KEYWORD,FOLLOW_EXIT_KEYWORD_in_exit_statement7682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT_KEYWORD433_tree = (Object)adaptor.create(EXIT_KEYWORD433);
            adaptor.addChild(root_0, EXIT_KEYWORD433_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: ( identifier )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==IDENTIFIER||LA159_0==INTERVAL_KEYWORD||LA159_0==RESULT_KEYWORD) ) {
                int LA159_1 = input.LA(2);

                if ( (synpred244_PL_SQL()) ) {
                    alt159=1;
                }
            }
            switch (alt159) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_exit_statement7684);
                    identifier434=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier434.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:43: ( WHEN_KEYWORD expression )?
            int alt160=2;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:44: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD435=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exit_statement7688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD435_tree = (Object)adaptor.create(WHEN_KEYWORD435);
                    adaptor.addChild(root_0, WHEN_KEYWORD435_tree);
                    }
                    pushFollow(FOLLOW_expression_in_exit_statement7690);
                    expression436=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression436.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:1: fetch_statement : FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) ;
    public final PL_SQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
        PL_SQLParser.fetch_statement_return retval = new PL_SQLParser.fetch_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FETCH_KEYWORD437=null;
        Token LIMIT_KEYWORD440=null;
        PL_SQLParser.expression_return expression438 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause439 = null;

        PL_SQLParser.expression_return expression441 = null;

        PL_SQLParser.into_clause_return into_clause442 = null;


        Object FETCH_KEYWORD437_tree=null;
        Object LIMIT_KEYWORD440_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:17: ( FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:19: FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            {
            root_0 = (Object)adaptor.nil();

            FETCH_KEYWORD437=(Token)match(input,FETCH_KEYWORD,FOLLOW_FETCH_KEYWORD_in_fetch_statement7699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FETCH_KEYWORD437_tree = (Object)adaptor.create(FETCH_KEYWORD437);
            adaptor.addChild(root_0, FETCH_KEYWORD437_tree);
            }
            pushFollow(FOLLOW_expression_in_fetch_statement7701);
            expression438=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression438.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:19: ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==BULK_KEYWORD) ) {
                alt162=1;
            }
            else if ( (LA162_0==INTO_KEYWORD) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:21: bulk_collect_into_clause ( LIMIT_KEYWORD expression )?
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_fetch_statement7724);
                    bulk_collect_into_clause439=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause439.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:46: ( LIMIT_KEYWORD expression )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==LIMIT_KEYWORD) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:47: LIMIT_KEYWORD expression
                            {
                            LIMIT_KEYWORD440=(Token)match(input,LIMIT_KEYWORD,FOLLOW_LIMIT_KEYWORD_in_fetch_statement7727); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LIMIT_KEYWORD440_tree = (Object)adaptor.create(LIMIT_KEYWORD440);
                            adaptor.addChild(root_0, LIMIT_KEYWORD440_tree);
                            }
                            pushFollow(FOLLOW_expression_in_fetch_statement7729);
                            expression441=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression441.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:78: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_fetch_statement7737);
                    into_clause442=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause442.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class forall_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:1: forall_statement : FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements ;
    public final PL_SQLParser.forall_statement_return forall_statement() throws RecognitionException {
        PL_SQLParser.forall_statement_return retval = new PL_SQLParser.forall_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FORALL_KEYWORD443=null;
        Token IN_KEYWORD445=null;
        Token SAVE_KEYWORD447=null;
        Token EXCEPTIONS_KEYWORD448=null;
        PL_SQLParser.identifier_return identifier444 = null;

        PL_SQLParser.bounds_clause_return bounds_clause446 = null;

        PL_SQLParser.sql_statements_return sql_statements449 = null;


        Object FORALL_KEYWORD443_tree=null;
        Object IN_KEYWORD445_tree=null;
        Object SAVE_KEYWORD447_tree=null;
        Object EXCEPTIONS_KEYWORD448_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:18: ( FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:20: FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements
            {
            root_0 = (Object)adaptor.nil();

            FORALL_KEYWORD443=(Token)match(input,FORALL_KEYWORD,FOLLOW_FORALL_KEYWORD_in_forall_statement7745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORALL_KEYWORD443_tree = (Object)adaptor.create(FORALL_KEYWORD443);
            adaptor.addChild(root_0, FORALL_KEYWORD443_tree);
            }
            pushFollow(FOLLOW_identifier_in_forall_statement7747);
            identifier444=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier444.getTree());
            IN_KEYWORD445=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_forall_statement7749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD445_tree = (Object)adaptor.create(IN_KEYWORD445);
            adaptor.addChild(root_0, IN_KEYWORD445_tree);
            }
            pushFollow(FOLLOW_bounds_clause_in_forall_statement7751);
            bounds_clause446=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bounds_clause446.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:20: ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==SAVE_KEYWORD) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:21: SAVE_KEYWORD EXCEPTIONS_KEYWORD
                    {
                    SAVE_KEYWORD447=(Token)match(input,SAVE_KEYWORD,FOLLOW_SAVE_KEYWORD_in_forall_statement7773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAVE_KEYWORD447_tree = (Object)adaptor.create(SAVE_KEYWORD447);
                    adaptor.addChild(root_0, SAVE_KEYWORD447_tree);
                    }
                    EXCEPTIONS_KEYWORD448=(Token)match(input,EXCEPTIONS_KEYWORD,FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement7775); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTIONS_KEYWORD448_tree = (Object)adaptor.create(EXCEPTIONS_KEYWORD448);
                    adaptor.addChild(root_0, EXCEPTIONS_KEYWORD448_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_statements_in_forall_statement7779);
            sql_statements449=sql_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements449.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_statement"

    public static class bounds_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bounds_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:1: bounds_clause : ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) );
    public final PL_SQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
        PL_SQLParser.bounds_clause_return retval = new PL_SQLParser.bounds_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal451=null;
        Token INDICES_KEYWORD453=null;
        Token OF_KEYWORD454=null;
        Token BETWEEN_KEYWORD456=null;
        Token AND_OPERATOR458=null;
        Token VALUES_KEYWORD460=null;
        Token OF_KEYWORD461=null;
        PL_SQLParser.expression_return expression450 = null;

        PL_SQLParser.expression_return expression452 = null;

        PL_SQLParser.universal_identifier_return universal_identifier455 = null;

        PL_SQLParser.expression_return expression457 = null;

        PL_SQLParser.expression_return expression459 = null;

        PL_SQLParser.universal_identifier_return universal_identifier462 = null;


        Object string_literal451_tree=null;
        Object INDICES_KEYWORD453_tree=null;
        Object OF_KEYWORD454_tree=null;
        Object BETWEEN_KEYWORD456_tree=null;
        Object AND_OPERATOR458_tree=null;
        Object VALUES_KEYWORD460_tree=null;
        Object OF_KEYWORD461_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:15: ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) )
            int alt165=3;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NOT_OPERATOR:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case NOT_IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case 207:
            case 211:
            case 212:
                {
                alt165=1;
                }
                break;
            case INDICES_KEYWORD:
                {
                alt165=2;
                }
                break;
            case VALUES_KEYWORD:
                {
                alt165=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:17: ( expression '..' expression )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:17: ( expression '..' expression )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:18: expression '..' expression
                    {
                    pushFollow(FOLLOW_expression_in_bounds_clause7787);
                    expression450=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());
                    string_literal451=(Token)match(input,226,FOLLOW_226_in_bounds_clause7789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal451_tree = (Object)adaptor.create(string_literal451);
                    adaptor.addChild(root_0, string_literal451_tree);
                    }
                    pushFollow(FOLLOW_expression_in_bounds_clause7791);
                    expression452=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression452.getTree());

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:18: INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    {
                    INDICES_KEYWORD453=(Token)match(input,INDICES_KEYWORD,FOLLOW_INDICES_KEYWORD_in_bounds_clause7813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDICES_KEYWORD453_tree = (Object)adaptor.create(INDICES_KEYWORD453);
                    adaptor.addChild(root_0, INDICES_KEYWORD453_tree);
                    }
                    OF_KEYWORD454=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause7815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD454_tree = (Object)adaptor.create(OF_KEYWORD454);
                    adaptor.addChild(root_0, OF_KEYWORD454_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause7817);
                    universal_identifier455=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier455.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:17: ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==BETWEEN_KEYWORD) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:18: BETWEEN_KEYWORD expression AND_OPERATOR expression
                            {
                            BETWEEN_KEYWORD456=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_bounds_clause7837); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BETWEEN_KEYWORD456_tree = (Object)adaptor.create(BETWEEN_KEYWORD456);
                            adaptor.addChild(root_0, BETWEEN_KEYWORD456_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause7839);
                            expression457=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression457.getTree());
                            AND_OPERATOR458=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_bounds_clause7841); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_OPERATOR458_tree = (Object)adaptor.create(AND_OPERATOR458);
                            adaptor.addChild(root_0, AND_OPERATOR458_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause7843);
                            expression459=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression459.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:18: VALUES_KEYWORD OF_KEYWORD universal_identifier
                    {
                    VALUES_KEYWORD460=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_bounds_clause7868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD460_tree = (Object)adaptor.create(VALUES_KEYWORD460);
                    adaptor.addChild(root_0, VALUES_KEYWORD460_tree);
                    }
                    OF_KEYWORD461=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause7870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD461_tree = (Object)adaptor.create(OF_KEYWORD461);
                    adaptor.addChild(root_0, OF_KEYWORD461_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause7872);
                    universal_identifier462=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier462.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"

    public static class pragma_inline_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_inline_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:1: pragma_inline_statement : PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' ;
    public final PL_SQLParser.pragma_inline_statement_return pragma_inline_statement() throws RecognitionException {
        PL_SQLParser.pragma_inline_statement_return retval = new PL_SQLParser.pragma_inline_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PRAGMA_KEYWORD463=null;
        Token INLINE_KEYWORD464=null;
        Token char_literal465=null;
        Token STRING466=null;
        Token char_literal467=null;
        Token STRING468=null;
        Token char_literal469=null;

        Object PRAGMA_KEYWORD463_tree=null;
        Object INLINE_KEYWORD464_tree=null;
        Object char_literal465_tree=null;
        Object STRING466_tree=null;
        Object char_literal467_tree=null;
        Object STRING468_tree=null;
        Object char_literal469_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:25: ( PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:27: PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')'
            {
            root_0 = (Object)adaptor.nil();

            PRAGMA_KEYWORD463=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement7881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD463_tree = (Object)adaptor.create(PRAGMA_KEYWORD463);
            adaptor.addChild(root_0, PRAGMA_KEYWORD463_tree);
            }
            INLINE_KEYWORD464=(Token)match(input,INLINE_KEYWORD,FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement7883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INLINE_KEYWORD464_tree = (Object)adaptor.create(INLINE_KEYWORD464);
            adaptor.addChild(root_0, INLINE_KEYWORD464_tree);
            }
            char_literal465=(Token)match(input,207,FOLLOW_207_in_pragma_inline_statement7911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal465_tree = (Object)adaptor.create(char_literal465);
            adaptor.addChild(root_0, char_literal465_tree);
            }
            STRING466=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement7913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING466_tree = (Object)adaptor.create(STRING466);
            adaptor.addChild(root_0, STRING466_tree);
            }
            char_literal467=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_inline_statement7915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal467_tree = (Object)adaptor.create(char_literal467);
            adaptor.addChild(root_0, char_literal467_tree);
            }
            STRING468=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement7917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING468_tree = (Object)adaptor.create(STRING468);
            adaptor.addChild(root_0, STRING468_tree);
            }
            char_literal469=(Token)match(input,208,FOLLOW_208_in_pragma_inline_statement7919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal469_tree = (Object)adaptor.create(char_literal469);
            adaptor.addChild(root_0, char_literal469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pragma_inline_statement"

    public static class open_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:1: open_statement : OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? ;
    public final PL_SQLParser.open_statement_return open_statement() throws RecognitionException {
        PL_SQLParser.open_statement_return retval = new PL_SQLParser.open_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OPEN_KEYWORD470=null;
        Token FOR_KEYWORD473=null;
        Token STRING475=null;
        PL_SQLParser.universal_identifier_return universal_identifier471 = null;

        PL_SQLParser.open_params_return open_params472 = null;

        PL_SQLParser.select_statement_return select_statement474 = null;

        PL_SQLParser.universal_identifier_return universal_identifier476 = null;

        PL_SQLParser.using_clause_return using_clause477 = null;


        Object OPEN_KEYWORD470_tree=null;
        Object FOR_KEYWORD473_tree=null;
        Object STRING475_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:16: ( OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:18: OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            {
            root_0 = (Object)adaptor.nil();

            OPEN_KEYWORD470=(Token)match(input,OPEN_KEYWORD,FOLLOW_OPEN_KEYWORD_in_open_statement7926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_KEYWORD470_tree = (Object)adaptor.create(OPEN_KEYWORD470);
            adaptor.addChild(root_0, OPEN_KEYWORD470_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_open_statement7928);
            universal_identifier471=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier471.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:52: ( open_params )?
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: open_params
                    {
                    pushFollow(FOLLOW_open_params_in_open_statement7930);
                    open_params472=open_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_params472.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            int alt169=2;
            alt169 = dfa169.predict(input);
            switch (alt169) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
                    {
                    FOR_KEYWORD473=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_open_statement7951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD473_tree = (Object)adaptor.create(FOR_KEYWORD473);
                    adaptor.addChild(root_0, FOR_KEYWORD473_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:31: ( select_statement | STRING | universal_identifier )
                    int alt167=3;
                    switch ( input.LA(1) ) {
                    case SELECT_KEYWORD:
                        {
                        alt167=1;
                        }
                        break;
                    case STRING:
                        {
                        alt167=2;
                        }
                        break;
                    case IDENTIFIER:
                    case EXT_IDENTIFIER:
                    case INTERVAL_KEYWORD:
                    case RESULT_KEYWORD:
                        {
                        alt167=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }

                    switch (alt167) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:32: select_statement
                            {
                            pushFollow(FOLLOW_select_statement_in_open_statement7954);
                            select_statement474=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement474.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:51: STRING
                            {
                            STRING475=(Token)match(input,STRING,FOLLOW_STRING_in_open_statement7958); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STRING475_tree = (Object)adaptor.create(STRING475);
                            adaptor.addChild(root_0, STRING475_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:60: universal_identifier
                            {
                            pushFollow(FOLLOW_universal_identifier_in_open_statement7962);
                            universal_identifier476=universal_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier476.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:82: ( using_clause )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==USING_KEYWORD) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_open_statement7965);
                            using_clause477=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause477.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class open_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_params"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:1: open_params : '(' expression ( ',' expression )* ')' ;
    public final PL_SQLParser.open_params_return open_params() throws RecognitionException {
        PL_SQLParser.open_params_return retval = new PL_SQLParser.open_params_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal478=null;
        Token char_literal480=null;
        Token char_literal482=null;
        PL_SQLParser.expression_return expression479 = null;

        PL_SQLParser.expression_return expression481 = null;


        Object char_literal478_tree=null;
        Object char_literal480_tree=null;
        Object char_literal482_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:13: ( '(' expression ( ',' expression )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:15: '(' expression ( ',' expression )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal478=(Token)match(input,207,FOLLOW_207_in_open_params7975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal478_tree = (Object)adaptor.create(char_literal478);
            adaptor.addChild(root_0, char_literal478_tree);
            }
            pushFollow(FOLLOW_expression_in_open_params7977);
            expression479=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression479.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:30: ( ',' expression )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:31: ',' expression
            	    {
            	    char_literal480=(Token)match(input,COMMA,FOLLOW_COMMA_in_open_params7980); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal480_tree = (Object)adaptor.create(char_literal480);
            	    adaptor.addChild(root_0, char_literal480_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_open_params7982);
            	    expression481=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);

            char_literal482=(Token)match(input,208,FOLLOW_208_in_open_params7986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal482_tree = (Object)adaptor.create(char_literal482);
            adaptor.addChild(root_0, char_literal482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "open_params"

    public static class sqlcode_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcode_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:1: sqlcode_function : SQLCODE_KEYWORD ;
    public final PL_SQLParser.sqlcode_function_return sqlcode_function() throws RecognitionException {
        PL_SQLParser.sqlcode_function_return retval = new PL_SQLParser.sqlcode_function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SQLCODE_KEYWORD483=null;

        Object SQLCODE_KEYWORD483_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:18: ( SQLCODE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:20: SQLCODE_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            SQLCODE_KEYWORD483=(Token)match(input,SQLCODE_KEYWORD,FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function7993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLCODE_KEYWORD483_tree = (Object)adaptor.create(SQLCODE_KEYWORD483);
            adaptor.addChild(root_0, SQLCODE_KEYWORD483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlcode_function"

    public static class sqlerrm_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerrm_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:1: sqlerrm_function : SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.sqlerrm_function_return sqlerrm_function() throws RecognitionException {
        PL_SQLParser.sqlerrm_function_return retval = new PL_SQLParser.sqlerrm_function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SQLERRM_KEYWORD484=null;
        Token char_literal485=null;
        Token set486=null;
        Token NUMBER_UNSIGNED487=null;
        Token char_literal488=null;

        Object SQLERRM_KEYWORD484_tree=null;
        Object char_literal485_tree=null;
        Object set486_tree=null;
        Object NUMBER_UNSIGNED487_tree=null;
        Object char_literal488_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:18: ( SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:20: SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (Object)adaptor.nil();

            SQLERRM_KEYWORD484=(Token)match(input,SQLERRM_KEYWORD,FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLERRM_KEYWORD484_tree = (Object)adaptor.create(SQLERRM_KEYWORD484);
            adaptor.addChild(root_0, SQLERRM_KEYWORD484_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:36: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==207) ) {
                int LA172_1 = input.LA(2);

                if ( ((LA172_1>=211 && LA172_1<=212)) ) {
                    int LA172_3 = input.LA(3);

                    if ( (LA172_3==NUMBER_UNSIGNED) ) {
                        int LA172_4 = input.LA(4);

                        if ( (LA172_4==208) ) {
                            int LA172_5 = input.LA(5);

                            if ( (synpred260_PL_SQL()) ) {
                                alt172=1;
                            }
                        }
                    }
                }
                else if ( (LA172_1==NUMBER_UNSIGNED) ) {
                    int LA172_4 = input.LA(3);

                    if ( (LA172_4==208) ) {
                        int LA172_5 = input.LA(4);

                        if ( (synpred260_PL_SQL()) ) {
                            alt172=1;
                        }
                    }
                }
            }
            switch (alt172) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal485=(Token)match(input,207,FOLLOW_207_in_sqlerrm_function8003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal485_tree = (Object)adaptor.create(char_literal485);
                    adaptor.addChild(root_0, char_literal485_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:41: ( '+' | '-' )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( ((LA171_0>=211 && LA171_0<=212)) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set486=(Token)input.LT(1);
                            if ( (input.LA(1)>=211 && input.LA(1)<=212) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set486));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER_UNSIGNED487=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED487_tree = (Object)adaptor.create(NUMBER_UNSIGNED487);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED487_tree);
                    }
                    char_literal488=(Token)match(input,208,FOLLOW_208_in_sqlerrm_function8014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal488_tree = (Object)adaptor.create(char_literal488);
                    adaptor.addChild(root_0, char_literal488_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlerrm_function"

    public static class anonymous_block_declare_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block_declare_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:1: anonymous_block_declare_section : DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* ;
    public final PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section() throws RecognitionException {
        PL_SQLParser.anonymous_block_declare_section_return retval = new PL_SQLParser.anonymous_block_declare_section_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DECLARE_KEYWORD489=null;
        PL_SQLParser.variable_declaration_return variable_declaration490 = null;

        PL_SQLParser.function_declaration_return function_declaration491 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration492 = null;


        Object DECLARE_KEYWORD489_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:33: ( DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:35: DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )*
            {
            root_0 = (Object)adaptor.nil();

            DECLARE_KEYWORD489=(Token)match(input,DECLARE_KEYWORD,FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE_KEYWORD489_tree = (Object)adaptor.create(DECLARE_KEYWORD489);
            adaptor.addChild(root_0, DECLARE_KEYWORD489_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:35: ( variable_declaration )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==IDENTIFIER||LA173_0==TYPE_KEYWORD||LA173_0==INTERVAL_KEYWORD||LA173_0==SUBTYPE_KEYWORD||LA173_0==PRAGMA_KEYWORD||LA173_0==CURSOR_KEYWORD||LA173_0==RESULT_KEYWORD) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:36: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_anonymous_block_declare_section8061);
            	    variable_declaration490=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration490.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:35: ( function_declaration | procedure_declaration )*
            loop174:
            do {
                int alt174=3;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==FUNCTION_KEYWORD) ) {
                    alt174=1;
                }
                else if ( (LA174_0==PROCEDURE_KEYWORD) ) {
                    alt174=2;
                }


                switch (alt174) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:36: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_anonymous_block_declare_section8101);
            	    function_declaration491=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration491.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:59: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_anonymous_block_declare_section8105);
            	    procedure_declaration492=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration492.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "anonymous_block_declare_section"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:1: variable_declaration : ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR ;
    public final PL_SQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
        PL_SQLParser.variable_declaration_return retval = new PL_SQLParser.variable_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CONSTANT_KEYWORD497=null;
        Token EXCEPTION_KEYWORD503=null;
        Token PRAGMA_KEYWORD504=null;
        Token AUTONOMOUS_TRANSACTION_KEYWORD505=null;
        Token SERIALLY_REUSABLE_KEYWORD506=null;
        Token EXCEPTION_INIT_KEYWORD507=null;
        Token char_literal508=null;
        Token char_literal510=null;
        Token char_literal512=null;
        Token RESTRICT_REFERENCES_KEYWORD513=null;
        Token char_literal514=null;
        Token char_literal516=null;
        Token char_literal518=null;
        Token SEPARATOR520=null;
        PL_SQLParser.identifier_return identifier493 = null;

        PL_SQLParser.data_type_return data_type494 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part495 = null;

        PL_SQLParser.identifier_return identifier496 = null;

        PL_SQLParser.data_type_return data_type498 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part499 = null;

        PL_SQLParser.subtype_datatype_return subtype_datatype500 = null;

        PL_SQLParser.record_collection_datatype_return record_collection_datatype501 = null;

        PL_SQLParser.identifier_return identifier502 = null;

        PL_SQLParser.expression_return expression509 = null;

        PL_SQLParser.expression_return expression511 = null;

        PL_SQLParser.expression_return expression515 = null;

        PL_SQLParser.expression_return expression517 = null;

        PL_SQLParser.cursor_datatype_return cursor_datatype519 = null;


        Object CONSTANT_KEYWORD497_tree=null;
        Object EXCEPTION_KEYWORD503_tree=null;
        Object PRAGMA_KEYWORD504_tree=null;
        Object AUTONOMOUS_TRANSACTION_KEYWORD505_tree=null;
        Object SERIALLY_REUSABLE_KEYWORD506_tree=null;
        Object EXCEPTION_INIT_KEYWORD507_tree=null;
        Object char_literal508_tree=null;
        Object char_literal510_tree=null;
        Object char_literal512_tree=null;
        Object RESTRICT_REFERENCES_KEYWORD513_tree=null;
        Object char_literal514_tree=null;
        Object char_literal516_tree=null;
        Object char_literal518_tree=null;
        Object SEPARATOR520_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:22: ( ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype )
            int alt178=7;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                switch ( input.LA(2) ) {
                case SOME_TYPES:
                case SCALE_TYPES:
                case SIZE_TYPES:
                case CHAR_TYPES:
                case CHAR_TYPE:
                case RAW_TYPE:
                case TIMESTAMP_TYPE:
                case IDENTIFIER:
                case EXT_IDENTIFIER:
                case INTERVAL_KEYWORD:
                case REF_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt178=1;
                    }
                    break;
                case CONSTANT_KEYWORD:
                    {
                    alt178=2;
                    }
                    break;
                case EXCEPTION_KEYWORD:
                    {
                    alt178=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;
                }

                }
                break;
            case SUBTYPE_KEYWORD:
                {
                alt178=3;
                }
                break;
            case TYPE_KEYWORD:
                {
                alt178=4;
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt178=6;
                }
                break;
            case CURSOR_KEYWORD:
                {
                alt178=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:25: ( identifier data_type ( variable_declaration_part )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:25: ( identifier data_type ( variable_declaration_part )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:26: identifier data_type ( variable_declaration_part )?
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8116);
                    identifier493=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier493.getTree());
                    pushFollow(FOLLOW_data_type_in_variable_declaration8118);
                    data_type494=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type494.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:24: ( variable_declaration_part )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( ((LA175_0>=NOT_NULL_KEYWORD && LA175_0<=DEFAULT_KEYWORD)||LA175_0==227) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                            {
                            pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8144);
                            variable_declaration_part495=variable_declaration_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part495.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8162);
                    identifier496=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier496.getTree());
                    CONSTANT_KEYWORD497=(Token)match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT_KEYWORD497_tree = (Object)adaptor.create(CONSTANT_KEYWORD497);
                    adaptor.addChild(root_0, CONSTANT_KEYWORD497_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_variable_declaration8166);
                    data_type498=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type498.getTree());
                    pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8192);
                    variable_declaration_part499=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part499.getTree());

                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:11: subtype_datatype
                    {
                    pushFollow(FOLLOW_subtype_datatype_in_variable_declaration8205);
                    subtype_datatype500=subtype_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_datatype500.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:11: record_collection_datatype
                    {
                    pushFollow(FOLLOW_record_collection_datatype_in_variable_declaration8217);
                    record_collection_datatype501=record_collection_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_collection_datatype501.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:11: ( identifier EXCEPTION_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:11: ( identifier EXCEPTION_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:12: identifier EXCEPTION_KEYWORD
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8230);
                    identifier502=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier502.getTree());
                    EXCEPTION_KEYWORD503=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTION_KEYWORD503_tree = (Object)adaptor.create(EXCEPTION_KEYWORD503);
                    adaptor.addChild(root_0, EXCEPTION_KEYWORD503_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:10: PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    {
                    PRAGMA_KEYWORD504=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRAGMA_KEYWORD504_tree = (Object)adaptor.create(PRAGMA_KEYWORD504);
                    adaptor.addChild(root_0, PRAGMA_KEYWORD504_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:25: ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    int alt177=4;
                    switch ( input.LA(1) ) {
                    case AUTONOMOUS_TRANSACTION_KEYWORD:
                        {
                        alt177=1;
                        }
                        break;
                    case SERIALLY_REUSABLE_KEYWORD:
                        {
                        alt177=2;
                        }
                        break;
                    case EXCEPTION_INIT_KEYWORD:
                        {
                        alt177=3;
                        }
                        break;
                    case RESTRICT_REFERENCES_KEYWORD:
                        {
                        alt177=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 177, 0, input);

                        throw nvae;
                    }

                    switch (alt177) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:26: AUTONOMOUS_TRANSACTION_KEYWORD
                            {
                            AUTONOMOUS_TRANSACTION_KEYWORD505=(Token)match(input,AUTONOMOUS_TRANSACTION_KEYWORD,FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8258); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AUTONOMOUS_TRANSACTION_KEYWORD505_tree = (Object)adaptor.create(AUTONOMOUS_TRANSACTION_KEYWORD505);
                            adaptor.addChild(root_0, AUTONOMOUS_TRANSACTION_KEYWORD505_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:59: SERIALLY_REUSABLE_KEYWORD
                            {
                            SERIALLY_REUSABLE_KEYWORD506=(Token)match(input,SERIALLY_REUSABLE_KEYWORD,FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8262); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SERIALLY_REUSABLE_KEYWORD506_tree = (Object)adaptor.create(SERIALLY_REUSABLE_KEYWORD506);
                            adaptor.addChild(root_0, SERIALLY_REUSABLE_KEYWORD506_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:8: EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')'
                            {
                            EXCEPTION_INIT_KEYWORD507=(Token)match(input,EXCEPTION_INIT_KEYWORD,FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8273); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXCEPTION_INIT_KEYWORD507_tree = (Object)adaptor.create(EXCEPTION_INIT_KEYWORD507);
                            adaptor.addChild(root_0, EXCEPTION_INIT_KEYWORD507_tree);
                            }
                            char_literal508=(Token)match(input,207,FOLLOW_207_in_variable_declaration8275); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal508_tree = (Object)adaptor.create(char_literal508);
                            adaptor.addChild(root_0, char_literal508_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8277);
                            expression509=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression509.getTree());
                            char_literal510=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8279); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal510_tree = (Object)adaptor.create(char_literal510);
                            adaptor.addChild(root_0, char_literal510_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8281);
                            expression511=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression511.getTree());
                            char_literal512=(Token)match(input,208,FOLLOW_208_in_variable_declaration8283); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal512_tree = (Object)adaptor.create(char_literal512);
                            adaptor.addChild(root_0, char_literal512_tree);
                            }

                            }


                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:8: RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
                            {
                            RESTRICT_REFERENCES_KEYWORD513=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8295); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RESTRICT_REFERENCES_KEYWORD513_tree = (Object)adaptor.create(RESTRICT_REFERENCES_KEYWORD513);
                            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD513_tree);
                            }
                            char_literal514=(Token)match(input,207,FOLLOW_207_in_variable_declaration8297); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal514_tree = (Object)adaptor.create(char_literal514);
                            adaptor.addChild(root_0, char_literal514_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8299);
                            expression515=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:51: ( ',' expression )+
                            int cnt176=0;
                            loop176:
                            do {
                                int alt176=2;
                                int LA176_0 = input.LA(1);

                                if ( (LA176_0==COMMA) ) {
                                    alt176=1;
                                }


                                switch (alt176) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:52: ',' expression
                            	    {
                            	    char_literal516=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8302); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal516_tree = (Object)adaptor.create(char_literal516);
                            	    adaptor.addChild(root_0, char_literal516_tree);
                            	    }
                            	    pushFollow(FOLLOW_expression_in_variable_declaration8304);
                            	    expression517=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression517.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt176 >= 1 ) break loop176;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(176, input);
                                        throw eee;
                                }
                                cnt176++;
                            } while (true);

                            char_literal518=(Token)match(input,208,FOLLOW_208_in_variable_declaration8308); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal518_tree = (Object)adaptor.create(char_literal518);
                            adaptor.addChild(root_0, char_literal518_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:11: cursor_datatype
                    {
                    pushFollow(FOLLOW_cursor_datatype_in_variable_declaration8325);
                    cursor_datatype519=cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_datatype519.getTree());

                    }
                    break;

            }

            SEPARATOR520=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_variable_declaration8336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR520_tree = (Object)adaptor.create(SEPARATOR520);
            adaptor.addChild(root_0, SEPARATOR520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class variable_declaration_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:1: variable_declaration_part : ( NOT_NULL_KEYWORD )? variable_def_part expression ;
    public final PL_SQLParser.variable_declaration_part_return variable_declaration_part() throws RecognitionException {
        PL_SQLParser.variable_declaration_part_return retval = new PL_SQLParser.variable_declaration_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NOT_NULL_KEYWORD521=null;
        PL_SQLParser.variable_def_part_return variable_def_part522 = null;

        PL_SQLParser.expression_return expression523 = null;


        Object NOT_NULL_KEYWORD521_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:27: ( ( NOT_NULL_KEYWORD )? variable_def_part expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:29: ( NOT_NULL_KEYWORD )? variable_def_part expression
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:29: ( NOT_NULL_KEYWORD )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==NOT_NULL_KEYWORD) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_NULL_KEYWORD
                    {
                    NOT_NULL_KEYWORD521=(Token)match(input,NOT_NULL_KEYWORD,FOLLOW_NOT_NULL_KEYWORD_in_variable_declaration_part8343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_NULL_KEYWORD521_tree = (Object)adaptor.create(NOT_NULL_KEYWORD521);
                    adaptor.addChild(root_0, NOT_NULL_KEYWORD521_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_variable_def_part_in_variable_declaration_part8346);
            variable_def_part522=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part522.getTree());
            pushFollow(FOLLOW_expression_in_variable_declaration_part8348);
            expression523=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression523.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_part"

    public static class variable_def_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_def_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:1: variable_def_part : ( ':=' | DEFAULT_KEYWORD );
    public final PL_SQLParser.variable_def_part_return variable_def_part() throws RecognitionException {
        PL_SQLParser.variable_def_part_return retval = new PL_SQLParser.variable_def_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set524=null;

        Object set524_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:19: ( ':=' | DEFAULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set524=(Token)input.LT(1);
            if ( input.LA(1)==DEFAULT_KEYWORD||input.LA(1)==227 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set524));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_def_part"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:1: data_type : ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );
    public final PL_SQLParser.data_type_return data_type() throws RecognitionException {
        PL_SQLParser.data_type_return retval = new PL_SQLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SOME_TYPES525=null;
        Token SCALE_TYPES526=null;
        Token SIZE_TYPES527=null;
        Token RAW_TYPE529=null;
        Token REF_KEYWORD533=null;
        PL_SQLParser.char_types_return char_types528 = null;

        PL_SQLParser.timestamp_type_return timestamp_type530 = null;

        PL_SQLParser.interval_year_type_return interval_year_type531 = null;

        PL_SQLParser.interval_day_type_return interval_day_type532 = null;

        PL_SQLParser.universal_identifier_return universal_identifier534 = null;

        PL_SQLParser.special_datatype_return special_datatype535 = null;


        Object SOME_TYPES525_tree=null;
        Object SCALE_TYPES526_tree=null;
        Object SIZE_TYPES527_tree=null;
        Object RAW_TYPE529_tree=null;
        Object REF_KEYWORD533_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:11: ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype )
            int alt181=10;
            alt181 = dfa181.predict(input);
            switch (alt181) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:13: SOME_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SOME_TYPES525=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_data_type8366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES525_tree = (Object)adaptor.create(SOME_TYPES525);
                    adaptor.addChild(root_0, SOME_TYPES525_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:26: SCALE_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SCALE_TYPES526=(Token)match(input,SCALE_TYPES,FOLLOW_SCALE_TYPES_in_data_type8370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SCALE_TYPES526_tree = (Object)adaptor.create(SCALE_TYPES526);
                    adaptor.addChild(root_0, SCALE_TYPES526_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:40: SIZE_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SIZE_TYPES527=(Token)match(input,SIZE_TYPES,FOLLOW_SIZE_TYPES_in_data_type8374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SIZE_TYPES527_tree = (Object)adaptor.create(SIZE_TYPES527);
                    adaptor.addChild(root_0, SIZE_TYPES527_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:53: char_types
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_types_in_data_type8378);
                    char_types528=char_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_types528.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:66: RAW_TYPE
                    {
                    root_0 = (Object)adaptor.nil();

                    RAW_TYPE529=(Token)match(input,RAW_TYPE,FOLLOW_RAW_TYPE_in_data_type8382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RAW_TYPE529_tree = (Object)adaptor.create(RAW_TYPE529);
                    adaptor.addChild(root_0, RAW_TYPE529_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:13: timestamp_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timestamp_type_in_data_type8398);
                    timestamp_type530=timestamp_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_type530.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:30: interval_year_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interval_year_type_in_data_type8402);
                    interval_year_type531=interval_year_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_year_type531.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:51: interval_day_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interval_day_type_in_data_type8406);
                    interval_day_type532=interval_day_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_day_type532.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:13: ( ( REF_KEYWORD )? universal_identifier )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:13: ( ( REF_KEYWORD )? universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:14: ( REF_KEYWORD )? universal_identifier
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:14: ( REF_KEYWORD )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==REF_KEYWORD) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                            {
                            REF_KEYWORD533=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_data_type8424); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            REF_KEYWORD533_tree = (Object)adaptor.create(REF_KEYWORD533);
                            adaptor.addChild(root_0, REF_KEYWORD533_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_universal_identifier_in_data_type8427);
                    universal_identifier534=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier534.getTree());

                    }


                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:50: special_datatype
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_special_datatype_in_data_type8431);
                    special_datatype535=special_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, special_datatype535.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class char_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:1: char_types : ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? ;
    public final PL_SQLParser.char_types_return char_types() throws RecognitionException {
        PL_SQLParser.char_types_return retval = new PL_SQLParser.char_types_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set536=null;
        Token char_literal537=null;
        Token char_literal538=null;
        Token NUMBER_UNSIGNED539=null;
        Token set540=null;
        Token char_literal541=null;

        Object set536_tree=null;
        Object char_literal537_tree=null;
        Object char_literal538_tree=null;
        Object NUMBER_UNSIGNED539_tree=null;
        Object set540_tree=null;
        Object char_literal541_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:12: ( ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:14: ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            {
            root_0 = (Object)adaptor.nil();

            set536=(Token)input.LT(1);
            if ( (input.LA(1)>=CHAR_TYPES && input.LA(1)<=CHAR_TYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set536));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:39: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==207) ) {
                int LA184_1 = input.LA(2);

                if ( (LA184_1==NUMBER_UNSIGNED||LA184_1==211) ) {
                    alt184=1;
                }
            }
            switch (alt184) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
                    {
                    char_literal537=(Token)match(input,207,FOLLOW_207_in_char_types8447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal537_tree = (Object)adaptor.create(char_literal537);
                    adaptor.addChild(root_0, char_literal537_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:44: ( '+' )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==211) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal538=(Token)match(input,211,FOLLOW_211_in_char_types8449); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal538_tree = (Object)adaptor.create(char_literal538);
                            adaptor.addChild(root_0, char_literal538_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED539=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_char_types8452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED539_tree = (Object)adaptor.create(NUMBER_UNSIGNED539);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED539_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:65: ( CHAR_TYPE | BYTE_TYPE )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( ((LA183_0>=CHAR_TYPE && LA183_0<=BYTE_TYPE)) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set540=(Token)input.LT(1);
                            if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set540));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    char_literal541=(Token)match(input,208,FOLLOW_208_in_char_types8463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal541_tree = (Object)adaptor.create(char_literal541);
                    adaptor.addChild(root_0, char_literal541_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_types"

    public static class timestamp_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:1: timestamp_type : ( TIMESTAMP_TYPE | ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD ) );
    public final PL_SQLParser.timestamp_type_return timestamp_type() throws RecognitionException {
        PL_SQLParser.timestamp_type_return retval = new PL_SQLParser.timestamp_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TIMESTAMP_TYPE542=null;
        Token TIMESTAMP_TYPE543=null;
        Token WITH_KEYWORD544=null;
        Token LOCAL_KEYWORD545=null;
        Token TIME_KEYWORD546=null;
        Token ZONE_KEYWORD547=null;

        Object TIMESTAMP_TYPE542_tree=null;
        Object TIMESTAMP_TYPE543_tree=null;
        Object WITH_KEYWORD544_tree=null;
        Object LOCAL_KEYWORD545_tree=null;
        Object TIME_KEYWORD546_tree=null;
        Object ZONE_KEYWORD547_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:16: ( TIMESTAMP_TYPE | ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD ) )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==TIMESTAMP_TYPE) ) {
                int LA186_1 = input.LA(2);

                if ( (LA186_1==WITH_KEYWORD) ) {
                    alt186=2;
                }
                else if ( (LA186_1==EOF||LA186_1==IDENTIFIER||LA186_1==NOT_OPERATOR||(LA186_1>=NOT_NULL_KEYWORD && LA186_1<=DEFAULT_KEYWORD)||LA186_1==INTERVAL_KEYWORD||LA186_1==IS_KEYWORD||LA186_1==AS_KEYWORD||LA186_1==AUTHID_KEYWORD||(LA186_1>=DETERMINISTIC_KEYWORD && LA186_1<=RESULT_CACHE_KEYWORD)||LA186_1==PRAGMA_KEYWORD||LA186_1==INDEX_KEYWORD||(LA186_1>=FINAL_KEYWORD && LA186_1<=CONSTRUCTOR_KEYWORD)||(LA186_1>=RESULT_KEYWORD && LA186_1<=ORDER_KEYWORD)||(LA186_1>=SEPARATOR && LA186_1<=COMMA)||(LA186_1>=207 && LA186_1<=209)||LA186_1==227) ) {
                    alt186=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 186, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:18: TIMESTAMP_TYPE
                    {
                    root_0 = (Object)adaptor.nil();

                    TIMESTAMP_TYPE542=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMESTAMP_TYPE542_tree = (Object)adaptor.create(TIMESTAMP_TYPE542);
                    adaptor.addChild(root_0, TIMESTAMP_TYPE542_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:5: ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:5: ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:7: TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD
                    {
                    TIMESTAMP_TYPE543=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMESTAMP_TYPE543_tree = (Object)adaptor.create(TIMESTAMP_TYPE543);
                    adaptor.addChild(root_0, TIMESTAMP_TYPE543_tree);
                    }
                    WITH_KEYWORD544=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_timestamp_type8485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD544_tree = (Object)adaptor.create(WITH_KEYWORD544);
                    adaptor.addChild(root_0, WITH_KEYWORD544_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:35: ( LOCAL_KEYWORD )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==LOCAL_KEYWORD) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: LOCAL_KEYWORD
                            {
                            LOCAL_KEYWORD545=(Token)match(input,LOCAL_KEYWORD,FOLLOW_LOCAL_KEYWORD_in_timestamp_type8487); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LOCAL_KEYWORD545_tree = (Object)adaptor.create(LOCAL_KEYWORD545);
                            adaptor.addChild(root_0, LOCAL_KEYWORD545_tree);
                            }

                            }
                            break;

                    }

                    TIME_KEYWORD546=(Token)match(input,TIME_KEYWORD,FOLLOW_TIME_KEYWORD_in_timestamp_type8490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_KEYWORD546_tree = (Object)adaptor.create(TIME_KEYWORD546);
                    adaptor.addChild(root_0, TIME_KEYWORD546_tree);
                    }
                    ZONE_KEYWORD547=(Token)match(input,ZONE_KEYWORD,FOLLOW_ZONE_KEYWORD_in_timestamp_type8492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ZONE_KEYWORD547_tree = (Object)adaptor.create(ZONE_KEYWORD547);
                    adaptor.addChild(root_0, ZONE_KEYWORD547_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestamp_type"

    public static class interval_year_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:1: interval_year_type : INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD ;
    public final PL_SQLParser.interval_year_type_return interval_year_type() throws RecognitionException {
        PL_SQLParser.interval_year_type_return retval = new PL_SQLParser.interval_year_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INTERVAL_KEYWORD548=null;
        Token YEAR_TYPE549=null;
        Token TO_KEYWORD550=null;
        Token MONTH_KEYWORD551=null;

        Object INTERVAL_KEYWORD548_tree=null;
        Object YEAR_TYPE549_tree=null;
        Object TO_KEYWORD550_tree=null;
        Object MONTH_KEYWORD551_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:20: ( INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:22: INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            INTERVAL_KEYWORD548=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_year_type8500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD548_tree = (Object)adaptor.create(INTERVAL_KEYWORD548);
            adaptor.addChild(root_0, INTERVAL_KEYWORD548_tree);
            }
            YEAR_TYPE549=(Token)match(input,YEAR_TYPE,FOLLOW_YEAR_TYPE_in_interval_year_type8502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YEAR_TYPE549_tree = (Object)adaptor.create(YEAR_TYPE549);
            adaptor.addChild(root_0, YEAR_TYPE549_tree);
            }
            TO_KEYWORD550=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_year_type8504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD550_tree = (Object)adaptor.create(TO_KEYWORD550);
            adaptor.addChild(root_0, TO_KEYWORD550_tree);
            }
            MONTH_KEYWORD551=(Token)match(input,MONTH_KEYWORD,FOLLOW_MONTH_KEYWORD_in_interval_year_type8506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MONTH_KEYWORD551_tree = (Object)adaptor.create(MONTH_KEYWORD551);
            adaptor.addChild(root_0, MONTH_KEYWORD551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interval_year_type"

    public static class interval_day_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:1: interval_day_type : INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE ;
    public final PL_SQLParser.interval_day_type_return interval_day_type() throws RecognitionException {
        PL_SQLParser.interval_day_type_return retval = new PL_SQLParser.interval_day_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token INTERVAL_KEYWORD552=null;
        Token DAY_TYPE553=null;
        Token TO_KEYWORD554=null;
        Token SECOND_TYPE555=null;

        Object INTERVAL_KEYWORD552_tree=null;
        Object DAY_TYPE553_tree=null;
        Object TO_KEYWORD554_tree=null;
        Object SECOND_TYPE555_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:19: ( INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:21: INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE
            {
            root_0 = (Object)adaptor.nil();

            INTERVAL_KEYWORD552=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_day_type8513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD552_tree = (Object)adaptor.create(INTERVAL_KEYWORD552);
            adaptor.addChild(root_0, INTERVAL_KEYWORD552_tree);
            }
            DAY_TYPE553=(Token)match(input,DAY_TYPE,FOLLOW_DAY_TYPE_in_interval_day_type8515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DAY_TYPE553_tree = (Object)adaptor.create(DAY_TYPE553);
            adaptor.addChild(root_0, DAY_TYPE553_tree);
            }
            TO_KEYWORD554=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_day_type8517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD554_tree = (Object)adaptor.create(TO_KEYWORD554);
            adaptor.addChild(root_0, TO_KEYWORD554_tree);
            }
            SECOND_TYPE555=(Token)match(input,SECOND_TYPE,FOLLOW_SECOND_TYPE_in_interval_day_type8519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SECOND_TYPE555_tree = (Object)adaptor.create(SECOND_TYPE555);
            adaptor.addChild(root_0, SECOND_TYPE555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interval_day_type"

    public static class subtype_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:1: subtype_datatype : SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_NULL_KEYWORD )? ;
    public final PL_SQLParser.subtype_datatype_return subtype_datatype() throws RecognitionException {
        PL_SQLParser.subtype_datatype_return retval = new PL_SQLParser.subtype_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SUBTYPE_KEYWORD556=null;
        Token IS_KEYWORD558=null;
        Token NOT_NULL_KEYWORD560=null;
        PL_SQLParser.identifier_return identifier557 = null;

        PL_SQLParser.data_type_return data_type559 = null;


        Object SUBTYPE_KEYWORD556_tree=null;
        Object IS_KEYWORD558_tree=null;
        Object NOT_NULL_KEYWORD560_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:18: ( SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:20: SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_NULL_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            SUBTYPE_KEYWORD556=(Token)match(input,SUBTYPE_KEYWORD,FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype8526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBTYPE_KEYWORD556_tree = (Object)adaptor.create(SUBTYPE_KEYWORD556);
            adaptor.addChild(root_0, SUBTYPE_KEYWORD556_tree);
            }
            pushFollow(FOLLOW_identifier_in_subtype_datatype8528);
            identifier557=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier557.getTree());
            IS_KEYWORD558=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_subtype_datatype8530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD558_tree = (Object)adaptor.create(IS_KEYWORD558);
            adaptor.addChild(root_0, IS_KEYWORD558_tree);
            }
            pushFollow(FOLLOW_data_type_in_subtype_datatype8532);
            data_type559=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type559.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:68: ( NOT_NULL_KEYWORD )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==NOT_NULL_KEYWORD) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_NULL_KEYWORD
                    {
                    NOT_NULL_KEYWORD560=(Token)match(input,NOT_NULL_KEYWORD,FOLLOW_NOT_NULL_KEYWORD_in_subtype_datatype8534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_NULL_KEYWORD560_tree = (Object)adaptor.create(NOT_NULL_KEYWORD560);
                    adaptor.addChild(root_0, NOT_NULL_KEYWORD560_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subtype_datatype"

    public static class record_collection_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_collection_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:1: record_collection_datatype : TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) ;
    public final PL_SQLParser.record_collection_datatype_return record_collection_datatype() throws RecognitionException {
        PL_SQLParser.record_collection_datatype_return retval = new PL_SQLParser.record_collection_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TYPE_KEYWORD561=null;
        Token IS_KEYWORD563=null;
        PL_SQLParser.identifier_return identifier562 = null;

        PL_SQLParser.record_datatype_return record_datatype564 = null;

        PL_SQLParser.collection_table_datatype_return collection_table_datatype565 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype566 = null;

        PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype567 = null;


        Object TYPE_KEYWORD561_tree=null;
        Object IS_KEYWORD563_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:28: ( TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:30: TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD561=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_record_collection_datatype8543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD561_tree = (Object)adaptor.create(TYPE_KEYWORD561);
            adaptor.addChild(root_0, TYPE_KEYWORD561_tree);
            }
            pushFollow(FOLLOW_identifier_in_record_collection_datatype8545);
            identifier562=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier562.getTree());
            IS_KEYWORD563=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_record_collection_datatype8547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD563_tree = (Object)adaptor.create(IS_KEYWORD563);
            adaptor.addChild(root_0, IS_KEYWORD563_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:29: ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            int alt188=4;
            switch ( input.LA(1) ) {
            case RECORD_KEYWORD:
                {
                alt188=1;
                }
                break;
            case TABLE_KEYWORD:
                {
                alt188=2;
                }
                break;
            case VARRAY_KEYWORD:
            case VARYING_KEYWORD:
                {
                alt188=3;
                }
                break;
            case REF_KEYWORD:
                {
                alt188=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:30: record_datatype
                    {
                    pushFollow(FOLLOW_record_datatype_in_record_collection_datatype8579);
                    record_datatype564=record_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_datatype564.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:48: collection_table_datatype
                    {
                    pushFollow(FOLLOW_collection_table_datatype_in_record_collection_datatype8583);
                    collection_table_datatype565=collection_table_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_table_datatype565.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:76: collection_varray_datatype
                    {
                    pushFollow(FOLLOW_collection_varray_datatype_in_record_collection_datatype8587);
                    collection_varray_datatype566=collection_varray_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype566.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:29: ref_cursor_datatype
                    {
                    pushFollow(FOLLOW_ref_cursor_datatype_in_record_collection_datatype8619);
                    ref_cursor_datatype567=ref_cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_cursor_datatype567.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_collection_datatype"

    public static class record_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:1: record_datatype : RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' ;
    public final PL_SQLParser.record_datatype_return record_datatype() throws RecognitionException {
        PL_SQLParser.record_datatype_return retval = new PL_SQLParser.record_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RECORD_KEYWORD568=null;
        Token char_literal569=null;
        Token char_literal571=null;
        Token char_literal573=null;
        PL_SQLParser.record_field_declaration_return record_field_declaration570 = null;

        PL_SQLParser.record_field_declaration_return record_field_declaration572 = null;


        Object RECORD_KEYWORD568_tree=null;
        Object char_literal569_tree=null;
        Object char_literal571_tree=null;
        Object char_literal573_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:17: ( RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:19: RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')'
            {
            root_0 = (Object)adaptor.nil();

            RECORD_KEYWORD568=(Token)match(input,RECORD_KEYWORD,FOLLOW_RECORD_KEYWORD_in_record_datatype8627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECORD_KEYWORD568_tree = (Object)adaptor.create(RECORD_KEYWORD568);
            adaptor.addChild(root_0, RECORD_KEYWORD568_tree);
            }
            char_literal569=(Token)match(input,207,FOLLOW_207_in_record_datatype8629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal569_tree = (Object)adaptor.create(char_literal569);
            adaptor.addChild(root_0, char_literal569_tree);
            }
            pushFollow(FOLLOW_record_field_declaration_in_record_datatype8631);
            record_field_declaration570=record_field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration570.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:63: ( ',' record_field_declaration )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:64: ',' record_field_declaration
            	    {
            	    char_literal571=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_datatype8634); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal571_tree = (Object)adaptor.create(char_literal571);
            	    adaptor.addChild(root_0, char_literal571_tree);
            	    }
            	    pushFollow(FOLLOW_record_field_declaration_in_record_datatype8636);
            	    record_field_declaration572=record_field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration572.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);

            char_literal573=(Token)match(input,208,FOLLOW_208_in_record_datatype8640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal573_tree = (Object)adaptor.create(char_literal573);
            adaptor.addChild(root_0, char_literal573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_datatype"

    public static class record_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_field_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:1: record_field_declaration : identifier data_type ( variable_declaration_part )? ;
    public final PL_SQLParser.record_field_declaration_return record_field_declaration() throws RecognitionException {
        PL_SQLParser.record_field_declaration_return retval = new PL_SQLParser.record_field_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.identifier_return identifier574 = null;

        PL_SQLParser.data_type_return data_type575 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part576 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:26: ( identifier data_type ( variable_declaration_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:28: identifier data_type ( variable_declaration_part )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_field_declaration8648);
            identifier574=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier574.getTree());
            pushFollow(FOLLOW_data_type_in_record_field_declaration8650);
            data_type575=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type575.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:49: ( variable_declaration_part )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( ((LA190_0>=NOT_NULL_KEYWORD && LA190_0<=DEFAULT_KEYWORD)||LA190_0==227) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                    {
                    pushFollow(FOLLOW_variable_declaration_part_in_record_field_declaration8652);
                    variable_declaration_part576=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part576.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_field_declaration"

    public static class collection_table_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_table_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:1: collection_table_datatype : TABLE_KEYWORD OF_KEYWORD data_type ( NOT_NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? ;
    public final PL_SQLParser.collection_table_datatype_return collection_table_datatype() throws RecognitionException {
        PL_SQLParser.collection_table_datatype_return retval = new PL_SQLParser.collection_table_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TABLE_KEYWORD577=null;
        Token OF_KEYWORD578=null;
        Token NOT_NULL_KEYWORD580=null;
        Token INDEX_KEYWORD581=null;
        Token BY_KEYWORD582=null;
        PL_SQLParser.data_type_return data_type579 = null;

        PL_SQLParser.data_type_return data_type583 = null;


        Object TABLE_KEYWORD577_tree=null;
        Object OF_KEYWORD578_tree=null;
        Object NOT_NULL_KEYWORD580_tree=null;
        Object INDEX_KEYWORD581_tree=null;
        Object BY_KEYWORD582_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:27: ( TABLE_KEYWORD OF_KEYWORD data_type ( NOT_NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:29: TABLE_KEYWORD OF_KEYWORD data_type ( NOT_NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )?
            {
            root_0 = (Object)adaptor.nil();

            TABLE_KEYWORD577=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_collection_table_datatype8660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD577_tree = (Object)adaptor.create(TABLE_KEYWORD577);
            adaptor.addChild(root_0, TABLE_KEYWORD577_tree);
            }
            OF_KEYWORD578=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_table_datatype8662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD578_tree = (Object)adaptor.create(OF_KEYWORD578);
            adaptor.addChild(root_0, OF_KEYWORD578_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_table_datatype8664);
            data_type579=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type579.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:64: ( NOT_NULL_KEYWORD )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==NOT_NULL_KEYWORD) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_NULL_KEYWORD
                    {
                    NOT_NULL_KEYWORD580=(Token)match(input,NOT_NULL_KEYWORD,FOLLOW_NOT_NULL_KEYWORD_in_collection_table_datatype8666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_NULL_KEYWORD580_tree = (Object)adaptor.create(NOT_NULL_KEYWORD580);
                    adaptor.addChild(root_0, NOT_NULL_KEYWORD580_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:23: ( INDEX_KEYWORD BY_KEYWORD data_type )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==INDEX_KEYWORD) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:24: INDEX_KEYWORD BY_KEYWORD data_type
                    {
                    INDEX_KEYWORD581=(Token)match(input,INDEX_KEYWORD,FOLLOW_INDEX_KEYWORD_in_collection_table_datatype8692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_KEYWORD581_tree = (Object)adaptor.create(INDEX_KEYWORD581);
                    adaptor.addChild(root_0, INDEX_KEYWORD581_tree);
                    }
                    BY_KEYWORD582=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_collection_table_datatype8694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD582_tree = (Object)adaptor.create(BY_KEYWORD582);
                    adaptor.addChild(root_0, BY_KEYWORD582_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_collection_table_datatype8696);
                    data_type583=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type583.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collection_table_datatype"

    public static class collection_varray_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_varray_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:1: collection_varray_datatype : ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_NULL_KEYWORD )? ;
    public final PL_SQLParser.collection_varray_datatype_return collection_varray_datatype() throws RecognitionException {
        PL_SQLParser.collection_varray_datatype_return retval = new PL_SQLParser.collection_varray_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token VARRAY_KEYWORD584=null;
        Token VARYING_KEYWORD585=null;
        Token ARRAY_KEYWORD586=null;
        Token char_literal587=null;
        Token char_literal588=null;
        Token NUMBER_UNSIGNED589=null;
        Token char_literal590=null;
        Token OF_KEYWORD591=null;
        Token NOT_NULL_KEYWORD593=null;
        PL_SQLParser.data_type_return data_type592 = null;


        Object VARRAY_KEYWORD584_tree=null;
        Object VARYING_KEYWORD585_tree=null;
        Object ARRAY_KEYWORD586_tree=null;
        Object char_literal587_tree=null;
        Object char_literal588_tree=null;
        Object NUMBER_UNSIGNED589_tree=null;
        Object char_literal590_tree=null;
        Object OF_KEYWORD591_tree=null;
        Object NOT_NULL_KEYWORD593_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:28: ( ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_NULL_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) )
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==VARRAY_KEYWORD) ) {
                alt193=1;
            }
            else if ( (LA193_0==VARYING_KEYWORD) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }
            switch (alt193) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:31: VARRAY_KEYWORD
                    {
                    VARRAY_KEYWORD584=(Token)match(input,VARRAY_KEYWORD,FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype8706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARRAY_KEYWORD584_tree = (Object)adaptor.create(VARRAY_KEYWORD584);
                    adaptor.addChild(root_0, VARRAY_KEYWORD584_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:49: VARYING_KEYWORD ARRAY_KEYWORD
                    {
                    VARYING_KEYWORD585=(Token)match(input,VARYING_KEYWORD,FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype8711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARYING_KEYWORD585_tree = (Object)adaptor.create(VARYING_KEYWORD585);
                    adaptor.addChild(root_0, VARYING_KEYWORD585_tree);
                    }
                    ARRAY_KEYWORD586=(Token)match(input,ARRAY_KEYWORD,FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype8713); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY_KEYWORD586_tree = (Object)adaptor.create(ARRAY_KEYWORD586);
                    adaptor.addChild(root_0, ARRAY_KEYWORD586_tree);
                    }

                    }


                    }
                    break;

            }

            char_literal587=(Token)match(input,207,FOLLOW_207_in_collection_varray_datatype8746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal587_tree = (Object)adaptor.create(char_literal587);
            adaptor.addChild(root_0, char_literal587_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:34: ( '+' )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==211) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                    {
                    char_literal588=(Token)match(input,211,FOLLOW_211_in_collection_varray_datatype8748); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal588_tree = (Object)adaptor.create(char_literal588);
                    adaptor.addChild(root_0, char_literal588_tree);
                    }

                    }
                    break;

            }

            NUMBER_UNSIGNED589=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype8751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_UNSIGNED589_tree = (Object)adaptor.create(NUMBER_UNSIGNED589);
            adaptor.addChild(root_0, NUMBER_UNSIGNED589_tree);
            }
            char_literal590=(Token)match(input,208,FOLLOW_208_in_collection_varray_datatype8753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal590_tree = (Object)adaptor.create(char_literal590);
            adaptor.addChild(root_0, char_literal590_tree);
            }
            OF_KEYWORD591=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_varray_datatype8755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD591_tree = (Object)adaptor.create(OF_KEYWORD591);
            adaptor.addChild(root_0, OF_KEYWORD591_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_varray_datatype8757);
            data_type592=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type592.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:80: ( NOT_NULL_KEYWORD )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==NOT_NULL_KEYWORD) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_NULL_KEYWORD
                    {
                    NOT_NULL_KEYWORD593=(Token)match(input,NOT_NULL_KEYWORD,FOLLOW_NOT_NULL_KEYWORD_in_collection_varray_datatype8759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_NULL_KEYWORD593_tree = (Object)adaptor.create(NOT_NULL_KEYWORD593);
                    adaptor.addChild(root_0, NOT_NULL_KEYWORD593_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collection_varray_datatype"

    public static class ref_cursor_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:1: ref_cursor_datatype : REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? ;
    public final PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype() throws RecognitionException {
        PL_SQLParser.ref_cursor_datatype_return retval = new PL_SQLParser.ref_cursor_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REF_KEYWORD594=null;
        Token CURSOR_KEYWORD595=null;
        Token RETURN_KEYWORD596=null;
        PL_SQLParser.data_type_return data_type597 = null;


        Object REF_KEYWORD594_tree=null;
        Object CURSOR_KEYWORD595_tree=null;
        Object RETURN_KEYWORD596_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:21: ( REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:23: REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )?
            {
            root_0 = (Object)adaptor.nil();

            REF_KEYWORD594=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_ref_cursor_datatype8767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REF_KEYWORD594_tree = (Object)adaptor.create(REF_KEYWORD594);
            adaptor.addChild(root_0, REF_KEYWORD594_tree);
            }
            CURSOR_KEYWORD595=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype8769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD595_tree = (Object)adaptor.create(CURSOR_KEYWORD595);
            adaptor.addChild(root_0, CURSOR_KEYWORD595_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:50: ( RETURN_KEYWORD data_type )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==RETURN_KEYWORD) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:51: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD596=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype8772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD596_tree = (Object)adaptor.create(RETURN_KEYWORD596);
                    adaptor.addChild(root_0, RETURN_KEYWORD596_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_ref_cursor_datatype8774);
                    data_type597=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type597.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ref_cursor_datatype"

    public static class cursor_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:1: cursor_datatype : CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? ;
    public final PL_SQLParser.cursor_datatype_return cursor_datatype() throws RecognitionException {
        PL_SQLParser.cursor_datatype_return retval = new PL_SQLParser.cursor_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CURSOR_KEYWORD598=null;
        Token RETURN_KEYWORD601=null;
        Token IS_KEYWORD603=null;
        PL_SQLParser.identifier_return identifier599 = null;

        PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration600 = null;

        PL_SQLParser.data_type_return data_type602 = null;

        PL_SQLParser.select_statement_return select_statement604 = null;


        Object CURSOR_KEYWORD598_tree=null;
        Object RETURN_KEYWORD601_tree=null;
        Object IS_KEYWORD603_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:17: ( CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:19: CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )?
            {
            root_0 = (Object)adaptor.nil();

            CURSOR_KEYWORD598=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_cursor_datatype8783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD598_tree = (Object)adaptor.create(CURSOR_KEYWORD598);
            adaptor.addChild(root_0, CURSOR_KEYWORD598_tree);
            }
            pushFollow(FOLLOW_identifier_in_cursor_datatype8785);
            identifier599=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier599.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:45: ( cursor_parameter_declaration )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==207) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: cursor_parameter_declaration
                    {
                    pushFollow(FOLLOW_cursor_parameter_declaration_in_cursor_datatype8787);
                    cursor_parameter_declaration600=cursor_parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter_declaration600.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:19: ( RETURN_KEYWORD data_type )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==RETURN_KEYWORD) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:20: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD601=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_cursor_datatype8809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD601_tree = (Object)adaptor.create(RETURN_KEYWORD601);
                    adaptor.addChild(root_0, RETURN_KEYWORD601_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_cursor_datatype8811);
                    data_type602=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type602.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:47: ( IS_KEYWORD select_statement )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==IS_KEYWORD) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:48: IS_KEYWORD select_statement
                    {
                    IS_KEYWORD603=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_cursor_datatype8816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD603_tree = (Object)adaptor.create(IS_KEYWORD603);
                    adaptor.addChild(root_0, IS_KEYWORD603_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_datatype8818);
                    select_statement604=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement604.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cursor_datatype"

    public static class cursor_parameter_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:1: cursor_parameter_declaration : '(' cursor_parameter ( ',' cursor_parameter )* ')' ;
    public final PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration() throws RecognitionException {
        PL_SQLParser.cursor_parameter_declaration_return retval = new PL_SQLParser.cursor_parameter_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal605=null;
        Token char_literal607=null;
        Token char_literal609=null;
        PL_SQLParser.cursor_parameter_return cursor_parameter606 = null;

        PL_SQLParser.cursor_parameter_return cursor_parameter608 = null;


        Object char_literal605_tree=null;
        Object char_literal607_tree=null;
        Object char_literal609_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:30: ( '(' cursor_parameter ( ',' cursor_parameter )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:32: '(' cursor_parameter ( ',' cursor_parameter )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal605=(Token)match(input,207,FOLLOW_207_in_cursor_parameter_declaration8827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal605_tree = (Object)adaptor.create(char_literal605);
            adaptor.addChild(root_0, char_literal605_tree);
            }
            pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration8829);
            cursor_parameter606=cursor_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter606.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:53: ( ',' cursor_parameter )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:54: ',' cursor_parameter
            	    {
            	    char_literal607=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_parameter_declaration8832); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal607_tree = (Object)adaptor.create(char_literal607);
            	    adaptor.addChild(root_0, char_literal607_tree);
            	    }
            	    pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration8834);
            	    cursor_parameter608=cursor_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter608.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);

            char_literal609=(Token)match(input,208,FOLLOW_208_in_cursor_parameter_declaration8838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal609_tree = (Object)adaptor.create(char_literal609);
            adaptor.addChild(root_0, char_literal609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter_declaration"

    public static class cursor_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:1: cursor_parameter : identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? ;
    public final PL_SQLParser.cursor_parameter_return cursor_parameter() throws RecognitionException {
        PL_SQLParser.cursor_parameter_return retval = new PL_SQLParser.cursor_parameter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token IN_KEYWORD611=null;
        PL_SQLParser.identifier_return identifier610 = null;

        PL_SQLParser.data_type_return data_type612 = null;

        PL_SQLParser.variable_def_part_return variable_def_part613 = null;

        PL_SQLParser.expression_return expression614 = null;


        Object IN_KEYWORD611_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:18: ( identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:20: identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_parameter8846);
            identifier610=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier610.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:31: ( IN_KEYWORD )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==IN_KEYWORD) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
                    {
                    IN_KEYWORD611=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_cursor_parameter8848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD611_tree = (Object)adaptor.create(IN_KEYWORD611);
                    adaptor.addChild(root_0, IN_KEYWORD611_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_cursor_parameter8851);
            data_type612=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type612.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:53: ( variable_def_part expression )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==DEFAULT_KEYWORD||LA202_0==227) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:54: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_cursor_parameter8854);
                    variable_def_part613=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part613.getTree());
                    pushFollow(FOLLOW_expression_in_cursor_parameter8856);
                    expression614=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression614.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter"

    public static class special_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:1: special_datatype : ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) ;
    public final PL_SQLParser.special_datatype_return special_datatype() throws RecognitionException {
        PL_SQLParser.special_datatype_return retval = new PL_SQLParser.special_datatype_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXT_IDENTIFIER616=null;
        Token set617=null;
        PL_SQLParser.identifier_return identifier615 = null;


        Object EXT_IDENTIFIER616_tree=null;
        Object set617_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:18: ( ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:20: ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:20: ( identifier | EXT_IDENTIFIER )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==IDENTIFIER||LA203_0==INTERVAL_KEYWORD||LA203_0==RESULT_KEYWORD) ) {
                alt203=1;
            }
            else if ( (LA203_0==EXT_IDENTIFIER) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:21: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_special_datatype8867);
                    identifier615=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier615.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:34: EXT_IDENTIFIER
                    {
                    EXT_IDENTIFIER616=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_special_datatype8871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER616_tree = (Object)adaptor.create(EXT_IDENTIFIER616);
                    adaptor.addChild(root_0, EXT_IDENTIFIER616_tree);
                    }

                    }
                    break;

            }

            set617=(Token)input.LT(1);
            if ( (input.LA(1)>=ROWTYPE_KEYWORD && input.LA(1)<=LIKE_TYPE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set617));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "special_datatype"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:1: expression : universal_expression ;
    public final PL_SQLParser.expression_return expression() throws RecognitionException {
        PL_SQLParser.expression_return retval = new PL_SQLParser.expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        PL_SQLParser.universal_expression_return universal_expression618 = null;



        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:12: ( universal_expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:14: universal_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_universal_expression_in_expression8890);
            universal_expression618=universal_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression618.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class in_notin_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_notin_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:1: in_notin_expression : ( IN_KEYWORD | NOT_IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) ;
    public final PL_SQLParser.in_notin_expression_return in_notin_expression() throws RecognitionException {
        PL_SQLParser.in_notin_expression_return retval = new PL_SQLParser.in_notin_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set619=null;
        Token char_literal621=null;
        Token char_literal623=null;
        PL_SQLParser.universal_expression_return universal_expression620 = null;

        PL_SQLParser.select_statement_return select_statement622 = null;


        Object set619_tree=null;
        Object char_literal621_tree=null;
        Object char_literal623_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:21: ( ( IN_KEYWORD | NOT_IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:23: ( IN_KEYWORD | NOT_IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) )
            {
            root_0 = (Object)adaptor.nil();

            set619=(Token)input.LT(1);
            if ( input.LA(1)==IN_KEYWORD||input.LA(1)==NOT_IN_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set619));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:23: ( universal_expression | ( '(' select_statement ')' ) )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==NUMBER_UNSIGNED||LA204_0==STRING||(LA204_0>=IDENTIFIER && LA204_0<=EXT_IDENTIFIER)||LA204_0==NOT_OPERATOR||LA204_0==NULL_KEYWORD||(LA204_0>=TRUE_KEYWORD && LA204_0<=FALSE_KEYWORD)||LA204_0==INTERVAL_KEYWORD||LA204_0==REPLACE_KEYWORD||LA204_0==IN_KEYWORD||LA204_0==NOT_IN_KEYWORD||LA204_0==CASE_KEYWORD||(LA204_0>=SQLCODE_KEYWORD && LA204_0<=SQLERRM_KEYWORD)||LA204_0==RESULT_KEYWORD||(LA204_0>=211 && LA204_0<=212)) ) {
                alt204=1;
            }
            else if ( (LA204_0==207) ) {
                int LA204_2 = input.LA(2);

                if ( (LA204_2==SELECT_KEYWORD) ) {
                    alt204=2;
                }
                else if ( (LA204_2==NUMBER_UNSIGNED||LA204_2==STRING||(LA204_2>=IDENTIFIER && LA204_2<=EXT_IDENTIFIER)||LA204_2==NOT_OPERATOR||LA204_2==NULL_KEYWORD||(LA204_2>=TRUE_KEYWORD && LA204_2<=FALSE_KEYWORD)||LA204_2==INTERVAL_KEYWORD||LA204_2==REPLACE_KEYWORD||LA204_2==IN_KEYWORD||LA204_2==NOT_IN_KEYWORD||LA204_2==CASE_KEYWORD||(LA204_2>=SQLCODE_KEYWORD && LA204_2<=SQLERRM_KEYWORD)||LA204_2==RESULT_KEYWORD||LA204_2==207||(LA204_2>=211 && LA204_2<=212)) ) {
                    alt204=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 204, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:25: universal_expression
                    {
                    pushFollow(FOLLOW_universal_expression_in_in_notin_expression8930);
                    universal_expression620=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression620.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:48: ( '(' select_statement ')' )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:48: ( '(' select_statement ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:50: '(' select_statement ')'
                    {
                    char_literal621=(Token)match(input,207,FOLLOW_207_in_in_notin_expression8936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal621_tree = (Object)adaptor.create(char_literal621);
                    adaptor.addChild(root_0, char_literal621_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_in_notin_expression8938);
                    select_statement622=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement622.getTree());
                    char_literal623=(Token)match(input,208,FOLLOW_208_in_in_notin_expression8940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal623_tree = (Object)adaptor.create(char_literal623);
                    adaptor.addChild(root_0, char_literal623_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_notin_expression"

    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );
    public final PL_SQLParser.operator_return operator() throws RecognitionException {
        PL_SQLParser.operator_return retval = new PL_SQLParser.operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal624=null;
        Token char_literal625=null;
        Token char_literal626=null;
        Token char_literal627=null;
        Token string_literal628=null;
        Token string_literal629=null;
        Token string_literal630=null;
        Token char_literal631=null;
        Token string_literal632=null;
        Token char_literal633=null;
        Token char_literal634=null;
        Token string_literal635=null;
        Token string_literal636=null;
        Token char_literal637=null;
        Token string_literal638=null;
        Token string_literal639=null;
        Token string_literal640=null;
        Token AND_OPERATOR641=null;
        Token OR_OPERATOR642=null;
        Token LIKE_KEYWORD643=null;
        Token NOT_OPERATOR644=null;
        Token BETWEEN_KEYWORD645=null;

        Object char_literal624_tree=null;
        Object char_literal625_tree=null;
        Object char_literal626_tree=null;
        Object char_literal627_tree=null;
        Object string_literal628_tree=null;
        Object string_literal629_tree=null;
        Object string_literal630_tree=null;
        Object char_literal631_tree=null;
        Object string_literal632_tree=null;
        Object char_literal633_tree=null;
        Object char_literal634_tree=null;
        Object string_literal635_tree=null;
        Object string_literal636_tree=null;
        Object char_literal637_tree=null;
        Object string_literal638_tree=null;
        Object string_literal639_tree=null;
        Object string_literal640_tree=null;
        Object AND_OPERATOR641_tree=null;
        Object OR_OPERATOR642_tree=null;
        Object LIKE_KEYWORD643_tree=null;
        Object NOT_OPERATOR644_tree=null;
        Object BETWEEN_KEYWORD645_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:10: ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) )
            int alt206=21;
            switch ( input.LA(1) ) {
            case 211:
                {
                alt206=1;
                }
                break;
            case 212:
                {
                alt206=2;
                }
                break;
            case 213:
                {
                alt206=3;
                }
                break;
            case 209:
                {
                alt206=4;
                }
                break;
            case 214:
                {
                alt206=5;
                }
                break;
            case 215:
                {
                alt206=6;
                }
                break;
            case 227:
                {
                alt206=7;
                }
                break;
            case 228:
                {
                alt206=8;
                }
                break;
            case 220:
                {
                alt206=9;
                }
                break;
            case 221:
                {
                alt206=10;
                }
                break;
            case 222:
                {
                alt206=11;
                }
                break;
            case 223:
                {
                alt206=12;
                }
                break;
            case 224:
                {
                alt206=13;
                }
                break;
            case 216:
                {
                alt206=14;
                }
                break;
            case 217:
                {
                alt206=15;
                }
                break;
            case 218:
                {
                alt206=16;
                }
                break;
            case 219:
                {
                alt206=17;
                }
                break;
            case AND_OPERATOR:
                {
                alt206=18;
                }
                break;
            case OR_OPERATOR:
                {
                alt206=19;
                }
                break;
            case LIKE_KEYWORD:
                {
                alt206=20;
                }
                break;
            case NOT_OPERATOR:
            case BETWEEN_KEYWORD:
                {
                alt206=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:12: '+'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal624=(Token)match(input,211,FOLLOW_211_in_operator8949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal624_tree = (Object)adaptor.create(char_literal624);
                    adaptor.addChild(root_0, char_literal624_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:18: '-'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal625=(Token)match(input,212,FOLLOW_212_in_operator8953); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal625_tree = (Object)adaptor.create(char_literal625);
                    adaptor.addChild(root_0, char_literal625_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:24: '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal626=(Token)match(input,213,FOLLOW_213_in_operator8957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal626_tree = (Object)adaptor.create(char_literal626);
                    adaptor.addChild(root_0, char_literal626_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:30: '/'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal627=(Token)match(input,209,FOLLOW_209_in_operator8961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal627_tree = (Object)adaptor.create(char_literal627);
                    adaptor.addChild(root_0, char_literal627_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:36: '**'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal628=(Token)match(input,214,FOLLOW_214_in_operator8965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal628_tree = (Object)adaptor.create(string_literal628);
                    adaptor.addChild(root_0, string_literal628_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:43: '||'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal629=(Token)match(input,215,FOLLOW_215_in_operator8969); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal629_tree = (Object)adaptor.create(string_literal629);
                    adaptor.addChild(root_0, string_literal629_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:50: ':='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal630=(Token)match(input,227,FOLLOW_227_in_operator8973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal630_tree = (Object)adaptor.create(string_literal630);
                    adaptor.addChild(root_0, string_literal630_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:57: '.'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal631=(Token)match(input,228,FOLLOW_228_in_operator8977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal631_tree = (Object)adaptor.create(char_literal631);
                    adaptor.addChild(root_0, char_literal631_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:12: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal632=(Token)match(input,220,FOLLOW_220_in_operator8992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal632_tree = (Object)adaptor.create(string_literal632);
                    adaptor.addChild(root_0, string_literal632_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:19: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal633=(Token)match(input,221,FOLLOW_221_in_operator8996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal633_tree = (Object)adaptor.create(char_literal633);
                    adaptor.addChild(root_0, char_literal633_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:25: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal634=(Token)match(input,222,FOLLOW_222_in_operator9000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal634_tree = (Object)adaptor.create(char_literal634);
                    adaptor.addChild(root_0, char_literal634_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:31: '<='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal635=(Token)match(input,223,FOLLOW_223_in_operator9004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal635_tree = (Object)adaptor.create(string_literal635);
                    adaptor.addChild(root_0, string_literal635_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:38: '>='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal636=(Token)match(input,224,FOLLOW_224_in_operator9008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal636_tree = (Object)adaptor.create(string_literal636);
                    adaptor.addChild(root_0, string_literal636_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:45: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal637=(Token)match(input,216,FOLLOW_216_in_operator9012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal637_tree = (Object)adaptor.create(char_literal637);
                    adaptor.addChild(root_0, char_literal637_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:51: '<>'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal638=(Token)match(input,217,FOLLOW_217_in_operator9016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal638_tree = (Object)adaptor.create(string_literal638);
                    adaptor.addChild(root_0, string_literal638_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:58: '!='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal639=(Token)match(input,218,FOLLOW_218_in_operator9020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal639_tree = (Object)adaptor.create(string_literal639);
                    adaptor.addChild(root_0, string_literal639_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:65: '~='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal640=(Token)match(input,219,FOLLOW_219_in_operator9024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal640_tree = (Object)adaptor.create(string_literal640);
                    adaptor.addChild(root_0, string_literal640_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:12: AND_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_OPERATOR641=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_operator9039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR641_tree = (Object)adaptor.create(AND_OPERATOR641);
                    adaptor.addChild(root_0, AND_OPERATOR641_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:27: OR_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_OPERATOR642=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_operator9043); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR642_tree = (Object)adaptor.create(OR_OPERATOR642);
                    adaptor.addChild(root_0, OR_OPERATOR642_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:12: LIKE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    LIKE_KEYWORD643=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_operator9058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD643_tree = (Object)adaptor.create(LIKE_KEYWORD643);
                    adaptor.addChild(root_0, LIKE_KEYWORD643_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:28: ( NOT_OPERATOR )? BETWEEN_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:28: ( NOT_OPERATOR )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==NOT_OPERATOR) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:29: NOT_OPERATOR
                            {
                            NOT_OPERATOR644=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_operator9064); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR644_tree = (Object)adaptor.create(NOT_OPERATOR644);
                            adaptor.addChild(root_0, NOT_OPERATOR644_tree);
                            }

                            }
                            break;

                    }

                    BETWEEN_KEYWORD645=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_operator9068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD645_tree = (Object)adaptor.create(BETWEEN_KEYWORD645);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD645_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator"

    public static class unary_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:1: unary_op : ( NOT_OPERATOR | '+' | '-' );
    public final PL_SQLParser.unary_op_return unary_op() throws RecognitionException {
        PL_SQLParser.unary_op_return retval = new PL_SQLParser.unary_op_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set646=null;

        Object set646_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:10: ( NOT_OPERATOR | '+' | '-' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set646=(Token)input.LT(1);
            if ( input.LA(1)==NOT_OPERATOR||(input.LA(1)>=211 && input.LA(1)<=212) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set646));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class postfix_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:1: postfix_op : ( IS_NULL_KEYWORD | IS_NOT_NULL_KEYWORD | '(+)' );
    public final PL_SQLParser.postfix_op_return postfix_op() throws RecognitionException {
        PL_SQLParser.postfix_op_return retval = new PL_SQLParser.postfix_op_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set647=null;

        Object set647_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:12: ( IS_NULL_KEYWORD | IS_NOT_NULL_KEYWORD | '(+)' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set647=(Token)input.LT(1);
            if ( (input.LA(1)>=IS_NULL_KEYWORD && input.LA(1)<=IS_NOT_NULL_KEYWORD)||input.LA(1)==225 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set647));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "postfix_op"

    public static class universal_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:1: universal_expression : ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* ;
    public final PL_SQLParser.universal_expression_return universal_expression() throws RecognitionException {
        PL_SQLParser.universal_expression_return retval = new PL_SQLParser.universal_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal653=null;
        Token char_literal655=null;
        PL_SQLParser.unary_op_return unary_op648 = null;

        PL_SQLParser.universal_factor_return universal_factor649 = null;

        PL_SQLParser.postfix_op_return postfix_op650 = null;

        PL_SQLParser.operator_return operator651 = null;

        PL_SQLParser.universal_expression_return universal_expression652 = null;

        PL_SQLParser.select_statement_return select_statement654 = null;


        Object char_literal653_tree=null;
        Object char_literal655_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:22: ( ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:24: ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:24: ( unary_op )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==NOT_OPERATOR||(LA207_0>=211 && LA207_0<=212)) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: unary_op
                    {
                    pushFollow(FOLLOW_unary_op_in_universal_expression9107);
                    unary_op648=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op648.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_factor_in_universal_expression9110);
            universal_factor649=universal_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_factor649.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:51: ( postfix_op )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( ((LA208_0>=IS_NULL_KEYWORD && LA208_0<=IS_NOT_NULL_KEYWORD)||LA208_0==225) ) {
                int LA208_1 = input.LA(2);

                if ( (synpred342_PL_SQL()) ) {
                    alt208=1;
                }
            }
            switch (alt208) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: postfix_op
                    {
                    pushFollow(FOLLOW_postfix_op_in_universal_expression9112);
                    postfix_op650=postfix_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_op650.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            loop210:
            do {
                int alt210=2;
                alt210 = dfa210.predict(input);
                switch (alt210) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:64: operator ( universal_expression | ( '(' select_statement ')' ) )
            	    {
            	    pushFollow(FOLLOW_operator_in_universal_expression9116);
            	    operator651=operator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator651.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:73: ( universal_expression | ( '(' select_statement ')' ) )
            	    int alt209=2;
            	    int LA209_0 = input.LA(1);

            	    if ( (LA209_0==NUMBER_UNSIGNED||LA209_0==STRING||(LA209_0>=IDENTIFIER && LA209_0<=EXT_IDENTIFIER)||LA209_0==NOT_OPERATOR||LA209_0==NULL_KEYWORD||(LA209_0>=TRUE_KEYWORD && LA209_0<=FALSE_KEYWORD)||LA209_0==INTERVAL_KEYWORD||LA209_0==REPLACE_KEYWORD||LA209_0==IN_KEYWORD||LA209_0==NOT_IN_KEYWORD||LA209_0==CASE_KEYWORD||(LA209_0>=SQLCODE_KEYWORD && LA209_0<=SQLERRM_KEYWORD)||LA209_0==RESULT_KEYWORD||(LA209_0>=211 && LA209_0<=212)) ) {
            	        alt209=1;
            	    }
            	    else if ( (LA209_0==207) ) {
            	        int LA209_2 = input.LA(2);

            	        if ( (LA209_2==NUMBER_UNSIGNED||LA209_2==STRING||(LA209_2>=IDENTIFIER && LA209_2<=EXT_IDENTIFIER)||LA209_2==NOT_OPERATOR||LA209_2==NULL_KEYWORD||(LA209_2>=TRUE_KEYWORD && LA209_2<=FALSE_KEYWORD)||LA209_2==INTERVAL_KEYWORD||LA209_2==REPLACE_KEYWORD||LA209_2==IN_KEYWORD||LA209_2==NOT_IN_KEYWORD||LA209_2==CASE_KEYWORD||(LA209_2>=SQLCODE_KEYWORD && LA209_2<=SQLERRM_KEYWORD)||LA209_2==RESULT_KEYWORD||LA209_2==207||(LA209_2>=211 && LA209_2<=212)) ) {
            	            alt209=1;
            	        }
            	        else if ( (LA209_2==SELECT_KEYWORD) ) {
            	            alt209=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 209, 2, input);

            	            throw nvae;
            	        }
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 209, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt209) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:74: universal_expression
            	            {
            	            pushFollow(FOLLOW_universal_expression_in_universal_expression9119);
            	            universal_expression652=universal_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression652.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:97: ( '(' select_statement ')' )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:97: ( '(' select_statement ')' )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:98: '(' select_statement ')'
            	            {
            	            char_literal653=(Token)match(input,207,FOLLOW_207_in_universal_expression9124); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal653_tree = (Object)adaptor.create(char_literal653);
            	            adaptor.addChild(root_0, char_literal653_tree);
            	            }
            	            pushFollow(FOLLOW_select_statement_in_universal_expression9126);
            	            select_statement654=select_statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement654.getTree());
            	            char_literal655=(Token)match(input,208,FOLLOW_208_in_universal_expression9128); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal655_tree = (Object)adaptor.create(char_literal655);
            	            adaptor.addChild(root_0, char_literal655_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "universal_expression"

    public static class universal_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );
    public final PL_SQLParser.universal_factor_return universal_factor() throws RecognitionException {
        PL_SQLParser.universal_factor_return retval = new PL_SQLParser.universal_factor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TRUE_KEYWORD656=null;
        Token FALSE_KEYWORD657=null;
        Token NUMBER_UNSIGNED658=null;
        Token STRING660=null;
        Token NULL_KEYWORD661=null;
        Token char_literal666=null;
        Token char_literal668=null;
        Token char_literal670=null;
        PL_SQLParser.in_notin_expression_return in_notin_expression659 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression662 = null;

        PL_SQLParser.sub_identifier_return sub_identifier663 = null;

        PL_SQLParser.call_statement_param_return call_statement_param664 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression665 = null;

        PL_SQLParser.universal_expression_return universal_expression667 = null;

        PL_SQLParser.universal_expression_return universal_expression669 = null;


        Object TRUE_KEYWORD656_tree=null;
        Object FALSE_KEYWORD657_tree=null;
        Object NUMBER_UNSIGNED658_tree=null;
        Object STRING660_tree=null;
        Object NULL_KEYWORD661_tree=null;
        Object char_literal666_tree=null;
        Object char_literal668_tree=null;
        Object char_literal670_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:18: ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) )
            int alt214=9;
            switch ( input.LA(1) ) {
            case TRUE_KEYWORD:
                {
                alt214=1;
                }
                break;
            case FALSE_KEYWORD:
                {
                alt214=2;
                }
                break;
            case NUMBER_UNSIGNED:
                {
                alt214=3;
                }
                break;
            case IN_KEYWORD:
            case NOT_IN_KEYWORD:
                {
                alt214=4;
                }
                break;
            case STRING:
                {
                alt214=5;
                }
                break;
            case NULL_KEYWORD:
                {
                alt214=6;
                }
                break;
            case CASE_KEYWORD:
                {
                alt214=7;
                }
                break;
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt214=8;
                }
                break;
            case 207:
                {
                alt214=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }

            switch (alt214) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:20: TRUE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    TRUE_KEYWORD656=(Token)match(input,TRUE_KEYWORD,FOLLOW_TRUE_KEYWORD_in_universal_factor9140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE_KEYWORD656_tree = (Object)adaptor.create(TRUE_KEYWORD656);
                    adaptor.addChild(root_0, TRUE_KEYWORD656_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:35: FALSE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    FALSE_KEYWORD657=(Token)match(input,FALSE_KEYWORD,FOLLOW_FALSE_KEYWORD_in_universal_factor9144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE_KEYWORD657_tree = (Object)adaptor.create(FALSE_KEYWORD657);
                    adaptor.addChild(root_0, FALSE_KEYWORD657_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:51: NUMBER_UNSIGNED
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER_UNSIGNED658=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_universal_factor9148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED658_tree = (Object)adaptor.create(NUMBER_UNSIGNED658);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED658_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:20: in_notin_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9171);
                    in_notin_expression659=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression659.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:20: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING660=(Token)match(input,STRING,FOLLOW_STRING_in_universal_factor9194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING660_tree = (Object)adaptor.create(STRING660);
                    adaptor.addChild(root_0, STRING660_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:29: NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL_KEYWORD661=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_universal_factor9198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD661_tree = (Object)adaptor.create(NULL_KEYWORD661);
                    adaptor.addChild(root_0, NULL_KEYWORD661_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:44: case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_universal_factor9202);
                    case_statement_expression662=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression662.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:20: sub_identifier ( call_statement_param ( in_notin_expression )? )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_in_universal_factor9225);
                    sub_identifier663=sub_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier663.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:35: ( call_statement_param ( in_notin_expression )? )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==207) ) {
                        int LA212_1 = input.LA(2);

                        if ( (synpred353_PL_SQL()) ) {
                            alt212=1;
                        }
                    }
                    switch (alt212) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:36: call_statement_param ( in_notin_expression )?
                            {
                            pushFollow(FOLLOW_call_statement_param_in_universal_factor9228);
                            call_statement_param664=call_statement_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement_param664.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:57: ( in_notin_expression )?
                            int alt211=2;
                            alt211 = dfa211.predict(input);
                            switch (alt211) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:58: in_notin_expression
                                    {
                                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9231);
                                    in_notin_expression665=in_notin_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression665.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:21: '(' universal_expression ( ',' universal_expression )* ')'
                    {
                    char_literal666=(Token)match(input,207,FOLLOW_207_in_universal_factor9259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal666_tree = (Object)adaptor.create(char_literal666);
                    adaptor.addChild(root_0, char_literal666_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_universal_factor9261);
                    universal_expression667=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression667.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:46: ( ',' universal_expression )*
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);

                        if ( (LA213_0==COMMA) ) {
                            alt213=1;
                        }


                        switch (alt213) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:47: ',' universal_expression
                    	    {
                    	    char_literal668=(Token)match(input,COMMA,FOLLOW_COMMA_in_universal_factor9264); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal668_tree = (Object)adaptor.create(char_literal668);
                    	    adaptor.addChild(root_0, char_literal668_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_universal_factor9266);
                    	    universal_expression669=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression669.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop213;
                        }
                    } while (true);

                    char_literal670=(Token)match(input,208,FOLLOW_208_in_universal_factor9271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal670_tree = (Object)adaptor.create(char_literal670);
                    adaptor.addChild(root_0, char_literal670_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "universal_factor"

    public static class sub_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:1: sub_identifier : ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function );
    public final PL_SQLParser.sub_identifier_return sub_identifier() throws RecognitionException {
        PL_SQLParser.sub_identifier_return retval = new PL_SQLParser.sub_identifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token REPLACE_KEYWORD672=null;
        PL_SQLParser.sub_identifier_factor_return sub_identifier_factor671 = null;

        PL_SQLParser.sqlcode_function_return sqlcode_function673 = null;

        PL_SQLParser.sqlerrm_function_return sqlerrm_function674 = null;


        Object REPLACE_KEYWORD672_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:16: ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function )
            int alt215=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt215=1;
                }
                break;
            case REPLACE_KEYWORD:
                {
                alt215=2;
                }
                break;
            case SQLCODE_KEYWORD:
                {
                alt215=3;
                }
                break;
            case SQLERRM_KEYWORD:
                {
                alt215=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:18: sub_identifier_factor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_factor_in_sub_identifier9279);
                    sub_identifier_factor671=sub_identifier_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier_factor671.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:42: REPLACE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    REPLACE_KEYWORD672=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sub_identifier9283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD672_tree = (Object)adaptor.create(REPLACE_KEYWORD672);
                    adaptor.addChild(root_0, REPLACE_KEYWORD672_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:60: sqlcode_function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sqlcode_function_in_sub_identifier9287);
                    sqlcode_function673=sqlcode_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcode_function673.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:79: sqlerrm_function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sqlerrm_function_in_sub_identifier9291);
                    sqlerrm_function674=sqlerrm_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlerrm_function674.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sub_identifier"

    public static class sub_identifier_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:1: sub_identifier_factor : universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? ;
    public final PL_SQLParser.sub_identifier_factor_return sub_identifier_factor() throws RecognitionException {
        PL_SQLParser.sub_identifier_factor_return retval = new PL_SQLParser.sub_identifier_factor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token NOTFOUND_KEYWORD676=null;
        Token FOUND_KEYWORD677=null;
        Token ISOPEN_KEYWORD678=null;
        Token ROWCOUNT_KEYWORD679=null;
        PL_SQLParser.universal_identifier_return universal_identifier675 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression680 = null;


        Object NOTFOUND_KEYWORD676_tree=null;
        Object FOUND_KEYWORD677_tree=null;
        Object ISOPEN_KEYWORD678_tree=null;
        Object ROWCOUNT_KEYWORD679_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:23: ( universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:25: universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_universal_identifier_in_sub_identifier_factor9298);
            universal_identifier675=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier675.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            int alt216=6;
            alt216 = dfa216.predict(input);
            switch (alt216) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:47: NOTFOUND_KEYWORD
                    {
                    NOTFOUND_KEYWORD676=(Token)match(input,NOTFOUND_KEYWORD,FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTFOUND_KEYWORD676_tree = (Object)adaptor.create(NOTFOUND_KEYWORD676);
                    adaptor.addChild(root_0, NOTFOUND_KEYWORD676_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:66: FOUND_KEYWORD
                    {
                    FOUND_KEYWORD677=(Token)match(input,FOUND_KEYWORD,FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOUND_KEYWORD677_tree = (Object)adaptor.create(FOUND_KEYWORD677);
                    adaptor.addChild(root_0, FOUND_KEYWORD677_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:25: ISOPEN_KEYWORD
                    {
                    ISOPEN_KEYWORD678=(Token)match(input,ISOPEN_KEYWORD,FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9333); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISOPEN_KEYWORD678_tree = (Object)adaptor.create(ISOPEN_KEYWORD678);
                    adaptor.addChild(root_0, ISOPEN_KEYWORD678_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:42: ROWCOUNT_KEYWORD
                    {
                    ROWCOUNT_KEYWORD679=(Token)match(input,ROWCOUNT_KEYWORD,FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWCOUNT_KEYWORD679_tree = (Object)adaptor.create(ROWCOUNT_KEYWORD679);
                    adaptor.addChild(root_0, ROWCOUNT_KEYWORD679_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:61: in_notin_expression
                    {
                    pushFollow(FOLLOW_in_notin_expression_in_sub_identifier_factor9341);
                    in_notin_expression680=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression680.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sub_identifier_factor"

    public static class call_statement_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_statement_param"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:1: call_statement_param : ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) );
    public final PL_SQLParser.call_statement_param_return call_statement_param() throws RecognitionException {
        PL_SQLParser.call_statement_param_return retval = new PL_SQLParser.call_statement_param_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal681=null;
        Token char_literal683=null;
        Token char_literal685=null;
        Token char_literal686=null;
        Token string_literal688=null;
        Token char_literal690=null;
        Token string_literal692=null;
        Token char_literal694=null;
        PL_SQLParser.universal_expression_return universal_expression682 = null;

        PL_SQLParser.universal_expression_return universal_expression684 = null;

        PL_SQLParser.identifier_return identifier687 = null;

        PL_SQLParser.universal_expression_return universal_expression689 = null;

        PL_SQLParser.identifier_return identifier691 = null;

        PL_SQLParser.universal_expression_return universal_expression693 = null;


        Object char_literal681_tree=null;
        Object char_literal683_tree=null;
        Object char_literal685_tree=null;
        Object char_literal686_tree=null;
        Object string_literal688_tree=null;
        Object char_literal690_tree=null;
        Object string_literal692_tree=null;
        Object char_literal694_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:22: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==207) ) {
                int LA220_1 = input.LA(2);

                if ( (LA220_1==NUMBER_UNSIGNED||LA220_1==STRING||LA220_1==EXT_IDENTIFIER||LA220_1==NOT_OPERATOR||LA220_1==NULL_KEYWORD||(LA220_1>=TRUE_KEYWORD && LA220_1<=FALSE_KEYWORD)||LA220_1==REPLACE_KEYWORD||LA220_1==IN_KEYWORD||LA220_1==NOT_IN_KEYWORD||LA220_1==CASE_KEYWORD||(LA220_1>=SQLCODE_KEYWORD && LA220_1<=SQLERRM_KEYWORD)||(LA220_1>=207 && LA220_1<=208)||(LA220_1>=211 && LA220_1<=212)) ) {
                    alt220=1;
                }
                else if ( (LA220_1==IDENTIFIER||LA220_1==INTERVAL_KEYWORD||LA220_1==RESULT_KEYWORD) ) {
                    int LA220_3 = input.LA(3);

                    if ( ((LA220_3>=AND_OPERATOR && LA220_3<=OR_OPERATOR)||LA220_3==NOT_OPERATOR||LA220_3==IN_KEYWORD||(LA220_3>=IS_NULL_KEYWORD && LA220_3<=NOT_IN_KEYWORD)||LA220_3==LIKE_KEYWORD||LA220_3==BETWEEN_KEYWORD||(LA220_3>=NOTFOUND_KEYWORD && LA220_3<=ROWCOUNT_KEYWORD)||LA220_3==COMMA||(LA220_3>=207 && LA220_3<=209)||(LA220_3>=211 && LA220_3<=225)||(LA220_3>=227 && LA220_3<=228)) ) {
                        alt220=1;
                    }
                    else if ( (LA220_3==PARAM_VALUE) ) {
                        alt220=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
                    {
                    char_literal681=(Token)match(input,207,FOLLOW_207_in_call_statement_param9351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal681_tree = (Object)adaptor.create(char_literal681);
                    adaptor.addChild(root_0, char_literal681_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:29: ( universal_expression ( ',' universal_expression )* )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==NUMBER_UNSIGNED||LA218_0==STRING||(LA218_0>=IDENTIFIER && LA218_0<=EXT_IDENTIFIER)||LA218_0==NOT_OPERATOR||LA218_0==NULL_KEYWORD||(LA218_0>=TRUE_KEYWORD && LA218_0<=FALSE_KEYWORD)||LA218_0==INTERVAL_KEYWORD||LA218_0==REPLACE_KEYWORD||LA218_0==IN_KEYWORD||LA218_0==NOT_IN_KEYWORD||LA218_0==CASE_KEYWORD||(LA218_0>=SQLCODE_KEYWORD && LA218_0<=SQLERRM_KEYWORD)||LA218_0==RESULT_KEYWORD||LA218_0==207||(LA218_0>=211 && LA218_0<=212)) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:30: universal_expression ( ',' universal_expression )*
                            {
                            pushFollow(FOLLOW_universal_expression_in_call_statement_param9354);
                            universal_expression682=universal_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression682.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:51: ( ',' universal_expression )*
                            loop217:
                            do {
                                int alt217=2;
                                int LA217_0 = input.LA(1);

                                if ( (LA217_0==COMMA) ) {
                                    alt217=1;
                                }


                                switch (alt217) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:52: ',' universal_expression
                            	    {
                            	    char_literal683=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param9357); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal683_tree = (Object)adaptor.create(char_literal683);
                            	    adaptor.addChild(root_0, char_literal683_tree);
                            	    }
                            	    pushFollow(FOLLOW_universal_expression_in_call_statement_param9359);
                            	    universal_expression684=universal_expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression684.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop217;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal685=(Token)match(input,208,FOLLOW_208_in_call_statement_param9366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal685_tree = (Object)adaptor.create(char_literal685);
                    adaptor.addChild(root_0, char_literal685_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:25: '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')'
                    {
                    char_literal686=(Token)match(input,207,FOLLOW_207_in_call_statement_param9395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal686_tree = (Object)adaptor.create(char_literal686);
                    adaptor.addChild(root_0, char_literal686_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_call_statement_param9397);
                    identifier687=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier687.getTree());
                    string_literal688=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param9399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal688_tree = (Object)adaptor.create(string_literal688);
                    adaptor.addChild(root_0, string_literal688_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_call_statement_param9401);
                    universal_expression689=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression689.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:66: ( ',' identifier '=>' universal_expression )*
                    loop219:
                    do {
                        int alt219=2;
                        int LA219_0 = input.LA(1);

                        if ( (LA219_0==COMMA) ) {
                            alt219=1;
                        }


                        switch (alt219) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:67: ',' identifier '=>' universal_expression
                    	    {
                    	    char_literal690=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param9404); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal690_tree = (Object)adaptor.create(char_literal690);
                    	    adaptor.addChild(root_0, char_literal690_tree);
                    	    }
                    	    pushFollow(FOLLOW_identifier_in_call_statement_param9406);
                    	    identifier691=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier691.getTree());
                    	    string_literal692=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param9408); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal692_tree = (Object)adaptor.create(string_literal692);
                    	    adaptor.addChild(root_0, string_literal692_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_call_statement_param9410);
                    	    universal_expression693=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression693.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop219;
                        }
                    } while (true);

                    char_literal694=(Token)match(input,208,FOLLOW_208_in_call_statement_param9415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal694_tree = (Object)adaptor.create(char_literal694);
                    adaptor.addChild(root_0, char_literal694_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "call_statement_param"

    public static class exception_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:1: exception_section : EXCEPTION_KEYWORD ( exception_handler )+ ;
    public final PL_SQLParser.exception_section_return exception_section() throws RecognitionException {
        PL_SQLParser.exception_section_return retval = new PL_SQLParser.exception_section_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EXCEPTION_KEYWORD695=null;
        PL_SQLParser.exception_handler_return exception_handler696 = null;


        Object EXCEPTION_KEYWORD695_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:19: ( EXCEPTION_KEYWORD ( exception_handler )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:21: EXCEPTION_KEYWORD ( exception_handler )+
            {
            root_0 = (Object)adaptor.nil();

            EXCEPTION_KEYWORD695=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_exception_section9424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPTION_KEYWORD695_tree = (Object)adaptor.create(EXCEPTION_KEYWORD695);
            adaptor.addChild(root_0, EXCEPTION_KEYWORD695_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:39: ( exception_handler )+
            int cnt221=0;
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==WHEN_KEYWORD) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:40: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_section9427);
            	    exception_handler696=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler696.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt221 >= 1 ) break loop221;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(221, input);
                        throw eee;
                }
                cnt221++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exception_section"

    public static class exception_handler_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:1: exception_handler : WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ ;
    public final PL_SQLParser.exception_handler_return exception_handler() throws RecognitionException {
        PL_SQLParser.exception_handler_return retval = new PL_SQLParser.exception_handler_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN_KEYWORD697=null;
        Token OR_OPERATOR699=null;
        Token THEN_KEYWORD701=null;
        PL_SQLParser.universal_identifier_return universal_identifier698 = null;

        PL_SQLParser.universal_identifier_return universal_identifier700 = null;

        PL_SQLParser.executable_section_return executable_section702 = null;


        Object WHEN_KEYWORD697_tree=null;
        Object OR_OPERATOR699_tree=null;
        Object THEN_KEYWORD701_tree=null;

        try {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:19: ( WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:21: WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+
            {
            root_0 = (Object)adaptor.nil();

            WHEN_KEYWORD697=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exception_handler9436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN_KEYWORD697_tree = (Object)adaptor.create(WHEN_KEYWORD697);
            adaptor.addChild(root_0, WHEN_KEYWORD697_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_exception_handler9438);
            universal_identifier698=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier698.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:55: ( OR_OPERATOR universal_identifier )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==OR_OPERATOR) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:56: OR_OPERATOR universal_identifier
            	    {
            	    OR_OPERATOR699=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_exception_handler9441); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR_OPERATOR699_tree = (Object)adaptor.create(OR_OPERATOR699);
            	    adaptor.addChild(root_0, OR_OPERATOR699_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_exception_handler9443);
            	    universal_identifier700=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier700.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);

            THEN_KEYWORD701=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_exception_handler9467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD701_tree = (Object)adaptor.create(THEN_KEYWORD701);
            adaptor.addChild(root_0, THEN_KEYWORD701_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:34: ( executable_section )+
            int cnt223=0;
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==NUMBER_UNSIGNED||LA223_0==STRING||(LA223_0>=IDENTIFIER && LA223_0<=EXT_IDENTIFIER)||LA223_0==NOT_OPERATOR||LA223_0==BEGIN_KEYWORD||LA223_0==DECLARE_KEYWORD||LA223_0==NULL_KEYWORD||(LA223_0>=TRUE_KEYWORD && LA223_0<=FALSE_KEYWORD)||LA223_0==INTERVAL_KEYWORD||LA223_0==REPLACE_KEYWORD||(LA223_0>=RETURN_KEYWORD && LA223_0<=IN_KEYWORD)||LA223_0==IF_KEYWORD||(LA223_0>=NOT_IN_KEYWORD && LA223_0<=LOOP_KEYWORD)||(LA223_0>=WHILE_KEYWORD && LA223_0<=FOR_KEYWORD)||LA223_0==SELECT_KEYWORD||(LA223_0>=RAISE_KEYWORD && LA223_0<=PRAGMA_KEYWORD)||LA223_0==CASE_KEYWORD||LA223_0==CLOSE_KEYWORD||LA223_0==COMMIT_KEYWORD||LA223_0==CONTINUE_KEYWORD||(LA223_0>=DELETE_KEYWORD && LA223_0<=EXECUTE_KEYWORD)||LA223_0==EXIT_KEYWORD||LA223_0==FETCH_KEYWORD||LA223_0==FORALL_KEYWORD||(LA223_0>=INSERT_KEYWORD && LA223_0<=OPEN_KEYWORD)||(LA223_0>=ROLLBACK_KEYWORD && LA223_0<=SAVEPOINT_KEYWORD)||LA223_0==SET_KEYWORD||(LA223_0>=SQLCODE_KEYWORD && LA223_0<=UPDATE_KEYWORD)||LA223_0==RESULT_KEYWORD||LA223_0==205||LA223_0==207||(LA223_0>=211 && LA223_0<=212)) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:35: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_exception_handler9470);
            	    executable_section702=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section702.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt223 >= 1 ) break loop223;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(223, input);
                        throw eee;
                }
                cnt223++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    // $ANTLR start synpred69_PL_SQL
    public final void synpred69_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:37: ( dml_event_clause_factor )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:37: dml_event_clause_factor
        {
        pushFollow(FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5409);
        dml_event_clause_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_PL_SQL

    // $ANTLR start synpred73_PL_SQL
    public final void synpred73_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:43: ( referencing_clause )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:43: referencing_clause
        {
        pushFollow(FOLLOW_referencing_clause_in_synpred73_PL_SQL5464);
        referencing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_PL_SQL

    // $ANTLR start synpred101_PL_SQL
    public final void synpred101_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:16: ( inheritance_clauses )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:16: inheritance_clauses
        {
        pushFollow(FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5781);
        inheritance_clauses();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_PL_SQL

    // $ANTLR start synpred104_PL_SQL
    public final void synpred104_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:101: ( ',' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:101: ','
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred104_PL_SQL5797); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_PL_SQL

    // $ANTLR start synpred105_PL_SQL
    public final void synpred105_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:38: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
        int alt243=3;
        switch ( input.LA(1) ) {
        case MEMBER_KEYWORD:
        case STATIC_KEYWORD:
            {
            alt243=1;
            }
            break;
        case FINAL_KEYWORD:
        case INSTANTIABLE_KEYWORD:
        case CONSTRUCTOR_KEYWORD:
            {
            alt243=2;
            }
            break;
        case MAP_KEYWORD:
        case ORDER_KEYWORD:
            {
            alt243=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 243, 0, input);

            throw nvae;
        }

        switch (alt243) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:39: subprogram_spec
                {
                pushFollow(FOLLOW_subprogram_spec_in_synpred105_PL_SQL5786);
                subprogram_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:57: constructor_spec
                {
                pushFollow(FOLLOW_constructor_spec_in_synpred105_PL_SQL5790);
                constructor_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:76: map_order_function_spec
                {
                pushFollow(FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5794);
                map_order_function_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:101: ( ',' )?
        int alt244=2;
        int LA244_0 = input.LA(1);

        if ( (LA244_0==COMMA) ) {
            alt244=1;
        }
        switch (alt244) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred105_PL_SQL5797); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_PL_SQL

    // $ANTLR start synpred136_PL_SQL
    public final void synpred136_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:21: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:21: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred136_PL_SQL6308);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_PL_SQL

    // $ANTLR start synpred196_PL_SQL
    public final void synpred196_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:35: ( WHEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:35: WHEN_KEYWORD
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred196_PL_SQL6819); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_PL_SQL

    // $ANTLR start synpred198_PL_SQL
    public final void synpred198_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:65: ( INSERT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:65: INSERT_KEYWORD
        {
        match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_synpred198_PL_SQL6827); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_PL_SQL

    // $ANTLR start synpred199_PL_SQL
    public final void synpred199_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:19: ( UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:19: UPDATE_KEYWORD
        {
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred199_PL_SQL6849); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_PL_SQL

    // $ANTLR start synpred203_PL_SQL
    public final void synpred203_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:35: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:573:35: expression
        {
        pushFollow(FOLLOW_expression_in_synpred203_PL_SQL6916);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_PL_SQL

    // $ANTLR start synpred210_PL_SQL
    public final void synpred210_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:70: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:70: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred210_PL_SQL7020);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_PL_SQL

    // $ANTLR start synpred214_PL_SQL
    public final void synpred214_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:33: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:33: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred214_PL_SQL7150);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_PL_SQL

    // $ANTLR start synpred221_PL_SQL
    public final void synpred221_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:58: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:58: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred221_PL_SQL7278);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_PL_SQL

    // $ANTLR start synpred227_PL_SQL
    public final void synpred227_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:58: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:58: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred227_PL_SQL7394);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_PL_SQL

    // $ANTLR start synpred228_PL_SQL
    public final void synpred228_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:39: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:39: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred228_PL_SQL7415);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_PL_SQL

    // $ANTLR start synpred229_PL_SQL
    public final void synpred229_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred229_PL_SQL7419); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred229_PL_SQL7421);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_PL_SQL

    // $ANTLR start synpred237_PL_SQL
    public final void synpred237_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:31: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:31: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred237_PL_SQL7620); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_PL_SQL

    // $ANTLR start synpred239_PL_SQL
    public final void synpred239_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:58: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:58: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:58: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:59: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred239_PL_SQL7629); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred239_PL_SQL7631); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred239_PL_SQL

    // $ANTLR start synpred240_PL_SQL
    public final void synpred240_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:22: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:22: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred240_PL_SQL7657); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_PL_SQL

    // $ANTLR start synpred242_PL_SQL
    public final void synpred242_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:50: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred242_PL_SQL7666); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred242_PL_SQL7668); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred242_PL_SQL

    // $ANTLR start synpred244_PL_SQL
    public final void synpred244_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred244_PL_SQL7684);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_PL_SQL

    // $ANTLR start synpred245_PL_SQL
    public final void synpred245_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:44: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:44: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred245_PL_SQL7688); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred245_PL_SQL7690);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_PL_SQL

    // $ANTLR start synpred252_PL_SQL
    public final void synpred252_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:52: ( open_params )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:52: open_params
        {
        pushFollow(FOLLOW_open_params_in_synpred252_PL_SQL7930);
        open_params();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_PL_SQL

    // $ANTLR start synpred256_PL_SQL
    public final void synpred256_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:19: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred256_PL_SQL7951); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:31: ( select_statement | STRING | universal_identifier )
        int alt261=3;
        switch ( input.LA(1) ) {
        case SELECT_KEYWORD:
            {
            alt261=1;
            }
            break;
        case STRING:
            {
            alt261=2;
            }
            break;
        case IDENTIFIER:
        case EXT_IDENTIFIER:
        case INTERVAL_KEYWORD:
        case RESULT_KEYWORD:
            {
            alt261=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 261, 0, input);

            throw nvae;
        }

        switch (alt261) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:32: select_statement
                {
                pushFollow(FOLLOW_select_statement_in_synpred256_PL_SQL7954);
                select_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:51: STRING
                {
                match(input,STRING,FOLLOW_STRING_in_synpred256_PL_SQL7958); if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:60: universal_identifier
                {
                pushFollow(FOLLOW_universal_identifier_in_synpred256_PL_SQL7962);
                universal_identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:82: ( using_clause )?
        int alt262=2;
        int LA262_0 = input.LA(1);

        if ( (LA262_0==USING_KEYWORD) ) {
            alt262=1;
        }
        switch (alt262) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred256_PL_SQL7965);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred256_PL_SQL

    // $ANTLR start synpred260_PL_SQL
    public final void synpred260_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:37: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
        {
        match(input,207,FOLLOW_207_in_synpred260_PL_SQL8003); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:41: ( '+' | '-' )?
        int alt263=2;
        int LA263_0 = input.LA(1);

        if ( ((LA263_0>=211 && LA263_0<=212)) ) {
            alt263=1;
        }
        switch (alt263) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=211 && input.LA(1)<=212) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred260_PL_SQL8012); if (state.failed) return ;
        match(input,208,FOLLOW_208_in_synpred260_PL_SQL8014); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_PL_SQL

    // $ANTLR start synpred342_PL_SQL
    public final void synpred342_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:51: ( postfix_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:51: postfix_op
        {
        pushFollow(FOLLOW_postfix_op_in_synpred342_PL_SQL9112);
        postfix_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_PL_SQL

    // $ANTLR start synpred344_PL_SQL
    public final void synpred344_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:64: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:64: operator ( universal_expression | ( '(' select_statement ')' ) )
        {
        pushFollow(FOLLOW_operator_in_synpred344_PL_SQL9116);
        operator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:73: ( universal_expression | ( '(' select_statement ')' ) )
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==NUMBER_UNSIGNED||LA270_0==STRING||(LA270_0>=IDENTIFIER && LA270_0<=EXT_IDENTIFIER)||LA270_0==NOT_OPERATOR||LA270_0==NULL_KEYWORD||(LA270_0>=TRUE_KEYWORD && LA270_0<=FALSE_KEYWORD)||LA270_0==INTERVAL_KEYWORD||LA270_0==REPLACE_KEYWORD||LA270_0==IN_KEYWORD||LA270_0==NOT_IN_KEYWORD||LA270_0==CASE_KEYWORD||(LA270_0>=SQLCODE_KEYWORD && LA270_0<=SQLERRM_KEYWORD)||LA270_0==RESULT_KEYWORD||(LA270_0>=211 && LA270_0<=212)) ) {
            alt270=1;
        }
        else if ( (LA270_0==207) ) {
            int LA270_2 = input.LA(2);

            if ( (LA270_2==SELECT_KEYWORD) ) {
                alt270=2;
            }
            else if ( (LA270_2==NUMBER_UNSIGNED||LA270_2==STRING||(LA270_2>=IDENTIFIER && LA270_2<=EXT_IDENTIFIER)||LA270_2==NOT_OPERATOR||LA270_2==NULL_KEYWORD||(LA270_2>=TRUE_KEYWORD && LA270_2<=FALSE_KEYWORD)||LA270_2==INTERVAL_KEYWORD||LA270_2==REPLACE_KEYWORD||LA270_2==IN_KEYWORD||LA270_2==NOT_IN_KEYWORD||LA270_2==CASE_KEYWORD||(LA270_2>=SQLCODE_KEYWORD && LA270_2<=SQLERRM_KEYWORD)||LA270_2==RESULT_KEYWORD||LA270_2==207||(LA270_2>=211 && LA270_2<=212)) ) {
                alt270=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 270, 0, input);

            throw nvae;
        }
        switch (alt270) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:74: universal_expression
                {
                pushFollow(FOLLOW_universal_expression_in_synpred344_PL_SQL9119);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:97: ( '(' select_statement ')' )
                {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:97: ( '(' select_statement ')' )
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:98: '(' select_statement ')'
                {
                match(input,207,FOLLOW_207_in_synpred344_PL_SQL9124); if (state.failed) return ;
                pushFollow(FOLLOW_select_statement_in_synpred344_PL_SQL9126);
                select_statement();

                state._fsp--;
                if (state.failed) return ;
                match(input,208,FOLLOW_208_in_synpred344_PL_SQL9128); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred344_PL_SQL

    // $ANTLR start synpred352_PL_SQL
    public final void synpred352_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:58: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:58: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred352_PL_SQL9231);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_PL_SQL

    // $ANTLR start synpred353_PL_SQL
    public final void synpred353_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:36: ( call_statement_param ( in_notin_expression )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:36: call_statement_param ( in_notin_expression )?
        {
        pushFollow(FOLLOW_call_statement_param_in_synpred353_PL_SQL9228);
        call_statement_param();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:57: ( in_notin_expression )?
        int alt271=2;
        int LA271_0 = input.LA(1);

        if ( (LA271_0==IN_KEYWORD||LA271_0==NOT_IN_KEYWORD) ) {
            alt271=1;
        }
        switch (alt271) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:58: in_notin_expression
                {
                pushFollow(FOLLOW_in_notin_expression_in_synpred353_PL_SQL9231);
                in_notin_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred353_PL_SQL

    // $ANTLR start synpred363_PL_SQL
    public final void synpred363_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:61: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:61: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred363_PL_SQL9341);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_PL_SQL

    // Delegated rules

    public final boolean synpred105_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA216 dfa216 = new DFA216(this);
    static final String DFA2_eotS =
        "\12\uffff";
    static final String DFA2_eofS =
        "\12\uffff";
    static final String DFA2_minS =
        "\1\100\2\uffff\1\25\1\uffff\1\25\4\uffff";
    static final String DFA2_maxS =
        "\1\u00a9\2\uffff\1\u00c3\1\uffff\1\u00c3\4\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\uffff\1\4\1\3\1\7\1\6";
    static final String DFA2_specialS =
        "\12\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\5\20\uffff\1\1\14\uffff\1\2\70\uffff\1\3\21\uffff\1\4",
            "",
            "",
            "\3\7\61\uffff\1\7\116\uffff\1\6\52\uffff\1\7",
            "",
            "\3\11\61\uffff\1\11\116\uffff\1\10\52\uffff\1\11",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "441:19: ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )";
        }
    }
    static final String DFA120_eotS =
        "\70\uffff";
    static final String DFA120_eofS =
        "\1\1\67\uffff";
    static final String DFA120_minS =
        "\1\4\4\uffff\1\0\26\uffff\2\0\32\uffff";
    static final String DFA120_maxS =
        "\1\u00d4\4\uffff\1\0\26\uffff\2\0\32\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\10\57\uffff\1\1\1\2\1\3\1\5\1\4\1\7\1\6";
    static final String DFA120_specialS =
        "\5\uffff\1\0\26\uffff\1\1\1\2\32\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\1\3\uffff\1\1\14\uffff\2\1\12\uffff\1\1\23\uffff\3\1\1\uffff"+
            "\1\5\1\64\1\1\5\uffff\2\1\6\uffff\1\1\6\uffff\1\1\2\uffff\2"+
            "\1\12\uffff\2\1\4\uffff\3\1\1\uffff\2\1\1\uffff\1\1\4\uffff"+
            "\2\1\1\uffff\3\1\7\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff"+
            "\1\1\1\uffff\1\63\2\uffff\1\1\1\uffff\1\1\6\uffff\1\35\3\1\4"+
            "\uffff\2\1\1\uffff\1\1\6\uffff\2\1\1\34\5\uffff\1\62\25\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\1\61\1\1\1\uffff\1\1\3\uffff\2\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()+ loopback of 563:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_5 = input.LA(1);

                         
                        int index120_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_PL_SQL()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_28 = input.LA(1);

                         
                        int index120_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_PL_SQL()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_29 = input.LA(1);

                         
                        int index120_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_PL_SQL()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\62\uffff";
    static final String DFA124_eofS =
        "\1\17\61\uffff";
    static final String DFA124_minS =
        "\1\4\16\0\43\uffff";
    static final String DFA124_maxS =
        "\1\u00d4\16\0\43\uffff";
    static final String DFA124_acceptS =
        "\17\uffff\1\2\41\uffff\1\1";
    static final String DFA124_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\43\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\4\3\uffff\1\6\14\uffff\1\11\1\12\12\uffff\1\1\23\uffff\3"+
            "\17\1\uffff\1\17\1\uffff\1\7\5\uffff\1\2\1\3\6\uffff\1\11\6"+
            "\uffff\1\13\2\uffff\1\17\1\5\12\uffff\2\17\4\uffff\1\5\2\17"+
            "\1\uffff\2\17\1\uffff\1\17\4\uffff\2\17\1\uffff\1\10\2\17\7"+
            "\uffff\1\17\1\uffff\1\17\1\uffff\2\17\1\uffff\1\17\4\uffff\1"+
            "\17\1\uffff\1\17\6\uffff\4\17\4\uffff\2\17\1\uffff\1\17\6\uffff"+
            "\1\14\1\15\1\17\33\uffff\1\11\4\uffff\1\17\4\uffff\1\17\1\uffff"+
            "\1\16\3\uffff\2\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "573:35: ( expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_2 = input.LA(1);

                         
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_5 = input.LA(1);

                         
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_6 = input.LA(1);

                         
                        int index124_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_7 = input.LA(1);

                         
                        int index124_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_9 = input.LA(1);

                         
                        int index124_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_10 = input.LA(1);

                         
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_11 = input.LA(1);

                         
                        int index124_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA124_12 = input.LA(1);

                         
                        int index124_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA124_13 = input.LA(1);

                         
                        int index124_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA124_14 = input.LA(1);

                         
                        int index124_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred203_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index124_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\62\uffff";
    static final String DFA150_eofS =
        "\1\2\61\uffff";
    static final String DFA150_minS =
        "\1\4\1\0\60\uffff";
    static final String DFA150_maxS =
        "\1\u00d4\1\0\60\uffff";
    static final String DFA150_acceptS =
        "\2\uffff\1\2\56\uffff\1\1";
    static final String DFA150_specialS =
        "\1\uffff\1\0\60\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\2\3\uffff\1\2\14\uffff\2\2\12\uffff\1\2\23\uffff\3\2\1\uffff"+
            "\1\1\1\uffff\1\2\5\uffff\2\2\6\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2\12\uffff\2\2\4\uffff\3\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
            "\2\2\1\uffff\3\2\7\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\6\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\1\2\6\uffff\3\2\33\uffff\1\2\4\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "597:51: ( WHEN_KEYWORD expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\23\uffff";
    static final String DFA156_eofS =
        "\23\uffff";
    static final String DFA156_minS =
        "\1\4\1\0\21\uffff";
    static final String DFA156_maxS =
        "\1\u00d4\1\0\21\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\2\1\4\15\uffff\1\1\1\3";
    static final String DFA156_specialS =
        "\1\uffff\1\0\21\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\3\3\uffff\1\3\14\uffff\2\3\12\uffff\1\3\31\uffff\1\3\5\uffff"+
            "\2\3\6\uffff\1\3\6\uffff\1\3\3\uffff\1\1\1\2\17\uffff\1\3\16"+
            "\uffff\1\3\60\uffff\2\3\34\uffff\1\3\13\uffff\1\3\3\uffff\2"+
            "\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "605:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_PL_SQL()) ) {s = 17;}

                        else if ( (synpred239_PL_SQL()) ) {s = 18;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\23\uffff";
    static final String DFA157_eofS =
        "\23\uffff";
    static final String DFA157_minS =
        "\1\4\1\0\21\uffff";
    static final String DFA157_maxS =
        "\1\u00d4\1\0\21\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\1\4\15\uffff\1\1\1\3";
    static final String DFA157_specialS =
        "\1\uffff\1\0\21\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\3\3\uffff\1\3\14\uffff\2\3\12\uffff\1\3\31\uffff\1\3\5\uffff"+
            "\2\3\6\uffff\1\3\6\uffff\1\3\3\uffff\1\1\1\2\17\uffff\1\3\16"+
            "\uffff\1\3\60\uffff\2\3\34\uffff\1\3\13\uffff\1\3\3\uffff\2"+
            "\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "606:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_PL_SQL()) ) {s = 17;}

                        else if ( (synpred242_PL_SQL()) ) {s = 18;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA160_eotS =
        "\62\uffff";
    static final String DFA160_eofS =
        "\1\2\61\uffff";
    static final String DFA160_minS =
        "\1\4\1\0\60\uffff";
    static final String DFA160_maxS =
        "\1\u00d4\1\0\60\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\2\56\uffff\1\1";
    static final String DFA160_specialS =
        "\1\uffff\1\0\60\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\2\3\uffff\1\2\14\uffff\2\2\12\uffff\1\2\23\uffff\3\2\1\uffff"+
            "\1\1\1\uffff\1\2\5\uffff\2\2\6\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2\12\uffff\2\2\4\uffff\3\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
            "\2\2\1\uffff\3\2\7\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\6\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\1\2\6\uffff\3\2\33\uffff\1\2\4\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "607:43: ( WHEN_KEYWORD expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\62\uffff";
    static final String DFA166_eofS =
        "\1\2\61\uffff";
    static final String DFA166_minS =
        "\1\4\1\0\60\uffff";
    static final String DFA166_maxS =
        "\1\u00d4\1\0\60\uffff";
    static final String DFA166_acceptS =
        "\2\uffff\1\2\56\uffff\1\1";
    static final String DFA166_specialS =
        "\1\uffff\1\0\60\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\3\uffff\1\2\14\uffff\2\2\12\uffff\1\2\23\uffff\3\2\1\uffff"+
            "\1\2\1\uffff\1\2\5\uffff\2\2\6\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2\12\uffff\2\2\4\uffff\3\2\1\uffff\2\2\1\uffff\1\2\4\uffff"+
            "\2\2\1\uffff\3\2\7\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\6\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\1\2\6\uffff\3\2\33\uffff\1\2\4\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\1\3\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "618:52: ( open_params )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_1 = input.LA(1);

                         
                        int index166_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA169_eotS =
        "\62\uffff";
    static final String DFA169_eofS =
        "\1\2\61\uffff";
    static final String DFA169_minS =
        "\1\4\1\0\60\uffff";
    static final String DFA169_maxS =
        "\1\u00d4\1\0\60\uffff";
    static final String DFA169_acceptS =
        "\2\uffff\1\2\56\uffff\1\1";
    static final String DFA169_specialS =
        "\1\uffff\1\0\60\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\2\3\uffff\1\2\14\uffff\2\2\12\uffff\1\2\23\uffff\3\2\1\uffff"+
            "\1\2\1\uffff\1\2\5\uffff\2\2\6\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2\12\uffff\2\2\4\uffff\3\2\1\uffff\1\2\1\1\1\uffff\1\2\4"+
            "\uffff\2\2\1\uffff\3\2\7\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\6\uffff\4\2\4\uffff\2\2\1"+
            "\uffff\1\2\6\uffff\3\2\33\uffff\1\2\4\uffff\1\2\4\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "619:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_PL_SQL()) ) {s = 49;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\16\uffff";
    static final String DFA181_eofS =
        "\7\uffff\1\10\1\uffff\2\10\3\uffff";
    static final String DFA181_minS =
        "\1\11\6\uffff\1\21\1\uffff\2\25\3\uffff";
    static final String DFA181_maxS =
        "\1\u00c3\6\uffff\1\u00e3\1\uffff\2\u00e3\3\uffff";
    static final String DFA181_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\2\uffff\1\7\1\10"+
        "\1\12";
    static final String DFA181_specialS =
        "\16\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\1\1\2\1\3\2\4\1\uffff\1\5\1\6\4\uffff\1\11\1\12\62\uffff"+
            "\1\7\65\uffff\1\10\103\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\14\2\uffff\1\10\13\uffff\1\10\32\uffff\2\10\2\15\11"+
            "\uffff\1\10\3\uffff\1\10\4\uffff\1\10\4\uffff\1\10\2\uffff\4"+
            "\10\24\uffff\1\10\6\uffff\1\10\102\uffff\6\10\1\uffff\3\10\2"+
            "\uffff\2\10\5\uffff\3\10\21\uffff\1\10",
            "",
            "\1\10\13\uffff\1\10\32\uffff\2\10\2\15\11\uffff\1\10\3\uffff"+
            "\1\10\4\uffff\1\10\4\uffff\1\10\2\uffff\4\10\24\uffff\1\10\6"+
            "\uffff\1\10\102\uffff\6\10\1\uffff\3\10\2\uffff\2\10\5\uffff"+
            "\3\10\21\uffff\1\10",
            "\1\10\13\uffff\1\10\32\uffff\2\10\2\15\11\uffff\1\10\3\uffff"+
            "\1\10\4\uffff\1\10\4\uffff\1\10\2\uffff\4\10\24\uffff\1\10\6"+
            "\uffff\1\10\102\uffff\6\10\1\uffff\3\10\2\uffff\2\10\5\uffff"+
            "\3\10\21\uffff\1\10",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "642:1: data_type : ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );";
        }
    }
    static final String DFA210_eotS =
        "\31\uffff";
    static final String DFA210_eofS =
        "\1\1\30\uffff";
    static final String DFA210_minS =
        "\1\4\1\uffff\26\0\1\uffff";
    static final String DFA210_maxS =
        "\1\u00e4\1\uffff\26\0\1\uffff";
    static final String DFA210_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA210_specialS =
        "\2\uffff\1\23\1\1\1\16\1\4\1\12\1\10\1\25\1\15\1\11\1\5\1\20\1"+
        "\17\1\2\1\6\1\21\1\14\1\3\1\7\1\22\1\0\1\13\1\24\1\uffff}>";
    static final String[] DFA210_transitionS = {
            "\1\1\1\3\1\25\1\uffff\1\1\14\uffff\2\1\12\uffff\1\5\23\uffff"+
            "\3\1\1\uffff\3\1\5\uffff\2\1\6\uffff\1\1\6\uffff\1\1\2\uffff"+
            "\2\1\12\uffff\2\1\2\uffff\5\1\1\uffff\2\1\1\uffff\1\1\3\uffff"+
            "\1\26\2\1\1\uffff\3\1\7\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1"+
            "\uffff\4\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\27\1\uffff\4\1"+
            "\3\uffff\3\1\1\uffff\1\1\6\uffff\3\1\33\uffff\1\1\4\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\2\1\1\7\1\uffff\1\2\1\4\1\6\1\10\1\11"+
            "\1\21\1\22\1\23\1\24\1\14\1\15\1\16\1\17\1\20\2\1\1\12\1\13",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
    static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
    static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
    static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
    static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
    static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
    static final short[][] DFA210_transition;

    static {
        int numStates = DFA210_transitionS.length;
        DFA210_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
        }
    }

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;
        }
        public String getDescription() {
            return "()* loopback of 680:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA210_21 = input.LA(1);

                         
                        int index210_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_21);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA210_3 = input.LA(1);

                         
                        int index210_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA210_14 = input.LA(1);

                         
                        int index210_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA210_18 = input.LA(1);

                         
                        int index210_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA210_5 = input.LA(1);

                         
                        int index210_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA210_11 = input.LA(1);

                         
                        int index210_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA210_15 = input.LA(1);

                         
                        int index210_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA210_19 = input.LA(1);

                         
                        int index210_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA210_7 = input.LA(1);

                         
                        int index210_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA210_10 = input.LA(1);

                         
                        int index210_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA210_6 = input.LA(1);

                         
                        int index210_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA210_22 = input.LA(1);

                         
                        int index210_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA210_17 = input.LA(1);

                         
                        int index210_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA210_9 = input.LA(1);

                         
                        int index210_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_9);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA210_4 = input.LA(1);

                         
                        int index210_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_4);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA210_13 = input.LA(1);

                         
                        int index210_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_13);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA210_12 = input.LA(1);

                         
                        int index210_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_12);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA210_16 = input.LA(1);

                         
                        int index210_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_16);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA210_20 = input.LA(1);

                         
                        int index210_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA210_2 = input.LA(1);

                         
                        int index210_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_2);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA210_23 = input.LA(1);

                         
                        int index210_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA210_8 = input.LA(1);

                         
                        int index210_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_PL_SQL()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index210_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 210, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA211_eotS =
        "\121\uffff";
    static final String DFA211_eofS =
        "\1\2\120\uffff";
    static final String DFA211_minS =
        "\1\4\1\0\117\uffff";
    static final String DFA211_maxS =
        "\1\u00e4\1\0\117\uffff";
    static final String DFA211_acceptS =
        "\2\uffff\1\2\115\uffff\1\1";
    static final String DFA211_specialS =
        "\1\uffff\1\0\117\uffff}>";
    static final String[] DFA211_transitionS = {
            "\3\2\1\uffff\1\2\14\uffff\2\2\12\uffff\1\2\23\uffff\3\2\1\uffff"+
            "\3\2\5\uffff\2\2\6\uffff\1\2\6\uffff\1\2\2\uffff\1\2\1\1\12"+
            "\uffff\2\2\2\uffff\2\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff"+
            "\3\2\1\uffff\3\2\7\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\3\uffff"+
            "\3\2\1\uffff\1\2\6\uffff\3\2\33\uffff\1\2\4\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\3\2\1\uffff\22\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "684:57: ( in_notin_expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA211_1 = input.LA(1);

                         
                        int index211_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_PL_SQL()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index211_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA216_eotS =
        "\125\uffff";
    static final String DFA216_eofS =
        "\1\6\124\uffff";
    static final String DFA216_minS =
        "\1\4\4\uffff\1\0\117\uffff";
    static final String DFA216_maxS =
        "\1\u00e4\4\uffff\1\0\117\uffff";
    static final String DFA216_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\6\115\uffff\1\5";
    static final String DFA216_specialS =
        "\5\uffff\1\0\117\uffff}>";
    static final String[] DFA216_transitionS = {
            "\3\6\1\uffff\1\6\14\uffff\2\6\12\uffff\1\6\23\uffff\3\6\1\uffff"+
            "\3\6\5\uffff\2\6\6\uffff\1\6\6\uffff\1\6\2\uffff\1\6\1\5\12"+
            "\uffff\2\6\2\uffff\2\6\1\5\2\6\1\uffff\2\6\1\uffff\1\6\3\uffff"+
            "\3\6\1\uffff\3\6\7\uffff\1\6\1\uffff\1\6\1\uffff\2\6\1\uffff"+
            "\4\6\1\uffff\1\6\1\uffff\2\6\3\uffff\1\6\1\uffff\4\6\3\uffff"+
            "\3\6\1\uffff\1\6\1\uffff\1\1\1\2\1\3\1\4\1\uffff\3\6\33\uffff"+
            "\1\6\4\uffff\2\6\3\uffff\1\6\1\uffff\3\6\1\uffff\22\6",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "687:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_5 = input.LA(1);

                         
                        int index216_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_PL_SQL()) ) {s = 84;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index216_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_source_element_in_grammar_def4538 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_grammar_def4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_source_element4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_replace_part_in_source_element4574 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020001L,0x0000020000800000L});
    public static final BitSet FOLLOW_function_declaration_in_source_element4596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_source_element4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_spec_in_source_element4604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_source_element4608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trigger_declaration_in_source_element4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_declaration_in_source_element4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_body_declaration_in_source_element4639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_universal_identifier4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_universal_identifier4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_label4674 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_label4676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_label4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_KEYWORD_in_create_replace_part4685 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_create_replace_part4688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_create_replace_part4690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_as_is_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_parameter_declaration4737 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4739 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4741 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4744 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4746 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000198208L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration4776 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4778 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4780 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4783 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800010200L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4786 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_parameter_declaration4794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_function_spec4801 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_name_in_function_spec4819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_parameter_declaration_in_function_spec4821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_function_spec4840 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_function_spec4842 = new BitSet(new long[]{0x0000000000000002L,0x000000003C800000L});
    public static final BitSet FOLLOW_invoker_clause_in_function_spec4844 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_function_spec_add2_in_function_spec4848 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_universal_identifier_in_function_name4857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_function_name4861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_KEYWORD_in_invoker_clause4868 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_set_in_invoker_clause4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_spec_add20 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec4911 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec4913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_parameter_declaration_in_procedure_spec4915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_invoker_clause_in_procedure_spec4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_procedure_name4943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_procedure_name4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_procedure_declaration4956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_function_procedure_body4963 = new BitSet(new long[]{0x0020000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_function_procedure_body4966 = new BitSet(new long[]{0x0020000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_declaration_in_function_procedure_body4971 = new BitSet(new long[]{0x0020000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_declaration_in_function_procedure_body4975 = new BitSet(new long[]{0x0020000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_function_procedure_body4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_spec4986 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_package_spec_name_in_package_spec4988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L});
    public static final BitSet FOLLOW_invoker_clause_in_package_spec4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_package_spec4993 = new BitSet(new long[]{0x0040000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_package_spec5011 = new BitSet(new long[]{0x0040000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_spec_in_package_spec5017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_procedure_spec_in_package_spec5021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5024 = new BitSet(new long[]{0x0040000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_spec5045 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000020108L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec5047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020100L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_package_spec5053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec_name5061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_spec_name5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_body5072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_package_body5074 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_package_body_name_in_package_body5076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_package_body5078 = new BitSet(new long[]{0x0060000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_package_body5096 = new BitSet(new long[]{0x0060000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_declaration_in_package_body5100 = new BitSet(new long[]{0x0060000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_declaration_in_package_body5104 = new BitSet(new long[]{0x0060000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_package_body5124 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_package_body5127 = new BitSet(new long[]{0x08E0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_body5148 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000020108L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body5150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020100L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_body5153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_package_body5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body_name5164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_body_name5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5175 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_declaration5177 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_trigger_type_in_trigger_declaration5179 = new BitSet(new long[]{0x0AA0000200600110L,0xC05616E0C01B1207L,0x00E000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_follows_part_in_trigger_declaration5181 = new BitSet(new long[]{0x0AA0000200600110L,0xC05616E0C01B1207L,0x00C000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_trigger_part_in_trigger_declaration5184 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_anonymous_block_in_trigger_declaration5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_trigger_name5215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_trigger_name5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_KEYWORD_in_follows_part5226 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_follows_part5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_trigger_part5235 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_trigger_part5245 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_trigger_part5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_KEYWORD_in_trigger_type5257 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000008000080004L,0x0000000000000008L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_KEYWORD_in_trigger_type5286 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000008000080004L,0x0000000000000008L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTEAD_KEYWORD_in_trigger_type5315 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_trigger_type5317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000080004L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_trigger_type5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000080004L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger5348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger5350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_non_dml_trigger5359 = new BitSet(new long[]{0x0000000000200040L,0x0000000000000200L,0x0000200000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_non_dml_trigger5361 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000200000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_non_dml_trigger5366 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_non_dml_trigger5368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_dml_event_clause5377 = new BitSet(new long[]{0x0000000000000040L,0x0100000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_dml_event_clause5381 = new BitSet(new long[]{0x0000000000000040L,0x0100000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5407 = new BitSet(new long[]{0x0000000000000040L,0x0100000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5409 = new BitSet(new long[]{0x0000000000000040L,0x0100000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_dml_event_clause5434 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000208000080004L});
    public static final BitSet FOLLOW_dml_event_clause_part_in_dml_event_clause5462 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_referencing_clause_in_dml_event_clause5464 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_dml_event_clause5488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_EACH_KEYWORD_in_dml_event_clause5490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_dml_event_clause5492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5501 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_factor5504 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000000208L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_clause_factor5506 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_dml_event_clause_part5516 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000400000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5520 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5522 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_dml_event_clause_part5524 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_part5526 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_part5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0007000000000000L});
    public static final BitSet FOLLOW_set_in_referencing_clause5542 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040200L,0x0003000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_referencing_clause5575 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0003000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_OLD_KEYWORD_in_referencing_clause5579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0007000000000000L});
    public static final BitSet FOLLOW_NEW_KEYWORD_in_referencing_clause5583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0007000000000000L});
    public static final BitSet FOLLOW_identifier_in_referencing_clause5587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0007000000000000L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_spec_declaration5598 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_spec_name_in_type_spec_declaration5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0900000000000000L});
    public static final BitSet FOLLOW_type_oid_part_in_type_spec_declaration5602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0900000000000000L});
    public static final BitSet FOLLOW_invoker_clause_in_type_spec_declaration5605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0900000000000000L});
    public static final BitSet FOLLOW_type_spec_types_in_type_spec_declaration5608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020100L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_spec_declaration5634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_type_spec_declaration5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_spec_name5645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_spec_name5649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OID_KEYWORD_in_type_oid_part5656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_type_oid_part5658 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_type_oid_part5660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_type_oid_part5662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_type_spec_types5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_type_spec_types5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_in_type_spec_types5678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_object_type5687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_OBJECT_KEYWORD_in_object_type5689 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x3000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_UNDER_KEYWORD_in_object_type5695 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_object_type5697 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x3000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_object_type_part_in_object_type5715 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x3000000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_object_type5737 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_object_type_part5754 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_object_type_part5757 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_object_type_part5759 = new BitSet(new long[]{0x0000000200200000L,0x0000000000000200L,0xF000000000000000L,0x000000000001023BL});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5761 = new BitSet(new long[]{0x0000000200200000L,0x0000000000000200L,0xF000000000000000L,0x000000000001003BL});
    public static final BitSet FOLLOW_element_spec_in_object_type_part5767 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0xF000000000000000L,0x0000000000010233L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5769 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0xF000000000000000L,0x0000000000010033L});
    public static final BitSet FOLLOW_208_in_object_type_part5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_element_spec5781 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0xF000000000000000L,0x0000000000000033L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec5786 = new BitSet(new long[]{0x0000000200000002L,0x0004000000000000L,0xF000000000000000L,0x0000000000000233L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec5790 = new BitSet(new long[]{0x0000000200000002L,0x0004000000000000L,0xF000000000000000L,0x0000000000000233L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec5794 = new BitSet(new long[]{0x0000000200000002L,0x0004000000000000L,0xF000000000000000L,0x0000000000000233L});
    public static final BitSet FOLLOW_COMMA_in_element_spec5797 = new BitSet(new long[]{0x0000000200000002L,0x0004000000000000L,0xF000000000000000L,0x0000000000000033L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec5817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_pragma_clause5829 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_pragma_clause5831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause5834 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_pragma_clause5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_pragma_clause5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_spec5864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec5867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec5870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_spec5872 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec5893 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_spec5895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_constructor_spec_part5903 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part5906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part5908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_constructor_spec_part5910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part5912 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_constructor_spec_part5941 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec_part5943 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000010208L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part5945 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000010008L});
    public static final BitSet FOLLOW_208_in_constructor_spec_part5950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_constructor_spec_part5976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_constructor_spec_part5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RESULT_KEYWORD_in_constructor_spec_part5982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_spec5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec5998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_inheritance_clauses6010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x7000000000000000L});
    public static final BitSet FOLLOW_set_in_inheritance_clauses6013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_varray_type6030 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_varray_type6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_nested_table_type6039 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_nested_table_type6041 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_nested_table_type6043 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_nested_table_type6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_body_declaration6052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_type_body_declaration6054 = new BitSet(new long[]{0x0000000000E00000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_body_name_in_type_body_declaration6056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_type_body_declaration6058 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L,0xB000000000000000L,0x0000000000000033L});
    public static final BitSet FOLLOW_subprogram_declaration_in_type_body_declaration6086 = new BitSet(new long[]{0x0040000000000000L,0x0000000040020000L,0xB000000000000000L,0x0000000000000233L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_declaration6090 = new BitSet(new long[]{0x0040000000000000L,0x0000000040020000L,0xB000000000000000L,0x0000000000000233L});
    public static final BitSet FOLLOW_COMMA_in_type_body_declaration6093 = new BitSet(new long[]{0x0040000000000000L,0x0000000040020000L,0xB000000000000000L,0x0000000000000033L});
    public static final BitSet FOLLOW_END_KEYWORD_in_type_body_declaration6099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020100L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_body_declaration6125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_type_body_declaration6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_body_name6136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_body_name6140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_declaration6147 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L,0xB000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_function_declaration_in_subprogram_declaration6182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_subprogram_declaration6186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprogram_declaration6190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_declaration6198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6206 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_constructor_declaration6234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_declaration6236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_constructor_declaration6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration6246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_function_declaration_in_map_order_func_declaration6256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_block6264 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_block6279 = new BitSet(new long[]{0x09E0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_exception_section_in_block6295 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_block6306 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000020108L});
    public static final BitSet FOLLOW_universal_identifier_in_block6308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020100L});
    public static final BitSet FOLLOW_SEPARATOR_in_block6311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_block6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_declare_section_in_anonymous_block6330 = new BitSet(new long[]{0x0020000000200000L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_anonymous_block6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_executable_section6340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_section6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_executable_case_section6353 = new BitSet(new long[]{0x0800000200600110L,0xC05616E080190206L,0x000000E05878142DL,0x000000000018A008L});
    public static final BitSet FOLLOW_statements_in_executable_case_section6357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEPARATOR_in_executable_case_section6359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_case_section6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement6373 = new BitSet(new long[]{0x0800000200600110L,0xC05616E080190206L,0x000000E05878142DL,0x000000000018A008L});
    public static final BitSet FOLLOW_statements_in_statement6377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEPARATOR_in_statement6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statements6386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statements6390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statements6394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statements6411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_loop_statement_in_statements6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_statements6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statements6436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statements6440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statements6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_statements6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statements6465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_statement_in_statements6469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statements6473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_statements6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statements6494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_inline_statement_in_statements6498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_statements6515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_sql_statements6522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_sql_statements6526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_sql_statements6530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_sql_statements6534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_sql_statements6555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_sql_statements6559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_sql_statements6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_sql_statements6584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_sql_statements6588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_statement_in_sql_statements6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sql_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THE_REST_in_sql_not_parsed6685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_KEYWORD_in_select_statement6712 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000200000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_select_statement6716 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0000200000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_select_statement6720 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0000200000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_select_statement6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_select_statement6728 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0000200000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMIT_KEYWORD_in_commit_statement6738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_commit_statement6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_delete_statement6748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_delete_statement6751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_insert_statement6760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_insert_statement6763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LOCK_KEYWORD_in_lock_table_statement6772 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_lock_table_statement6774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_lock_table_statement6777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_MERGE_KEYWORD_in_merge_statement6786 = new BitSet(new long[]{0x0600000000000000L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_merge_statement6789 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_merge_statement6793 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_merge_statement6815 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_merge_statement6819 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_merge_statement6823 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_merge_statement6827 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_merge_statement6849 = new BitSet(new long[]{0x0600000000000002L,0x0000000000000000L,0x0000208000080080L,0x0000000000001000L});
    public static final BitSet FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement6858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_rollback_statement6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement6868 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_savepoint_statement6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_set_transaction_statement6877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement6879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_set_transaction_statement6882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_update_statement6891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_update_statement6894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_GOTO_KEYWORD_in_goto_statement6905 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_goto_statement6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_return_statement6914 = new BitSet(new long[]{0x0800000200600112L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_return_statement6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement6924 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_if_statement6926 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement6928 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_if_statement6931 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E7C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_ELSIF_KEYWORD_in_if_statement6951 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_if_statement6953 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement6955 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_if_statement6958 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E7C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_if_statement6980 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_if_statement6983 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E4C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_ENDIF_KEYWORD_in_if_statement7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7011 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_loop_statement7014 = new BitSet(new long[]{0x08A0000200600110L,0xC05617E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_END_LOOP_KEYWORD_in_loop_statement7018 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_loop_statement7020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_KEYWORD_in_while_loop_statement7028 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_while_loop_statement7030 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_loop_statement_in_while_loop_statement7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_for_loop_statement7039 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_for_loop_statement7041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_for_loop_statement7043 = new BitSet(new long[]{0x0800000200600110L,0x8010082000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7045 = new BitSet(new long[]{0x0800000200600110L,0x8010082000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement7072 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_for_loop_statement7075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_for_loop_statement_part7117 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement_part7119 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_loop_statement_in_for_loop_statement_part7121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement17128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_cursor_for_loop_statement27135 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_for_loop_statement27137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_cursor_for_loop_statement27139 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement27141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_KEYWORD_in_raise_statement7148 = new BitSet(new long[]{0x0000000000600002L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_raise_statement7150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_case_statement_expression7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_expression_in_case_statement_expression7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7169 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7171 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7199 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7201 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7203 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7206 = new BitSet(new long[]{0x0AE0000200600110L,0xC07616E1C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7237 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7240 = new BitSet(new long[]{0x08E0000200600110L,0xC07616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_END_KEYWORD_in_simple_case_statement_expression7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_END_CASE_KEYWORD_in_simple_case_statement_expression7276 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_simple_case_statement_expression7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7288 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7315 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_searched_case_statement_expression7317 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7319 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7322 = new BitSet(new long[]{0x0AE0000200600110L,0xC07616E1C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7353 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7356 = new BitSet(new long[]{0x08E0000200600110L,0xC07616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_END_KEYWORD_in_searched_case_statement_expression7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_END_CASE_KEYWORD_in_searched_case_statement_expression7392 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_searched_case_statement_expression7394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_KEYWORD_in_close_statement7404 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_close_statement7406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_KEYWORD_in_continue_statement7413 = new BitSet(new long[]{0x0200000000200002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_continue_statement7415 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_continue_statement7419 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_continue_statement7421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement7430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement7432 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_execute_immediate_statement7434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x00000000040001C0L});
    public static final BitSet FOLLOW_set_in_execute_immediate_statement7466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate_statement7506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement7510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate_statement7544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_into_clause7553 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause7555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_into_clause7558 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause7560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause7569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause7571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause7573 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause7603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_bulk_collect_into_clause7606 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause7608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_using_clause7617 = new BitSet(new long[]{0x0800000200600110L,0x8010002000310206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7620 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7624 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7631 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_using_clause7636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_using_clause7654 = new BitSet(new long[]{0x0800000200600110L,0x8010002000310206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7657 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7661 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7668 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_using_clause7673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EXIT_KEYWORD_in_exit_statement7682 = new BitSet(new long[]{0x0200000000200002L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_exit_statement7684 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exit_statement7688 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_exit_statement7690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FETCH_KEYWORD_in_fetch_statement7699 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_fetch_statement7701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_fetch_statement7724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LIMIT_KEYWORD_in_fetch_statement7727 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_fetch_statement7729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_clause_in_fetch_statement7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_KEYWORD_in_forall_statement7745 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_forall_statement7747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_forall_statement7749 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000018000L,0x0000000000188008L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement7751 = new BitSet(new long[]{0x0000000000000000L,0x4000100000000000L,0x0000008058382004L});
    public static final BitSet FOLLOW_SAVE_KEYWORD_in_forall_statement7773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement7775 = new BitSet(new long[]{0x0000000000000000L,0x4000100000000000L,0x0000008058380004L});
    public static final BitSet FOLLOW_sql_statements_in_forall_statement7779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_226_in_bounds_clause7789 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDICES_KEYWORD_in_bounds_clause7813 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause7815 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause7817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_bounds_clause7837 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7839 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_bounds_clause7841 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_bounds_clause7868 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause7870 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause7872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement7881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement7883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_pragma_inline_statement7911 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement7913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_pragma_inline_statement7915 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement7917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_pragma_inline_statement7919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_KEYWORD_in_open_statement7926 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement7928 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_open_params_in_open_statement7930 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_open_statement7951 = new BitSet(new long[]{0x0000000000600100L,0x8000100000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_select_statement_in_open_statement7954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_in_open_statement7958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement7962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_using_clause_in_open_statement7965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_open_params7975 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_open_params7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_open_params7980 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_open_params7982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_open_params7986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_sqlerrm_function8003 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_sqlerrm_function8005 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_sqlerrm_function8014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8023 = new BitSet(new long[]{0x0000000000200002L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_anonymous_block_declare_section8061 = new BitSet(new long[]{0x0000000000200002L,0x0004000040021201L,0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_declaration_in_anonymous_block_declare_section8101 = new BitSet(new long[]{0x0000000000000002L,0x0000000040020000L});
    public static final BitSet FOLLOW_procedure_declaration_in_anonymous_block_declare_section8105 = new BitSet(new long[]{0x0000000000000002L,0x0000000040020000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8116 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8118 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000100L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8164 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8166 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_subtype_datatype_in_variable_declaration8205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_record_collection_datatype_in_variable_declaration8217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8230 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8255 = new BitSet(new long[]{0x0000000000000000L,0x0008400000000000L,0x0000000022000000L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_variable_declaration8275 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8279 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_variable_declaration8283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_variable_declaration8297 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8302 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_variable_declaration8308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_cursor_datatype_in_variable_declaration8325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEPARATOR_in_variable_declaration8336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_NULL_KEYWORD_in_variable_declaration_part8343 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variable_def_part_in_variable_declaration_part8346 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_variable_declaration_part8348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variable_def_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_data_type8366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCALE_TYPES_in_data_type8370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_TYPES_in_data_type8374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_types_in_data_type8378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_TYPE_in_data_type8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_type_in_data_type8398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_data_type8402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_data_type8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_data_type8424 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_data_type8427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_datatype_in_data_type8431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_char_types8438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_char_types8447 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_char_types8449 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_char_types8452 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_set_in_char_types8454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_char_types8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_timestamp_type8485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_LOCAL_KEYWORD_in_timestamp_type8487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_TIME_KEYWORD_in_timestamp_type8490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZONE_KEYWORD_in_timestamp_type8492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_year_type8500 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_YEAR_TYPE_in_interval_year_type8502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_year_type8504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MONTH_KEYWORD_in_interval_year_type8506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_day_type8513 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_DAY_TYPE_in_interval_day_type8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_day_type8517 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_SECOND_TYPE_in_interval_day_type8519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype8526 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_subtype_datatype8528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_subtype_datatype8530 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_subtype_datatype8532 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_NOT_NULL_KEYWORD_in_subtype_datatype8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_record_collection_datatype8543 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_record_collection_datatype8545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_record_collection_datatype8547 = new BitSet(new long[]{0x0000000000000000L,0x9880000000004000L});
    public static final BitSet FOLLOW_record_datatype_in_record_collection_datatype8579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_table_datatype_in_record_collection_datatype8583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_record_collection_datatype8587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_cursor_datatype_in_record_collection_datatype8619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_KEYWORD_in_record_datatype8627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_record_datatype8629 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype8631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_record_datatype8634 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype8636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_record_datatype8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_field_declaration8648 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_record_field_declaration8650 = new BitSet(new long[]{0x3000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_record_field_declaration8652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_collection_table_datatype8660 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_table_datatype8662 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype8664 = new BitSet(new long[]{0x1000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_NOT_NULL_KEYWORD_in_collection_table_datatype8666 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_INDEX_KEYWORD_in_collection_table_datatype8692 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_collection_table_datatype8694 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype8696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype8706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype8711 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype8713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_collection_varray_datatype8746 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_collection_varray_datatype8748 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype8751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_collection_varray_datatype8753 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_varray_datatype8755 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_collection_varray_datatype8757 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_NOT_NULL_KEYWORD_in_collection_varray_datatype8759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_ref_cursor_datatype8767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype8769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype8772 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_ref_cursor_datatype8774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_cursor_datatype8783 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_cursor_datatype8785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000082000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_cursor_parameter_declaration_in_cursor_datatype8787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000082000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_cursor_datatype8809 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_cursor_datatype8811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_cursor_datatype8816 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_datatype8818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_cursor_parameter_declaration8827 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration8829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_cursor_parameter_declaration8832 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration8834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_cursor_parameter_declaration8838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_parameter8846 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_cursor_parameter8848 = new BitSet(new long[]{0x000000000061BE00L,0x8000000000300200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_data_type_in_cursor_parameter8851 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variable_def_part_in_cursor_parameter8854 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_cursor_parameter8856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_special_datatype8867 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_special_datatype8871 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_set_in_special_datatype8874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_expression8890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_in_notin_expression8897 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_in_notin_expression8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_in_notin_expression8936 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_select_statement_in_in_notin_expression8938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_in_notin_expression8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_operator8949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_operator8953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_operator8957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_operator8961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_operator8965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_operator8969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_operator8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_operator8977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_operator8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_operator8996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_operator9000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_operator9004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_operator9008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_operator9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_operator9016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_operator9020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_operator9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_operator9039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_operator9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_operator9058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_operator9064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_operator9068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_postfix_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_universal_expression9107 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_factor_in_universal_expression9110 = new BitSet(new long[]{0x0000000200000062L,0x0001001800000000L,0x0000000000020000L,0x0000001BFFFA0000L});
    public static final BitSet FOLLOW_postfix_op_in_universal_expression9112 = new BitSet(new long[]{0x0000000200000062L,0x0001000000000000L,0x0000000000020000L,0x00000019FFFA0000L});
    public static final BitSet FOLLOW_operator_in_universal_expression9116 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_universal_expression9119 = new BitSet(new long[]{0x0000000200000062L,0x0001000000000000L,0x0000000000020000L,0x00000019FFFA0000L});
    public static final BitSet FOLLOW_207_in_universal_expression9124 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_select_statement_in_universal_expression9126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_universal_expression9128 = new BitSet(new long[]{0x0000000200000062L,0x0001000000000000L,0x0000000000020000L,0x00000019FFFA0000L});
    public static final BitSet FOLLOW_TRUE_KEYWORD_in_universal_factor9140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_KEYWORD_in_universal_factor9144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_universal_factor9148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_universal_factor9194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_universal_factor9198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_universal_factor9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_in_universal_factor9225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_call_statement_param_in_universal_factor9228 = new BitSet(new long[]{0x0000000000000002L,0x0000002000100000L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_universal_factor9259 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_universal_factor9264 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_universal_factor9271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_factor_in_sub_identifier9279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sub_identifier9283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcode_function_in_sub_identifier9287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlerrm_function_in_sub_identifier9291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sub_identifier_factor9298 = new BitSet(new long[]{0x0000000000000002L,0x0000002000100000L,0x0000000F00000000L});
    public static final BitSet FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_sub_identifier_factor9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_call_statement_param9351 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000198008L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param9357 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_call_statement_param9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_call_statement_param9395 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param9397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param9399 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param9404 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param9406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param9408 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_208_in_call_statement_param9415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_exception_section9424 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_section9427 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exception_handler9436 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler9438 = new BitSet(new long[]{0x0400000000000040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_exception_handler9441 = new BitSet(new long[]{0x0000000000600000L,0x8000000000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler9443 = new BitSet(new long[]{0x0400000000000040L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_exception_handler9467 = new BitSet(new long[]{0x08A0000200600110L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_executable_section_in_exception_handler9470 = new BitSet(new long[]{0x08A0000200600112L,0xC05616E0C01B1207L,0x000000E05878142FL,0x000000000018A008L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_clause_in_synpred73_PL_SQL5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred104_PL_SQL5797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_synpred105_PL_SQL5786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constructor_spec_in_synpred105_PL_SQL5790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_PL_SQL5797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred136_PL_SQL6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred196_PL_SQL6819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_synpred198_PL_SQL6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred199_PL_SQL6849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred203_PL_SQL6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred210_PL_SQL7020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred214_PL_SQL7150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred221_PL_SQL7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred227_PL_SQL7394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred228_PL_SQL7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred229_PL_SQL7419 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_synpred229_PL_SQL7421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred237_PL_SQL7620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred239_PL_SQL7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred239_PL_SQL7631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred240_PL_SQL7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred242_PL_SQL7666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred242_PL_SQL7668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred244_PL_SQL7684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred245_PL_SQL7688 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_expression_in_synpred245_PL_SQL7690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_params_in_synpred252_PL_SQL7930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred256_PL_SQL7951 = new BitSet(new long[]{0x0000000000600100L,0x8000100000000200L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_select_statement_in_synpred256_PL_SQL7954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_in_synpred256_PL_SQL7958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred256_PL_SQL7962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_using_clause_in_synpred256_PL_SQL7965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_synpred260_PL_SQL8003 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_set_in_synpred260_PL_SQL8005 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred260_PL_SQL8012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_synpred260_PL_SQL8014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_op_in_synpred342_PL_SQL9112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred344_PL_SQL9116 = new BitSet(new long[]{0x0800000200600110L,0x8010002000110206L,0x0000006000000000L,0x0000000000188008L});
    public static final BitSet FOLLOW_universal_expression_in_synpred344_PL_SQL9119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_synpred344_PL_SQL9124 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred344_PL_SQL9126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_synpred344_PL_SQL9128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred352_PL_SQL9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_statement_param_in_synpred353_PL_SQL9228 = new BitSet(new long[]{0x0000000000000002L,0x0000002000100000L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred353_PL_SQL9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred363_PL_SQL9341 = new BitSet(new long[]{0x0000000000000002L});

}