// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g 2011-05-09 11:39:06
package org.netbeans.modules.languages.pl_sql.antlr;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class PL_SQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER_UNSIGNED", "AND_OPERATOR", "OR_OPERATOR", "NOT_OPEARTOR", "BLOCK_COMMENT", "LINE_COMMENT", "WHITESPACE", "STRING", "SOME_TYPES", "SCALE_TYPES", "SIZE_TYPES", "CHAR_TYPES", "CHAR_TYPE", "BYTE_TYPE", "RAW_TYPE", "TIMESTAMP_TYPE", "YEAR_TYPE", "DAY_TYPE", "SECOND_TYPE", "KEYWORD", "IDENTIFIER", "EXT_IDENTIFIER", "ALIAS", "SEPARATOR", "COMMA", "PARAM_VALUE", "BEGIN_KEYWORD", "END_KEYWORD", "DECLARE_KEYWORD", "EXCEPTION_KEYWORD", "WHEN_KEYWORD", "THEN_KEYWORD", "NULL_KEYWORD", "DEFAULT_KEYWORD", "ROWTYPE_KEYWORD", "LIKE_TYPE_KEYWORD", "TYPE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "CONSTANT_KEYWORD", "WITH_KEYWORD", "LOCAL_KEYWORD", "TIME_KEYWORD", "ZONE_KEYWORD", "INTERVAL_KEYWORD", "TO_KEYWORD", "MONTH_KEYWORD", "SUBTYPE_KEYWORD", "IS_KEYWORD", "RECORD_KEYWORD", "CREATE_KEYWORD", "REPLACE_KEYWORD", "FUNCTION_KEYWORD", "AS_KEYWORD", "RETURN_KEYWORD", "IN_KEYWORD", "OUT_KEYWORD", "NOCOPY_KEYWORD", "AUTHID_KEYWORD", "CURRENT_USER_KEYWORD", "DEFINER_KEYWORD", "DETERMINISTIC_KEYWORD", "PARALLEL_ENABLED_KEYWORD", "PIPELINED_KEYWORD", "RESULT_CACHE_KEYWORD", "PROCEDURE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "ELSIF_KEYWORD", "GOTO_KEYWORD", "LOOP_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "REVERSE_KEYWORD", "SELECT_KEYWORD", "COUNT_KEYWORD", "EXCEPTION_INIT_KEYWORD", "LIKE_KEYWORD", "RAISE_KEYWORD", "PRAGMA_KEYWORD", "AUTONOMOUS_TRANSACTION_KEYWORD", "CASE_KEYWORD", "CLOSE_KEYWORD", "TABLE_KEYWORD", "OF_KEYWORD", "INDEX_KEYWORD", "BY_KEYWORD", "VARRAY_KEYWORD", "VARYING_KEYWORD", "ARRAY_KEYWORD", "COMMIT_KEYWORD", "REF_KEYWORD", "CONTINUE_KEYWORD", "CURSOR_KEYWORD", "DELETE_KEYWORD", "EXECUTE_KEYWORD", "IMMEDIATE_KEYWORD", "EXIT_KEYWORD", "INTO_KEYWORD", "USING_KEYWORD", "BULK_KEYWORD", "COLLECT_KEYWORD", "FETCH_KEYWORD", "LIMIT_KEYWORD", "FORALL_KEYWORD", "SAVE_KEYWORD", "EXCEPTIONS_KEYWORD", "INDICES_KEYWORD", "VALUES_KEYWORD", "BETWEEN_KEYWORD", "INLINE_KEYWORD", "INSERT_KEYWORD", "LOCK_KEYWORD", "MERGE_KEYWORD", "OPEN_KEYWORD", "PACKAGE_KEYWORD", "BODY_KEYWORD", "RESTRICT_REFERENCES_KEYWORD", "RETURNING_KEYWORD", "ROLLBACK_KEYWORD", "SAVEPOINT_KEYWORD", "SERIALLY_REUSABLE_KEYWORD", "SET_KEYWORD", "TRANSACTION_KEYWORD", "NOTFOUND_KEYWORD", "FOUND_KEYWORD", "ISOPEN_KEYWORD", "ROWCOUNT_KEYWORD", "SQLCODE_KEYWORD", "SQLERRM_KEYWORD", "UPDATE_KEYWORD", "EXISTS_KEYWORD", "TRIGGER_KEYWORD", "BEFORE_KEYWORD", "AFTER_KEYWORD", "INSTEAD_KEYWORD", "ON_KEYWORD", "NESTED_KEYWORD", "REFERENCING_KEYWORD", "OLD_KEYWORD", "NEW_KEYWORD", "PARENT_KEYWORD", "EACH_KEYWORD", "ROW_KEYWORD", "FOLLOWS_KEYWORD", "ENABLE_KEYWORD", "DISABLE_KEYWORD", "OID_KEYWORD", "OBJECT_KEYWORD", "UNDER_KEYWORD", "FINAL_KEYWORD", "INSTANTIABLE_KEYWORD", "OVERRIDING_KEYWORD", "MEMBER_KEYWORD", "STATIC_KEYWORD", "CONSTRUCTOR_KEYWORD", "SELF_KEYWORD", "RESULT_KEYWORD", "MAP_KEYWORD", "ORDER_KEYWORD", "JOIN_KEYWORD", "IM_BEGIN_END", "IM_IF", "IM_LOOP", "IM_CASE", "IM_PCK_SPC", "IM_PCK_BODY", "IM_FUNC", "IM_PROC", "IM_TYPE_SPC", "IM_TYPE_BODY", "LPAREN", "RPAREN", "O", "R", "A", "N", "D", "T", "NOT_OPERATOR", "DIGITS", "EXP_DIGITS", "U", "L", "P", "S", "I", "E", "G", "V", "Y", "M", "B", "F", "W", "C", "H", "X", "Z", "K", "Q", "J", "CHARS", "DIGIT", "QUOTATION_MARK", "THE_REST", "'<<'", "'>>'", "'/'", "'\\''", "'+'", "'-'", "'*'", "'**'", "'||'", "'='", "'<>'", "'!='", "'~='", "'^='", "'>'", "'<'", "'<='", "'>='", "'(+)'", "'..'", "':='", "'.'"
    };
    public static final int IM_IF=166;
    public static final int NOT_OPEARTOR=7;
    public static final int IM_BEGIN_END=165;
    public static final int AFTER_KEYWORD=138;
    public static final int SCALE_TYPES=13;
    public static final int NULL_KEYWORD=36;
    public static final int MAP_KEYWORD=162;
    public static final int IM_PCK_SPC=169;
    public static final int SEPARATOR=27;
    public static final int CONSTANT_KEYWORD=43;
    public static final int EOF=-1;
    public static final int RPAREN=176;
    public static final int NOT_OPERATOR=183;
    public static final int EXCEPTIONS_KEYWORD=110;
    public static final int ELSE_KEYWORD=71;
    public static final int EXCEPTION_KEYWORD=33;
    public static final int IM_CASE=168;
    public static final int BODY_KEYWORD=120;
    public static final int IMMEDIATE_KEYWORD=100;
    public static final int FINAL_KEYWORD=154;
    public static final int D=181;
    public static final int E=191;
    public static final int UNDER_KEYWORD=153;
    public static final int F=197;
    public static final int SQLERRM_KEYWORD=133;
    public static final int G=192;
    public static final int TABLE_KEYWORD=87;
    public static final int A=179;
    public static final int KEYWORD=23;
    public static final int LIKE_KEYWORD=81;
    public static final int EACH_KEYWORD=146;
    public static final int B=196;
    public static final int C=199;
    public static final int SELF_KEYWORD=160;
    public static final int L=187;
    public static final int FOUND_KEYWORD=129;
    public static final int M=195;
    public static final int N=180;
    public static final int O=177;
    public static final int H=200;
    public static final int CHAR_TYPE=16;
    public static final int I=190;
    public static final int J=205;
    public static final int K=203;
    public static final int U=186;
    public static final int T=182;
    public static final int W=198;
    public static final int WHITESPACE=10;
    public static final int V=193;
    public static final int Q=204;
    public static final int P=188;
    public static final int BULK_KEYWORD=104;
    public static final int S=189;
    public static final int R=178;
    public static final int Y=194;
    public static final int COMMIT_KEYWORD=94;
    public static final int X=201;
    public static final int Z=202;
    public static final int DAY_TYPE=21;
    public static final int QUOTATION_MARK=208;
    public static final int END_KEYWORD=31;
    public static final int REF_KEYWORD=95;
    public static final int ALIAS=26;
    public static final int TRUE_KEYWORD=41;
    public static final int SUBTYPE_KEYWORD=51;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int WHEN_KEYWORD=34;
    public static final int T__214=214;
    public static final int T__219=219;
    public static final int ROWTYPE_KEYWORD=38;
    public static final int T__217=217;
    public static final int SAVEPOINT_KEYWORD=124;
    public static final int T__218=218;
    public static final int SQLCODE_KEYWORD=132;
    public static final int WHILE_KEYWORD=75;
    public static final int CREATE_KEYWORD=54;
    public static final int TIMESTAMP_TYPE=19;
    public static final int IM_TYPE_BODY=174;
    public static final int SELECT_KEYWORD=78;
    public static final int BY_KEYWORD=90;
    public static final int SOME_TYPES=12;
    public static final int CLOSE_KEYWORD=86;
    public static final int FOR_KEYWORD=76;
    public static final int YEAR_TYPE=20;
    public static final int PROCEDURE_KEYWORD=69;
    public static final int T__223=223;
    public static final int LPAREN=175;
    public static final int DEFAULT_KEYWORD=37;
    public static final int T__222=222;
    public static final int EXP_DIGITS=185;
    public static final int T__221=221;
    public static final int T__220=220;
    public static final int INLINE_KEYWORD=114;
    public static final int BEFORE_KEYWORD=137;
    public static final int EXECUTE_KEYWORD=99;
    public static final int CURSOR_KEYWORD=97;
    public static final int T__210=210;
    public static final int T__212=212;
    public static final int T__211=211;
    public static final int RAW_TYPE=18;
    public static final int RETURNING_KEYWORD=122;
    public static final int VARRAY_KEYWORD=91;
    public static final int RESTRICT_REFERENCES_KEYWORD=121;
    public static final int RETURN_KEYWORD=58;
    public static final int DEFINER_KEYWORD=64;
    public static final int LIMIT_KEYWORD=107;
    public static final int IS_KEYWORD=52;
    public static final int BEGIN_KEYWORD=30;
    public static final int AUTHID_KEYWORD=62;
    public static final int OLD_KEYWORD=143;
    public static final int INTO_KEYWORD=102;
    public static final int ORDER_KEYWORD=163;
    public static final int T__228=228;
    public static final int T__229=229;
    public static final int INSTEAD_KEYWORD=139;
    public static final int T__224=224;
    public static final int T__225=225;
    public static final int UPDATE_KEYWORD=134;
    public static final int T__226=226;
    public static final int T__227=227;
    public static final int EXIT_KEYWORD=101;
    public static final int INDICES_KEYWORD=111;
    public static final int ISOPEN_KEYWORD=130;
    public static final int PIPELINED_KEYWORD=67;
    public static final int FUNCTION_KEYWORD=56;
    public static final int T__231=231;
    public static final int IF_KEYWORD=70;
    public static final int T__230=230;
    public static final int STRING=11;
    public static final int ROWCOUNT_KEYWORD=131;
    public static final int DETERMINISTIC_KEYWORD=65;
    public static final int BYTE_TYPE=17;
    public static final int ELSIF_KEYWORD=72;
    public static final int IN_KEYWORD=59;
    public static final int SERIALLY_REUSABLE_KEYWORD=125;
    public static final int VARYING_KEYWORD=92;
    public static final int IM_TYPE_SPC=173;
    public static final int AND_OPERATOR=5;
    public static final int THE_REST=209;
    public static final int TRANSACTION_KEYWORD=127;
    public static final int OID_KEYWORD=151;
    public static final int CHAR_TYPES=15;
    public static final int PARALLEL_ENABLED_KEYWORD=66;
    public static final int BLOCK_COMMENT=8;
    public static final int INDEX_KEYWORD=89;
    public static final int WITH_KEYWORD=44;
    public static final int NEW_KEYWORD=144;
    public static final int PARAM_VALUE=29;
    public static final int PARENT_KEYWORD=145;
    public static final int IM_PROC=172;
    public static final int IM_PCK_BODY=170;
    public static final int LINE_COMMENT=9;
    public static final int TRIGGER_KEYWORD=136;
    public static final int OR_OPERATOR=6;
    public static final int CONTINUE_KEYWORD=96;
    public static final int OVERRIDING_KEYWORD=156;
    public static final int STATIC_KEYWORD=158;
    public static final int DELETE_KEYWORD=98;
    public static final int DISABLE_KEYWORD=150;
    public static final int NOTFOUND_KEYWORD=128;
    public static final int FORALL_KEYWORD=108;
    public static final int REPLACE_KEYWORD=55;
    public static final int ON_KEYWORD=140;
    public static final int TO_KEYWORD=49;
    public static final int INTERVAL_KEYWORD=48;
    public static final int NUMBER_UNSIGNED=4;
    public static final int SIZE_TYPES=14;
    public static final int CHARS=206;
    public static final int MERGE_KEYWORD=117;
    public static final int ARRAY_KEYWORD=93;
    public static final int USING_KEYWORD=103;
    public static final int EXT_IDENTIFIER=25;
    public static final int VALUES_KEYWORD=112;
    public static final int RAISE_KEYWORD=82;
    public static final int AUTONOMOUS_TRANSACTION_KEYWORD=84;
    public static final int LOCAL_KEYWORD=45;
    public static final int NESTED_KEYWORD=141;
    public static final int GOTO_KEYWORD=73;
    public static final int DIGITS=184;
    public static final int RECORD_KEYWORD=53;
    public static final int SAVE_KEYWORD=109;
    public static final int IM_FUNC=171;
    public static final int EXISTS_KEYWORD=135;
    public static final int REFERENCING_KEYWORD=142;
    public static final int RESULT_CACHE_KEYWORD=68;
    public static final int BETWEEN_KEYWORD=113;
    public static final int SECOND_TYPE=22;
    public static final int AS_KEYWORD=57;
    public static final int INSTANTIABLE_KEYWORD=155;
    public static final int FALSE_KEYWORD=42;
    public static final int CONSTRUCTOR_KEYWORD=159;
    public static final int LOOP_KEYWORD=74;
    public static final int TIME_KEYWORD=46;
    public static final int COMMA=28;
    public static final int IDENTIFIER=24;
    public static final int NOCOPY_KEYWORD=61;
    public static final int COUNT_KEYWORD=79;
    public static final int JOIN_KEYWORD=164;
    public static final int DIGIT=207;
    public static final int FOLLOWS_KEYWORD=148;
    public static final int SET_KEYWORD=126;
    public static final int ZONE_KEYWORD=47;
    public static final int TYPE_KEYWORD=40;
    public static final int ROW_KEYWORD=147;
    public static final int RESULT_KEYWORD=161;
    public static final int MEMBER_KEYWORD=157;
    public static final int ENABLE_KEYWORD=149;
    public static final int LIKE_TYPE_KEYWORD=39;
    public static final int ROLLBACK_KEYWORD=123;
    public static final int THEN_KEYWORD=35;
    public static final int OPEN_KEYWORD=118;
    public static final int REVERSE_KEYWORD=77;
    public static final int INSERT_KEYWORD=115;
    public static final int LOCK_KEYWORD=116;
    public static final int FETCH_KEYWORD=106;
    public static final int OBJECT_KEYWORD=152;
    public static final int CURRENT_USER_KEYWORD=63;
    public static final int OUT_KEYWORD=60;
    public static final int PRAGMA_KEYWORD=83;
    public static final int EXCEPTION_INIT_KEYWORD=80;
    public static final int PACKAGE_KEYWORD=119;
    public static final int CASE_KEYWORD=85;
    public static final int COLLECT_KEYWORD=105;
    public static final int DECLARE_KEYWORD=32;
    public static final int MONTH_KEYWORD=50;
    public static final int OF_KEYWORD=88;
    public static final int IM_LOOP=167;

    // delegates
    // delegators


        public PL_SQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PL_SQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[574+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PL_SQLParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g"; }



    public class SyntaxError {

        public RecognitionException exception;
        public String message;
        public int line;
        public int start, end;
    }
    	public List<SyntaxError> syntaxErrors = new ArrayList<SyntaxError>();

    	@Override
    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		String message = super.getErrorMessage(e, tokenNames);
    		SyntaxError syntaxError = new SyntaxError();
    		syntaxError.exception = e;
    		syntaxError.message = message;
    		syntaxError.line = e.line;
    		CommonToken token =  (CommonToken) e.token;
    		syntaxError.start = token.getStartIndex();
                    syntaxError.end = token.getStopIndex() + 1;
    		syntaxErrors.add(syntaxError);
    		return message;
    	}

    	@Override
    	public void emitErrorMessage(String msg) {
    	}
    	
    /*protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException
    {
    throw new MismatchedTokenException(ttype, input);
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input,
    RecognitionException e,
    BitSet follow)
    throws RecognitionException
    {
    throw e;
    }
    }
    // Alter code generation so catch-clauses get replace with
    // this action.
    @rulecatch {
    catch (RecognitionException e) {
    throw e;
    }*/


    public static class grammar_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grammar_def"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:1: grammar_def : source_element EOF ;
    public final PL_SQLParser.grammar_def_return grammar_def() throws RecognitionException {
        PL_SQLParser.grammar_def_return retval = new PL_SQLParser.grammar_def_return();
        retval.start = input.LT(1);
        int grammar_def_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EOF2=null;
        PL_SQLParser.source_element_return source_element1 = null;


        CommonTree EOF2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:2: ( source_element EOF )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:4: source_element EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_source_element_in_grammar_def4695);
            source_element1=source_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, source_element1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_grammar_def4698); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, grammar_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grammar_def"

    public static class source_element_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "source_element"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:1: source_element : ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) );
    public final PL_SQLParser.source_element_return source_element() throws RecognitionException {
        PL_SQLParser.source_element_return retval = new PL_SQLParser.source_element_return();
        retval.start = input.LT(1);
        int source_element_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_return anonymous_block3 = null;

        PL_SQLParser.create_replace_part_return create_replace_part4 = null;

        PL_SQLParser.function_declaration_return function_declaration5 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration6 = null;

        PL_SQLParser.package_declaration_return package_declaration7 = null;

        PL_SQLParser.trigger_declaration_return trigger_declaration8 = null;

        PL_SQLParser.type_declaration_return type_declaration9 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:16: ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BEGIN_KEYWORD||LA3_0==DECLARE_KEYWORD) ) {
                alt3=1;
            }
            else if ( (LA3_0==TYPE_KEYWORD||LA3_0==CREATE_KEYWORD||LA3_0==FUNCTION_KEYWORD||LA3_0==PROCEDURE_KEYWORD||LA3_0==PACKAGE_KEYWORD||LA3_0==TRIGGER_KEYWORD) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:18: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_source_element4708);
                    anonymous_block3=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block3.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:19: ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:19: ( create_replace_part )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==CREATE_KEYWORD) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: create_replace_part
                            {
                            pushFollow(FOLLOW_create_replace_part_in_source_element4731);
                            create_replace_part4=create_replace_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_replace_part4.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:19: ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    int alt2=5;
                    switch ( input.LA(1) ) {
                    case FUNCTION_KEYWORD:
                        {
                        alt2=1;
                        }
                        break;
                    case PROCEDURE_KEYWORD:
                        {
                        alt2=2;
                        }
                        break;
                    case PACKAGE_KEYWORD:
                        {
                        alt2=3;
                        }
                        break;
                    case TRIGGER_KEYWORD:
                        {
                        alt2=4;
                        }
                        break;
                    case TYPE_KEYWORD:
                        {
                        alt2=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 0, input);

                        throw nvae;
                    }

                    switch (alt2) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:20: function_declaration
                            {
                            pushFollow(FOLLOW_function_declaration_in_source_element4753);
                            function_declaration5=function_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration5.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:43: procedure_declaration
                            {
                            pushFollow(FOLLOW_procedure_declaration_in_source_element4757);
                            procedure_declaration6=procedure_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration6.getTree());

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:67: package_declaration
                            {
                            pushFollow(FOLLOW_package_declaration_in_source_element4761);
                            package_declaration7=package_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_declaration7.getTree());

                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:20: trigger_declaration
                            {
                            pushFollow(FOLLOW_trigger_declaration_in_source_element4784);
                            trigger_declaration8=trigger_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_declaration8.getTree());

                            }
                            break;
                        case 5 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:42: type_declaration
                            {
                            pushFollow(FOLLOW_type_declaration_in_source_element4788);
                            type_declaration9=type_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration9.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, source_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "source_element"

    public static class identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:1: identifier : ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD );
    public final PL_SQLParser.identifier_return identifier() throws RecognitionException {
        PL_SQLParser.identifier_return retval = new PL_SQLParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:12: ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==INTERVAL_KEYWORD||input.LA(1)==RESULT_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class universal_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:1: universal_identifier : ( identifier | EXT_IDENTIFIER );
    public final PL_SQLParser.universal_identifier_return universal_identifier() throws RecognitionException {
        PL_SQLParser.universal_identifier_return retval = new PL_SQLParser.universal_identifier_return();
        retval.start = input.LT(1);
        int universal_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER12=null;
        PL_SQLParser.identifier_return identifier11 = null;


        CommonTree EXT_IDENTIFIER12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:22: ( identifier | EXT_IDENTIFIER )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER||LA4_0==INTERVAL_KEYWORD||LA4_0==RESULT_KEYWORD) ) {
                alt4=1;
            }
            else if ( (LA4_0==EXT_IDENTIFIER) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:24: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_universal_identifier4813);
                    identifier11=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier11.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:37: EXT_IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXT_IDENTIFIER12=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_universal_identifier4817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER12_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER12);
                    adaptor.addChild(root_0, EXT_IDENTIFIER12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, universal_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_identifier"

    public static class label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:1: label : '<<' identifier '>>' ;
    public final PL_SQLParser.label_return label() throws RecognitionException {
        PL_SQLParser.label_return retval = new PL_SQLParser.label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal13=null;
        Token string_literal15=null;
        PL_SQLParser.identifier_return identifier14 = null;


        CommonTree string_literal13_tree=null;
        CommonTree string_literal15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:7: ( '<<' identifier '>>' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:9: '<<' identifier '>>'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal13=(Token)match(input,210,FOLLOW_210_in_label4824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal13_tree = (CommonTree)adaptor.create(string_literal13);
            adaptor.addChild(root_0, string_literal13_tree);
            }
            pushFollow(FOLLOW_identifier_in_label4826);
            identifier14=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier14.getTree());
            string_literal15=(Token)match(input,211,FOLLOW_211_in_label4828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (CommonTree)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class create_replace_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_replace_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:1: create_replace_part : CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? ;
    public final PL_SQLParser.create_replace_part_return create_replace_part() throws RecognitionException {
        PL_SQLParser.create_replace_part_return retval = new PL_SQLParser.create_replace_part_return();
        retval.start = input.LT(1);
        int create_replace_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE_KEYWORD16=null;
        Token OR_OPERATOR17=null;
        Token REPLACE_KEYWORD18=null;

        CommonTree CREATE_KEYWORD16_tree=null;
        CommonTree OR_OPERATOR17_tree=null;
        CommonTree REPLACE_KEYWORD18_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:21: ( CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:23: CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CREATE_KEYWORD16=(Token)match(input,CREATE_KEYWORD,FOLLOW_CREATE_KEYWORD_in_create_replace_part4835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE_KEYWORD16_tree = (CommonTree)adaptor.create(CREATE_KEYWORD16);
            adaptor.addChild(root_0, CREATE_KEYWORD16_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:38: ( OR_OPERATOR REPLACE_KEYWORD )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==OR_OPERATOR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:39: OR_OPERATOR REPLACE_KEYWORD
                    {
                    OR_OPERATOR17=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_create_replace_part4838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR17_tree = (CommonTree)adaptor.create(OR_OPERATOR17);
                    adaptor.addChild(root_0, OR_OPERATOR17_tree);
                    }
                    REPLACE_KEYWORD18=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_create_replace_part4840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD18_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD18);
                    adaptor.addChild(root_0, REPLACE_KEYWORD18_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, create_replace_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_replace_part"

    public static class as_is_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_is_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:1: as_is_part : ( IS_KEYWORD | AS_KEYWORD );
    public final PL_SQLParser.as_is_part_return as_is_part() throws RecognitionException {
        PL_SQLParser.as_is_part_return retval = new PL_SQLParser.as_is_part_return();
        retval.start = input.LT(1);
        int as_is_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set19=null;

        CommonTree set19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:12: ( IS_KEYWORD | AS_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set19=(Token)input.LT(1);
            if ( input.LA(1)==IS_KEYWORD||input.LA(1)==AS_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set19));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, as_is_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "as_is_part"

    public static class parameter_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:1: parameter_type : ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) );
    public final PL_SQLParser.parameter_type_return parameter_type() throws RecognitionException {
        PL_SQLParser.parameter_type_return retval = new PL_SQLParser.parameter_type_return();
        retval.start = input.LT(1);
        int parameter_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD20=null;
        Token OUT_KEYWORD21=null;
        Token NOCOPY_KEYWORD22=null;
        Token OUT_KEYWORD23=null;
        Token NOCOPY_KEYWORD24=null;

        CommonTree IN_KEYWORD20_tree=null;
        CommonTree OUT_KEYWORD21_tree=null;
        CommonTree NOCOPY_KEYWORD22_tree=null;
        CommonTree OUT_KEYWORD23_tree=null;
        CommonTree NOCOPY_KEYWORD24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:16: ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IN_KEYWORD) ) {
                alt9=1;
            }
            else if ( (LA9_0==OUT_KEYWORD) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:18: IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD20=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD20_tree = (CommonTree)adaptor.create(IN_KEYWORD20);
                    adaptor.addChild(root_0, IN_KEYWORD20_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:29: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==OUT_KEYWORD) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:30: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                            {
                            OUT_KEYWORD21=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4863); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUT_KEYWORD21_tree = (CommonTree)adaptor.create(OUT_KEYWORD21);
                            adaptor.addChild(root_0, OUT_KEYWORD21_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:42: ( NOCOPY_KEYWORD )?
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==NOCOPY_KEYWORD) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                                    {
                                    NOCOPY_KEYWORD22=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4865); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOCOPY_KEYWORD22_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD22);
                                    adaptor.addChild(root_0, NOCOPY_KEYWORD22_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:63: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    OUT_KEYWORD23=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD23_tree = (CommonTree)adaptor.create(OUT_KEYWORD23);
                    adaptor.addChild(root_0, OUT_KEYWORD23_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:75: ( NOCOPY_KEYWORD )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==NOCOPY_KEYWORD) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD24=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4875); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD24_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD24);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD24_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, parameter_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:1: parameter_declaration : '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' ;
    public final PL_SQLParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PL_SQLParser.parameter_declaration_return retval = new PL_SQLParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal25=null;
        Token char_literal31=null;
        Token char_literal37=null;
        PL_SQLParser.identifier_return identifier26 = null;

        PL_SQLParser.parameter_type_return parameter_type27 = null;

        PL_SQLParser.data_type_return data_type28 = null;

        PL_SQLParser.variable_def_part_return variable_def_part29 = null;

        PL_SQLParser.expression_return expression30 = null;

        PL_SQLParser.identifier_return identifier32 = null;

        PL_SQLParser.parameter_type_return parameter_type33 = null;

        PL_SQLParser.data_type_return data_type34 = null;

        PL_SQLParser.variable_def_part_return variable_def_part35 = null;

        PL_SQLParser.expression_return expression36 = null;


        CommonTree char_literal25_tree=null;
        CommonTree char_literal31_tree=null;
        CommonTree char_literal37_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:23: ( '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:25: '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal25=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameter_declaration4884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            pushFollow(FOLLOW_identifier_in_parameter_declaration4886);
            identifier26=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier26.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:40: ( parameter_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=IN_KEYWORD && LA10_0<=OUT_KEYWORD)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
                    {
                    pushFollow(FOLLOW_parameter_type_in_parameter_declaration4888);
                    parameter_type27=parameter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type27.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_parameter_declaration4891);
            data_type28=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type28.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:66: ( variable_def_part expression )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT_KEYWORD||LA11_0==230) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:67: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4894);
                    variable_def_part29=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part29.getTree());
                    pushFollow(FOLLOW_expression_in_parameter_declaration4896);
                    expression30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression30.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:25: ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:26: ',' identifier ( parameter_type )? data_type ( variable_def_part expression )?
            	    {
            	    char_literal31=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration4925); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal31_tree = (CommonTree)adaptor.create(char_literal31);
            	    adaptor.addChild(root_0, char_literal31_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_parameter_declaration4927);
            	    identifier32=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier32.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:41: ( parameter_type )?
            	    int alt12=2;
            	    int LA12_0 = input.LA(1);

            	    if ( ((LA12_0>=IN_KEYWORD && LA12_0<=OUT_KEYWORD)) ) {
            	        alt12=1;
            	    }
            	    switch (alt12) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
            	            {
            	            pushFollow(FOLLOW_parameter_type_in_parameter_declaration4929);
            	            parameter_type33=parameter_type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type33.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_parameter_declaration4932);
            	    data_type34=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type34.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:67: ( variable_def_part expression )?
            	    int alt13=2;
            	    int LA13_0 = input.LA(1);

            	    if ( (LA13_0==DEFAULT_KEYWORD||LA13_0==230) ) {
            	        alt13=1;
            	    }
            	    switch (alt13) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:68: variable_def_part expression
            	            {
            	            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4935);
            	            variable_def_part35=variable_def_part();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part35.getTree());
            	            pushFollow(FOLLOW_expression_in_parameter_declaration4937);
            	            expression36=expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression36.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal37=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameter_declaration4943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
            adaptor.addChild(root_0, char_literal37_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:1: function_spec : FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* ;
    public final PL_SQLParser.function_spec_return function_spec() throws RecognitionException {
        PL_SQLParser.function_spec_return retval = new PL_SQLParser.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FUNCTION_KEYWORD38=null;
        Token RETURN_KEYWORD41=null;
        PL_SQLParser.function_name_return function_name39 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration40 = null;

        PL_SQLParser.data_type_return data_type42 = null;

        PL_SQLParser.invoker_clause_return invoker_clause43 = null;

        PL_SQLParser.function_spec_add2_return function_spec_add244 = null;


        CommonTree FUNCTION_KEYWORD38_tree=null;
        CommonTree RETURN_KEYWORD41_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:15: ( FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:17: FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            FUNCTION_KEYWORD38=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_function_spec4950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD38_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD38);
            adaptor.addChild(root_0, FUNCTION_KEYWORD38_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4968);
            function_name39=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name39.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:31: ( parameter_declaration )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==LPAREN) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_function_spec4970);
                    parameter_declaration40=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration40.getTree());

                    }
                    break;

            }

            RETURN_KEYWORD41=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_function_spec4989); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD41_tree = (CommonTree)adaptor.create(RETURN_KEYWORD41);
            adaptor.addChild(root_0, RETURN_KEYWORD41_tree);
            }
            pushFollow(FOLLOW_data_type_in_function_spec4991);
            data_type42=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type42.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:42: ( invoker_clause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==AUTHID_KEYWORD) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_function_spec4993);
                    invoker_clause43=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause43.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:58: ( function_spec_add2 )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( ((LA17_0>=DETERMINISTIC_KEYWORD && LA17_0<=RESULT_CACHE_KEYWORD)) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:59: function_spec_add2
            	    {
            	    pushFollow(FOLLOW_function_spec_add2_in_function_spec4997);
            	    function_spec_add244=function_spec_add2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec_add244.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class function_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:1: function_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.function_name_return function_name() throws RecognitionException {
        PL_SQLParser.function_name_return retval = new PL_SQLParser.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS46=null;
        PL_SQLParser.universal_identifier_return universal_identifier45 = null;


        CommonTree ALIAS46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:15: ( universal_identifier | ALIAS )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=IDENTIFIER && LA18_0<=EXT_IDENTIFIER)||LA18_0==INTERVAL_KEYWORD||LA18_0==RESULT_KEYWORD) ) {
                alt18=1;
            }
            else if ( (LA18_0==ALIAS) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:17: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_function_name5006);
                    universal_identifier45=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier45.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:40: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS46=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_function_name5010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS46_tree = (CommonTree)adaptor.create(ALIAS46);
                    adaptor.addChild(root_0, ALIAS46_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class invoker_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invoker_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:1: invoker_clause : AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) ;
    public final PL_SQLParser.invoker_clause_return invoker_clause() throws RecognitionException {
        PL_SQLParser.invoker_clause_return retval = new PL_SQLParser.invoker_clause_return();
        retval.start = input.LT(1);
        int invoker_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AUTHID_KEYWORD47=null;
        Token set48=null;

        CommonTree AUTHID_KEYWORD47_tree=null;
        CommonTree set48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:16: ( AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:18: AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            AUTHID_KEYWORD47=(Token)match(input,AUTHID_KEYWORD,FOLLOW_AUTHID_KEYWORD_in_invoker_clause5017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUTHID_KEYWORD47_tree = (CommonTree)adaptor.create(AUTHID_KEYWORD47);
            adaptor.addChild(root_0, AUTHID_KEYWORD47_tree);
            }
            set48=(Token)input.LT(1);
            if ( (input.LA(1)>=CURRENT_USER_KEYWORD && input.LA(1)<=DEFINER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set48));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, invoker_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invoker_clause"

    public static class function_spec_add2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec_add2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:1: function_spec_add2 : ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD );
    public final PL_SQLParser.function_spec_add2_return function_spec_add2() throws RecognitionException {
        PL_SQLParser.function_spec_add2_return retval = new PL_SQLParser.function_spec_add2_return();
        retval.start = input.LT(1);
        int function_spec_add2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set49=null;

        CommonTree set49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:20: ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set49=(Token)input.LT(1);
            if ( (input.LA(1)>=DETERMINISTIC_KEYWORD && input.LA(1)<=RESULT_CACHE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set49));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, function_spec_add2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec_add2"

    public static class function_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:1: function_declaration : function_spec function_procedure_body -> ^( IM_FUNC function_spec function_procedure_body ) ;
    public final PL_SQLParser.function_declaration_return function_declaration() throws RecognitionException {
        PL_SQLParser.function_declaration_return retval = new PL_SQLParser.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.function_spec_return function_spec50 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body51 = null;


        RewriteRuleSubtreeStream stream_function_procedure_body=new RewriteRuleSubtreeStream(adaptor,"rule function_procedure_body");
        RewriteRuleSubtreeStream stream_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule function_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:22: ( function_spec function_procedure_body -> ^( IM_FUNC function_spec function_procedure_body ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:24: function_spec function_procedure_body
            {
            pushFollow(FOLLOW_function_spec_in_function_declaration5051);
            function_spec50=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_spec.add(function_spec50.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_function_declaration5053);
            function_procedure_body51=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_procedure_body.add(function_procedure_body51.getTree());


            // AST REWRITE
            // elements: function_spec, function_procedure_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 616:22: -> ^( IM_FUNC function_spec function_procedure_body )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:25: ^( IM_FUNC function_spec function_procedure_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_FUNC, "IM_FUNC"), root_1);

                adaptor.addChild(root_1, stream_function_spec.nextTree());
                adaptor.addChild(root_1, stream_function_procedure_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class function_declaration_in_pck_body_choose_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration_in_pck_body_choose"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:1: function_declaration_in_pck_body_choose : ( SEPARATOR | function_procedure_body );
    public final PL_SQLParser.function_declaration_in_pck_body_choose_return function_declaration_in_pck_body_choose() throws RecognitionException {
        PL_SQLParser.function_declaration_in_pck_body_choose_return retval = new PL_SQLParser.function_declaration_in_pck_body_choose_return();
        retval.start = input.LT(1);
        int function_declaration_in_pck_body_choose_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR52=null;
        PL_SQLParser.function_procedure_body_return function_procedure_body53 = null;


        CommonTree SEPARATOR52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:41: ( SEPARATOR | function_procedure_body )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEPARATOR) ) {
                alt19=1;
            }
            else if ( (LA19_0==IS_KEYWORD||LA19_0==AS_KEYWORD) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:43: SEPARATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEPARATOR52=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_function_declaration_in_pck_body_choose5091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR52_tree = (CommonTree)adaptor.create(SEPARATOR52);
                    adaptor.addChild(root_0, SEPARATOR52_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:55: function_procedure_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_procedure_body_in_function_declaration_in_pck_body_choose5095);
                    function_procedure_body53=function_procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body53.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, function_declaration_in_pck_body_choose_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration_in_pck_body_choose"

    public static class function_declaration_in_pck_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration_in_pck_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:1: function_declaration_in_pck_body : function_spec function_declaration_in_pck_body_choose -> ^( IM_FUNC function_spec function_declaration_in_pck_body_choose ) ;
    public final PL_SQLParser.function_declaration_in_pck_body_return function_declaration_in_pck_body() throws RecognitionException {
        PL_SQLParser.function_declaration_in_pck_body_return retval = new PL_SQLParser.function_declaration_in_pck_body_return();
        retval.start = input.LT(1);
        int function_declaration_in_pck_body_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.function_spec_return function_spec54 = null;

        PL_SQLParser.function_declaration_in_pck_body_choose_return function_declaration_in_pck_body_choose55 = null;


        RewriteRuleSubtreeStream stream_function_declaration_in_pck_body_choose=new RewriteRuleSubtreeStream(adaptor,"rule function_declaration_in_pck_body_choose");
        RewriteRuleSubtreeStream stream_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule function_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:34: ( function_spec function_declaration_in_pck_body_choose -> ^( IM_FUNC function_spec function_declaration_in_pck_body_choose ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:36: function_spec function_declaration_in_pck_body_choose
            {
            pushFollow(FOLLOW_function_spec_in_function_declaration_in_pck_body5102);
            function_spec54=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_spec.add(function_spec54.getTree());
            pushFollow(FOLLOW_function_declaration_in_pck_body_choose_in_function_declaration_in_pck_body5104);
            function_declaration_in_pck_body_choose55=function_declaration_in_pck_body_choose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_declaration_in_pck_body_choose.add(function_declaration_in_pck_body_choose55.getTree());


            // AST REWRITE
            // elements: function_spec, function_declaration_in_pck_body_choose
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 619:22: -> ^( IM_FUNC function_spec function_declaration_in_pck_body_choose )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:25: ^( IM_FUNC function_spec function_declaration_in_pck_body_choose )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_FUNC, "IM_FUNC"), root_1);

                adaptor.addChild(root_1, stream_function_spec.nextTree());
                adaptor.addChild(root_1, stream_function_declaration_in_pck_body_choose.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, function_declaration_in_pck_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration_in_pck_body"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:1: procedure_spec : PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? ;
    public final PL_SQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
        PL_SQLParser.procedure_spec_return retval = new PL_SQLParser.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PROCEDURE_KEYWORD56=null;
        PL_SQLParser.procedure_name_return procedure_name57 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration58 = null;

        PL_SQLParser.invoker_clause_return invoker_clause59 = null;


        CommonTree PROCEDURE_KEYWORD56_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:16: ( PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:18: PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            PROCEDURE_KEYWORD56=(Token)match(input,PROCEDURE_KEYWORD,FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE_KEYWORD56_tree = (CommonTree)adaptor.create(PROCEDURE_KEYWORD56);
            adaptor.addChild(root_0, PROCEDURE_KEYWORD56_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec5165);
            procedure_name57=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name57.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:51: ( parameter_declaration )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LPAREN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_procedure_spec5167);
                    parameter_declaration58=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration58.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:18: ( invoker_clause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==AUTHID_KEYWORD) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_procedure_spec5187);
                    invoker_clause59=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause59.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class procedure_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:1: procedure_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.procedure_name_return procedure_name() throws RecognitionException {
        PL_SQLParser.procedure_name_return retval = new PL_SQLParser.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS61=null;
        PL_SQLParser.universal_identifier_return universal_identifier60 = null;


        CommonTree ALIAS61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:16: ( universal_identifier | ALIAS )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( ((LA22_0>=IDENTIFIER && LA22_0<=EXT_IDENTIFIER)||LA22_0==INTERVAL_KEYWORD||LA22_0==RESULT_KEYWORD) ) {
                alt22=1;
            }
            else if ( (LA22_0==ALIAS) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_procedure_name5195);
                    universal_identifier60=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier60.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS61=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_procedure_name5199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS61_tree = (CommonTree)adaptor.create(ALIAS61);
                    adaptor.addChild(root_0, ALIAS61_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:1: procedure_declaration : procedure_spec function_procedure_body -> ^( IM_PROC procedure_spec function_procedure_body ) ;
    public final PL_SQLParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PL_SQLParser.procedure_declaration_return retval = new PL_SQLParser.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec62 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body63 = null;


        RewriteRuleSubtreeStream stream_function_procedure_body=new RewriteRuleSubtreeStream(adaptor,"rule function_procedure_body");
        RewriteRuleSubtreeStream stream_procedure_spec=new RewriteRuleSubtreeStream(adaptor,"rule procedure_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:23: ( procedure_spec function_procedure_body -> ^( IM_PROC procedure_spec function_procedure_body ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:25: procedure_spec function_procedure_body
            {
            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration5206);
            procedure_spec62=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_spec.add(procedure_spec62.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_procedure_declaration5208);
            function_procedure_body63=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_procedure_body.add(function_procedure_body63.getTree());


            // AST REWRITE
            // elements: function_procedure_body, procedure_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 624:23: -> ^( IM_PROC procedure_spec function_procedure_body )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:26: ^( IM_PROC procedure_spec function_procedure_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PROC, "IM_PROC"), root_1);

                adaptor.addChild(root_1, stream_procedure_spec.nextTree());
                adaptor.addChild(root_1, stream_function_procedure_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class procedure_declaration_in_pck_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration_in_pck_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:1: procedure_declaration_in_pck_body : procedure_spec function_declaration_in_pck_body_choose -> ^( IM_PROC procedure_spec function_declaration_in_pck_body_choose ) ;
    public final PL_SQLParser.procedure_declaration_in_pck_body_return procedure_declaration_in_pck_body() throws RecognitionException {
        PL_SQLParser.procedure_declaration_in_pck_body_return retval = new PL_SQLParser.procedure_declaration_in_pck_body_return();
        retval.start = input.LT(1);
        int procedure_declaration_in_pck_body_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec64 = null;

        PL_SQLParser.function_declaration_in_pck_body_choose_return function_declaration_in_pck_body_choose65 = null;


        RewriteRuleSubtreeStream stream_function_declaration_in_pck_body_choose=new RewriteRuleSubtreeStream(adaptor,"rule function_declaration_in_pck_body_choose");
        RewriteRuleSubtreeStream stream_procedure_spec=new RewriteRuleSubtreeStream(adaptor,"rule procedure_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:35: ( procedure_spec function_declaration_in_pck_body_choose -> ^( IM_PROC procedure_spec function_declaration_in_pck_body_choose ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:37: procedure_spec function_declaration_in_pck_body_choose
            {
            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration_in_pck_body5247);
            procedure_spec64=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_spec.add(procedure_spec64.getTree());
            pushFollow(FOLLOW_function_declaration_in_pck_body_choose_in_procedure_declaration_in_pck_body5249);
            function_declaration_in_pck_body_choose65=function_declaration_in_pck_body_choose();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_declaration_in_pck_body_choose.add(function_declaration_in_pck_body_choose65.getTree());


            // AST REWRITE
            // elements: procedure_spec, function_declaration_in_pck_body_choose
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 626:23: -> ^( IM_PROC procedure_spec function_declaration_in_pck_body_choose )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:26: ^( IM_PROC procedure_spec function_declaration_in_pck_body_choose )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PROC, "IM_PROC"), root_1);

                adaptor.addChild(root_1, stream_procedure_spec.nextTree());
                adaptor.addChild(root_1, stream_function_declaration_in_pck_body_choose.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, procedure_declaration_in_pck_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration_in_pck_body"

    public static class function_procedure_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_procedure_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:1: function_procedure_body : as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block ;
    public final PL_SQLParser.function_procedure_body_return function_procedure_body() throws RecognitionException {
        PL_SQLParser.function_procedure_body_return retval = new PL_SQLParser.function_procedure_body_return();
        retval.start = input.LT(1);
        int function_procedure_body_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part66 = null;

        PL_SQLParser.variable_declaration_return variable_declaration67 = null;

        PL_SQLParser.function_declaration_return function_declaration68 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration69 = null;

        PL_SQLParser.block_return block70 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:25: ( as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:27: as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_function_procedure_body5288);
            as_is_part66=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part66.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:38: ( variable_declaration )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==IDENTIFIER||LA23_0==TYPE_KEYWORD||LA23_0==INTERVAL_KEYWORD||LA23_0==SUBTYPE_KEYWORD||LA23_0==PRAGMA_KEYWORD||LA23_0==CURSOR_KEYWORD||LA23_0==RESULT_KEYWORD) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:39: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_function_procedure_body5291);
            	    variable_declaration67=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration67.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:62: ( function_declaration | procedure_declaration )*
            loop24:
            do {
                int alt24=3;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==FUNCTION_KEYWORD) ) {
                    alt24=1;
                }
                else if ( (LA24_0==PROCEDURE_KEYWORD) ) {
                    alt24=2;
                }


                switch (alt24) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:63: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_function_procedure_body5296);
            	    function_declaration68=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration68.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:86: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_function_procedure_body5300);
            	    procedure_declaration69=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration69.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);

            pushFollow(FOLLOW_block_in_function_procedure_body5304);
            block70=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block70.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, function_procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_procedure_body"

    public static class package_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:1: package_declaration : ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) );
    public final PL_SQLParser.package_declaration_return package_declaration() throws RecognitionException {
        PL_SQLParser.package_declaration_return retval = new PL_SQLParser.package_declaration_return();
        retval.start = input.LT(1);
        int package_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE_KEYWORD71=null;
        Token PACKAGE_KEYWORD73=null;
        PL_SQLParser.package_spec_return package_spec72 = null;

        PL_SQLParser.package_body_return package_body74 = null;


        CommonTree PACKAGE_KEYWORD71_tree=null;
        CommonTree PACKAGE_KEYWORD73_tree=null;
        RewriteRuleTokenStream stream_PACKAGE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token PACKAGE_KEYWORD");
        RewriteRuleSubtreeStream stream_package_body=new RewriteRuleSubtreeStream(adaptor,"rule package_body");
        RewriteRuleSubtreeStream stream_package_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:21: ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==PACKAGE_KEYWORD) ) {
                int LA25_1 = input.LA(2);

                if ( (synpred36_PL_SQL()) ) {
                    alt25=1;
                }
                else if ( (true) ) {
                    alt25=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 25, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:23: ( PACKAGE_KEYWORD package_spec )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:23: ( PACKAGE_KEYWORD package_spec )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:24: PACKAGE_KEYWORD package_spec
                    {
                    PACKAGE_KEYWORD71=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD71);

                    pushFollow(FOLLOW_package_spec_in_package_declaration5314);
                    package_spec72=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_spec.add(package_spec72.getTree());

                    }



                    // AST REWRITE
                    // elements: package_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 628:54: -> ^( IM_PCK_SPC package_spec )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:57: ^( IM_PCK_SPC package_spec )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_SPC, "IM_PCK_SPC"), root_1);

                        adaptor.addChild(root_1, stream_package_spec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:5: ( PACKAGE_KEYWORD package_body )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:5: ( PACKAGE_KEYWORD package_body )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:6: PACKAGE_KEYWORD package_body
                    {
                    PACKAGE_KEYWORD73=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD73);

                    pushFollow(FOLLOW_package_body_in_package_declaration5332);
                    package_body74=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_body.add(package_body74.getTree());

                    }



                    // AST REWRITE
                    // elements: package_body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 629:36: -> ^( IM_PCK_BODY package_body )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:39: ^( IM_PCK_BODY package_body )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_BODY, "IM_PCK_BODY"), root_1);

                        adaptor.addChild(root_1, stream_package_body.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_declaration"

    public static class package_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:1: package_spec : package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_spec_return package_spec() throws RecognitionException {
        PL_SQLParser.package_spec_return retval = new PL_SQLParser.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token END_KEYWORD80=null;
        Token SEPARATOR82=null;
        Token char_literal83=null;
        PL_SQLParser.package_spec_name_return package_spec_name75 = null;

        PL_SQLParser.invoker_clause_return invoker_clause76 = null;

        PL_SQLParser.as_is_part_return as_is_part77 = null;

        PL_SQLParser.variable_declaration_return variable_declaration78 = null;

        PL_SQLParser.package_spec2_return package_spec279 = null;

        PL_SQLParser.universal_identifier_return universal_identifier81 = null;


        CommonTree END_KEYWORD80_tree=null;
        CommonTree SEPARATOR82_tree=null;
        CommonTree char_literal83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:14: ( package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:16: package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | package_spec2 )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_package_spec_name_in_package_spec5348);
            package_spec_name75=package_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec_name75.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:34: ( invoker_clause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==AUTHID_KEYWORD) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_package_spec5350);
                    invoker_clause76=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause76.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_as_is_part_in_package_spec5353);
            as_is_part77=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part77.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:16: ( variable_declaration | package_spec2 )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==IDENTIFIER||LA27_0==TYPE_KEYWORD||LA27_0==INTERVAL_KEYWORD||LA27_0==SUBTYPE_KEYWORD||LA27_0==PRAGMA_KEYWORD||LA27_0==CURSOR_KEYWORD||LA27_0==RESULT_KEYWORD) ) {
                    alt27=1;
                }
                else if ( (LA27_0==FUNCTION_KEYWORD||LA27_0==PROCEDURE_KEYWORD) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_spec5371);
            	    variable_declaration78=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration78.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:40: package_spec2
            	    {
            	    pushFollow(FOLLOW_package_spec2_in_package_spec5375);
            	    package_spec279=package_spec2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec279.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            END_KEYWORD80=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_spec5395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD80_tree = (CommonTree)adaptor.create(END_KEYWORD80);
            adaptor.addChild(root_0, END_KEYWORD80_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:28: ( universal_identifier )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=IDENTIFIER && LA28_0<=EXT_IDENTIFIER)||LA28_0==INTERVAL_KEYWORD||LA28_0==RESULT_KEYWORD) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_spec5397);
                    universal_identifier81=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier81.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:50: ( SEPARATOR )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==SEPARATOR) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR82=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR82_tree = (CommonTree)adaptor.create(SEPARATOR82);
                    adaptor.addChild(root_0, SEPARATOR82_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:61: ( '/' )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==212) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal83=(Token)match(input,212,FOLLOW_212_in_package_spec5403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal83_tree = (CommonTree)adaptor.create(char_literal83);
                    adaptor.addChild(root_0, char_literal83_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_spec2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:1: package_spec2 : ( function_spec SEPARATOR -> ^( IM_FUNC function_spec SEPARATOR ) | procedure_spec SEPARATOR -> ^( IM_PROC procedure_spec SEPARATOR ) );
    public final PL_SQLParser.package_spec2_return package_spec2() throws RecognitionException {
        PL_SQLParser.package_spec2_return retval = new PL_SQLParser.package_spec2_return();
        retval.start = input.LT(1);
        int package_spec2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR85=null;
        Token SEPARATOR87=null;
        PL_SQLParser.function_spec_return function_spec84 = null;

        PL_SQLParser.procedure_spec_return procedure_spec86 = null;


        CommonTree SEPARATOR85_tree=null;
        CommonTree SEPARATOR87_tree=null;
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleSubtreeStream stream_procedure_spec=new RewriteRuleSubtreeStream(adaptor,"rule procedure_spec");
        RewriteRuleSubtreeStream stream_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule function_spec");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:15: ( function_spec SEPARATOR -> ^( IM_FUNC function_spec SEPARATOR ) | procedure_spec SEPARATOR -> ^( IM_PROC procedure_spec SEPARATOR ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==FUNCTION_KEYWORD) ) {
                alt31=1;
            }
            else if ( (LA31_0==PROCEDURE_KEYWORD) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:17: function_spec SEPARATOR
                    {
                    pushFollow(FOLLOW_function_spec_in_package_spec25411);
                    function_spec84=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_spec.add(function_spec84.getTree());
                    SEPARATOR85=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec25413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR85);



                    // AST REWRITE
                    // elements: function_spec, SEPARATOR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 633:41: -> ^( IM_FUNC function_spec SEPARATOR )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:44: ^( IM_FUNC function_spec SEPARATOR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_FUNC, "IM_FUNC"), root_1);

                        adaptor.addChild(root_1, stream_function_spec.nextTree());
                        adaptor.addChild(root_1, stream_SEPARATOR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:19: procedure_spec SEPARATOR
                    {
                    pushFollow(FOLLOW_procedure_spec_in_package_spec25444);
                    procedure_spec86=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_spec.add(procedure_spec86.getTree());
                    SEPARATOR87=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec25446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR87);



                    // AST REWRITE
                    // elements: SEPARATOR, procedure_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 634:44: -> ^( IM_PROC procedure_spec SEPARATOR )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:47: ^( IM_PROC procedure_spec SEPARATOR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PROC, "IM_PROC"), root_1);

                        adaptor.addChild(root_1, stream_procedure_spec.nextTree());
                        adaptor.addChild(root_1, stream_SEPARATOR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, package_spec2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec2"

    public static class package_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:1: package_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_spec_name_return package_spec_name() throws RecognitionException {
        PL_SQLParser.package_spec_name_return retval = new PL_SQLParser.package_spec_name_return();
        retval.start = input.LT(1);
        int package_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS89=null;
        PL_SQLParser.universal_identifier_return universal_identifier88 = null;


        CommonTree ALIAS89_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:19: ( universal_identifier | ALIAS )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( ((LA32_0>=IDENTIFIER && LA32_0<=EXT_IDENTIFIER)||LA32_0==INTERVAL_KEYWORD||LA32_0==RESULT_KEYWORD) ) {
                alt32=1;
            }
            else if ( (LA32_0==ALIAS) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_spec_name5463);
                    universal_identifier88=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier88.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS89=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_spec_name5467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS89_tree = (CommonTree)adaptor.create(ALIAS89);
                    adaptor.addChild(root_0, ALIAS89_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, package_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec_name"

    public static class package_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:1: package_body : BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration_in_pck_body | procedure_declaration_in_pck_body )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_body_return package_body() throws RecognitionException {
        PL_SQLParser.package_body_return retval = new PL_SQLParser.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD90=null;
        Token BEGIN_KEYWORD96=null;
        Token END_KEYWORD98=null;
        Token SEPARATOR100=null;
        Token char_literal101=null;
        PL_SQLParser.package_body_name_return package_body_name91 = null;

        PL_SQLParser.as_is_part_return as_is_part92 = null;

        PL_SQLParser.variable_declaration_return variable_declaration93 = null;

        PL_SQLParser.function_declaration_in_pck_body_return function_declaration_in_pck_body94 = null;

        PL_SQLParser.procedure_declaration_in_pck_body_return procedure_declaration_in_pck_body95 = null;

        PL_SQLParser.executable_section_return executable_section97 = null;

        PL_SQLParser.universal_identifier_return universal_identifier99 = null;


        CommonTree BODY_KEYWORD90_tree=null;
        CommonTree BEGIN_KEYWORD96_tree=null;
        CommonTree END_KEYWORD98_tree=null;
        CommonTree SEPARATOR100_tree=null;
        CommonTree char_literal101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:14: ( BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration_in_pck_body | procedure_declaration_in_pck_body )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:16: BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration_in_pck_body | procedure_declaration_in_pck_body )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD90=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_package_body5474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD90_tree = (CommonTree)adaptor.create(BODY_KEYWORD90);
            adaptor.addChild(root_0, BODY_KEYWORD90_tree);
            }
            pushFollow(FOLLOW_package_body_name_in_package_body5476);
            package_body_name91=package_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body_name91.getTree());
            pushFollow(FOLLOW_as_is_part_in_package_body5478);
            as_is_part92=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part92.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:16: ( variable_declaration | function_declaration_in_pck_body | procedure_declaration_in_pck_body )*
            loop33:
            do {
                int alt33=4;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case TYPE_KEYWORD:
                case INTERVAL_KEYWORD:
                case SUBTYPE_KEYWORD:
                case PRAGMA_KEYWORD:
                case CURSOR_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt33=1;
                    }
                    break;
                case FUNCTION_KEYWORD:
                    {
                    alt33=2;
                    }
                    break;
                case PROCEDURE_KEYWORD:
                    {
                    alt33=3;
                    }
                    break;

                }

                switch (alt33) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_body5496);
            	    variable_declaration93=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration93.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:40: function_declaration_in_pck_body
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_pck_body_in_package_body5500);
            	    function_declaration_in_pck_body94=function_declaration_in_pck_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration_in_pck_body94.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:75: procedure_declaration_in_pck_body
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_pck_body_in_package_body5504);
            	    procedure_declaration_in_pck_body95=procedure_declaration_in_pck_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration_in_pck_body95.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:16: ( BEGIN_KEYWORD ( executable_section )+ )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==BEGIN_KEYWORD) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:17: BEGIN_KEYWORD ( executable_section )+
                    {
                    BEGIN_KEYWORD96=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_package_body5524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEGIN_KEYWORD96_tree = (CommonTree)adaptor.create(BEGIN_KEYWORD96);
                    adaptor.addChild(root_0, BEGIN_KEYWORD96_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:31: ( executable_section )+
                    int cnt34=0;
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==NUMBER_UNSIGNED||LA34_0==STRING||(LA34_0>=IDENTIFIER && LA34_0<=EXT_IDENTIFIER)||LA34_0==BEGIN_KEYWORD||LA34_0==DECLARE_KEYWORD||LA34_0==NULL_KEYWORD||(LA34_0>=TRUE_KEYWORD && LA34_0<=FALSE_KEYWORD)||LA34_0==INTERVAL_KEYWORD||LA34_0==REPLACE_KEYWORD||(LA34_0>=RETURN_KEYWORD && LA34_0<=IN_KEYWORD)||LA34_0==IF_KEYWORD||(LA34_0>=GOTO_KEYWORD && LA34_0<=FOR_KEYWORD)||LA34_0==SELECT_KEYWORD||(LA34_0>=RAISE_KEYWORD && LA34_0<=PRAGMA_KEYWORD)||(LA34_0>=CASE_KEYWORD && LA34_0<=CLOSE_KEYWORD)||LA34_0==COMMIT_KEYWORD||LA34_0==CONTINUE_KEYWORD||(LA34_0>=DELETE_KEYWORD && LA34_0<=EXECUTE_KEYWORD)||LA34_0==EXIT_KEYWORD||LA34_0==FETCH_KEYWORD||LA34_0==FORALL_KEYWORD||(LA34_0>=INSERT_KEYWORD && LA34_0<=OPEN_KEYWORD)||(LA34_0>=ROLLBACK_KEYWORD && LA34_0<=SAVEPOINT_KEYWORD)||LA34_0==SET_KEYWORD||(LA34_0>=SQLCODE_KEYWORD && LA34_0<=UPDATE_KEYWORD)||LA34_0==RESULT_KEYWORD||LA34_0==LPAREN||LA34_0==NOT_OPERATOR||LA34_0==210||(LA34_0>=214 && LA34_0<=215)) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:32: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_package_body5527);
                    	    executable_section97=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section97.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt34 >= 1 ) break loop34;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(34, input);
                                throw eee;
                        }
                        cnt34++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD98=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_body5548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD98_tree = (CommonTree)adaptor.create(END_KEYWORD98);
            adaptor.addChild(root_0, END_KEYWORD98_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:28: ( universal_identifier )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( ((LA36_0>=IDENTIFIER && LA36_0<=EXT_IDENTIFIER)||LA36_0==INTERVAL_KEYWORD||LA36_0==RESULT_KEYWORD) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_body5550);
                    universal_identifier99=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier99.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:50: ( SEPARATOR )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==SEPARATOR) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR100=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_body5553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR100_tree = (CommonTree)adaptor.create(SEPARATOR100);
                    adaptor.addChild(root_0, SEPARATOR100_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:61: ( '/' )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==212) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal101=(Token)match(input,212,FOLLOW_212_in_package_body5556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal101_tree = (CommonTree)adaptor.create(char_literal101);
                    adaptor.addChild(root_0, char_literal101_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:1: package_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_body_name_return package_body_name() throws RecognitionException {
        PL_SQLParser.package_body_name_return retval = new PL_SQLParser.package_body_name_return();
        retval.start = input.LT(1);
        int package_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS103=null;
        PL_SQLParser.universal_identifier_return universal_identifier102 = null;


        CommonTree ALIAS103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:19: ( universal_identifier | ALIAS )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=IDENTIFIER && LA39_0<=EXT_IDENTIFIER)||LA39_0==INTERVAL_KEYWORD||LA39_0==RESULT_KEYWORD) ) {
                alt39=1;
            }
            else if ( (LA39_0==ALIAS) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_body_name5564);
                    universal_identifier102=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier102.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS103=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_body_name5568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS103_tree = (CommonTree)adaptor.create(ALIAS103);
                    adaptor.addChild(root_0, ALIAS103_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, package_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body_name"

    public static class trigger_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:1: trigger_declaration : TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block ;
    public final PL_SQLParser.trigger_declaration_return trigger_declaration() throws RecognitionException {
        PL_SQLParser.trigger_declaration_return retval = new PL_SQLParser.trigger_declaration_return();
        retval.start = input.LT(1);
        int trigger_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRIGGER_KEYWORD104=null;
        PL_SQLParser.trigger_name_return trigger_name105 = null;

        PL_SQLParser.trigger_type_return trigger_type106 = null;

        PL_SQLParser.follows_part_return follows_part107 = null;

        PL_SQLParser.trigger_part_return trigger_part108 = null;

        PL_SQLParser.anonymous_block_return anonymous_block109 = null;


        CommonTree TRIGGER_KEYWORD104_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:21: ( TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:23: TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block
            {
            root_0 = (CommonTree)adaptor.nil();

            TRIGGER_KEYWORD104=(Token)match(input,TRIGGER_KEYWORD,FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRIGGER_KEYWORD104_tree = (CommonTree)adaptor.create(TRIGGER_KEYWORD104);
            root_0 = (CommonTree)adaptor.becomeRoot(TRIGGER_KEYWORD104_tree, root_0);
            }
            pushFollow(FOLLOW_trigger_name_in_trigger_declaration5578);
            trigger_name105=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_name105.getTree());
            pushFollow(FOLLOW_trigger_type_in_trigger_declaration5580);
            trigger_type106=trigger_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_type106.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:66: ( follows_part )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==FOLLOWS_KEYWORD) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: follows_part
                    {
                    pushFollow(FOLLOW_follows_part_in_trigger_declaration5582);
                    follows_part107=follows_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_part107.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_trigger_part_in_trigger_declaration5585);
            trigger_part108=trigger_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_part108.getTree());
            pushFollow(FOLLOW_anonymous_block_in_trigger_declaration5609);
            anonymous_block109=anonymous_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block109.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, trigger_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_declaration"

    public static class trigger_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:1: trigger_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.trigger_name_return trigger_name() throws RecognitionException {
        PL_SQLParser.trigger_name_return retval = new PL_SQLParser.trigger_name_return();
        retval.start = input.LT(1);
        int trigger_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS111=null;
        PL_SQLParser.universal_identifier_return universal_identifier110 = null;


        CommonTree ALIAS111_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:14: ( universal_identifier | ALIAS )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=IDENTIFIER && LA41_0<=EXT_IDENTIFIER)||LA41_0==INTERVAL_KEYWORD||LA41_0==RESULT_KEYWORD) ) {
                alt41=1;
            }
            else if ( (LA41_0==ALIAS) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:16: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_trigger_name5616);
                    universal_identifier110=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier110.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:39: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS111=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_trigger_name5620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS111_tree = (CommonTree)adaptor.create(ALIAS111);
                    adaptor.addChild(root_0, ALIAS111_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, trigger_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_name"

    public static class follows_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:1: follows_part : FOLLOWS_KEYWORD universal_identifier ;
    public final PL_SQLParser.follows_part_return follows_part() throws RecognitionException {
        PL_SQLParser.follows_part_return retval = new PL_SQLParser.follows_part_return();
        retval.start = input.LT(1);
        int follows_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOLLOWS_KEYWORD112=null;
        PL_SQLParser.universal_identifier_return universal_identifier113 = null;


        CommonTree FOLLOWS_KEYWORD112_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:14: ( FOLLOWS_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:16: FOLLOWS_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            FOLLOWS_KEYWORD112=(Token)match(input,FOLLOWS_KEYWORD,FOLLOW_FOLLOWS_KEYWORD_in_follows_part5627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOLLOWS_KEYWORD112_tree = (CommonTree)adaptor.create(FOLLOWS_KEYWORD112);
            adaptor.addChild(root_0, FOLLOWS_KEYWORD112_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_follows_part5629);
            universal_identifier113=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier113.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, follows_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "follows_part"

    public static class trigger_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:1: trigger_part : ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? ;
    public final PL_SQLParser.trigger_part_return trigger_part() throws RecognitionException {
        PL_SQLParser.trigger_part_return retval = new PL_SQLParser.trigger_part_return();
        retval.start = input.LT(1);
        int trigger_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set114=null;
        Token WHEN_KEYWORD115=null;
        PL_SQLParser.universal_expression_return universal_expression116 = null;


        CommonTree set114_tree=null;
        CommonTree WHEN_KEYWORD115_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:14: ( ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0>=ENABLE_KEYWORD && LA42_0<=DISABLE_KEYWORD)) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set114=(Token)input.LT(1);
                    if ( (input.LA(1)>=ENABLE_KEYWORD && input.LA(1)<=DISABLE_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set114));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:52: ( WHEN_KEYWORD universal_expression )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==WHEN_KEYWORD) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:53: WHEN_KEYWORD universal_expression
                    {
                    WHEN_KEYWORD115=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_trigger_part5646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD115_tree = (CommonTree)adaptor.create(WHEN_KEYWORD115);
                    adaptor.addChild(root_0, WHEN_KEYWORD115_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_trigger_part5648);
                    universal_expression116=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression116.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, trigger_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_part"

    public static class trigger_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:1: trigger_type : ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger );
    public final PL_SQLParser.trigger_type_return trigger_type() throws RecognitionException {
        PL_SQLParser.trigger_type_return retval = new PL_SQLParser.trigger_type_return();
        retval.start = input.LT(1);
        int trigger_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEFORE_KEYWORD117=null;
        Token AFTER_KEYWORD120=null;
        Token INSTEAD_KEYWORD123=null;
        Token OF_KEYWORD124=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause118 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger119 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause121 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger122 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause125 = null;

        PL_SQLParser.compound_dml_trigger_return compound_dml_trigger126 = null;


        CommonTree BEFORE_KEYWORD117_tree=null;
        CommonTree AFTER_KEYWORD120_tree=null;
        CommonTree INSTEAD_KEYWORD123_tree=null;
        CommonTree OF_KEYWORD124_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:14: ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger )
            int alt46=4;
            switch ( input.LA(1) ) {
            case BEFORE_KEYWORD:
                {
                alt46=1;
                }
                break;
            case AFTER_KEYWORD:
                {
                alt46=2;
                }
                break;
            case INSTEAD_KEYWORD:
                {
                alt46=3;
                }
                break;
            case FOR_KEYWORD:
                {
                alt46=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:17: BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    BEFORE_KEYWORD117=(Token)match(input,BEFORE_KEYWORD,FOLLOW_BEFORE_KEYWORD_in_trigger_type5658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEFORE_KEYWORD117_tree = (CommonTree)adaptor.create(BEFORE_KEYWORD117);
                    adaptor.addChild(root_0, BEFORE_KEYWORD117_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:32: ( dml_event_clause | non_dml_trigger )
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==DELETE_KEYWORD||LA44_0==INSERT_KEYWORD||LA44_0==UPDATE_KEYWORD) ) {
                        alt44=1;
                    }
                    else if ( (LA44_0==IDENTIFIER||LA44_0==INTERVAL_KEYWORD||LA44_0==RESULT_KEYWORD) ) {
                        alt44=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 0, input);

                        throw nvae;
                    }
                    switch (alt44) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:33: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5661);
                            dml_event_clause118=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause118.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:52: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5665);
                            non_dml_trigger119=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger119.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:17: AFTER_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    AFTER_KEYWORD120=(Token)match(input,AFTER_KEYWORD,FOLLOW_AFTER_KEYWORD_in_trigger_type5687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AFTER_KEYWORD120_tree = (CommonTree)adaptor.create(AFTER_KEYWORD120);
                    adaptor.addChild(root_0, AFTER_KEYWORD120_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:31: ( dml_event_clause | non_dml_trigger )
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==DELETE_KEYWORD||LA45_0==INSERT_KEYWORD||LA45_0==UPDATE_KEYWORD) ) {
                        alt45=1;
                    }
                    else if ( (LA45_0==IDENTIFIER||LA45_0==INTERVAL_KEYWORD||LA45_0==RESULT_KEYWORD) ) {
                        alt45=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 45, 0, input);

                        throw nvae;
                    }
                    switch (alt45) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:32: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5690);
                            dml_event_clause121=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause121.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:51: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5694);
                            non_dml_trigger122=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger122.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:17: INSTEAD_KEYWORD OF_KEYWORD dml_event_clause
                    {
                    INSTEAD_KEYWORD123=(Token)match(input,INSTEAD_KEYWORD,FOLLOW_INSTEAD_KEYWORD_in_trigger_type5716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTEAD_KEYWORD123_tree = (CommonTree)adaptor.create(INSTEAD_KEYWORD123);
                    adaptor.addChild(root_0, INSTEAD_KEYWORD123_tree);
                    }
                    OF_KEYWORD124=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_trigger_type5718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD124_tree = (CommonTree)adaptor.create(OF_KEYWORD124);
                    adaptor.addChild(root_0, OF_KEYWORD124_tree);
                    }
                    pushFollow(FOLLOW_dml_event_clause_in_trigger_type5720);
                    dml_event_clause125=dml_event_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause125.getTree());

                    }


                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:16: compound_dml_trigger
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_dml_trigger_in_trigger_type5740);
                    compound_dml_trigger126=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_dml_trigger126.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, trigger_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_type"

    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:1: compound_dml_trigger : FOR_KEYWORD dml_event_clause ( referencing_clause )? ;
    public final PL_SQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        PL_SQLParser.compound_dml_trigger_return retval = new PL_SQLParser.compound_dml_trigger_return();
        retval.start = input.LT(1);
        int compound_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD127=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause128 = null;

        PL_SQLParser.referencing_clause_return referencing_clause129 = null;


        CommonTree FOR_KEYWORD127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:22: ( FOR_KEYWORD dml_event_clause ( referencing_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:24: FOR_KEYWORD dml_event_clause ( referencing_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD127=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD127_tree = (CommonTree)adaptor.create(FOR_KEYWORD127);
            adaptor.addChild(root_0, FOR_KEYWORD127_tree);
            }
            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger5749);
            dml_event_clause128=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause128.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:53: ( referencing_clause )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==REFERENCING_KEYWORD) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger5751);
                    referencing_clause129=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause129.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, compound_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"

    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:1: non_dml_trigger : ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier ;
    public final PL_SQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        PL_SQLParser.non_dml_trigger_return retval = new PL_SQLParser.non_dml_trigger_return();
        retval.start = input.LT(1);
        int non_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR_OPERATOR131=null;
        Token ON_KEYWORD132=null;
        PL_SQLParser.identifier_return identifier130 = null;

        PL_SQLParser.universal_identifier_return universal_identifier133 = null;


        CommonTree OR_OPERATOR131_tree=null;
        CommonTree ON_KEYWORD132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:17: ( ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:19: ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:19: ( identifier ( OR_OPERATOR )? )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==IDENTIFIER||LA49_0==INTERVAL_KEYWORD||LA49_0==RESULT_KEYWORD) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:20: identifier ( OR_OPERATOR )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_non_dml_trigger5760);
            	    identifier130=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier130.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:31: ( OR_OPERATOR )?
            	    int alt48=2;
            	    int LA48_0 = input.LA(1);

            	    if ( (LA48_0==OR_OPERATOR) ) {
            	        alt48=1;
            	    }
            	    switch (alt48) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR131=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_non_dml_trigger5762); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR131_tree = (CommonTree)adaptor.create(OR_OPERATOR131);
            	            adaptor.addChild(root_0, OR_OPERATOR131_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);

            ON_KEYWORD132=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_non_dml_trigger5767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD132_tree = (CommonTree)adaptor.create(ON_KEYWORD132);
            adaptor.addChild(root_0, ON_KEYWORD132_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_non_dml_trigger5769);
            universal_identifier133=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier133.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, non_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"

    public static class dml_event_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:1: dml_event_clause : ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? ;
    public final PL_SQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
        PL_SQLParser.dml_event_clause_return retval = new PL_SQLParser.dml_event_clause_return();
        retval.start = input.LT(1);
        int dml_event_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD134=null;
        Token DELETE_KEYWORD135=null;
        Token UPDATE_KEYWORD136=null;
        Token OR_OPERATOR138=null;
        Token FOR_KEYWORD142=null;
        Token EACH_KEYWORD143=null;
        Token ROW_KEYWORD144=null;
        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor137 = null;

        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor139 = null;

        PL_SQLParser.dml_event_clause_part_return dml_event_clause_part140 = null;

        PL_SQLParser.referencing_clause_return referencing_clause141 = null;


        CommonTree INSERT_KEYWORD134_tree=null;
        CommonTree DELETE_KEYWORD135_tree=null;
        CommonTree UPDATE_KEYWORD136_tree=null;
        CommonTree OR_OPERATOR138_tree=null;
        CommonTree FOR_KEYWORD142_tree=null;
        CommonTree EACH_KEYWORD143_tree=null;
        CommonTree ROW_KEYWORD144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:18: ( ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+
            int cnt54=0;
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==DELETE_KEYWORD||LA54_0==INSERT_KEYWORD||LA54_0==UPDATE_KEYWORD) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) )
            	    int alt51=3;
            	    switch ( input.LA(1) ) {
            	    case INSERT_KEYWORD:
            	        {
            	        alt51=1;
            	        }
            	        break;
            	    case DELETE_KEYWORD:
            	        {
            	        alt51=2;
            	        }
            	        break;
            	    case UPDATE_KEYWORD:
            	        {
            	        alt51=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 51, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt51) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:22: INSERT_KEYWORD
            	            {
            	            INSERT_KEYWORD134=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_dml_event_clause5778); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INSERT_KEYWORD134_tree = (CommonTree)adaptor.create(INSERT_KEYWORD134);
            	            adaptor.addChild(root_0, INSERT_KEYWORD134_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:39: DELETE_KEYWORD
            	            {
            	            DELETE_KEYWORD135=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_dml_event_clause5782); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DELETE_KEYWORD135_tree = (CommonTree)adaptor.create(DELETE_KEYWORD135);
            	            adaptor.addChild(root_0, DELETE_KEYWORD135_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:22: UPDATE_KEYWORD ( dml_event_clause_factor )?
            	            {
            	            UPDATE_KEYWORD136=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5808); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UPDATE_KEYWORD136_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD136);
            	            adaptor.addChild(root_0, UPDATE_KEYWORD136_tree);
            	            }
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:37: ( dml_event_clause_factor )?
            	            int alt50=2;
            	            int LA50_0 = input.LA(1);

            	            if ( (LA50_0==OF_KEYWORD) ) {
            	                int LA50_2 = input.LA(2);

            	                if ( (synpred69_PL_SQL()) ) {
            	                    alt50=1;
            	                }
            	            }
            	            switch (alt50) {
            	                case 1 :
            	                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	                    {
            	                    pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5810);
            	                    dml_event_clause_factor137=dml_event_clause_factor();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor137.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:21: ( OR_OPERATOR )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==OR_OPERATOR) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR138=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_dml_event_clause5835); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR138_tree = (CommonTree)adaptor.create(OR_OPERATOR138);
            	            adaptor.addChild(root_0, OR_OPERATOR138_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:34: ( dml_event_clause_factor )?
            	    int alt53=2;
            	    int LA53_0 = input.LA(1);

            	    if ( (LA53_0==OF_KEYWORD) ) {
            	        alt53=1;
            	    }
            	    switch (alt53) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	            {
            	            pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5838);
            	            dml_event_clause_factor139=dml_event_clause_factor();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor139.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);

            pushFollow(FOLLOW_dml_event_clause_part_in_dml_event_clause5863);
            dml_event_clause_part140=dml_event_clause_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_part140.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:43: ( referencing_clause )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==REFERENCING_KEYWORD) ) {
                int LA55_1 = input.LA(2);

                if ( (synpred73_PL_SQL()) ) {
                    alt55=1;
                }
            }
            switch (alt55) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_dml_event_clause5865);
                    referencing_clause141=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause141.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:21: ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==FOR_KEYWORD) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:22: FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD
                    {
                    FOR_KEYWORD142=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_dml_event_clause5889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD142_tree = (CommonTree)adaptor.create(FOR_KEYWORD142);
                    adaptor.addChild(root_0, FOR_KEYWORD142_tree);
                    }
                    EACH_KEYWORD143=(Token)match(input,EACH_KEYWORD,FOLLOW_EACH_KEYWORD_in_dml_event_clause5891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EACH_KEYWORD143_tree = (CommonTree)adaptor.create(EACH_KEYWORD143);
                    adaptor.addChild(root_0, EACH_KEYWORD143_tree);
                    }
                    ROW_KEYWORD144=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_dml_event_clause5893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD144_tree = (CommonTree)adaptor.create(ROW_KEYWORD144);
                    adaptor.addChild(root_0, ROW_KEYWORD144_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, dml_event_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"

    public static class dml_event_clause_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:1: dml_event_clause_factor : OF_KEYWORD ( universal_identifier ( COMMA )? )+ ;
    public final PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor() throws RecognitionException {
        PL_SQLParser.dml_event_clause_factor_return retval = new PL_SQLParser.dml_event_clause_factor_return();
        retval.start = input.LT(1);
        int dml_event_clause_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OF_KEYWORD145=null;
        Token COMMA147=null;
        PL_SQLParser.universal_identifier_return universal_identifier146 = null;


        CommonTree OF_KEYWORD145_tree=null;
        CommonTree COMMA147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:25: ( OF_KEYWORD ( universal_identifier ( COMMA )? )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:27: OF_KEYWORD ( universal_identifier ( COMMA )? )+
            {
            root_0 = (CommonTree)adaptor.nil();

            OF_KEYWORD145=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD145_tree = (CommonTree)adaptor.create(OF_KEYWORD145);
            adaptor.addChild(root_0, OF_KEYWORD145_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:38: ( universal_identifier ( COMMA )? )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( ((LA58_0>=IDENTIFIER && LA58_0<=EXT_IDENTIFIER)||LA58_0==INTERVAL_KEYWORD||LA58_0==RESULT_KEYWORD) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:39: universal_identifier ( COMMA )?
            	    {
            	    pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_factor5905);
            	    universal_identifier146=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier146.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:60: ( COMMA )?
            	    int alt57=2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==COMMA) ) {
            	        alt57=1;
            	    }
            	    switch (alt57) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: COMMA
            	            {
            	            COMMA147=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_clause_factor5907); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA147_tree = (CommonTree)adaptor.create(COMMA147);
            	            adaptor.addChild(root_0, COMMA147_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, dml_event_clause_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_factor"

    public static class dml_event_clause_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:1: dml_event_clause_part : ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) ;
    public final PL_SQLParser.dml_event_clause_part_return dml_event_clause_part() throws RecognitionException {
        PL_SQLParser.dml_event_clause_part_return retval = new PL_SQLParser.dml_event_clause_part_return();
        retval.start = input.LT(1);
        int dml_event_clause_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ON_KEYWORD148=null;
        Token NESTED_KEYWORD149=null;
        Token TABLE_KEYWORD150=null;
        Token OF_KEYWORD152=null;
        PL_SQLParser.identifier_return identifier151 = null;

        PL_SQLParser.universal_identifier_return universal_identifier153 = null;


        CommonTree ON_KEYWORD148_tree=null;
        CommonTree NESTED_KEYWORD149_tree=null;
        CommonTree TABLE_KEYWORD150_tree=null;
        CommonTree OF_KEYWORD152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:23: ( ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:25: ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            {
            root_0 = (CommonTree)adaptor.nil();

            ON_KEYWORD148=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_dml_event_clause_part5917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD148_tree = (CommonTree)adaptor.create(ON_KEYWORD148);
            adaptor.addChild(root_0, ON_KEYWORD148_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:36: ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==NESTED_KEYWORD) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:38: NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD
                    {
                    NESTED_KEYWORD149=(Token)match(input,NESTED_KEYWORD,FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_KEYWORD149_tree = (CommonTree)adaptor.create(NESTED_KEYWORD149);
                    adaptor.addChild(root_0, NESTED_KEYWORD149_tree);
                    }
                    TABLE_KEYWORD150=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD150_tree = (CommonTree)adaptor.create(TABLE_KEYWORD150);
                    adaptor.addChild(root_0, TABLE_KEYWORD150_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_dml_event_clause_part5925);
                    identifier151=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier151.getTree());
                    OF_KEYWORD152=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_part5927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD152_tree = (CommonTree)adaptor.create(OF_KEYWORD152);
                    adaptor.addChild(root_0, OF_KEYWORD152_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_part5931);
            universal_identifier153=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier153.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, dml_event_clause_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_part"

    public static class referencing_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:1: referencing_clause : REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ ;
    public final PL_SQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
        PL_SQLParser.referencing_clause_return retval = new PL_SQLParser.referencing_clause_return();
        retval.start = input.LT(1);
        int referencing_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REFERENCING_KEYWORD154=null;
        Token set155=null;
        Token AS_KEYWORD156=null;
        Token OLD_KEYWORD157=null;
        Token NEW_KEYWORD158=null;
        PL_SQLParser.identifier_return identifier159 = null;


        CommonTree REFERENCING_KEYWORD154_tree=null;
        CommonTree set155_tree=null;
        CommonTree AS_KEYWORD156_tree=null;
        CommonTree OLD_KEYWORD157_tree=null;
        CommonTree NEW_KEYWORD158_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:20: ( REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:22: REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            REFERENCING_KEYWORD154=(Token)match(input,REFERENCING_KEYWORD,FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCING_KEYWORD154_tree = (CommonTree)adaptor.create(REFERENCING_KEYWORD154);
            adaptor.addChild(root_0, REFERENCING_KEYWORD154_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:42: ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=OLD_KEYWORD && LA62_0<=PARENT_KEYWORD)) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:44: ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    {
            	    set155=(Token)input.LT(1);
            	    if ( (input.LA(1)>=OLD_KEYWORD && input.LA(1)<=PARENT_KEYWORD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set155));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:22: ( AS_KEYWORD )?
            	    int alt60=2;
            	    int LA60_0 = input.LA(1);

            	    if ( (LA60_0==AS_KEYWORD) ) {
            	        alt60=1;
            	    }
            	    switch (alt60) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: AS_KEYWORD
            	            {
            	            AS_KEYWORD156=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_referencing_clause5976); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AS_KEYWORD156_tree = (CommonTree)adaptor.create(AS_KEYWORD156);
            	            adaptor.addChild(root_0, AS_KEYWORD156_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:34: ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    int alt61=3;
            	    switch ( input.LA(1) ) {
            	    case OLD_KEYWORD:
            	        {
            	        alt61=1;
            	        }
            	        break;
            	    case NEW_KEYWORD:
            	        {
            	        alt61=2;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    case INTERVAL_KEYWORD:
            	    case RESULT_KEYWORD:
            	        {
            	        alt61=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 61, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt61) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:35: OLD_KEYWORD
            	            {
            	            OLD_KEYWORD157=(Token)match(input,OLD_KEYWORD,FOLLOW_OLD_KEYWORD_in_referencing_clause5980); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OLD_KEYWORD157_tree = (CommonTree)adaptor.create(OLD_KEYWORD157);
            	            adaptor.addChild(root_0, OLD_KEYWORD157_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:49: NEW_KEYWORD
            	            {
            	            NEW_KEYWORD158=(Token)match(input,NEW_KEYWORD,FOLLOW_NEW_KEYWORD_in_referencing_clause5984); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NEW_KEYWORD158_tree = (CommonTree)adaptor.create(NEW_KEYWORD158);
            	            adaptor.addChild(root_0, NEW_KEYWORD158_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:63: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_referencing_clause5988);
            	            identifier159=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier159.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, referencing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"

    public static class type_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:1: type_declaration : ( ( TYPE_KEYWORD type_spec_declaration ) -> ^( IM_TYPE_SPC type_spec_declaration ) | ( TYPE_KEYWORD type_body_declaration ) -> ^( IM_TYPE_BODY type_body_declaration ) );
    public final PL_SQLParser.type_declaration_return type_declaration() throws RecognitionException {
        PL_SQLParser.type_declaration_return retval = new PL_SQLParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD160=null;
        Token TYPE_KEYWORD162=null;
        PL_SQLParser.type_spec_declaration_return type_spec_declaration161 = null;

        PL_SQLParser.type_body_declaration_return type_body_declaration163 = null;


        CommonTree TYPE_KEYWORD160_tree=null;
        CommonTree TYPE_KEYWORD162_tree=null;
        RewriteRuleTokenStream stream_TYPE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token TYPE_KEYWORD");
        RewriteRuleSubtreeStream stream_type_body_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_body_declaration");
        RewriteRuleSubtreeStream stream_type_spec_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_spec_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:18: ( ( TYPE_KEYWORD type_spec_declaration ) -> ^( IM_TYPE_SPC type_spec_declaration ) | ( TYPE_KEYWORD type_body_declaration ) -> ^( IM_TYPE_BODY type_body_declaration ) )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==TYPE_KEYWORD) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred84_PL_SQL()) ) {
                    alt63=1;
                }
                else if ( (true) ) {
                    alt63=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:20: ( TYPE_KEYWORD type_spec_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:20: ( TYPE_KEYWORD type_spec_declaration )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:21: TYPE_KEYWORD type_spec_declaration
                    {
                    TYPE_KEYWORD160=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration6000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE_KEYWORD.add(TYPE_KEYWORD160);

                    pushFollow(FOLLOW_type_spec_declaration_in_type_declaration6002);
                    type_spec_declaration161=type_spec_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec_declaration.add(type_spec_declaration161.getTree());

                    }



                    // AST REWRITE
                    // elements: type_spec_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 661:57: -> ^( IM_TYPE_SPC type_spec_declaration )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:60: ^( IM_TYPE_SPC type_spec_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_TYPE_SPC, "IM_TYPE_SPC"), root_1);

                        adaptor.addChild(root_1, stream_type_spec_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:20: ( TYPE_KEYWORD type_body_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:20: ( TYPE_KEYWORD type_body_declaration )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:21: TYPE_KEYWORD type_body_declaration
                    {
                    TYPE_KEYWORD162=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration6054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE_KEYWORD.add(TYPE_KEYWORD162);

                    pushFollow(FOLLOW_type_body_declaration_in_type_declaration6056);
                    type_body_declaration163=type_body_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_body_declaration.add(type_body_declaration163.getTree());

                    }



                    // AST REWRITE
                    // elements: type_body_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 663:57: -> ^( IM_TYPE_BODY type_body_declaration )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:60: ^( IM_TYPE_BODY type_body_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_TYPE_BODY, "IM_TYPE_BODY"), root_1);

                        adaptor.addChild(root_1, stream_type_body_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_spec_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:1: type_spec_declaration : type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_spec_declaration_return type_spec_declaration() throws RecognitionException {
        PL_SQLParser.type_spec_declaration_return retval = new PL_SQLParser.type_spec_declaration_return();
        retval.start = input.LT(1);
        int type_spec_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR168=null;
        Token char_literal169=null;
        PL_SQLParser.type_spec_name_return type_spec_name164 = null;

        PL_SQLParser.type_oid_part_return type_oid_part165 = null;

        PL_SQLParser.invoker_clause_return invoker_clause166 = null;

        PL_SQLParser.type_spec_types_return type_spec_types167 = null;


        CommonTree SEPARATOR168_tree=null;
        CommonTree char_literal169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:23: ( type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:25: type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_spec_name_in_type_spec_declaration6072);
            type_spec_name164=type_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_name164.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:40: ( type_oid_part )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==OID_KEYWORD) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: type_oid_part
                    {
                    pushFollow(FOLLOW_type_oid_part_in_type_spec_declaration6074);
                    type_oid_part165=type_oid_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_oid_part165.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:55: ( invoker_clause )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==AUTHID_KEYWORD) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_type_spec_declaration6077);
                    invoker_clause166=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause166.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_types_in_type_spec_declaration6080);
            type_spec_types167=type_spec_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_types167.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:25: ( SEPARATOR )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==SEPARATOR) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR168=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_spec_declaration6106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR168_tree = (CommonTree)adaptor.create(SEPARATOR168);
                    adaptor.addChild(root_0, SEPARATOR168_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:36: ( '/' )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==212) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal169=(Token)match(input,212,FOLLOW_212_in_type_spec_declaration6109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal169_tree = (CommonTree)adaptor.create(char_literal169);
                    adaptor.addChild(root_0, char_literal169_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, type_spec_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_declaration"

    public static class type_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:1: type_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_spec_name_return type_spec_name() throws RecognitionException {
        PL_SQLParser.type_spec_name_return retval = new PL_SQLParser.type_spec_name_return();
        retval.start = input.LT(1);
        int type_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS171=null;
        PL_SQLParser.universal_identifier_return universal_identifier170 = null;


        CommonTree ALIAS171_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:16: ( universal_identifier | ALIAS )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=IDENTIFIER && LA68_0<=EXT_IDENTIFIER)||LA68_0==INTERVAL_KEYWORD||LA68_0==RESULT_KEYWORD) ) {
                alt68=1;
            }
            else if ( (LA68_0==ALIAS) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_spec_name6117);
                    universal_identifier170=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier170.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS171=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_spec_name6121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS171_tree = (CommonTree)adaptor.create(ALIAS171);
                    adaptor.addChild(root_0, ALIAS171_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, type_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_name"

    public static class type_oid_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_oid_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:1: type_oid_part : OID_KEYWORD '\\'' universal_identifier '\\'' ;
    public final PL_SQLParser.type_oid_part_return type_oid_part() throws RecognitionException {
        PL_SQLParser.type_oid_part_return retval = new PL_SQLParser.type_oid_part_return();
        retval.start = input.LT(1);
        int type_oid_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OID_KEYWORD172=null;
        Token char_literal173=null;
        Token char_literal175=null;
        PL_SQLParser.universal_identifier_return universal_identifier174 = null;


        CommonTree OID_KEYWORD172_tree=null;
        CommonTree char_literal173_tree=null;
        CommonTree char_literal175_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:15: ( OID_KEYWORD '\\'' universal_identifier '\\'' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:17: OID_KEYWORD '\\'' universal_identifier '\\''
            {
            root_0 = (CommonTree)adaptor.nil();

            OID_KEYWORD172=(Token)match(input,OID_KEYWORD,FOLLOW_OID_KEYWORD_in_type_oid_part6128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OID_KEYWORD172_tree = (CommonTree)adaptor.create(OID_KEYWORD172);
            adaptor.addChild(root_0, OID_KEYWORD172_tree);
            }
            char_literal173=(Token)match(input,213,FOLLOW_213_in_type_oid_part6130); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal173_tree = (CommonTree)adaptor.create(char_literal173);
            adaptor.addChild(root_0, char_literal173_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_type_oid_part6132);
            universal_identifier174=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier174.getTree());
            char_literal175=(Token)match(input,213,FOLLOW_213_in_type_oid_part6134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal175_tree = (CommonTree)adaptor.create(char_literal175);
            adaptor.addChild(root_0, char_literal175_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, type_oid_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_oid_part"

    public static class type_spec_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:1: type_spec_types : ( object_type | varray_type | nested_table_type );
    public final PL_SQLParser.type_spec_types_return type_spec_types() throws RecognitionException {
        PL_SQLParser.type_spec_types_return retval = new PL_SQLParser.type_spec_types_return();
        retval.start = input.LT(1);
        int type_spec_types_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.object_type_return object_type176 = null;

        PL_SQLParser.varray_type_return varray_type177 = null;

        PL_SQLParser.nested_table_type_return nested_table_type178 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:17: ( object_type | varray_type | nested_table_type )
            int alt69=3;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==UNDER_KEYWORD) ) {
                alt69=1;
            }
            else if ( (LA69_0==IS_KEYWORD||LA69_0==AS_KEYWORD) ) {
                int LA69_2 = input.LA(2);

                if ( (synpred90_PL_SQL()) ) {
                    alt69=1;
                }
                else if ( (synpred91_PL_SQL()) ) {
                    alt69=2;
                }
                else if ( (true) ) {
                    alt69=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:19: object_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_object_type_in_type_spec_types6142);
                    object_type176=object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type176.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:33: varray_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_varray_type_in_type_spec_types6146);
                    varray_type177=varray_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_type177.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:47: nested_table_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nested_table_type_in_type_spec_types6150);
                    nested_table_type178=nested_table_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_type178.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, type_spec_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_types"

    public static class object_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:1: object_type : ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? ;
    public final PL_SQLParser.object_type_return object_type() throws RecognitionException {
        PL_SQLParser.object_type_return retval = new PL_SQLParser.object_type_return();
        retval.start = input.LT(1);
        int object_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OBJECT_KEYWORD180=null;
        Token UNDER_KEYWORD181=null;
        Token NOT_OPERATOR184=null;
        Token FINAL_KEYWORD185=null;
        Token NOT_OPERATOR186=null;
        Token INSTANTIABLE_KEYWORD187=null;
        PL_SQLParser.as_is_part_return as_is_part179 = null;

        PL_SQLParser.universal_identifier_return universal_identifier182 = null;

        PL_SQLParser.object_type_part_return object_type_part183 = null;


        CommonTree OBJECT_KEYWORD180_tree=null;
        CommonTree UNDER_KEYWORD181_tree=null;
        CommonTree NOT_OPERATOR184_tree=null;
        CommonTree FINAL_KEYWORD185_tree=null;
        CommonTree NOT_OPERATOR186_tree=null;
        CommonTree INSTANTIABLE_KEYWORD187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:13: ( ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IS_KEYWORD||LA70_0==AS_KEYWORD) ) {
                alt70=1;
            }
            else if ( (LA70_0==UNDER_KEYWORD) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:16: ( as_is_part OBJECT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:16: ( as_is_part OBJECT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:17: as_is_part OBJECT_KEYWORD
                    {
                    pushFollow(FOLLOW_as_is_part_in_object_type6159);
                    as_is_part179=as_is_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part179.getTree());
                    OBJECT_KEYWORD180=(Token)match(input,OBJECT_KEYWORD,FOLLOW_OBJECT_KEYWORD_in_object_type6161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OBJECT_KEYWORD180_tree = (CommonTree)adaptor.create(OBJECT_KEYWORD180);
                    adaptor.addChild(root_0, OBJECT_KEYWORD180_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:46: ( UNDER_KEYWORD universal_identifier )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:46: ( UNDER_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:47: UNDER_KEYWORD universal_identifier
                    {
                    UNDER_KEYWORD181=(Token)match(input,UNDER_KEYWORD,FOLLOW_UNDER_KEYWORD_in_object_type6167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDER_KEYWORD181_tree = (CommonTree)adaptor.create(UNDER_KEYWORD181);
                    adaptor.addChild(root_0, UNDER_KEYWORD181_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_object_type6169);
                    universal_identifier182=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier182.getTree());

                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:15: ( object_type_part )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==LPAREN) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: object_type_part
                    {
                    pushFollow(FOLLOW_object_type_part_in_object_type6187);
                    object_type_part183=object_type_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type_part183.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:16: ( ( NOT_OPERATOR )? FINAL_KEYWORD )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==FINAL_KEYWORD) ) {
                alt73=1;
            }
            else if ( (LA73_0==NOT_OPERATOR) ) {
                int LA73_3 = input.LA(2);

                if ( (synpred95_PL_SQL()) ) {
                    alt73=1;
                }
            }
            switch (alt73) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:17: ( NOT_OPERATOR )? FINAL_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:17: ( NOT_OPERATOR )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==NOT_OPERATOR) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR184=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type6206); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR184_tree = (CommonTree)adaptor.create(NOT_OPERATOR184);
                            adaptor.addChild(root_0, NOT_OPERATOR184_tree);
                            }

                            }
                            break;

                    }

                    FINAL_KEYWORD185=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_object_type6209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD185_tree = (CommonTree)adaptor.create(FINAL_KEYWORD185);
                    adaptor.addChild(root_0, FINAL_KEYWORD185_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:47: ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==INSTANTIABLE_KEYWORD||LA75_0==NOT_OPERATOR) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:48: ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:48: ( NOT_OPERATOR )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==NOT_OPERATOR) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR186=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type6214); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR186_tree = (CommonTree)adaptor.create(NOT_OPERATOR186);
                            adaptor.addChild(root_0, NOT_OPERATOR186_tree);
                            }

                            }
                            break;

                    }

                    INSTANTIABLE_KEYWORD187=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_object_type6217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD187_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD187);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD187_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, object_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type"

    public static class object_type_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:1: object_type_part : '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' ;
    public final PL_SQLParser.object_type_part_return object_type_part() throws RecognitionException {
        PL_SQLParser.object_type_part_return retval = new PL_SQLParser.object_type_part_return();
        retval.start = input.LT(1);
        int object_type_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal188=null;
        Token char_literal191=null;
        Token char_literal193=null;
        Token char_literal194=null;
        PL_SQLParser.identifier_return identifier189 = null;

        PL_SQLParser.data_type_return data_type190 = null;

        PL_SQLParser.element_spec_return element_spec192 = null;


        CommonTree char_literal188_tree=null;
        CommonTree char_literal191_tree=null;
        CommonTree char_literal193_tree=null;
        CommonTree char_literal194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:18: ( '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:20: '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal188=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_object_type_part6226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal188_tree = (CommonTree)adaptor.create(char_literal188);
            adaptor.addChild(root_0, char_literal188_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:24: ( identifier data_type ( ',' )? )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==IDENTIFIER||LA77_0==INTERVAL_KEYWORD||LA77_0==RESULT_KEYWORD) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:25: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_object_type_part6229);
            	    identifier189=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier189.getTree());
            	    pushFollow(FOLLOW_data_type_in_object_type_part6231);
            	    data_type190=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type190.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:46: ( ',' )?
            	    int alt76=2;
            	    int LA76_0 = input.LA(1);

            	    if ( (LA76_0==COMMA) ) {
            	        alt76=1;
            	    }
            	    switch (alt76) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal191=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part6233); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal191_tree = (CommonTree)adaptor.create(char_literal191);
            	            adaptor.addChild(root_0, char_literal191_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:53: ( element_spec ( ',' )? )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( ((LA79_0>=FINAL_KEYWORD && LA79_0<=CONSTRUCTOR_KEYWORD)||(LA79_0>=MAP_KEYWORD && LA79_0<=ORDER_KEYWORD)||LA79_0==NOT_OPERATOR) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:54: element_spec ( ',' )?
            	    {
            	    pushFollow(FOLLOW_element_spec_in_object_type_part6239);
            	    element_spec192=element_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec192.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:67: ( ',' )?
            	    int alt78=2;
            	    int LA78_0 = input.LA(1);

            	    if ( (LA78_0==COMMA) ) {
            	        alt78=1;
            	    }
            	    switch (alt78) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal193=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part6241); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal193_tree = (CommonTree)adaptor.create(char_literal193);
            	            adaptor.addChild(root_0, char_literal193_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            char_literal194=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_object_type_part6246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal194_tree = (CommonTree)adaptor.create(char_literal194);
            adaptor.addChild(root_0, char_literal194_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, object_type_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type_part"

    public static class element_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:1: element_spec : ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? ;
    public final PL_SQLParser.element_spec_return element_spec() throws RecognitionException {
        PL_SQLParser.element_spec_return retval = new PL_SQLParser.element_spec_return();
        retval.start = input.LT(1);
        int element_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal199=null;
        PL_SQLParser.inheritance_clauses_return inheritance_clauses195 = null;

        PL_SQLParser.subprogram_spec_return subprogram_spec196 = null;

        PL_SQLParser.constructor_spec_return constructor_spec197 = null;

        PL_SQLParser.map_order_function_spec_return map_order_function_spec198 = null;

        PL_SQLParser.pragma_clause_return pragma_clause200 = null;


        CommonTree char_literal199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:14: ( ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:16: ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:16: ( inheritance_clauses )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==OVERRIDING_KEYWORD||LA80_0==NOT_OPERATOR) ) {
                alt80=1;
            }
            else if ( ((LA80_0>=FINAL_KEYWORD && LA80_0<=INSTANTIABLE_KEYWORD)) ) {
                int LA80_3 = input.LA(2);

                if ( (synpred102_PL_SQL()) ) {
                    alt80=1;
                }
            }
            switch (alt80) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: inheritance_clauses
                    {
                    pushFollow(FOLLOW_inheritance_clauses_in_element_spec6253);
                    inheritance_clauses195=inheritance_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inheritance_clauses195.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:37: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( ((LA83_0>=FINAL_KEYWORD && LA83_0<=INSTANTIABLE_KEYWORD)||(LA83_0>=MEMBER_KEYWORD && LA83_0<=CONSTRUCTOR_KEYWORD)||(LA83_0>=MAP_KEYWORD && LA83_0<=ORDER_KEYWORD)) ) {
                    int LA83_2 = input.LA(2);

                    if ( (synpred106_PL_SQL()) ) {
                        alt83=1;
                    }


                }


                switch (alt83) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
            	    int alt81=3;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_KEYWORD:
            	    case STATIC_KEYWORD:
            	        {
            	        alt81=1;
            	        }
            	        break;
            	    case FINAL_KEYWORD:
            	    case INSTANTIABLE_KEYWORD:
            	    case CONSTRUCTOR_KEYWORD:
            	        {
            	        alt81=2;
            	        }
            	        break;
            	    case MAP_KEYWORD:
            	    case ORDER_KEYWORD:
            	        {
            	        alt81=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 81, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt81) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:39: subprogram_spec
            	            {
            	            pushFollow(FOLLOW_subprogram_spec_in_element_spec6258);
            	            subprogram_spec196=subprogram_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec196.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:57: constructor_spec
            	            {
            	            pushFollow(FOLLOW_constructor_spec_in_element_spec6262);
            	            constructor_spec197=constructor_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec197.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:76: map_order_function_spec
            	            {
            	            pushFollow(FOLLOW_map_order_function_spec_in_element_spec6266);
            	            map_order_function_spec198=map_order_function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec198.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:101: ( ',' )?
            	    int alt82=2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0==COMMA) ) {
            	        int LA82_2 = input.LA(2);

            	        if ( (synpred105_PL_SQL()) ) {
            	            alt82=1;
            	        }
            	    }
            	    switch (alt82) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal199=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec6269); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal199_tree = (CommonTree)adaptor.create(char_literal199);
            	            adaptor.addChild(root_0, char_literal199_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:16: ( pragma_clause )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==PRAGMA_KEYWORD) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec6289);
                    pragma_clause200=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_clause200.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, element_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_spec"

    public static class pragma_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:1: pragma_clause : PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ;
    public final PL_SQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
        PL_SQLParser.pragma_clause_return retval = new PL_SQLParser.pragma_clause_return();
        retval.start = input.LT(1);
        int pragma_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD201=null;
        Token RESTRICT_REFERENCES_KEYWORD202=null;
        Token char_literal203=null;
        Token char_literal205=null;
        Token char_literal207=null;
        PL_SQLParser.expression_return expression204 = null;

        PL_SQLParser.expression_return expression206 = null;


        CommonTree PRAGMA_KEYWORD201_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD202_tree=null;
        CommonTree char_literal203_tree=null;
        CommonTree char_literal205_tree=null;
        CommonTree char_literal207_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:15: ( PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:17: PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD201=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_clause6297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD201_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD201);
            adaptor.addChild(root_0, PRAGMA_KEYWORD201_tree);
            }
            RESTRICT_REFERENCES_KEYWORD202=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause6299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESTRICT_REFERENCES_KEYWORD202_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD202);
            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD202_tree);
            }
            char_literal203=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_clause6301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal203_tree = (CommonTree)adaptor.create(char_literal203);
            adaptor.addChild(root_0, char_literal203_tree);
            }
            pushFollow(FOLLOW_expression_in_pragma_clause6303);
            expression204=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression204.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:75: ( ',' expression )+
            int cnt85=0;
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:76: ',' expression
            	    {
            	    char_literal205=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause6306); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal205_tree = (CommonTree)adaptor.create(char_literal205);
            	    adaptor.addChild(root_0, char_literal205_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_pragma_clause6308);
            	    expression206=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression206.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);

            char_literal207=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_clause6312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal207_tree = (CommonTree)adaptor.create(char_literal207);
            adaptor.addChild(root_0, char_literal207_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, pragma_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"

    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:1: map_order_function_spec : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec ;
    public final PL_SQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        PL_SQLParser.map_order_function_spec_return retval = new PL_SQLParser.map_order_function_spec_return();
        retval.start = input.LT(1);
        int map_order_function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set208=null;
        Token MEMBER_KEYWORD209=null;
        PL_SQLParser.function_spec_return function_spec210 = null;


        CommonTree set208_tree=null;
        CommonTree MEMBER_KEYWORD209_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:25: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:27: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            set208=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set208));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD209=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD209_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD209);
            adaptor.addChild(root_0, MEMBER_KEYWORD209_tree);
            }
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec6329);
            function_spec210=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec210.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, map_order_function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"

    public static class constructor_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:1: constructor_spec : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? ;
    public final PL_SQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
        PL_SQLParser.constructor_spec_return retval = new PL_SQLParser.constructor_spec_return();
        retval.start = input.LT(1);
        int constructor_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD211=null;
        Token INSTANTIABLE_KEYWORD212=null;
        Token CONSTRUCTOR_KEYWORD213=null;
        Token FUNCTION_KEYWORD214=null;
        PL_SQLParser.data_type_return data_type215 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part216 = null;


        CommonTree FINAL_KEYWORD211_tree=null;
        CommonTree INSTANTIABLE_KEYWORD212_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD213_tree=null;
        CommonTree FUNCTION_KEYWORD214_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:18: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:20: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:20: ( FINAL_KEYWORD )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==FINAL_KEYWORD) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD211=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_spec6336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD211_tree = (CommonTree)adaptor.create(FINAL_KEYWORD211);
                    adaptor.addChild(root_0, FINAL_KEYWORD211_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:35: ( INSTANTIABLE_KEYWORD )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==INSTANTIABLE_KEYWORD) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD212=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD212_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD212);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD212_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD213=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD213_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD213);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD213_tree);
            }
            FUNCTION_KEYWORD214=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD214_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD214);
            adaptor.addChild(root_0, FUNCTION_KEYWORD214_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_spec6365);
            data_type215=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type215.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:30: ( constructor_spec_part )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==LPAREN) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_spec6367);
                    constructor_spec_part216=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part216.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, constructor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"

    public static class constructor_spec_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:1: constructor_spec_part : '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD ;
    public final PL_SQLParser.constructor_spec_part_return constructor_spec_part() throws RecognitionException {
        PL_SQLParser.constructor_spec_part_return retval = new PL_SQLParser.constructor_spec_part_return();
        retval.start = input.LT(1);
        int constructor_spec_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal217=null;
        Token SELF_KEYWORD218=null;
        Token IN_KEYWORD219=null;
        Token OUT_KEYWORD220=null;
        Token char_literal221=null;
        Token IN_KEYWORD223=null;
        Token char_literal225=null;
        Token char_literal226=null;
        Token RETURN_KEYWORD227=null;
        Token SELF_KEYWORD228=null;
        Token AS_KEYWORD229=null;
        Token RESULT_KEYWORD230=null;
        PL_SQLParser.identifier_return identifier222 = null;

        PL_SQLParser.data_type_return data_type224 = null;


        CommonTree char_literal217_tree=null;
        CommonTree SELF_KEYWORD218_tree=null;
        CommonTree IN_KEYWORD219_tree=null;
        CommonTree OUT_KEYWORD220_tree=null;
        CommonTree char_literal221_tree=null;
        CommonTree IN_KEYWORD223_tree=null;
        CommonTree char_literal225_tree=null;
        CommonTree char_literal226_tree=null;
        CommonTree RETURN_KEYWORD227_tree=null;
        CommonTree SELF_KEYWORD228_tree=null;
        CommonTree AS_KEYWORD229_tree=null;
        CommonTree RESULT_KEYWORD230_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:23: ( '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:25: '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constructor_spec_part6375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal217_tree = (CommonTree)adaptor.create(char_literal217);
            adaptor.addChild(root_0, char_literal217_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:29: ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==SELF_KEYWORD) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:30: SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ','
                    {
                    SELF_KEYWORD218=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF_KEYWORD218_tree = (CommonTree)adaptor.create(SELF_KEYWORD218);
                    adaptor.addChild(root_0, SELF_KEYWORD218_tree);
                    }
                    IN_KEYWORD219=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part6380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD219_tree = (CommonTree)adaptor.create(IN_KEYWORD219);
                    adaptor.addChild(root_0, IN_KEYWORD219_tree);
                    }
                    OUT_KEYWORD220=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_constructor_spec_part6382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD220_tree = (CommonTree)adaptor.create(OUT_KEYWORD220);
                    adaptor.addChild(root_0, OUT_KEYWORD220_tree);
                    }
                    char_literal221=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal221_tree = (CommonTree)adaptor.create(char_literal221);
                    adaptor.addChild(root_0, char_literal221_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:25: ( identifier ( IN_KEYWORD )? data_type ( ',' )? )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==IDENTIFIER||LA92_0==INTERVAL_KEYWORD||LA92_0==RESULT_KEYWORD) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:26: identifier ( IN_KEYWORD )? data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_constructor_spec_part6413);
            	    identifier222=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier222.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:37: ( IN_KEYWORD )?
            	    int alt90=2;
            	    int LA90_0 = input.LA(1);

            	    if ( (LA90_0==IN_KEYWORD) ) {
            	        alt90=1;
            	    }
            	    switch (alt90) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
            	            {
            	            IN_KEYWORD223=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part6415); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD223_tree = (CommonTree)adaptor.create(IN_KEYWORD223);
            	            adaptor.addChild(root_0, IN_KEYWORD223_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_constructor_spec_part6418);
            	    data_type224=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type224.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:59: ( ',' )?
            	    int alt91=2;
            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==COMMA) ) {
            	        alt91=1;
            	    }
            	    switch (alt91) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal225=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6420); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal225_tree = (CommonTree)adaptor.create(char_literal225);
            	            adaptor.addChild(root_0, char_literal225_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);

            char_literal226=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_spec_part6425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal226_tree = (CommonTree)adaptor.create(char_literal226);
            adaptor.addChild(root_0, char_literal226_tree);
            }
            RETURN_KEYWORD227=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD227_tree = (CommonTree)adaptor.create(RETURN_KEYWORD227);
            adaptor.addChild(root_0, RETURN_KEYWORD227_tree);
            }
            SELF_KEYWORD228=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELF_KEYWORD228_tree = (CommonTree)adaptor.create(SELF_KEYWORD228);
            adaptor.addChild(root_0, SELF_KEYWORD228_tree);
            }
            AS_KEYWORD229=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_constructor_spec_part6455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_KEYWORD229_tree = (CommonTree)adaptor.create(AS_KEYWORD229);
            adaptor.addChild(root_0, AS_KEYWORD229_tree);
            }
            RESULT_KEYWORD230=(Token)match(input,RESULT_KEYWORD,FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESULT_KEYWORD230_tree = (CommonTree)adaptor.create(RESULT_KEYWORD230);
            adaptor.addChild(root_0, RESULT_KEYWORD230_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, constructor_spec_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec_part"

    public static class subprogram_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:1: subprogram_spec : ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) ;
    public final PL_SQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
        PL_SQLParser.subprogram_spec_return retval = new PL_SQLParser.subprogram_spec_return();
        retval.start = input.LT(1);
        int subprogram_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set231=null;
        PL_SQLParser.function_spec_return function_spec232 = null;

        PL_SQLParser.procedure_spec_return procedure_spec233 = null;


        CommonTree set231_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:17: ( ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:19: ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec )
            {
            root_0 = (CommonTree)adaptor.nil();

            set231=(Token)input.LT(1);
            if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set231));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:53: ( function_spec | procedure_spec )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==FUNCTION_KEYWORD) ) {
                alt93=1;
            }
            else if ( (LA93_0==PROCEDURE_KEYWORD) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:54: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec6473);
                    function_spec232=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec232.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:70: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec6477);
                    procedure_spec233=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec233.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, subprogram_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"

    public static class inheritance_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritance_clauses"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:1: inheritance_clauses : ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) ;
    public final PL_SQLParser.inheritance_clauses_return inheritance_clauses() throws RecognitionException {
        PL_SQLParser.inheritance_clauses_return retval = new PL_SQLParser.inheritance_clauses_return();
        retval.start = input.LT(1);
        int inheritance_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR234=null;
        Token set235=null;

        CommonTree NOT_OPERATOR234_tree=null;
        CommonTree set235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:21: ( ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:23: ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:23: ( NOT_OPERATOR )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==NOT_OPERATOR) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR234=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_inheritance_clauses6485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR234_tree = (CommonTree)adaptor.create(NOT_OPERATOR234);
                    adaptor.addChild(root_0, NOT_OPERATOR234_tree);
                    }

                    }
                    break;

            }

            set235=(Token)input.LT(1);
            if ( (input.LA(1)>=FINAL_KEYWORD && input.LA(1)<=OVERRIDING_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set235));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, inheritance_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inheritance_clauses"

    public static class varray_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:1: varray_type : as_is_part collection_varray_datatype ;
    public final PL_SQLParser.varray_type_return varray_type() throws RecognitionException {
        PL_SQLParser.varray_type_return retval = new PL_SQLParser.varray_type_return();
        retval.start = input.LT(1);
        int varray_type_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part236 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype237 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:13: ( as_is_part collection_varray_datatype )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:15: as_is_part collection_varray_datatype
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_varray_type6505);
            as_is_part236=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part236.getTree());
            pushFollow(FOLLOW_collection_varray_datatype_in_varray_type6507);
            collection_varray_datatype237=collection_varray_datatype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype237.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, varray_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_type"

    public static class nested_table_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:1: nested_table_type : as_is_part TABLE_KEYWORD OF_KEYWORD data_type ;
    public final PL_SQLParser.nested_table_type_return nested_table_type() throws RecognitionException {
        PL_SQLParser.nested_table_type_return retval = new PL_SQLParser.nested_table_type_return();
        retval.start = input.LT(1);
        int nested_table_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD239=null;
        Token OF_KEYWORD240=null;
        PL_SQLParser.as_is_part_return as_is_part238 = null;

        PL_SQLParser.data_type_return data_type241 = null;


        CommonTree TABLE_KEYWORD239_tree=null;
        CommonTree OF_KEYWORD240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:19: ( as_is_part TABLE_KEYWORD OF_KEYWORD data_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:21: as_is_part TABLE_KEYWORD OF_KEYWORD data_type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_nested_table_type6514);
            as_is_part238=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part238.getTree());
            TABLE_KEYWORD239=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_nested_table_type6516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD239_tree = (CommonTree)adaptor.create(TABLE_KEYWORD239);
            adaptor.addChild(root_0, TABLE_KEYWORD239_tree);
            }
            OF_KEYWORD240=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_nested_table_type6518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD240_tree = (CommonTree)adaptor.create(OF_KEYWORD240);
            adaptor.addChild(root_0, OF_KEYWORD240_tree);
            }
            pushFollow(FOLLOW_data_type_in_nested_table_type6520);
            data_type241=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type241.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, nested_table_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_type"

    public static class type_body_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:1: type_body_declaration : BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_body_declaration_return type_body_declaration() throws RecognitionException {
        PL_SQLParser.type_body_declaration_return retval = new PL_SQLParser.type_body_declaration_return();
        retval.start = input.LT(1);
        int type_body_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD242=null;
        Token char_literal247=null;
        Token END_KEYWORD248=null;
        Token SEPARATOR249=null;
        Token char_literal250=null;
        PL_SQLParser.type_body_name_return type_body_name243 = null;

        PL_SQLParser.as_is_part_return as_is_part244 = null;

        PL_SQLParser.subprogram_declaration_return subprogram_declaration245 = null;

        PL_SQLParser.map_order_func_declaration_return map_order_func_declaration246 = null;


        CommonTree BODY_KEYWORD242_tree=null;
        CommonTree char_literal247_tree=null;
        CommonTree END_KEYWORD248_tree=null;
        CommonTree SEPARATOR249_tree=null;
        CommonTree char_literal250_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:23: ( BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:25: BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD242=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_type_body_declaration6527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD242_tree = (CommonTree)adaptor.create(BODY_KEYWORD242);
            adaptor.addChild(root_0, BODY_KEYWORD242_tree);
            }
            pushFollow(FOLLOW_type_body_name_in_type_body_declaration6529);
            type_body_name243=type_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_name243.getTree());
            pushFollow(FOLLOW_as_is_part_in_type_body_declaration6531);
            as_is_part244=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part244.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:25: ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+
            int cnt97=0;
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==FUNCTION_KEYWORD||LA97_0==PROCEDURE_KEYWORD||(LA97_0>=FINAL_KEYWORD && LA97_0<=INSTANTIABLE_KEYWORD)||(LA97_0>=MEMBER_KEYWORD && LA97_0<=CONSTRUCTOR_KEYWORD)||(LA97_0>=MAP_KEYWORD && LA97_0<=ORDER_KEYWORD)) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:26: ( subprogram_declaration | map_order_func_declaration ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:26: ( subprogram_declaration | map_order_func_declaration )
            	    int alt95=2;
            	    int LA95_0 = input.LA(1);

            	    if ( (LA95_0==FUNCTION_KEYWORD||LA95_0==PROCEDURE_KEYWORD||(LA95_0>=FINAL_KEYWORD && LA95_0<=INSTANTIABLE_KEYWORD)||(LA95_0>=MEMBER_KEYWORD && LA95_0<=CONSTRUCTOR_KEYWORD)) ) {
            	        alt95=1;
            	    }
            	    else if ( ((LA95_0>=MAP_KEYWORD && LA95_0<=ORDER_KEYWORD)) ) {
            	        alt95=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 95, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt95) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:27: subprogram_declaration
            	            {
            	            pushFollow(FOLLOW_subprogram_declaration_in_type_body_declaration6559);
            	            subprogram_declaration245=subprogram_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_declaration245.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:52: map_order_func_declaration
            	            {
            	            pushFollow(FOLLOW_map_order_func_declaration_in_type_body_declaration6563);
            	            map_order_func_declaration246=map_order_func_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration246.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:80: ( ',' )?
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==COMMA) ) {
            	        alt96=1;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal247=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body_declaration6566); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal247_tree = (CommonTree)adaptor.create(char_literal247);
            	            adaptor.addChild(root_0, char_literal247_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt97 >= 1 ) break loop97;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(97, input);
                        throw eee;
                }
                cnt97++;
            } while (true);

            END_KEYWORD248=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_type_body_declaration6572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD248_tree = (CommonTree)adaptor.create(END_KEYWORD248);
            adaptor.addChild(root_0, END_KEYWORD248_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:25: ( SEPARATOR )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==SEPARATOR) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR249=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_body_declaration6598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR249_tree = (CommonTree)adaptor.create(SEPARATOR249);
                    adaptor.addChild(root_0, SEPARATOR249_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:36: ( '/' )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==212) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal250=(Token)match(input,212,FOLLOW_212_in_type_body_declaration6601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal250_tree = (CommonTree)adaptor.create(char_literal250);
                    adaptor.addChild(root_0, char_literal250_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, type_body_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_declaration"

    public static class type_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:1: type_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_body_name_return type_body_name() throws RecognitionException {
        PL_SQLParser.type_body_name_return retval = new PL_SQLParser.type_body_name_return();
        retval.start = input.LT(1);
        int type_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS252=null;
        PL_SQLParser.universal_identifier_return universal_identifier251 = null;


        CommonTree ALIAS252_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:16: ( universal_identifier | ALIAS )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=IDENTIFIER && LA100_0<=EXT_IDENTIFIER)||LA100_0==INTERVAL_KEYWORD||LA100_0==RESULT_KEYWORD) ) {
                alt100=1;
            }
            else if ( (LA100_0==ALIAS) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_body_name6609);
                    universal_identifier251=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier251.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS252=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_body_name6613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS252_tree = (CommonTree)adaptor.create(ALIAS252);
                    adaptor.addChild(root_0, ALIAS252_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, type_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_name"

    public static class subprogram_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:1: subprogram_declaration : ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) ;
    public final PL_SQLParser.subprogram_declaration_return subprogram_declaration() throws RecognitionException {
        PL_SQLParser.subprogram_declaration_return retval = new PL_SQLParser.subprogram_declaration_return();
        retval.start = input.LT(1);
        int subprogram_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set253=null;
        PL_SQLParser.function_declaration_return function_declaration254 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration255 = null;

        PL_SQLParser.constructor_declaration_return constructor_declaration256 = null;


        CommonTree set253_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:24: ( ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( ((LA101_0>=MEMBER_KEYWORD && LA101_0<=STATIC_KEYWORD)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set253=(Token)input.LT(1);
                    if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set253));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:26: ( function_declaration | procedure_declaration | constructor_declaration )
            int alt102=3;
            switch ( input.LA(1) ) {
            case FUNCTION_KEYWORD:
                {
                alt102=1;
                }
                break;
            case PROCEDURE_KEYWORD:
                {
                alt102=2;
                }
                break;
            case FINAL_KEYWORD:
            case INSTANTIABLE_KEYWORD:
            case CONSTRUCTOR_KEYWORD:
                {
                alt102=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }

            switch (alt102) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:27: function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_subprogram_declaration6655);
                    function_declaration254=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration254.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:50: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_subprogram_declaration6659);
                    procedure_declaration255=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration255.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:74: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprogram_declaration6663);
                    constructor_declaration256=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration256.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, subprogram_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_declaration"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:1: constructor_declaration : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body ;
    public final PL_SQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        PL_SQLParser.constructor_declaration_return retval = new PL_SQLParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD257=null;
        Token INSTANTIABLE_KEYWORD258=null;
        Token CONSTRUCTOR_KEYWORD259=null;
        Token FUNCTION_KEYWORD260=null;
        PL_SQLParser.data_type_return data_type261 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part262 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body263 = null;


        CommonTree FINAL_KEYWORD257_tree=null;
        CommonTree INSTANTIABLE_KEYWORD258_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD259_tree=null;
        CommonTree FUNCTION_KEYWORD260_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:25: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:27: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:27: ( FINAL_KEYWORD )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==FINAL_KEYWORD) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD257=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_declaration6671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD257_tree = (CommonTree)adaptor.create(FINAL_KEYWORD257);
                    adaptor.addChild(root_0, FINAL_KEYWORD257_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:42: ( INSTANTIABLE_KEYWORD )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==INSTANTIABLE_KEYWORD) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD258=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD258_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD258);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD258_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD259=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD259_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD259);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD259_tree);
            }
            FUNCTION_KEYWORD260=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD260_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD260);
            adaptor.addChild(root_0, FUNCTION_KEYWORD260_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_declaration6707);
            data_type261=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type261.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:37: ( constructor_spec_part )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LPAREN) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_declaration6709);
                    constructor_spec_part262=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part262.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_procedure_body_in_constructor_declaration6712);
            function_procedure_body263=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body263.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, constructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_func_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:1: map_order_func_declaration : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration ;
    public final PL_SQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        PL_SQLParser.map_order_func_declaration_return retval = new PL_SQLParser.map_order_func_declaration_return();
        retval.start = input.LT(1);
        int map_order_func_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set264=null;
        Token MEMBER_KEYWORD265=null;
        PL_SQLParser.function_declaration_return function_declaration266 = null;


        CommonTree set264_tree=null;
        CommonTree MEMBER_KEYWORD265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:28: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:30: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration
            {
            root_0 = (CommonTree)adaptor.nil();

            set264=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set264));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD265=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD265_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD265);
            adaptor.addChild(root_0, MEMBER_KEYWORD265_tree);
            }
            pushFollow(FOLLOW_function_declaration_in_map_order_func_declaration6729);
            function_declaration266=function_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration266.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, map_order_func_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:1: block : BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) ;
    public final PL_SQLParser.block_return block() throws RecognitionException {
        PL_SQLParser.block_return retval = new PL_SQLParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEGIN_KEYWORD267=null;
        Token END_KEYWORD270=null;
        Token SEPARATOR272=null;
        Token char_literal273=null;
        PL_SQLParser.executable_section_return executable_section268 = null;

        PL_SQLParser.exception_section_return exception_section269 = null;

        PL_SQLParser.universal_identifier_return universal_identifier271 = null;


        CommonTree BEGIN_KEYWORD267_tree=null;
        CommonTree END_KEYWORD270_tree=null;
        CommonTree SEPARATOR272_tree=null;
        CommonTree char_literal273_tree=null;
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_BEGIN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token BEGIN_KEYWORD");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_exception_section=new RewriteRuleSubtreeStream(adaptor,"rule exception_section");
        RewriteRuleSubtreeStream stream_universal_identifier=new RewriteRuleSubtreeStream(adaptor,"rule universal_identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:7: ( BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:9: BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            BEGIN_KEYWORD267=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_block6737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BEGIN_KEYWORD.add(BEGIN_KEYWORD267);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:2: ( executable_section )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==NUMBER_UNSIGNED||LA106_0==STRING||(LA106_0>=IDENTIFIER && LA106_0<=EXT_IDENTIFIER)||LA106_0==BEGIN_KEYWORD||LA106_0==DECLARE_KEYWORD||LA106_0==NULL_KEYWORD||(LA106_0>=TRUE_KEYWORD && LA106_0<=FALSE_KEYWORD)||LA106_0==INTERVAL_KEYWORD||LA106_0==REPLACE_KEYWORD||(LA106_0>=RETURN_KEYWORD && LA106_0<=IN_KEYWORD)||LA106_0==IF_KEYWORD||(LA106_0>=GOTO_KEYWORD && LA106_0<=FOR_KEYWORD)||LA106_0==SELECT_KEYWORD||(LA106_0>=RAISE_KEYWORD && LA106_0<=PRAGMA_KEYWORD)||(LA106_0>=CASE_KEYWORD && LA106_0<=CLOSE_KEYWORD)||LA106_0==COMMIT_KEYWORD||LA106_0==CONTINUE_KEYWORD||(LA106_0>=DELETE_KEYWORD && LA106_0<=EXECUTE_KEYWORD)||LA106_0==EXIT_KEYWORD||LA106_0==FETCH_KEYWORD||LA106_0==FORALL_KEYWORD||(LA106_0>=INSERT_KEYWORD && LA106_0<=OPEN_KEYWORD)||(LA106_0>=ROLLBACK_KEYWORD && LA106_0<=SAVEPOINT_KEYWORD)||LA106_0==SET_KEYWORD||(LA106_0>=SQLCODE_KEYWORD && LA106_0<=UPDATE_KEYWORD)||LA106_0==RESULT_KEYWORD||LA106_0==LPAREN||LA106_0==NOT_OPERATOR||LA106_0==210||(LA106_0>=214 && LA106_0<=215)) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:3: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_block6741);
            	    executable_section268=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section268.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:25: ( exception_section )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==EXCEPTION_KEYWORD) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: exception_section
                    {
                    pushFollow(FOLLOW_exception_section_in_block6746);
                    exception_section269=exception_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_section.add(exception_section269.getTree());

                    }
                    break;

            }

            END_KEYWORD270=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_block6757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD270);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:21: ( universal_identifier )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=IDENTIFIER && LA108_0<=EXT_IDENTIFIER)||LA108_0==INTERVAL_KEYWORD||LA108_0==RESULT_KEYWORD) ) {
                int LA108_1 = input.LA(2);

                if ( (synpred138_PL_SQL()) ) {
                    alt108=1;
                }
            }
            switch (alt108) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_block6759);
                    universal_identifier271=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_universal_identifier.add(universal_identifier271.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:43: ( SEPARATOR )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==SEPARATOR) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR272=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_block6762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR272);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:699:9: ( '/' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==212) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal273=(Token)match(input,212,FOLLOW_212_in_block6773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_212.add(char_literal273);


                    }
                    break;

            }



            // AST REWRITE
            // elements: exception_section, BEGIN_KEYWORD, END_KEYWORD, executable_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:9: -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:9: ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_BEGIN_END, "IM_BEGIN_END"), root_1);

                adaptor.addChild(root_1, stream_BEGIN_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:25: ( exception_section )?
                if ( stream_exception_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_exception_section.nextTree());

                }
                stream_exception_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class anonymous_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:1: anonymous_block : ( anonymous_block_declare_section )? block ;
    public final PL_SQLParser.anonymous_block_return anonymous_block() throws RecognitionException {
        PL_SQLParser.anonymous_block_return retval = new PL_SQLParser.anonymous_block_return();
        retval.start = input.LT(1);
        int anonymous_block_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section274 = null;

        PL_SQLParser.block_return block275 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:17: ( ( anonymous_block_declare_section )? block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:19: ( anonymous_block_declare_section )? block
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:19: ( anonymous_block_declare_section )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==DECLARE_KEYWORD) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: anonymous_block_declare_section
                    {
                    pushFollow(FOLLOW_anonymous_block_declare_section_in_anonymous_block6825);
                    anonymous_block_declare_section274=anonymous_block_declare_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block_declare_section274.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_block6828);
            block275=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block275.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, anonymous_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block"

    public static class executable_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:1: executable_section : ( statement | anonymous_block );
    public final PL_SQLParser.executable_section_return executable_section() throws RecognitionException {
        PL_SQLParser.executable_section_return retval = new PL_SQLParser.executable_section_return();
        retval.start = input.LT(1);
        int executable_section_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.statement_return statement276 = null;

        PL_SQLParser.anonymous_block_return anonymous_block277 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:20: ( statement | anonymous_block )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==NUMBER_UNSIGNED||LA112_0==STRING||(LA112_0>=IDENTIFIER && LA112_0<=EXT_IDENTIFIER)||LA112_0==NULL_KEYWORD||(LA112_0>=TRUE_KEYWORD && LA112_0<=FALSE_KEYWORD)||LA112_0==INTERVAL_KEYWORD||LA112_0==REPLACE_KEYWORD||(LA112_0>=RETURN_KEYWORD && LA112_0<=IN_KEYWORD)||LA112_0==IF_KEYWORD||(LA112_0>=GOTO_KEYWORD && LA112_0<=FOR_KEYWORD)||LA112_0==SELECT_KEYWORD||(LA112_0>=RAISE_KEYWORD && LA112_0<=PRAGMA_KEYWORD)||(LA112_0>=CASE_KEYWORD && LA112_0<=CLOSE_KEYWORD)||LA112_0==COMMIT_KEYWORD||LA112_0==CONTINUE_KEYWORD||(LA112_0>=DELETE_KEYWORD && LA112_0<=EXECUTE_KEYWORD)||LA112_0==EXIT_KEYWORD||LA112_0==FETCH_KEYWORD||LA112_0==FORALL_KEYWORD||(LA112_0>=INSERT_KEYWORD && LA112_0<=OPEN_KEYWORD)||(LA112_0>=ROLLBACK_KEYWORD && LA112_0<=SAVEPOINT_KEYWORD)||LA112_0==SET_KEYWORD||(LA112_0>=SQLCODE_KEYWORD && LA112_0<=UPDATE_KEYWORD)||LA112_0==RESULT_KEYWORD||LA112_0==LPAREN||LA112_0==NOT_OPERATOR||LA112_0==210||(LA112_0>=214 && LA112_0<=215)) ) {
                alt112=1;
            }
            else if ( (LA112_0==BEGIN_KEYWORD||LA112_0==DECLARE_KEYWORD) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:22: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_executable_section6835);
                    statement276=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement276.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:34: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_section6839);
                    anonymous_block277=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block277.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, executable_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_section"

    public static class executable_case_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_case_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:1: executable_case_section : ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block );
    public final PL_SQLParser.executable_case_section_return executable_case_section() throws RecognitionException {
        PL_SQLParser.executable_case_section_return retval = new PL_SQLParser.executable_case_section_return();
        retval.start = input.LT(1);
        int executable_case_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR280=null;
        PL_SQLParser.label_return label278 = null;

        PL_SQLParser.statements_return statements279 = null;

        PL_SQLParser.anonymous_block_return anonymous_block281 = null;


        CommonTree SEPARATOR280_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:25: ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==NUMBER_UNSIGNED||LA115_0==STRING||(LA115_0>=IDENTIFIER && LA115_0<=EXT_IDENTIFIER)||LA115_0==NULL_KEYWORD||(LA115_0>=TRUE_KEYWORD && LA115_0<=FALSE_KEYWORD)||LA115_0==INTERVAL_KEYWORD||LA115_0==REPLACE_KEYWORD||(LA115_0>=RETURN_KEYWORD && LA115_0<=IN_KEYWORD)||LA115_0==IF_KEYWORD||(LA115_0>=GOTO_KEYWORD && LA115_0<=FOR_KEYWORD)||LA115_0==SELECT_KEYWORD||(LA115_0>=RAISE_KEYWORD && LA115_0<=PRAGMA_KEYWORD)||(LA115_0>=CASE_KEYWORD && LA115_0<=CLOSE_KEYWORD)||LA115_0==COMMIT_KEYWORD||LA115_0==CONTINUE_KEYWORD||(LA115_0>=DELETE_KEYWORD && LA115_0<=EXECUTE_KEYWORD)||LA115_0==EXIT_KEYWORD||LA115_0==FETCH_KEYWORD||LA115_0==FORALL_KEYWORD||(LA115_0>=INSERT_KEYWORD && LA115_0<=OPEN_KEYWORD)||(LA115_0>=ROLLBACK_KEYWORD && LA115_0<=SAVEPOINT_KEYWORD)||LA115_0==SET_KEYWORD||(LA115_0>=SQLCODE_KEYWORD && LA115_0<=UPDATE_KEYWORD)||LA115_0==RESULT_KEYWORD||LA115_0==LPAREN||LA115_0==NOT_OPERATOR||LA115_0==210||(LA115_0>=214 && LA115_0<=215)) ) {
                alt115=1;
            }
            else if ( (LA115_0==BEGIN_KEYWORD||LA115_0==DECLARE_KEYWORD) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:27: ( ( label )* statements ( SEPARATOR )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:27: ( ( label )* statements ( SEPARATOR )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:28: ( label )* statements ( SEPARATOR )?
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:28: ( label )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==210) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:29: label
                    	    {
                    	    pushFollow(FOLLOW_label_in_executable_case_section6848);
                    	    label278=label();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label278.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);

                    pushFollow(FOLLOW_statements_in_executable_case_section6852);
                    statements279=statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statements279.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:48: ( SEPARATOR )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==SEPARATOR) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                            {
                            SEPARATOR280=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_executable_case_section6854); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEPARATOR280_tree = (CommonTree)adaptor.create(SEPARATOR280);
                            adaptor.addChild(root_0, SEPARATOR280_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:62: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_case_section6860);
                    anonymous_block281=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block281.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, executable_case_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_case_section"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:1: statement : ( label )* statements SEPARATOR ;
    public final PL_SQLParser.statement_return statement() throws RecognitionException {
        PL_SQLParser.statement_return retval = new PL_SQLParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR284=null;
        PL_SQLParser.label_return label282 = null;

        PL_SQLParser.statements_return statements283 = null;


        CommonTree SEPARATOR284_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:11: ( ( label )* statements SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:13: ( label )* statements SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:13: ( label )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==210) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:14: label
            	    {
            	    pushFollow(FOLLOW_label_in_statement6868);
            	    label282=label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label282.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            pushFollow(FOLLOW_statements_in_statement6872);
            statements283=statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statements283.getTree());
            SEPARATOR284=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_statement6874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR284_tree = (CommonTree)adaptor.create(SEPARATOR284);
            adaptor.addChild(root_0, SEPARATOR284_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );
    public final PL_SQLParser.statements_return statements() throws RecognitionException {
        PL_SQLParser.statements_return retval = new PL_SQLParser.statements_return();
        retval.start = input.LT(1);
        int statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.expression_return expression285 = null;

        PL_SQLParser.goto_statement_return goto_statement286 = null;

        PL_SQLParser.loop_statement_return loop_statement287 = null;

        PL_SQLParser.while_loop_statement_return while_loop_statement288 = null;

        PL_SQLParser.for_loop_statement_return for_loop_statement289 = null;

        PL_SQLParser.sql_statements_return sql_statements290 = null;

        PL_SQLParser.return_statement_return return_statement291 = null;

        PL_SQLParser.if_statement_return if_statement292 = null;

        PL_SQLParser.raise_statement_return raise_statement293 = null;

        PL_SQLParser.close_statement_return close_statement294 = null;

        PL_SQLParser.continue_statement_return continue_statement295 = null;

        PL_SQLParser.execute_immediate_statement_return execute_immediate_statement296 = null;

        PL_SQLParser.exit_statement_return exit_statement297 = null;

        PL_SQLParser.fetch_statement_return fetch_statement298 = null;

        PL_SQLParser.forall_statement_return forall_statement299 = null;

        PL_SQLParser.pragma_inline_statement_return pragma_inline_statement300 = null;

        PL_SQLParser.open_statement_return open_statement301 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:12: ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement )
            int alt117=17;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:14: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statements6881);
                    expression285=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression285.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:27: goto_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statements6885);
                    goto_statement286=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement286.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:44: loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statements6889);
                    loop_statement287=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement287.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:14: while_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_loop_statement_in_statements6906);
                    while_loop_statement288=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_loop_statement288.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:37: for_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_loop_statement_in_statements6910);
                    for_loop_statement289=for_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement289.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:58: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_statements6914);
                    sql_statements290=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements290.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:14: return_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statements6931);
                    return_statement291=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement291.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:33: if_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statements6935);
                    if_statement292=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement292.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:48: raise_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statements6939);
                    raise_statement293=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement293.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:66: close_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_statements6943);
                    close_statement294=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement294.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:14: continue_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_statements6960);
                    continue_statement295=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement295.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:35: execute_immediate_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execute_immediate_statement_in_statements6964);
                    execute_immediate_statement296=execute_immediate_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate_statement296.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:65: exit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statements6968);
                    exit_statement297=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement297.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:712:14: fetch_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_statements6985);
                    fetch_statement298=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement298.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:712:32: forall_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_forall_statement_in_statements6989);
                    forall_statement299=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement299.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:712:51: pragma_inline_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pragma_inline_statement_in_statements6993);
                    pragma_inline_statement300=pragma_inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_inline_statement300.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:713:14: open_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_statements7010);
                    open_statement301=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statements"

    public static class sql_statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );
    public final PL_SQLParser.sql_statements_return sql_statements() throws RecognitionException {
        PL_SQLParser.sql_statements_return retval = new PL_SQLParser.sql_statements_return();
        retval.start = input.LT(1);
        int sql_statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.select_statement_return select_statement302 = null;

        PL_SQLParser.commit_statement_return commit_statement303 = null;

        PL_SQLParser.delete_statement_return delete_statement304 = null;

        PL_SQLParser.update_statement_return update_statement305 = null;

        PL_SQLParser.insert_statement_return insert_statement306 = null;

        PL_SQLParser.lock_table_statement_return lock_table_statement307 = null;

        PL_SQLParser.merge_statement_return merge_statement308 = null;

        PL_SQLParser.rollback_statement_return rollback_statement309 = null;

        PL_SQLParser.savepoint_statement_return savepoint_statement310 = null;

        PL_SQLParser.set_transaction_statement_return set_transaction_statement311 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:16: ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement )
            int alt118=10;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:18: select_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_sql_statements7017);
                    select_statement302=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement302.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:37: commit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_sql_statements7021);
                    commit_statement303=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement303.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:56: delete_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_sql_statements7025);
                    delete_statement304=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement304.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:714:75: update_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_sql_statements7029);
                    update_statement305=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement305.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:18: insert_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_sql_statements7050);
                    insert_statement306=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement306.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:37: lock_table_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_sql_statements7054);
                    lock_table_statement307=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement307.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:60: merge_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_sql_statements7058);
                    merge_statement308=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement308.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:18: rollback_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_sql_statements7079);
                    rollback_statement309=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement309.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:39: savepoint_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_sql_statements7083);
                    savepoint_statement310=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement310.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:61: set_transaction_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_statement_in_sql_statements7087);
                    set_transaction_statement311=set_transaction_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_statement311.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, sql_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statements"

    public static class sql_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:1: sql_operator : ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' );
    public final PL_SQLParser.sql_operator_return sql_operator() throws RecognitionException {
        PL_SQLParser.sql_operator_return retval = new PL_SQLParser.sql_operator_return();
        retval.start = input.LT(1);
        int sql_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set312=null;

        CommonTree set312_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:14: ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set312=(Token)input.LT(1);
            if ( input.LA(1)==COMMA||input.LA(1)==212||(input.LA(1)>=214 && input.LA(1)<=228) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set312));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, sql_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_operator"

    public static class sql_not_parsed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_not_parsed"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );
    public final PL_SQLParser.sql_not_parsed_return sql_not_parsed() throws RecognitionException {
        PL_SQLParser.sql_not_parsed_return retval = new PL_SQLParser.sql_not_parsed_return();
        retval.start = input.LT(1);
        int sql_not_parsed_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS313=null;
        Token KEYWORD314=null;
        Token INTO_KEYWORD316=null;
        Token IN_KEYWORD317=null;
        Token NOT_OPERATOR318=null;
        Token IN_KEYWORD319=null;
        Token AS_KEYWORD320=null;
        Token VALUES_KEYWORD321=null;
        Token BETWEEN_KEYWORD322=null;
        Token SOME_TYPES323=null;
        Token BULK_KEYWORD324=null;
        Token COLLECT_KEYWORD325=null;
        Token RETURNING_KEYWORD326=null;
        Token ROW_KEYWORD327=null;
        Token SET_KEYWORD328=null;
        Token BY_KEYWORD329=null;
        Token WITH_KEYWORD330=null;
        Token TABLE_KEYWORD331=null;
        Token JOIN_KEYWORD332=null;
        Token EXISTS_KEYWORD333=null;
        Token REPLACE_KEYWORD334=null;
        Token NUMBER_UNSIGNED335=null;
        Token COUNT_KEYWORD336=null;
        Token STRING339=null;
        Token COMMA340=null;
        Token AND_OPERATOR341=null;
        Token OR_OPERATOR342=null;
        Token NOT_OPERATOR343=null;
        Token IS_KEYWORD344=null;
        Token NOT_OPERATOR345=null;
        Token NULL_KEYWORD346=null;
        Token IS_KEYWORD347=null;
        Token NULL_KEYWORD348=null;
        Token NULL_KEYWORD349=null;
        Token LIKE_KEYWORD350=null;
        Token OF_KEYWORD351=null;
        Token THE_REST354=null;
        Token char_literal355=null;
        Token char_literal357=null;
        PL_SQLParser.sql_operator_return sql_operator315 = null;

        PL_SQLParser.universal_identifier_return universal_identifier337 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression338 = null;

        PL_SQLParser.sql_statements_return sql_statements352 = null;

        PL_SQLParser.expression_return expression353 = null;

        PL_SQLParser.sql_not_parsed_return sql_not_parsed356 = null;


        CommonTree ALIAS313_tree=null;
        CommonTree KEYWORD314_tree=null;
        CommonTree INTO_KEYWORD316_tree=null;
        CommonTree IN_KEYWORD317_tree=null;
        CommonTree NOT_OPERATOR318_tree=null;
        CommonTree IN_KEYWORD319_tree=null;
        CommonTree AS_KEYWORD320_tree=null;
        CommonTree VALUES_KEYWORD321_tree=null;
        CommonTree BETWEEN_KEYWORD322_tree=null;
        CommonTree SOME_TYPES323_tree=null;
        CommonTree BULK_KEYWORD324_tree=null;
        CommonTree COLLECT_KEYWORD325_tree=null;
        CommonTree RETURNING_KEYWORD326_tree=null;
        CommonTree ROW_KEYWORD327_tree=null;
        CommonTree SET_KEYWORD328_tree=null;
        CommonTree BY_KEYWORD329_tree=null;
        CommonTree WITH_KEYWORD330_tree=null;
        CommonTree TABLE_KEYWORD331_tree=null;
        CommonTree JOIN_KEYWORD332_tree=null;
        CommonTree EXISTS_KEYWORD333_tree=null;
        CommonTree REPLACE_KEYWORD334_tree=null;
        CommonTree NUMBER_UNSIGNED335_tree=null;
        CommonTree COUNT_KEYWORD336_tree=null;
        CommonTree STRING339_tree=null;
        CommonTree COMMA340_tree=null;
        CommonTree AND_OPERATOR341_tree=null;
        CommonTree OR_OPERATOR342_tree=null;
        CommonTree NOT_OPERATOR343_tree=null;
        CommonTree IS_KEYWORD344_tree=null;
        CommonTree NOT_OPERATOR345_tree=null;
        CommonTree NULL_KEYWORD346_tree=null;
        CommonTree IS_KEYWORD347_tree=null;
        CommonTree NULL_KEYWORD348_tree=null;
        CommonTree NULL_KEYWORD349_tree=null;
        CommonTree LIKE_KEYWORD350_tree=null;
        CommonTree OF_KEYWORD351_tree=null;
        CommonTree THE_REST354_tree=null;
        CommonTree char_literal355_tree=null;
        CommonTree char_literal357_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:16: ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) )
            int alt120=39;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:18: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS313=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_sql_not_parsed7181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS313_tree = (CommonTree)adaptor.create(ALIAS313);
                    adaptor.addChild(root_0, ALIAS313_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:26: KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KEYWORD314=(Token)match(input,KEYWORD,FOLLOW_KEYWORD_in_sql_not_parsed7185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYWORD314_tree = (CommonTree)adaptor.create(KEYWORD314);
                    adaptor.addChild(root_0, KEYWORD314_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:36: sql_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_operator_in_sql_not_parsed7189);
                    sql_operator315=sql_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_operator315.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:51: INTO_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INTO_KEYWORD316=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_sql_not_parsed7193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO_KEYWORD316_tree = (CommonTree)adaptor.create(INTO_KEYWORD316);
                    adaptor.addChild(root_0, INTO_KEYWORD316_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:66: IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD317=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed7197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD317_tree = (CommonTree)adaptor.create(IN_KEYWORD317);
                    adaptor.addChild(root_0, IN_KEYWORD317_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:79: NOT_OPERATOR IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR318=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR318_tree = (CommonTree)adaptor.create(NOT_OPERATOR318);
                    adaptor.addChild(root_0, NOT_OPERATOR318_tree);
                    }
                    IN_KEYWORD319=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed7203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD319_tree = (CommonTree)adaptor.create(IN_KEYWORD319);
                    adaptor.addChild(root_0, IN_KEYWORD319_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:16: AS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AS_KEYWORD320=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_sql_not_parsed7222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS_KEYWORD320_tree = (CommonTree)adaptor.create(AS_KEYWORD320);
                    adaptor.addChild(root_0, AS_KEYWORD320_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:29: VALUES_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VALUES_KEYWORD321=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_sql_not_parsed7226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD321_tree = (CommonTree)adaptor.create(VALUES_KEYWORD321);
                    adaptor.addChild(root_0, VALUES_KEYWORD321_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:46: BETWEEN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BETWEEN_KEYWORD322=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed7230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD322_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD322);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD322_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:64: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES323=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_sql_not_parsed7234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES323_tree = (CommonTree)adaptor.create(SOME_TYPES323);
                    adaptor.addChild(root_0, SOME_TYPES323_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:16: BULK_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BULK_KEYWORD324=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_sql_not_parsed7253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BULK_KEYWORD324_tree = (CommonTree)adaptor.create(BULK_KEYWORD324);
                    adaptor.addChild(root_0, BULK_KEYWORD324_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:31: COLLECT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COLLECT_KEYWORD325=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed7257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLLECT_KEYWORD325_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD325);
                    adaptor.addChild(root_0, COLLECT_KEYWORD325_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:49: RETURNING_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETURNING_KEYWORD326=(Token)match(input,RETURNING_KEYWORD,FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed7261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNING_KEYWORD326_tree = (CommonTree)adaptor.create(RETURNING_KEYWORD326);
                    adaptor.addChild(root_0, RETURNING_KEYWORD326_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:69: ROW_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ROW_KEYWORD327=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_sql_not_parsed7265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD327_tree = (CommonTree)adaptor.create(ROW_KEYWORD327);
                    adaptor.addChild(root_0, ROW_KEYWORD327_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: SET_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SET_KEYWORD328=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_sql_not_parsed7284); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_KEYWORD328_tree = (CommonTree)adaptor.create(SET_KEYWORD328);
                    adaptor.addChild(root_0, SET_KEYWORD328_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:30: BY_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BY_KEYWORD329=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_sql_not_parsed7288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD329_tree = (CommonTree)adaptor.create(BY_KEYWORD329);
                    adaptor.addChild(root_0, BY_KEYWORD329_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:43: WITH_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH_KEYWORD330=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_sql_not_parsed7292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD330_tree = (CommonTree)adaptor.create(WITH_KEYWORD330);
                    adaptor.addChild(root_0, WITH_KEYWORD330_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:58: TABLE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TABLE_KEYWORD331=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_sql_not_parsed7296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD331_tree = (CommonTree)adaptor.create(TABLE_KEYWORD331);
                    adaptor.addChild(root_0, TABLE_KEYWORD331_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:74: JOIN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN_KEYWORD332=(Token)match(input,JOIN_KEYWORD,FOLLOW_JOIN_KEYWORD_in_sql_not_parsed7300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN_KEYWORD332_tree = (CommonTree)adaptor.create(JOIN_KEYWORD332);
                    adaptor.addChild(root_0, JOIN_KEYWORD332_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:16: EXISTS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS_KEYWORD333=(Token)match(input,EXISTS_KEYWORD,FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS_KEYWORD333_tree = (CommonTree)adaptor.create(EXISTS_KEYWORD333);
                    adaptor.addChild(root_0, EXISTS_KEYWORD333_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:33: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD334=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD334_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD334);
                    adaptor.addChild(root_0, REPLACE_KEYWORD334_tree);
                    }

                    }
                    break;
                case 22 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:16: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED335=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED335_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED335);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED335_tree);
                    }

                    }
                    break;
                case 23 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:34: COUNT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT_KEYWORD336=(Token)match(input,COUNT_KEYWORD,FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT_KEYWORD336_tree = (CommonTree)adaptor.create(COUNT_KEYWORD336);
                    adaptor.addChild(root_0, COUNT_KEYWORD336_tree);
                    }

                    }
                    break;
                case 24 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:50: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_sql_not_parsed7350);
                    universal_identifier337=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier337.getTree());

                    }
                    break;
                case 25 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:73: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_sql_not_parsed7354);
                    case_statement_expression338=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression338.getTree());

                    }
                    break;
                case 26 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:16: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING339=(Token)match(input,STRING,FOLLOW_STRING_in_sql_not_parsed7373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING339_tree = (CommonTree)adaptor.create(STRING339);
                    adaptor.addChild(root_0, STRING339_tree);
                    }

                    }
                    break;
                case 27 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:25: COMMA
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_not_parsed7377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA340_tree = (CommonTree)adaptor.create(COMMA340);
                    adaptor.addChild(root_0, COMMA340_tree);
                    }

                    }
                    break;
                case 28 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:33: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR341=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_sql_not_parsed7381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR341_tree = (CommonTree)adaptor.create(AND_OPERATOR341);
                    adaptor.addChild(root_0, AND_OPERATOR341_tree);
                    }

                    }
                    break;
                case 29 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:48: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR342=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_sql_not_parsed7385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR342_tree = (CommonTree)adaptor.create(OR_OPERATOR342);
                    adaptor.addChild(root_0, OR_OPERATOR342_tree);
                    }

                    }
                    break;
                case 30 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:62: NOT_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR343=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR343_tree = (CommonTree)adaptor.create(NOT_OPERATOR343);
                    adaptor.addChild(root_0, NOT_OPERATOR343_tree);
                    }

                    }
                    break;
                case 31 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD344=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD344_tree = (CommonTree)adaptor.create(IS_KEYWORD344);
                    adaptor.addChild(root_0, IS_KEYWORD344_tree);
                    }
                    NOT_OPERATOR345=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR345_tree = (CommonTree)adaptor.create(NOT_OPERATOR345);
                    adaptor.addChild(root_0, NOT_OPERATOR345_tree);
                    }
                    NULL_KEYWORD346=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD346_tree = (CommonTree)adaptor.create(NULL_KEYWORD346);
                    adaptor.addChild(root_0, NULL_KEYWORD346_tree);
                    }

                    }
                    break;
                case 32 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:55: IS_KEYWORD NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD347=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD347_tree = (CommonTree)adaptor.create(IS_KEYWORD347);
                    adaptor.addChild(root_0, IS_KEYWORD347_tree);
                    }
                    NULL_KEYWORD348=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD348_tree = (CommonTree)adaptor.create(NULL_KEYWORD348);
                    adaptor.addChild(root_0, NULL_KEYWORD348_tree);
                    }

                    }
                    break;
                case 33 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:81: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD349=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD349_tree = (CommonTree)adaptor.create(NULL_KEYWORD349);
                    adaptor.addChild(root_0, NULL_KEYWORD349_tree);
                    }

                    }
                    break;
                case 34 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:96: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD350=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD350_tree = (CommonTree)adaptor.create(LIKE_KEYWORD350);
                    adaptor.addChild(root_0, LIKE_KEYWORD350_tree);
                    }

                    }
                    break;
                case 35 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:728:16: OF_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OF_KEYWORD351=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_sql_not_parsed7446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD351_tree = (CommonTree)adaptor.create(OF_KEYWORD351);
                    adaptor.addChild(root_0, OF_KEYWORD351_tree);
                    }

                    }
                    break;
                case 36 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:16: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_sql_not_parsed7465);
                    sql_statements352=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements352.getTree());

                    }
                    break;
                case 37 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:16: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_sql_not_parsed7485);
                    expression353=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression353.getTree());

                    }
                    break;
                case 38 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:29: THE_REST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    THE_REST354=(Token)match(input,THE_REST,FOLLOW_THE_REST_in_sql_not_parsed7489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THE_REST354_tree = (CommonTree)adaptor.create(THE_REST354);
                    adaptor.addChild(root_0, THE_REST354_tree);
                    }

                    }
                    break;
                case 39 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:40: ( '(' ( sql_not_parsed )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:40: ( '(' ( sql_not_parsed )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:41: '(' ( sql_not_parsed )* ')'
                    {
                    char_literal355=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sql_not_parsed7494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal355_tree = (CommonTree)adaptor.create(char_literal355);
                    adaptor.addChild(root_0, char_literal355_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:45: ( sql_not_parsed )*
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( ((LA119_0>=NUMBER_UNSIGNED && LA119_0<=OR_OPERATOR)||(LA119_0>=STRING && LA119_0<=SOME_TYPES)||(LA119_0>=KEYWORD && LA119_0<=ALIAS)||LA119_0==COMMA||LA119_0==NULL_KEYWORD||(LA119_0>=TRUE_KEYWORD && LA119_0<=FALSE_KEYWORD)||LA119_0==WITH_KEYWORD||LA119_0==INTERVAL_KEYWORD||LA119_0==IS_KEYWORD||LA119_0==REPLACE_KEYWORD||LA119_0==AS_KEYWORD||LA119_0==IN_KEYWORD||(LA119_0>=SELECT_KEYWORD && LA119_0<=COUNT_KEYWORD)||LA119_0==LIKE_KEYWORD||LA119_0==CASE_KEYWORD||(LA119_0>=TABLE_KEYWORD && LA119_0<=OF_KEYWORD)||LA119_0==BY_KEYWORD||LA119_0==COMMIT_KEYWORD||LA119_0==DELETE_KEYWORD||LA119_0==INTO_KEYWORD||(LA119_0>=BULK_KEYWORD && LA119_0<=COLLECT_KEYWORD)||(LA119_0>=VALUES_KEYWORD && LA119_0<=BETWEEN_KEYWORD)||(LA119_0>=INSERT_KEYWORD && LA119_0<=MERGE_KEYWORD)||(LA119_0>=RETURNING_KEYWORD && LA119_0<=SAVEPOINT_KEYWORD)||LA119_0==SET_KEYWORD||(LA119_0>=SQLCODE_KEYWORD && LA119_0<=EXISTS_KEYWORD)||LA119_0==ROW_KEYWORD||LA119_0==RESULT_KEYWORD||LA119_0==JOIN_KEYWORD||LA119_0==LPAREN||LA119_0==NOT_OPERATOR||LA119_0==THE_REST||LA119_0==212||(LA119_0>=214 && LA119_0<=228)) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:46: sql_not_parsed
                    	    {
                    	    pushFollow(FOLLOW_sql_not_parsed_in_sql_not_parsed7497);
                    	    sql_not_parsed356=sql_not_parsed();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed356.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop119;
                        }
                    } while (true);

                    char_literal357=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sql_not_parsed7501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal357_tree = (CommonTree)adaptor.create(char_literal357);
                    adaptor.addChild(root_0, char_literal357_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, sql_not_parsed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_not_parsed"

    public static class select_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:1: select_statement : SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ ;
    public final PL_SQLParser.select_statement_return select_statement() throws RecognitionException {
        PL_SQLParser.select_statement_return retval = new PL_SQLParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SELECT_KEYWORD358=null;
        Token ON_KEYWORD360=null;
        Token FOR_KEYWORD361=null;
        Token UPDATE_KEYWORD362=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed359 = null;


        CommonTree SELECT_KEYWORD358_tree=null;
        CommonTree ON_KEYWORD360_tree=null;
        CommonTree FOR_KEYWORD361_tree=null;
        CommonTree UPDATE_KEYWORD362_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:18: ( SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:20: SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SELECT_KEYWORD358=(Token)match(input,SELECT_KEYWORD,FOLLOW_SELECT_KEYWORD_in_select_statement7512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT_KEYWORD358_tree = (CommonTree)adaptor.create(SELECT_KEYWORD358);
            adaptor.addChild(root_0, SELECT_KEYWORD358_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:35: ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            int cnt122=0;
            loop122:
            do {
                int alt122=3;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=NUMBER_UNSIGNED && LA122_0<=OR_OPERATOR)||(LA122_0>=STRING && LA122_0<=SOME_TYPES)||(LA122_0>=KEYWORD && LA122_0<=ALIAS)||LA122_0==COMMA||LA122_0==NULL_KEYWORD||(LA122_0>=TRUE_KEYWORD && LA122_0<=FALSE_KEYWORD)||LA122_0==WITH_KEYWORD||LA122_0==INTERVAL_KEYWORD||LA122_0==IS_KEYWORD||LA122_0==REPLACE_KEYWORD||LA122_0==AS_KEYWORD||LA122_0==IN_KEYWORD||(LA122_0>=SELECT_KEYWORD && LA122_0<=COUNT_KEYWORD)||LA122_0==LIKE_KEYWORD||LA122_0==CASE_KEYWORD||(LA122_0>=TABLE_KEYWORD && LA122_0<=OF_KEYWORD)||LA122_0==BY_KEYWORD||LA122_0==COMMIT_KEYWORD||LA122_0==DELETE_KEYWORD||LA122_0==INTO_KEYWORD||(LA122_0>=BULK_KEYWORD && LA122_0<=COLLECT_KEYWORD)||(LA122_0>=VALUES_KEYWORD && LA122_0<=BETWEEN_KEYWORD)||(LA122_0>=INSERT_KEYWORD && LA122_0<=MERGE_KEYWORD)||(LA122_0>=RETURNING_KEYWORD && LA122_0<=SAVEPOINT_KEYWORD)||LA122_0==SET_KEYWORD||(LA122_0>=SQLCODE_KEYWORD && LA122_0<=EXISTS_KEYWORD)||LA122_0==ON_KEYWORD||LA122_0==ROW_KEYWORD||LA122_0==RESULT_KEYWORD||LA122_0==JOIN_KEYWORD||LA122_0==LPAREN||LA122_0==NOT_OPERATOR||LA122_0==THE_REST||LA122_0==212||(LA122_0>=214 && LA122_0<=228)) ) {
                    int LA122_1 = input.LA(2);

                    if ( (synpred228_PL_SQL()) ) {
                        alt122=1;
                    }


                }
                else if ( (LA122_0==FOR_KEYWORD) ) {
                    int LA122_4 = input.LA(2);

                    if ( (synpred229_PL_SQL()) ) {
                        alt122=2;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:36: ( sql_not_parsed | ON_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:36: ( sql_not_parsed | ON_KEYWORD )
            	    int alt121=2;
            	    int LA121_0 = input.LA(1);

            	    if ( ((LA121_0>=NUMBER_UNSIGNED && LA121_0<=OR_OPERATOR)||(LA121_0>=STRING && LA121_0<=SOME_TYPES)||(LA121_0>=KEYWORD && LA121_0<=ALIAS)||LA121_0==COMMA||LA121_0==NULL_KEYWORD||(LA121_0>=TRUE_KEYWORD && LA121_0<=FALSE_KEYWORD)||LA121_0==WITH_KEYWORD||LA121_0==INTERVAL_KEYWORD||LA121_0==IS_KEYWORD||LA121_0==REPLACE_KEYWORD||LA121_0==AS_KEYWORD||LA121_0==IN_KEYWORD||(LA121_0>=SELECT_KEYWORD && LA121_0<=COUNT_KEYWORD)||LA121_0==LIKE_KEYWORD||LA121_0==CASE_KEYWORD||(LA121_0>=TABLE_KEYWORD && LA121_0<=OF_KEYWORD)||LA121_0==BY_KEYWORD||LA121_0==COMMIT_KEYWORD||LA121_0==DELETE_KEYWORD||LA121_0==INTO_KEYWORD||(LA121_0>=BULK_KEYWORD && LA121_0<=COLLECT_KEYWORD)||(LA121_0>=VALUES_KEYWORD && LA121_0<=BETWEEN_KEYWORD)||(LA121_0>=INSERT_KEYWORD && LA121_0<=MERGE_KEYWORD)||(LA121_0>=RETURNING_KEYWORD && LA121_0<=SAVEPOINT_KEYWORD)||LA121_0==SET_KEYWORD||(LA121_0>=SQLCODE_KEYWORD && LA121_0<=EXISTS_KEYWORD)||LA121_0==ROW_KEYWORD||LA121_0==RESULT_KEYWORD||LA121_0==JOIN_KEYWORD||LA121_0==LPAREN||LA121_0==NOT_OPERATOR||LA121_0==THE_REST||LA121_0==212||(LA121_0>=214 && LA121_0<=228)) ) {
            	        alt121=1;
            	    }
            	    else if ( (LA121_0==ON_KEYWORD) ) {
            	        alt121=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt121) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:37: sql_not_parsed
            	            {
            	            pushFollow(FOLLOW_sql_not_parsed_in_select_statement7516);
            	            sql_not_parsed359=sql_not_parsed();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed359.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:54: ON_KEYWORD
            	            {
            	            ON_KEYWORD360=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_select_statement7520); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ON_KEYWORD360_tree = (CommonTree)adaptor.create(ON_KEYWORD360);
            	            adaptor.addChild(root_0, ON_KEYWORD360_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:69: FOR_KEYWORD UPDATE_KEYWORD
            	    {
            	    FOR_KEYWORD361=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_select_statement7526); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR_KEYWORD361_tree = (CommonTree)adaptor.create(FOR_KEYWORD361);
            	    adaptor.addChild(root_0, FOR_KEYWORD361_tree);
            	    }
            	    UPDATE_KEYWORD362=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_select_statement7528); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD362_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD362);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD362_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class commit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:1: commit_statement : COMMIT_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.commit_statement_return commit_statement() throws RecognitionException {
        PL_SQLParser.commit_statement_return retval = new PL_SQLParser.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMIT_KEYWORD363=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed364 = null;


        CommonTree COMMIT_KEYWORD363_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:18: ( COMMIT_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:20: COMMIT_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMIT_KEYWORD363=(Token)match(input,COMMIT_KEYWORD,FOLLOW_COMMIT_KEYWORD_in_commit_statement7538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMIT_KEYWORD363_tree = (CommonTree)adaptor.create(COMMIT_KEYWORD363);
            adaptor.addChild(root_0, COMMIT_KEYWORD363_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:35: ( sql_not_parsed )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=NUMBER_UNSIGNED && LA123_0<=OR_OPERATOR)||(LA123_0>=STRING && LA123_0<=SOME_TYPES)||(LA123_0>=KEYWORD && LA123_0<=ALIAS)||LA123_0==COMMA||LA123_0==NULL_KEYWORD||(LA123_0>=TRUE_KEYWORD && LA123_0<=FALSE_KEYWORD)||LA123_0==WITH_KEYWORD||LA123_0==INTERVAL_KEYWORD||LA123_0==IS_KEYWORD||LA123_0==REPLACE_KEYWORD||LA123_0==AS_KEYWORD||LA123_0==IN_KEYWORD||(LA123_0>=SELECT_KEYWORD && LA123_0<=COUNT_KEYWORD)||LA123_0==LIKE_KEYWORD||LA123_0==CASE_KEYWORD||(LA123_0>=TABLE_KEYWORD && LA123_0<=OF_KEYWORD)||LA123_0==BY_KEYWORD||LA123_0==COMMIT_KEYWORD||LA123_0==DELETE_KEYWORD||LA123_0==INTO_KEYWORD||(LA123_0>=BULK_KEYWORD && LA123_0<=COLLECT_KEYWORD)||(LA123_0>=VALUES_KEYWORD && LA123_0<=BETWEEN_KEYWORD)||(LA123_0>=INSERT_KEYWORD && LA123_0<=MERGE_KEYWORD)||(LA123_0>=RETURNING_KEYWORD && LA123_0<=SAVEPOINT_KEYWORD)||LA123_0==SET_KEYWORD||(LA123_0>=SQLCODE_KEYWORD && LA123_0<=EXISTS_KEYWORD)||LA123_0==ROW_KEYWORD||LA123_0==RESULT_KEYWORD||LA123_0==JOIN_KEYWORD||LA123_0==LPAREN||LA123_0==NOT_OPERATOR||LA123_0==THE_REST||LA123_0==212||(LA123_0>=214 && LA123_0<=228)) ) {
                int LA123_2 = input.LA(2);

                if ( (synpred230_PL_SQL()) ) {
                    alt123=1;
                }
            }
            switch (alt123) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_commit_statement7540);
                    sql_not_parsed364=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed364.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class delete_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:1: delete_statement : DELETE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.delete_statement_return delete_statement() throws RecognitionException {
        PL_SQLParser.delete_statement_return retval = new PL_SQLParser.delete_statement_return();
        retval.start = input.LT(1);
        int delete_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DELETE_KEYWORD365=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed366 = null;


        CommonTree DELETE_KEYWORD365_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:18: ( DELETE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:20: DELETE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            DELETE_KEYWORD365=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_delete_statement7548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE_KEYWORD365_tree = (CommonTree)adaptor.create(DELETE_KEYWORD365);
            adaptor.addChild(root_0, DELETE_KEYWORD365_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:35: ( sql_not_parsed )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0>=NUMBER_UNSIGNED && LA124_0<=OR_OPERATOR)||(LA124_0>=STRING && LA124_0<=SOME_TYPES)||(LA124_0>=KEYWORD && LA124_0<=ALIAS)||LA124_0==COMMA||LA124_0==NULL_KEYWORD||(LA124_0>=TRUE_KEYWORD && LA124_0<=FALSE_KEYWORD)||LA124_0==WITH_KEYWORD||LA124_0==INTERVAL_KEYWORD||LA124_0==IS_KEYWORD||LA124_0==REPLACE_KEYWORD||LA124_0==AS_KEYWORD||LA124_0==IN_KEYWORD||(LA124_0>=SELECT_KEYWORD && LA124_0<=COUNT_KEYWORD)||LA124_0==LIKE_KEYWORD||LA124_0==CASE_KEYWORD||(LA124_0>=TABLE_KEYWORD && LA124_0<=OF_KEYWORD)||LA124_0==BY_KEYWORD||LA124_0==COMMIT_KEYWORD||LA124_0==DELETE_KEYWORD||LA124_0==INTO_KEYWORD||(LA124_0>=BULK_KEYWORD && LA124_0<=COLLECT_KEYWORD)||(LA124_0>=VALUES_KEYWORD && LA124_0<=BETWEEN_KEYWORD)||(LA124_0>=INSERT_KEYWORD && LA124_0<=MERGE_KEYWORD)||(LA124_0>=RETURNING_KEYWORD && LA124_0<=SAVEPOINT_KEYWORD)||LA124_0==SET_KEYWORD||(LA124_0>=SQLCODE_KEYWORD && LA124_0<=EXISTS_KEYWORD)||LA124_0==ROW_KEYWORD||LA124_0==RESULT_KEYWORD||LA124_0==JOIN_KEYWORD||LA124_0==LPAREN||LA124_0==NOT_OPERATOR||LA124_0==THE_REST||LA124_0==212||(LA124_0>=214 && LA124_0<=228)) ) {
                    int LA124_2 = input.LA(2);

                    if ( (synpred231_PL_SQL()) ) {
                        alt124=1;
                    }


                }


                switch (alt124) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_delete_statement7551);
            	    sql_not_parsed366=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed366.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, delete_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:1: insert_statement : INSERT_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.insert_statement_return insert_statement() throws RecognitionException {
        PL_SQLParser.insert_statement_return retval = new PL_SQLParser.insert_statement_return();
        retval.start = input.LT(1);
        int insert_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD367=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed368 = null;


        CommonTree INSERT_KEYWORD367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:18: ( INSERT_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:20: INSERT_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            INSERT_KEYWORD367=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_insert_statement7560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT_KEYWORD367_tree = (CommonTree)adaptor.create(INSERT_KEYWORD367);
            adaptor.addChild(root_0, INSERT_KEYWORD367_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:35: ( sql_not_parsed )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( ((LA125_0>=NUMBER_UNSIGNED && LA125_0<=OR_OPERATOR)||(LA125_0>=STRING && LA125_0<=SOME_TYPES)||(LA125_0>=KEYWORD && LA125_0<=ALIAS)||LA125_0==COMMA||LA125_0==NULL_KEYWORD||(LA125_0>=TRUE_KEYWORD && LA125_0<=FALSE_KEYWORD)||LA125_0==WITH_KEYWORD||LA125_0==INTERVAL_KEYWORD||LA125_0==IS_KEYWORD||LA125_0==REPLACE_KEYWORD||LA125_0==AS_KEYWORD||LA125_0==IN_KEYWORD||(LA125_0>=SELECT_KEYWORD && LA125_0<=COUNT_KEYWORD)||LA125_0==LIKE_KEYWORD||LA125_0==CASE_KEYWORD||(LA125_0>=TABLE_KEYWORD && LA125_0<=OF_KEYWORD)||LA125_0==BY_KEYWORD||LA125_0==COMMIT_KEYWORD||LA125_0==DELETE_KEYWORD||LA125_0==INTO_KEYWORD||(LA125_0>=BULK_KEYWORD && LA125_0<=COLLECT_KEYWORD)||(LA125_0>=VALUES_KEYWORD && LA125_0<=BETWEEN_KEYWORD)||(LA125_0>=INSERT_KEYWORD && LA125_0<=MERGE_KEYWORD)||(LA125_0>=RETURNING_KEYWORD && LA125_0<=SAVEPOINT_KEYWORD)||LA125_0==SET_KEYWORD||(LA125_0>=SQLCODE_KEYWORD && LA125_0<=EXISTS_KEYWORD)||LA125_0==ROW_KEYWORD||LA125_0==RESULT_KEYWORD||LA125_0==JOIN_KEYWORD||LA125_0==LPAREN||LA125_0==NOT_OPERATOR||LA125_0==THE_REST||LA125_0==212||(LA125_0>=214 && LA125_0<=228)) ) {
                    int LA125_2 = input.LA(2);

                    if ( (synpred232_PL_SQL()) ) {
                        alt125=1;
                    }


                }


                switch (alt125) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_insert_statement7563);
            	    sql_not_parsed368=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed368.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, insert_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:1: lock_table_statement : LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PL_SQLParser.lock_table_statement_return retval = new PL_SQLParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOCK_KEYWORD369=null;
        Token TABLE_KEYWORD370=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed371 = null;


        CommonTree LOCK_KEYWORD369_tree=null;
        CommonTree TABLE_KEYWORD370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:22: ( LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:24: LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            LOCK_KEYWORD369=(Token)match(input,LOCK_KEYWORD,FOLLOW_LOCK_KEYWORD_in_lock_table_statement7572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOCK_KEYWORD369_tree = (CommonTree)adaptor.create(LOCK_KEYWORD369);
            adaptor.addChild(root_0, LOCK_KEYWORD369_tree);
            }
            TABLE_KEYWORD370=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_lock_table_statement7574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD370_tree = (CommonTree)adaptor.create(TABLE_KEYWORD370);
            adaptor.addChild(root_0, TABLE_KEYWORD370_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:51: ( sql_not_parsed )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( ((LA126_0>=NUMBER_UNSIGNED && LA126_0<=OR_OPERATOR)||(LA126_0>=STRING && LA126_0<=SOME_TYPES)||(LA126_0>=KEYWORD && LA126_0<=ALIAS)||LA126_0==COMMA||LA126_0==NULL_KEYWORD||(LA126_0>=TRUE_KEYWORD && LA126_0<=FALSE_KEYWORD)||LA126_0==WITH_KEYWORD||LA126_0==INTERVAL_KEYWORD||LA126_0==IS_KEYWORD||LA126_0==REPLACE_KEYWORD||LA126_0==AS_KEYWORD||LA126_0==IN_KEYWORD||(LA126_0>=SELECT_KEYWORD && LA126_0<=COUNT_KEYWORD)||LA126_0==LIKE_KEYWORD||LA126_0==CASE_KEYWORD||(LA126_0>=TABLE_KEYWORD && LA126_0<=OF_KEYWORD)||LA126_0==BY_KEYWORD||LA126_0==COMMIT_KEYWORD||LA126_0==DELETE_KEYWORD||LA126_0==INTO_KEYWORD||(LA126_0>=BULK_KEYWORD && LA126_0<=COLLECT_KEYWORD)||(LA126_0>=VALUES_KEYWORD && LA126_0<=BETWEEN_KEYWORD)||(LA126_0>=INSERT_KEYWORD && LA126_0<=MERGE_KEYWORD)||(LA126_0>=RETURNING_KEYWORD && LA126_0<=SAVEPOINT_KEYWORD)||LA126_0==SET_KEYWORD||(LA126_0>=SQLCODE_KEYWORD && LA126_0<=EXISTS_KEYWORD)||LA126_0==ROW_KEYWORD||LA126_0==RESULT_KEYWORD||LA126_0==JOIN_KEYWORD||LA126_0==LPAREN||LA126_0==NOT_OPERATOR||LA126_0==THE_REST||LA126_0==212||(LA126_0>=214 && LA126_0<=228)) ) {
                    int LA126_2 = input.LA(2);

                    if ( (synpred233_PL_SQL()) ) {
                        alt126=1;
                    }


                }


                switch (alt126) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:52: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_lock_table_statement7577);
            	    sql_not_parsed371=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed371.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class merge_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:1: merge_statement : MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ ;
    public final PL_SQLParser.merge_statement_return merge_statement() throws RecognitionException {
        PL_SQLParser.merge_statement_return retval = new PL_SQLParser.merge_statement_return();
        retval.start = input.LT(1);
        int merge_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token MERGE_KEYWORD372=null;
        Token ON_KEYWORD374=null;
        Token USING_KEYWORD375=null;
        Token WHEN_KEYWORD376=null;
        Token THEN_KEYWORD377=null;
        Token INSERT_KEYWORD378=null;
        Token UPDATE_KEYWORD379=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed373 = null;


        CommonTree MERGE_KEYWORD372_tree=null;
        CommonTree ON_KEYWORD374_tree=null;
        CommonTree USING_KEYWORD375_tree=null;
        CommonTree WHEN_KEYWORD376_tree=null;
        CommonTree THEN_KEYWORD377_tree=null;
        CommonTree INSERT_KEYWORD378_tree=null;
        CommonTree UPDATE_KEYWORD379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:17: ( MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:19: MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            {
            root_0 = (CommonTree)adaptor.nil();

            MERGE_KEYWORD372=(Token)match(input,MERGE_KEYWORD,FOLLOW_MERGE_KEYWORD_in_merge_statement7586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MERGE_KEYWORD372_tree = (CommonTree)adaptor.create(MERGE_KEYWORD372);
            adaptor.addChild(root_0, MERGE_KEYWORD372_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            int cnt127=0;
            loop127:
            do {
                int alt127=8;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:34: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_merge_statement7589);
            	    sql_not_parsed373=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed373.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:51: ON_KEYWORD
            	    {
            	    ON_KEYWORD374=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_merge_statement7593); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON_KEYWORD374_tree = (CommonTree)adaptor.create(ON_KEYWORD374);
            	    adaptor.addChild(root_0, ON_KEYWORD374_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:19: USING_KEYWORD
            	    {
            	    USING_KEYWORD375=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_merge_statement7615); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING_KEYWORD375_tree = (CommonTree)adaptor.create(USING_KEYWORD375);
            	    adaptor.addChild(root_0, USING_KEYWORD375_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:35: WHEN_KEYWORD
            	    {
            	    WHEN_KEYWORD376=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_merge_statement7619); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD376_tree = (CommonTree)adaptor.create(WHEN_KEYWORD376);
            	    adaptor.addChild(root_0, WHEN_KEYWORD376_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:50: THEN_KEYWORD
            	    {
            	    THEN_KEYWORD377=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_merge_statement7623); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD377_tree = (CommonTree)adaptor.create(THEN_KEYWORD377);
            	    adaptor.addChild(root_0, THEN_KEYWORD377_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:65: INSERT_KEYWORD
            	    {
            	    INSERT_KEYWORD378=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_merge_statement7627); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    INSERT_KEYWORD378_tree = (CommonTree)adaptor.create(INSERT_KEYWORD378);
            	    adaptor.addChild(root_0, INSERT_KEYWORD378_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:741:19: UPDATE_KEYWORD
            	    {
            	    UPDATE_KEYWORD379=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_merge_statement7649); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD379_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD379);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD379_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, merge_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:1: rollback_statement : ROLLBACK_KEYWORD ( TO_KEYWORD )? ( sql_not_parsed )? ;
    public final PL_SQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
        PL_SQLParser.rollback_statement_return retval = new PL_SQLParser.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ROLLBACK_KEYWORD380=null;
        Token TO_KEYWORD381=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed382 = null;


        CommonTree ROLLBACK_KEYWORD380_tree=null;
        CommonTree TO_KEYWORD381_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:20: ( ROLLBACK_KEYWORD ( TO_KEYWORD )? ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:22: ROLLBACK_KEYWORD ( TO_KEYWORD )? ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            ROLLBACK_KEYWORD380=(Token)match(input,ROLLBACK_KEYWORD,FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ROLLBACK_KEYWORD380_tree = (CommonTree)adaptor.create(ROLLBACK_KEYWORD380);
            adaptor.addChild(root_0, ROLLBACK_KEYWORD380_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:39: ( TO_KEYWORD )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==TO_KEYWORD) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: TO_KEYWORD
                    {
                    TO_KEYWORD381=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_rollback_statement7660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TO_KEYWORD381_tree = (CommonTree)adaptor.create(TO_KEYWORD381);
                    adaptor.addChild(root_0, TO_KEYWORD381_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:51: ( sql_not_parsed )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=NUMBER_UNSIGNED && LA129_0<=OR_OPERATOR)||(LA129_0>=STRING && LA129_0<=SOME_TYPES)||(LA129_0>=KEYWORD && LA129_0<=ALIAS)||LA129_0==COMMA||LA129_0==NULL_KEYWORD||(LA129_0>=TRUE_KEYWORD && LA129_0<=FALSE_KEYWORD)||LA129_0==WITH_KEYWORD||LA129_0==INTERVAL_KEYWORD||LA129_0==IS_KEYWORD||LA129_0==REPLACE_KEYWORD||LA129_0==AS_KEYWORD||LA129_0==IN_KEYWORD||(LA129_0>=SELECT_KEYWORD && LA129_0<=COUNT_KEYWORD)||LA129_0==LIKE_KEYWORD||LA129_0==CASE_KEYWORD||(LA129_0>=TABLE_KEYWORD && LA129_0<=OF_KEYWORD)||LA129_0==BY_KEYWORD||LA129_0==COMMIT_KEYWORD||LA129_0==DELETE_KEYWORD||LA129_0==INTO_KEYWORD||(LA129_0>=BULK_KEYWORD && LA129_0<=COLLECT_KEYWORD)||(LA129_0>=VALUES_KEYWORD && LA129_0<=BETWEEN_KEYWORD)||(LA129_0>=INSERT_KEYWORD && LA129_0<=MERGE_KEYWORD)||(LA129_0>=RETURNING_KEYWORD && LA129_0<=SAVEPOINT_KEYWORD)||LA129_0==SET_KEYWORD||(LA129_0>=SQLCODE_KEYWORD && LA129_0<=EXISTS_KEYWORD)||LA129_0==ROW_KEYWORD||LA129_0==RESULT_KEYWORD||LA129_0==JOIN_KEYWORD||LA129_0==LPAREN||LA129_0==NOT_OPERATOR||LA129_0==THE_REST||LA129_0==212||(LA129_0>=214 && LA129_0<=228)) ) {
                int LA129_1 = input.LA(2);

                if ( (synpred242_PL_SQL()) ) {
                    alt129=1;
                }
            }
            switch (alt129) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_rollback_statement7663);
                    sql_not_parsed382=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed382.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:1: savepoint_statement : SAVEPOINT_KEYWORD identifier ;
    public final PL_SQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PL_SQLParser.savepoint_statement_return retval = new PL_SQLParser.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SAVEPOINT_KEYWORD383=null;
        PL_SQLParser.identifier_return identifier384 = null;


        CommonTree SAVEPOINT_KEYWORD383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:21: ( SAVEPOINT_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:23: SAVEPOINT_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            SAVEPOINT_KEYWORD383=(Token)match(input,SAVEPOINT_KEYWORD,FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAVEPOINT_KEYWORD383_tree = (CommonTree)adaptor.create(SAVEPOINT_KEYWORD383);
            adaptor.addChild(root_0, SAVEPOINT_KEYWORD383_tree);
            }
            pushFollow(FOLLOW_identifier_in_savepoint_statement7673);
            identifier384=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier384.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class set_transaction_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:1: set_transaction_statement : SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.set_transaction_statement_return set_transaction_statement() throws RecognitionException {
        PL_SQLParser.set_transaction_statement_return retval = new PL_SQLParser.set_transaction_statement_return();
        retval.start = input.LT(1);
        int set_transaction_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SET_KEYWORD385=null;
        Token TRANSACTION_KEYWORD386=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed387 = null;


        CommonTree SET_KEYWORD385_tree=null;
        CommonTree TRANSACTION_KEYWORD386_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:27: ( SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:29: SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SET_KEYWORD385=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_set_transaction_statement7680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET_KEYWORD385_tree = (CommonTree)adaptor.create(SET_KEYWORD385);
            adaptor.addChild(root_0, SET_KEYWORD385_tree);
            }
            TRANSACTION_KEYWORD386=(Token)match(input,TRANSACTION_KEYWORD,FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRANSACTION_KEYWORD386_tree = (CommonTree)adaptor.create(TRANSACTION_KEYWORD386);
            adaptor.addChild(root_0, TRANSACTION_KEYWORD386_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:61: ( sql_not_parsed )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( ((LA130_0>=NUMBER_UNSIGNED && LA130_0<=OR_OPERATOR)||(LA130_0>=STRING && LA130_0<=SOME_TYPES)||(LA130_0>=KEYWORD && LA130_0<=ALIAS)||LA130_0==COMMA||LA130_0==NULL_KEYWORD||(LA130_0>=TRUE_KEYWORD && LA130_0<=FALSE_KEYWORD)||LA130_0==WITH_KEYWORD||LA130_0==INTERVAL_KEYWORD||LA130_0==IS_KEYWORD||LA130_0==REPLACE_KEYWORD||LA130_0==AS_KEYWORD||LA130_0==IN_KEYWORD||(LA130_0>=SELECT_KEYWORD && LA130_0<=COUNT_KEYWORD)||LA130_0==LIKE_KEYWORD||LA130_0==CASE_KEYWORD||(LA130_0>=TABLE_KEYWORD && LA130_0<=OF_KEYWORD)||LA130_0==BY_KEYWORD||LA130_0==COMMIT_KEYWORD||LA130_0==DELETE_KEYWORD||LA130_0==INTO_KEYWORD||(LA130_0>=BULK_KEYWORD && LA130_0<=COLLECT_KEYWORD)||(LA130_0>=VALUES_KEYWORD && LA130_0<=BETWEEN_KEYWORD)||(LA130_0>=INSERT_KEYWORD && LA130_0<=MERGE_KEYWORD)||(LA130_0>=RETURNING_KEYWORD && LA130_0<=SAVEPOINT_KEYWORD)||LA130_0==SET_KEYWORD||(LA130_0>=SQLCODE_KEYWORD && LA130_0<=EXISTS_KEYWORD)||LA130_0==ROW_KEYWORD||LA130_0==RESULT_KEYWORD||LA130_0==JOIN_KEYWORD||LA130_0==LPAREN||LA130_0==NOT_OPERATOR||LA130_0==THE_REST||LA130_0==212||(LA130_0>=214 && LA130_0<=228)) ) {
                    int LA130_1 = input.LA(2);

                    if ( (synpred243_PL_SQL()) ) {
                        alt130=1;
                    }


                }


                switch (alt130) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:62: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_set_transaction_statement7685);
            	    sql_not_parsed387=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed387.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, set_transaction_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_statement"

    public static class update_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:1: update_statement : UPDATE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.update_statement_return update_statement() throws RecognitionException {
        PL_SQLParser.update_statement_return retval = new PL_SQLParser.update_statement_return();
        retval.start = input.LT(1);
        int update_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token UPDATE_KEYWORD388=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed389 = null;


        CommonTree UPDATE_KEYWORD388_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:18: ( UPDATE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:20: UPDATE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            UPDATE_KEYWORD388=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_update_statement7694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATE_KEYWORD388_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD388);
            adaptor.addChild(root_0, UPDATE_KEYWORD388_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:35: ( sql_not_parsed )+
            int cnt131=0;
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( ((LA131_0>=NUMBER_UNSIGNED && LA131_0<=OR_OPERATOR)||(LA131_0>=STRING && LA131_0<=SOME_TYPES)||(LA131_0>=KEYWORD && LA131_0<=ALIAS)||LA131_0==COMMA||LA131_0==NULL_KEYWORD||(LA131_0>=TRUE_KEYWORD && LA131_0<=FALSE_KEYWORD)||LA131_0==WITH_KEYWORD||LA131_0==INTERVAL_KEYWORD||LA131_0==IS_KEYWORD||LA131_0==REPLACE_KEYWORD||LA131_0==AS_KEYWORD||LA131_0==IN_KEYWORD||(LA131_0>=SELECT_KEYWORD && LA131_0<=COUNT_KEYWORD)||LA131_0==LIKE_KEYWORD||LA131_0==CASE_KEYWORD||(LA131_0>=TABLE_KEYWORD && LA131_0<=OF_KEYWORD)||LA131_0==BY_KEYWORD||LA131_0==COMMIT_KEYWORD||LA131_0==DELETE_KEYWORD||LA131_0==INTO_KEYWORD||(LA131_0>=BULK_KEYWORD && LA131_0<=COLLECT_KEYWORD)||(LA131_0>=VALUES_KEYWORD && LA131_0<=BETWEEN_KEYWORD)||(LA131_0>=INSERT_KEYWORD && LA131_0<=MERGE_KEYWORD)||(LA131_0>=RETURNING_KEYWORD && LA131_0<=SAVEPOINT_KEYWORD)||LA131_0==SET_KEYWORD||(LA131_0>=SQLCODE_KEYWORD && LA131_0<=EXISTS_KEYWORD)||LA131_0==ROW_KEYWORD||LA131_0==RESULT_KEYWORD||LA131_0==JOIN_KEYWORD||LA131_0==LPAREN||LA131_0==NOT_OPERATOR||LA131_0==THE_REST||LA131_0==212||(LA131_0>=214 && LA131_0<=228)) ) {
                    int LA131_2 = input.LA(2);

                    if ( (synpred244_PL_SQL()) ) {
                        alt131=1;
                    }


                }


                switch (alt131) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_update_statement7697);
            	    sql_not_parsed389=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed389.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt131 >= 1 ) break loop131;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(131, input);
                        throw eee;
                }
                cnt131++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, update_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:1: goto_statement : GOTO_KEYWORD identifier ;
    public final PL_SQLParser.goto_statement_return goto_statement() throws RecognitionException {
        PL_SQLParser.goto_statement_return retval = new PL_SQLParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GOTO_KEYWORD390=null;
        PL_SQLParser.identifier_return identifier391 = null;


        CommonTree GOTO_KEYWORD390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:16: ( GOTO_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:18: GOTO_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            GOTO_KEYWORD390=(Token)match(input,GOTO_KEYWORD,FOLLOW_GOTO_KEYWORD_in_goto_statement7708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOTO_KEYWORD390_tree = (CommonTree)adaptor.create(GOTO_KEYWORD390);
            adaptor.addChild(root_0, GOTO_KEYWORD390_tree);
            }
            pushFollow(FOLLOW_identifier_in_goto_statement7710);
            identifier391=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier391.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:1: return_statement : RETURN_KEYWORD ( expression )? ;
    public final PL_SQLParser.return_statement_return return_statement() throws RecognitionException {
        PL_SQLParser.return_statement_return retval = new PL_SQLParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RETURN_KEYWORD392=null;
        PL_SQLParser.expression_return expression393 = null;


        CommonTree RETURN_KEYWORD392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:18: ( RETURN_KEYWORD ( expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:20: RETURN_KEYWORD ( expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RETURN_KEYWORD392=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_return_statement7717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD392_tree = (CommonTree)adaptor.create(RETURN_KEYWORD392);
            adaptor.addChild(root_0, RETURN_KEYWORD392_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:35: ( expression )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==NUMBER_UNSIGNED||LA132_0==STRING||(LA132_0>=IDENTIFIER && LA132_0<=EXT_IDENTIFIER)||LA132_0==NULL_KEYWORD||(LA132_0>=TRUE_KEYWORD && LA132_0<=FALSE_KEYWORD)||LA132_0==INTERVAL_KEYWORD||LA132_0==REPLACE_KEYWORD||LA132_0==IN_KEYWORD||LA132_0==CASE_KEYWORD||(LA132_0>=SQLCODE_KEYWORD && LA132_0<=SQLERRM_KEYWORD)||LA132_0==RESULT_KEYWORD||LA132_0==LPAREN||LA132_0==NOT_OPERATOR||(LA132_0>=214 && LA132_0<=215)) ) {
                int LA132_2 = input.LA(2);

                if ( (synpred245_PL_SQL()) ) {
                    alt132=1;
                }
            }
            switch (alt132) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7719);
                    expression393=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression393.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:1: if_statement : IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) ;
    public final PL_SQLParser.if_statement_return if_statement() throws RecognitionException {
        PL_SQLParser.if_statement_return retval = new PL_SQLParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IF_KEYWORD394=null;
        Token THEN_KEYWORD396=null;
        Token ELSIF_KEYWORD398=null;
        Token THEN_KEYWORD400=null;
        Token ELSE_KEYWORD402=null;
        Token END_KEYWORD404=null;
        Token IF_KEYWORD405=null;
        PL_SQLParser.expression_return expression395 = null;

        PL_SQLParser.executable_section_return executable_section397 = null;

        PL_SQLParser.expression_return expression399 = null;

        PL_SQLParser.executable_section_return executable_section401 = null;

        PL_SQLParser.executable_section_return executable_section403 = null;


        CommonTree IF_KEYWORD394_tree=null;
        CommonTree THEN_KEYWORD396_tree=null;
        CommonTree ELSIF_KEYWORD398_tree=null;
        CommonTree THEN_KEYWORD400_tree=null;
        CommonTree ELSE_KEYWORD402_tree=null;
        CommonTree END_KEYWORD404_tree=null;
        CommonTree IF_KEYWORD405_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_IF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token IF_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleTokenStream stream_ELSIF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSIF_KEYWORD");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:14: ( IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:16: IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD
            {
            IF_KEYWORD394=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD394);

            pushFollow(FOLLOW_expression_in_if_statement7729);
            expression395=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression395.getTree());
            THEN_KEYWORD396=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD396);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:51: ( executable_section )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==NUMBER_UNSIGNED||LA133_0==STRING||(LA133_0>=IDENTIFIER && LA133_0<=EXT_IDENTIFIER)||LA133_0==BEGIN_KEYWORD||LA133_0==DECLARE_KEYWORD||LA133_0==NULL_KEYWORD||(LA133_0>=TRUE_KEYWORD && LA133_0<=FALSE_KEYWORD)||LA133_0==INTERVAL_KEYWORD||LA133_0==REPLACE_KEYWORD||(LA133_0>=RETURN_KEYWORD && LA133_0<=IN_KEYWORD)||LA133_0==IF_KEYWORD||(LA133_0>=GOTO_KEYWORD && LA133_0<=FOR_KEYWORD)||LA133_0==SELECT_KEYWORD||(LA133_0>=RAISE_KEYWORD && LA133_0<=PRAGMA_KEYWORD)||(LA133_0>=CASE_KEYWORD && LA133_0<=CLOSE_KEYWORD)||LA133_0==COMMIT_KEYWORD||LA133_0==CONTINUE_KEYWORD||(LA133_0>=DELETE_KEYWORD && LA133_0<=EXECUTE_KEYWORD)||LA133_0==EXIT_KEYWORD||LA133_0==FETCH_KEYWORD||LA133_0==FORALL_KEYWORD||(LA133_0>=INSERT_KEYWORD && LA133_0<=OPEN_KEYWORD)||(LA133_0>=ROLLBACK_KEYWORD && LA133_0<=SAVEPOINT_KEYWORD)||LA133_0==SET_KEYWORD||(LA133_0>=SQLCODE_KEYWORD && LA133_0<=UPDATE_KEYWORD)||LA133_0==RESULT_KEYWORD||LA133_0==LPAREN||LA133_0==NOT_OPERATOR||LA133_0==210||(LA133_0>=214 && LA133_0<=215)) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:52: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_if_statement7734);
            	    executable_section397=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section397.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:16: ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==ELSIF_KEYWORD) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:17: ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+
            	    {
            	    ELSIF_KEYWORD398=(Token)match(input,ELSIF_KEYWORD,FOLLOW_ELSIF_KEYWORD_in_if_statement7754); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ELSIF_KEYWORD.add(ELSIF_KEYWORD398);

            	    pushFollow(FOLLOW_expression_in_if_statement7756);
            	    expression399=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression399.getTree());
            	    THEN_KEYWORD400=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7758); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD400);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:55: ( executable_section )+
            	    int cnt134=0;
            	    loop134:
            	    do {
            	        int alt134=2;
            	        int LA134_0 = input.LA(1);

            	        if ( (LA134_0==NUMBER_UNSIGNED||LA134_0==STRING||(LA134_0>=IDENTIFIER && LA134_0<=EXT_IDENTIFIER)||LA134_0==BEGIN_KEYWORD||LA134_0==DECLARE_KEYWORD||LA134_0==NULL_KEYWORD||(LA134_0>=TRUE_KEYWORD && LA134_0<=FALSE_KEYWORD)||LA134_0==INTERVAL_KEYWORD||LA134_0==REPLACE_KEYWORD||(LA134_0>=RETURN_KEYWORD && LA134_0<=IN_KEYWORD)||LA134_0==IF_KEYWORD||(LA134_0>=GOTO_KEYWORD && LA134_0<=FOR_KEYWORD)||LA134_0==SELECT_KEYWORD||(LA134_0>=RAISE_KEYWORD && LA134_0<=PRAGMA_KEYWORD)||(LA134_0>=CASE_KEYWORD && LA134_0<=CLOSE_KEYWORD)||LA134_0==COMMIT_KEYWORD||LA134_0==CONTINUE_KEYWORD||(LA134_0>=DELETE_KEYWORD && LA134_0<=EXECUTE_KEYWORD)||LA134_0==EXIT_KEYWORD||LA134_0==FETCH_KEYWORD||LA134_0==FORALL_KEYWORD||(LA134_0>=INSERT_KEYWORD && LA134_0<=OPEN_KEYWORD)||(LA134_0>=ROLLBACK_KEYWORD && LA134_0<=SAVEPOINT_KEYWORD)||LA134_0==SET_KEYWORD||(LA134_0>=SQLCODE_KEYWORD && LA134_0<=UPDATE_KEYWORD)||LA134_0==RESULT_KEYWORD||LA134_0==LPAREN||LA134_0==NOT_OPERATOR||LA134_0==210||(LA134_0>=214 && LA134_0<=215)) ) {
            	            alt134=1;
            	        }


            	        switch (alt134) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:56: executable_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_section_in_if_statement7761);
            	    	    executable_section401=executable_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section401.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt134 >= 1 ) break loop134;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(134, input);
            	                throw eee;
            	        }
            	        cnt134++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:16: ( ELSE_KEYWORD ( executable_section )+ )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ELSE_KEYWORD) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:17: ELSE_KEYWORD ( executable_section )+
                    {
                    ELSE_KEYWORD402=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_if_statement7783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD402);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:30: ( executable_section )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==NUMBER_UNSIGNED||LA136_0==STRING||(LA136_0>=IDENTIFIER && LA136_0<=EXT_IDENTIFIER)||LA136_0==BEGIN_KEYWORD||LA136_0==DECLARE_KEYWORD||LA136_0==NULL_KEYWORD||(LA136_0>=TRUE_KEYWORD && LA136_0<=FALSE_KEYWORD)||LA136_0==INTERVAL_KEYWORD||LA136_0==REPLACE_KEYWORD||(LA136_0>=RETURN_KEYWORD && LA136_0<=IN_KEYWORD)||LA136_0==IF_KEYWORD||(LA136_0>=GOTO_KEYWORD && LA136_0<=FOR_KEYWORD)||LA136_0==SELECT_KEYWORD||(LA136_0>=RAISE_KEYWORD && LA136_0<=PRAGMA_KEYWORD)||(LA136_0>=CASE_KEYWORD && LA136_0<=CLOSE_KEYWORD)||LA136_0==COMMIT_KEYWORD||LA136_0==CONTINUE_KEYWORD||(LA136_0>=DELETE_KEYWORD && LA136_0<=EXECUTE_KEYWORD)||LA136_0==EXIT_KEYWORD||LA136_0==FETCH_KEYWORD||LA136_0==FORALL_KEYWORD||(LA136_0>=INSERT_KEYWORD && LA136_0<=OPEN_KEYWORD)||(LA136_0>=ROLLBACK_KEYWORD && LA136_0<=SAVEPOINT_KEYWORD)||LA136_0==SET_KEYWORD||(LA136_0>=SQLCODE_KEYWORD && LA136_0<=UPDATE_KEYWORD)||LA136_0==RESULT_KEYWORD||LA136_0==LPAREN||LA136_0==NOT_OPERATOR||LA136_0==210||(LA136_0>=214 && LA136_0<=215)) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:31: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_if_statement7786);
                    	    executable_section403=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section403.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD404=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_if_statement7807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD404);

            IF_KEYWORD405=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD405);



            // AST REWRITE
            // elements: executable_section, IF_KEYWORD, END_KEYWORD, IF_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:16: -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:19: ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_IF, "IM_IF"), root_1);

                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:1: loop_statement : LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) ;
    public final PL_SQLParser.loop_statement_return loop_statement() throws RecognitionException {
        PL_SQLParser.loop_statement_return retval = new PL_SQLParser.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOOP_KEYWORD406=null;
        Token END_KEYWORD408=null;
        Token LOOP_KEYWORD409=null;
        PL_SQLParser.executable_section_return executable_section407 = null;

        PL_SQLParser.identifier_return identifier410 = null;


        CommonTree LOOP_KEYWORD406_tree=null;
        CommonTree END_KEYWORD408_tree=null;
        CommonTree LOOP_KEYWORD409_tree=null;
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_LOOP_KEYWORD=new RewriteRuleTokenStream(adaptor,"token LOOP_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:16: ( LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:18: LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )?
            {
            LOOP_KEYWORD406=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD406);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:31: ( executable_section )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==NUMBER_UNSIGNED||LA138_0==STRING||(LA138_0>=IDENTIFIER && LA138_0<=EXT_IDENTIFIER)||LA138_0==BEGIN_KEYWORD||LA138_0==DECLARE_KEYWORD||LA138_0==NULL_KEYWORD||(LA138_0>=TRUE_KEYWORD && LA138_0<=FALSE_KEYWORD)||LA138_0==INTERVAL_KEYWORD||LA138_0==REPLACE_KEYWORD||(LA138_0>=RETURN_KEYWORD && LA138_0<=IN_KEYWORD)||LA138_0==IF_KEYWORD||(LA138_0>=GOTO_KEYWORD && LA138_0<=FOR_KEYWORD)||LA138_0==SELECT_KEYWORD||(LA138_0>=RAISE_KEYWORD && LA138_0<=PRAGMA_KEYWORD)||(LA138_0>=CASE_KEYWORD && LA138_0<=CLOSE_KEYWORD)||LA138_0==COMMIT_KEYWORD||LA138_0==CONTINUE_KEYWORD||(LA138_0>=DELETE_KEYWORD && LA138_0<=EXECUTE_KEYWORD)||LA138_0==EXIT_KEYWORD||LA138_0==FETCH_KEYWORD||LA138_0==FORALL_KEYWORD||(LA138_0>=INSERT_KEYWORD && LA138_0<=OPEN_KEYWORD)||(LA138_0>=ROLLBACK_KEYWORD && LA138_0<=SAVEPOINT_KEYWORD)||LA138_0==SET_KEYWORD||(LA138_0>=SQLCODE_KEYWORD && LA138_0<=UPDATE_KEYWORD)||LA138_0==RESULT_KEYWORD||LA138_0==LPAREN||LA138_0==NOT_OPERATOR||LA138_0==210||(LA138_0>=214 && LA138_0<=215)) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:32: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_loop_statement7851);
            	    executable_section407=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section407.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);

            END_KEYWORD408=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_loop_statement7855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD408);

            LOOP_KEYWORD409=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD409);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:78: ( identifier )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==IDENTIFIER||LA139_0==INTERVAL_KEYWORD||LA139_0==RESULT_KEYWORD) ) {
                int LA139_2 = input.LA(2);

                if ( (synpred252_PL_SQL()) ) {
                    alt139=1;
                }
            }
            switch (alt139) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_loop_statement7859);
                    identifier410=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier410.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: LOOP_KEYWORD, LOOP_KEYWORD, END_KEYWORD, executable_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:3: -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:756:6: ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_LOOP, "IM_LOOP"), root_1);

                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:1: while_loop_statement : WHILE_KEYWORD expression loop_statement ;
    public final PL_SQLParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        PL_SQLParser.while_loop_statement_return retval = new PL_SQLParser.while_loop_statement_return();
        retval.start = input.LT(1);
        int while_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHILE_KEYWORD411=null;
        PL_SQLParser.expression_return expression412 = null;

        PL_SQLParser.loop_statement_return loop_statement413 = null;


        CommonTree WHILE_KEYWORD411_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:22: ( WHILE_KEYWORD expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:24: WHILE_KEYWORD expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            WHILE_KEYWORD411=(Token)match(input,WHILE_KEYWORD,FOLLOW_WHILE_KEYWORD_in_while_loop_statement7886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE_KEYWORD411_tree = (CommonTree)adaptor.create(WHILE_KEYWORD411);
            adaptor.addChild(root_0, WHILE_KEYWORD411_tree);
            }
            pushFollow(FOLLOW_expression_in_while_loop_statement7888);
            expression412=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression412.getTree());
            pushFollow(FOLLOW_loop_statement_in_while_loop_statement7890);
            loop_statement413=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement413.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, while_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class for_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:1: for_loop_statement : FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) ;
    public final PL_SQLParser.for_loop_statement_return for_loop_statement() throws RecognitionException {
        PL_SQLParser.for_loop_statement_return retval = new PL_SQLParser.for_loop_statement_return();
        retval.start = input.LT(1);
        int for_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD414=null;
        Token IN_KEYWORD416=null;
        Token REVERSE_KEYWORD417=null;
        PL_SQLParser.identifier_return identifier415 = null;

        PL_SQLParser.expression_return expression418 = null;

        PL_SQLParser.for_loop_statement_part_return for_loop_statement_part419 = null;

        PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1420 = null;

        PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2421 = null;


        CommonTree FOR_KEYWORD414_tree=null;
        CommonTree IN_KEYWORD416_tree=null;
        CommonTree REVERSE_KEYWORD417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:20: ( FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:22: FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD414=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_for_loop_statement7897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD414_tree = (CommonTree)adaptor.create(FOR_KEYWORD414);
            adaptor.addChild(root_0, FOR_KEYWORD414_tree);
            }
            pushFollow(FOLLOW_identifier_in_for_loop_statement7899);
            identifier415=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier415.getTree());
            IN_KEYWORD416=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_for_loop_statement7901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD416_tree = (CommonTree)adaptor.create(IN_KEYWORD416);
            adaptor.addChild(root_0, IN_KEYWORD416_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:56: ( REVERSE_KEYWORD )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==REVERSE_KEYWORD) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REVERSE_KEYWORD
                    {
                    REVERSE_KEYWORD417=(Token)match(input,REVERSE_KEYWORD,FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_KEYWORD417_tree = (CommonTree)adaptor.create(REVERSE_KEYWORD417);
                    adaptor.addChild(root_0, REVERSE_KEYWORD417_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:22: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==LPAREN) ) {
                int LA142_1 = input.LA(2);

                if ( (synpred255_PL_SQL()) ) {
                    alt142=1;
                }
                else if ( (true) ) {
                    alt142=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA142_0==NUMBER_UNSIGNED||LA142_0==STRING||(LA142_0>=IDENTIFIER && LA142_0<=EXT_IDENTIFIER)||LA142_0==NULL_KEYWORD||(LA142_0>=TRUE_KEYWORD && LA142_0<=FALSE_KEYWORD)||LA142_0==INTERVAL_KEYWORD||LA142_0==REPLACE_KEYWORD||LA142_0==IN_KEYWORD||LA142_0==CASE_KEYWORD||(LA142_0>=SQLCODE_KEYWORD && LA142_0<=SQLERRM_KEYWORD)||LA142_0==RESULT_KEYWORD||LA142_0==NOT_OPERATOR||(LA142_0>=214 && LA142_0<=215)) ) {
                alt142=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
                    {
                    pushFollow(FOLLOW_expression_in_for_loop_statement7930);
                    expression418=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression418.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==229) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==LOOP_KEYWORD) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:36: for_loop_statement_part
                            {
                            pushFollow(FOLLOW_for_loop_statement_part_in_for_loop_statement7933);
                            for_loop_statement_part419=for_loop_statement_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement_part419.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:62: cursor_for_loop_statement1
                            {
                            pushFollow(FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7937);
                            cursor_for_loop_statement1420=cursor_for_loop_statement1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement1420.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:760:24: cursor_for_loop_statement2
                    {
                    pushFollow(FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7966);
                    cursor_for_loop_statement2421=cursor_for_loop_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement2421.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, for_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement"

    public static class for_loop_statement_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:1: for_loop_statement_part : '..' expression loop_statement ;
    public final PL_SQLParser.for_loop_statement_part_return for_loop_statement_part() throws RecognitionException {
        PL_SQLParser.for_loop_statement_part_return retval = new PL_SQLParser.for_loop_statement_part_return();
        retval.start = input.LT(1);
        int for_loop_statement_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal422=null;
        PL_SQLParser.expression_return expression423 = null;

        PL_SQLParser.loop_statement_return loop_statement424 = null;


        CommonTree string_literal422_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:25: ( '..' expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:27: '..' expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal422=(Token)match(input,229,FOLLOW_229_in_for_loop_statement_part7974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal422_tree = (CommonTree)adaptor.create(string_literal422);
            adaptor.addChild(root_0, string_literal422_tree);
            }
            pushFollow(FOLLOW_expression_in_for_loop_statement_part7976);
            expression423=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression423.getTree());
            pushFollow(FOLLOW_loop_statement_in_for_loop_statement_part7978);
            loop_statement424=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement424.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, for_loop_statement_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement_part"

    public static class cursor_for_loop_statement1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement1"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:1: cursor_for_loop_statement1 : loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement1_return retval = new PL_SQLParser.cursor_for_loop_statement1_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement1_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.loop_statement_return loop_statement425 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:28: ( loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:30: loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement17985);
            loop_statement425=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement425.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, cursor_for_loop_statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement1"

    public static class cursor_for_loop_statement2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:1: cursor_for_loop_statement2 : '(' select_statement ')' loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement2_return retval = new PL_SQLParser.cursor_for_loop_statement2_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal426=null;
        Token char_literal428=null;
        PL_SQLParser.select_statement_return select_statement427 = null;

        PL_SQLParser.loop_statement_return loop_statement429 = null;


        CommonTree char_literal426_tree=null;
        CommonTree char_literal428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:28: ( '(' select_statement ')' loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:30: '(' select_statement ')' loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_for_loop_statement27992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal426_tree = (CommonTree)adaptor.create(char_literal426);
            adaptor.addChild(root_0, char_literal426_tree);
            }
            pushFollow(FOLLOW_select_statement_in_cursor_for_loop_statement27994);
            select_statement427=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement427.getTree());
            char_literal428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_for_loop_statement27996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal428_tree = (CommonTree)adaptor.create(char_literal428);
            adaptor.addChild(root_0, char_literal428_tree);
            }
            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement27998);
            loop_statement429=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement429.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, cursor_for_loop_statement2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement2"

    public static class raise_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:1: raise_statement : RAISE_KEYWORD ( universal_identifier )? ;
    public final PL_SQLParser.raise_statement_return raise_statement() throws RecognitionException {
        PL_SQLParser.raise_statement_return retval = new PL_SQLParser.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAISE_KEYWORD430=null;
        PL_SQLParser.universal_identifier_return universal_identifier431 = null;


        CommonTree RAISE_KEYWORD430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:17: ( RAISE_KEYWORD ( universal_identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:19: RAISE_KEYWORD ( universal_identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAISE_KEYWORD430=(Token)match(input,RAISE_KEYWORD,FOLLOW_RAISE_KEYWORD_in_raise_statement8005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE_KEYWORD430_tree = (CommonTree)adaptor.create(RAISE_KEYWORD430);
            adaptor.addChild(root_0, RAISE_KEYWORD430_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:33: ( universal_identifier )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( ((LA143_0>=IDENTIFIER && LA143_0<=EXT_IDENTIFIER)||LA143_0==INTERVAL_KEYWORD||LA143_0==RESULT_KEYWORD) ) {
                int LA143_1 = input.LA(2);

                if ( (synpred256_PL_SQL()) ) {
                    alt143=1;
                }
            }
            switch (alt143) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_raise_statement8007);
                    universal_identifier431=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier431.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:1: case_statement_expression : ( simple_case_statement_expression | searched_case_statement_expression );
    public final PL_SQLParser.case_statement_expression_return case_statement_expression() throws RecognitionException {
        PL_SQLParser.case_statement_expression_return retval = new PL_SQLParser.case_statement_expression_return();
        retval.start = input.LT(1);
        int case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression432 = null;

        PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:27: ( simple_case_statement_expression | searched_case_statement_expression )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==CASE_KEYWORD) ) {
                int LA144_1 = input.LA(2);

                if ( (synpred257_PL_SQL()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:29: simple_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_expression_in_case_statement_expression8015);
                    simple_case_statement_expression432=simple_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement_expression432.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:64: searched_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_expression_in_case_statement_expression8019);
                    searched_case_statement_expression433=searched_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement_expression433.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement_expression"

    public static class simple_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:1: simple_case_statement_expression : CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression() throws RecognitionException {
        PL_SQLParser.simple_case_statement_expression_return retval = new PL_SQLParser.simple_case_statement_expression_return();
        retval.start = input.LT(1);
        int simple_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD434=null;
        Token WHEN_KEYWORD436=null;
        Token THEN_KEYWORD438=null;
        Token ELSE_KEYWORD440=null;
        Token END_KEYWORD442=null;
        Token CASE_KEYWORD443=null;
        PL_SQLParser.expression_return expression435 = null;

        PL_SQLParser.expression_return expression437 = null;

        PL_SQLParser.executable_case_section_return executable_case_section439 = null;

        PL_SQLParser.executable_case_section_return executable_case_section441 = null;

        PL_SQLParser.identifier_return identifier444 = null;


        CommonTree CASE_KEYWORD434_tree=null;
        CommonTree WHEN_KEYWORD436_tree=null;
        CommonTree THEN_KEYWORD438_tree=null;
        CommonTree ELSE_KEYWORD440_tree=null;
        CommonTree END_KEYWORD442_tree=null;
        CommonTree CASE_KEYWORD443_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:34: ( CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:36: CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD434=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD434);

            pushFollow(FOLLOW_expression_in_simple_case_statement_expression8028);
            expression435=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression435.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==WHEN_KEYWORD) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD436=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression8056); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD436);

            	    pushFollow(FOLLOW_expression_in_simple_case_statement_expression8058);
            	    expression437=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression437.getTree());
            	    THEN_KEYWORD438=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression8060); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD438);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:63: ( executable_case_section )+
            	    int cnt145=0;
            	    loop145:
            	    do {
            	        int alt145=2;
            	        int LA145_0 = input.LA(1);

            	        if ( (LA145_0==NUMBER_UNSIGNED||LA145_0==STRING||(LA145_0>=IDENTIFIER && LA145_0<=EXT_IDENTIFIER)||LA145_0==BEGIN_KEYWORD||LA145_0==DECLARE_KEYWORD||LA145_0==NULL_KEYWORD||(LA145_0>=TRUE_KEYWORD && LA145_0<=FALSE_KEYWORD)||LA145_0==INTERVAL_KEYWORD||LA145_0==REPLACE_KEYWORD||(LA145_0>=RETURN_KEYWORD && LA145_0<=IN_KEYWORD)||LA145_0==IF_KEYWORD||(LA145_0>=GOTO_KEYWORD && LA145_0<=FOR_KEYWORD)||LA145_0==SELECT_KEYWORD||(LA145_0>=RAISE_KEYWORD && LA145_0<=PRAGMA_KEYWORD)||(LA145_0>=CASE_KEYWORD && LA145_0<=CLOSE_KEYWORD)||LA145_0==COMMIT_KEYWORD||LA145_0==CONTINUE_KEYWORD||(LA145_0>=DELETE_KEYWORD && LA145_0<=EXECUTE_KEYWORD)||LA145_0==EXIT_KEYWORD||LA145_0==FETCH_KEYWORD||LA145_0==FORALL_KEYWORD||(LA145_0>=INSERT_KEYWORD && LA145_0<=OPEN_KEYWORD)||(LA145_0>=ROLLBACK_KEYWORD && LA145_0<=SAVEPOINT_KEYWORD)||LA145_0==SET_KEYWORD||(LA145_0>=SQLCODE_KEYWORD && LA145_0<=UPDATE_KEYWORD)||LA145_0==RESULT_KEYWORD||LA145_0==LPAREN||LA145_0==NOT_OPERATOR||LA145_0==210||(LA145_0>=214 && LA145_0<=215)) ) {
            	            alt145=1;
            	        }


            	        switch (alt145) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression8063);
            	    	    executable_case_section439=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section439.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt145 >= 1 ) break loop145;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(145, input);
            	                throw eee;
            	        }
            	        cnt145++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ELSE_KEYWORD) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD440=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression8094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD440);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:39: ( executable_case_section )+
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==NUMBER_UNSIGNED||LA147_0==STRING||(LA147_0>=IDENTIFIER && LA147_0<=EXT_IDENTIFIER)||LA147_0==BEGIN_KEYWORD||LA147_0==DECLARE_KEYWORD||LA147_0==NULL_KEYWORD||(LA147_0>=TRUE_KEYWORD && LA147_0<=FALSE_KEYWORD)||LA147_0==INTERVAL_KEYWORD||LA147_0==REPLACE_KEYWORD||(LA147_0>=RETURN_KEYWORD && LA147_0<=IN_KEYWORD)||LA147_0==IF_KEYWORD||(LA147_0>=GOTO_KEYWORD && LA147_0<=FOR_KEYWORD)||LA147_0==SELECT_KEYWORD||(LA147_0>=RAISE_KEYWORD && LA147_0<=PRAGMA_KEYWORD)||(LA147_0>=CASE_KEYWORD && LA147_0<=CLOSE_KEYWORD)||LA147_0==COMMIT_KEYWORD||LA147_0==CONTINUE_KEYWORD||(LA147_0>=DELETE_KEYWORD && LA147_0<=EXECUTE_KEYWORD)||LA147_0==EXIT_KEYWORD||LA147_0==FETCH_KEYWORD||LA147_0==FORALL_KEYWORD||(LA147_0>=INSERT_KEYWORD && LA147_0<=OPEN_KEYWORD)||(LA147_0>=ROLLBACK_KEYWORD && LA147_0<=SAVEPOINT_KEYWORD)||LA147_0==SET_KEYWORD||(LA147_0>=SQLCODE_KEYWORD && LA147_0<=UPDATE_KEYWORD)||LA147_0==RESULT_KEYWORD||LA147_0==LPAREN||LA147_0==NOT_OPERATOR||LA147_0==210||(LA147_0>=214 && LA147_0<=215)) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression8097);
                    	    executable_case_section441=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section441.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD442=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_simple_case_statement_expression8128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD442);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:38: ( CASE_KEYWORD )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==CASE_KEYWORD) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred262_PL_SQL()) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD443=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD443);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:52: ( identifier )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==IDENTIFIER||LA150_0==INTERVAL_KEYWORD||LA150_0==RESULT_KEYWORD) ) {
                int LA150_2 = input.LA(2);

                if ( (synpred263_PL_SQL()) ) {
                    alt150=1;
                }
            }
            switch (alt150) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_simple_case_statement_expression8133);
                    identifier444=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier444.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: CASE_KEYWORD, END_KEYWORD, executable_case_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 770:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, simple_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement_expression"

    public static class searched_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:1: searched_case_statement_expression : CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression() throws RecognitionException {
        PL_SQLParser.searched_case_statement_expression_return retval = new PL_SQLParser.searched_case_statement_expression_return();
        retval.start = input.LT(1);
        int searched_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD445=null;
        Token WHEN_KEYWORD446=null;
        Token THEN_KEYWORD448=null;
        Token ELSE_KEYWORD450=null;
        Token END_KEYWORD452=null;
        Token CASE_KEYWORD453=null;
        PL_SQLParser.expression_return expression447 = null;

        PL_SQLParser.executable_case_section_return executable_case_section449 = null;

        PL_SQLParser.executable_case_section_return executable_case_section451 = null;

        PL_SQLParser.identifier_return identifier454 = null;


        CommonTree CASE_KEYWORD445_tree=null;
        CommonTree WHEN_KEYWORD446_tree=null;
        CommonTree THEN_KEYWORD448_tree=null;
        CommonTree ELSE_KEYWORD450_tree=null;
        CommonTree END_KEYWORD452_tree=null;
        CommonTree CASE_KEYWORD453_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:36: ( CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:38: CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD445=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD445);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==WHEN_KEYWORD) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD446=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression8208); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD446);

            	    pushFollow(FOLLOW_expression_in_searched_case_statement_expression8210);
            	    expression447=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression447.getTree());
            	    THEN_KEYWORD448=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression8212); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD448);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:63: ( executable_case_section )+
            	    int cnt151=0;
            	    loop151:
            	    do {
            	        int alt151=2;
            	        int LA151_0 = input.LA(1);

            	        if ( (LA151_0==NUMBER_UNSIGNED||LA151_0==STRING||(LA151_0>=IDENTIFIER && LA151_0<=EXT_IDENTIFIER)||LA151_0==BEGIN_KEYWORD||LA151_0==DECLARE_KEYWORD||LA151_0==NULL_KEYWORD||(LA151_0>=TRUE_KEYWORD && LA151_0<=FALSE_KEYWORD)||LA151_0==INTERVAL_KEYWORD||LA151_0==REPLACE_KEYWORD||(LA151_0>=RETURN_KEYWORD && LA151_0<=IN_KEYWORD)||LA151_0==IF_KEYWORD||(LA151_0>=GOTO_KEYWORD && LA151_0<=FOR_KEYWORD)||LA151_0==SELECT_KEYWORD||(LA151_0>=RAISE_KEYWORD && LA151_0<=PRAGMA_KEYWORD)||(LA151_0>=CASE_KEYWORD && LA151_0<=CLOSE_KEYWORD)||LA151_0==COMMIT_KEYWORD||LA151_0==CONTINUE_KEYWORD||(LA151_0>=DELETE_KEYWORD && LA151_0<=EXECUTE_KEYWORD)||LA151_0==EXIT_KEYWORD||LA151_0==FETCH_KEYWORD||LA151_0==FORALL_KEYWORD||(LA151_0>=INSERT_KEYWORD && LA151_0<=OPEN_KEYWORD)||(LA151_0>=ROLLBACK_KEYWORD && LA151_0<=SAVEPOINT_KEYWORD)||LA151_0==SET_KEYWORD||(LA151_0>=SQLCODE_KEYWORD && LA151_0<=UPDATE_KEYWORD)||LA151_0==RESULT_KEYWORD||LA151_0==LPAREN||LA151_0==NOT_OPERATOR||LA151_0==210||(LA151_0>=214 && LA151_0<=215)) ) {
            	            alt151=1;
            	        }


            	        switch (alt151) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression8215);
            	    	    executable_case_section449=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section449.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt151 >= 1 ) break loop151;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(151, input);
            	                throw eee;
            	        }
            	        cnt151++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==ELSE_KEYWORD) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD450=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression8246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD450);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:39: ( executable_case_section )+
                    int cnt153=0;
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==NUMBER_UNSIGNED||LA153_0==STRING||(LA153_0>=IDENTIFIER && LA153_0<=EXT_IDENTIFIER)||LA153_0==BEGIN_KEYWORD||LA153_0==DECLARE_KEYWORD||LA153_0==NULL_KEYWORD||(LA153_0>=TRUE_KEYWORD && LA153_0<=FALSE_KEYWORD)||LA153_0==INTERVAL_KEYWORD||LA153_0==REPLACE_KEYWORD||(LA153_0>=RETURN_KEYWORD && LA153_0<=IN_KEYWORD)||LA153_0==IF_KEYWORD||(LA153_0>=GOTO_KEYWORD && LA153_0<=FOR_KEYWORD)||LA153_0==SELECT_KEYWORD||(LA153_0>=RAISE_KEYWORD && LA153_0<=PRAGMA_KEYWORD)||(LA153_0>=CASE_KEYWORD && LA153_0<=CLOSE_KEYWORD)||LA153_0==COMMIT_KEYWORD||LA153_0==CONTINUE_KEYWORD||(LA153_0>=DELETE_KEYWORD && LA153_0<=EXECUTE_KEYWORD)||LA153_0==EXIT_KEYWORD||LA153_0==FETCH_KEYWORD||LA153_0==FORALL_KEYWORD||(LA153_0>=INSERT_KEYWORD && LA153_0<=OPEN_KEYWORD)||(LA153_0>=ROLLBACK_KEYWORD && LA153_0<=SAVEPOINT_KEYWORD)||LA153_0==SET_KEYWORD||(LA153_0>=SQLCODE_KEYWORD && LA153_0<=UPDATE_KEYWORD)||LA153_0==RESULT_KEYWORD||LA153_0==LPAREN||LA153_0==NOT_OPERATOR||LA153_0==210||(LA153_0>=214 && LA153_0<=215)) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression8249);
                    	    executable_case_section451=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section451.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt153 >= 1 ) break loop153;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(153, input);
                                throw eee;
                        }
                        cnt153++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD452=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_searched_case_statement_expression8280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD452);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:38: ( CASE_KEYWORD )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==CASE_KEYWORD) ) {
                int LA155_2 = input.LA(2);

                if ( (synpred268_PL_SQL()) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD453=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD453);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:52: ( identifier )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==IDENTIFIER||LA156_0==INTERVAL_KEYWORD||LA156_0==RESULT_KEYWORD) ) {
                int LA156_2 = input.LA(2);

                if ( (synpred269_PL_SQL()) ) {
                    alt156=1;
                }
            }
            switch (alt156) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_searched_case_statement_expression8285);
                    identifier454=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier454.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: executable_case_section, CASE_KEYWORD, END_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 775:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:775:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, searched_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement_expression"

    public static class close_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:1: close_statement : CLOSE_KEYWORD universal_identifier ;
    public final PL_SQLParser.close_statement_return close_statement() throws RecognitionException {
        PL_SQLParser.close_statement_return retval = new PL_SQLParser.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLOSE_KEYWORD455=null;
        PL_SQLParser.universal_identifier_return universal_identifier456 = null;


        CommonTree CLOSE_KEYWORD455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:17: ( CLOSE_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:19: CLOSE_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            CLOSE_KEYWORD455=(Token)match(input,CLOSE_KEYWORD,FOLLOW_CLOSE_KEYWORD_in_close_statement8357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_KEYWORD455_tree = (CommonTree)adaptor.create(CLOSE_KEYWORD455);
            adaptor.addChild(root_0, CLOSE_KEYWORD455_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_close_statement8359);
            universal_identifier456=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier456.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:1: continue_statement : CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.continue_statement_return continue_statement() throws RecognitionException {
        PL_SQLParser.continue_statement_return retval = new PL_SQLParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONTINUE_KEYWORD457=null;
        Token WHEN_KEYWORD459=null;
        PL_SQLParser.identifier_return identifier458 = null;

        PL_SQLParser.expression_return expression460 = null;


        CommonTree CONTINUE_KEYWORD457_tree=null;
        CommonTree WHEN_KEYWORD459_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:20: ( CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:22: CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CONTINUE_KEYWORD457=(Token)match(input,CONTINUE_KEYWORD,FOLLOW_CONTINUE_KEYWORD_in_continue_statement8366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE_KEYWORD457_tree = (CommonTree)adaptor.create(CONTINUE_KEYWORD457);
            adaptor.addChild(root_0, CONTINUE_KEYWORD457_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:39: ( identifier )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==IDENTIFIER||LA157_0==INTERVAL_KEYWORD||LA157_0==RESULT_KEYWORD) ) {
                int LA157_2 = input.LA(2);

                if ( (synpred270_PL_SQL()) ) {
                    alt157=1;
                }
            }
            switch (alt157) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_continue_statement8368);
                    identifier458=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier458.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:51: ( WHEN_KEYWORD expression )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==WHEN_KEYWORD) ) {
                int LA158_1 = input.LA(2);

                if ( (synpred271_PL_SQL()) ) {
                    alt158=1;
                }
            }
            switch (alt158) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:52: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD459=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_continue_statement8372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD459_tree = (CommonTree)adaptor.create(WHEN_KEYWORD459);
                    adaptor.addChild(root_0, WHEN_KEYWORD459_tree);
                    }
                    pushFollow(FOLLOW_expression_in_continue_statement8374);
                    expression460=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression460.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, continue_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class execute_immediate_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_immediate_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:778:1: execute_immediate_statement : EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? ;
    public final PL_SQLParser.execute_immediate_statement_return execute_immediate_statement() throws RecognitionException {
        PL_SQLParser.execute_immediate_statement_return retval = new PL_SQLParser.execute_immediate_statement_return();
        retval.start = input.LT(1);
        int execute_immediate_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXECUTE_KEYWORD461=null;
        Token IMMEDIATE_KEYWORD462=null;
        Token set464=null;
        PL_SQLParser.expression_return expression463 = null;

        PL_SQLParser.into_clause_return into_clause465 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause466 = null;

        PL_SQLParser.using_clause_return using_clause467 = null;


        CommonTree EXECUTE_KEYWORD461_tree=null;
        CommonTree IMMEDIATE_KEYWORD462_tree=null;
        CommonTree set464_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:778:29: ( EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:778:31: EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXECUTE_KEYWORD461=(Token)match(input,EXECUTE_KEYWORD,FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECUTE_KEYWORD461_tree = (CommonTree)adaptor.create(EXECUTE_KEYWORD461);
            adaptor.addChild(root_0, EXECUTE_KEYWORD461_tree);
            }
            IMMEDIATE_KEYWORD462=(Token)match(input,IMMEDIATE_KEYWORD,FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMMEDIATE_KEYWORD462_tree = (CommonTree)adaptor.create(IMMEDIATE_KEYWORD462);
            adaptor.addChild(root_0, IMMEDIATE_KEYWORD462_tree);
            }
            pushFollow(FOLLOW_expression_in_execute_immediate_statement8387);
            expression463=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression463.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:31: ( RETURN_KEYWORD | RETURNING_KEYWORD )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==RETURN_KEYWORD) ) {
                int LA159_2 = input.LA(2);

                if ( (true) ) {
                    alt159=1;
                }
            }
            else if ( (LA159_0==RETURNING_KEYWORD) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set464=(Token)input.LT(1);
                    if ( input.LA(1)==RETURN_KEYWORD||input.LA(1)==RETURNING_KEYWORD ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set464));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:31: ( into_clause | bulk_collect_into_clause )?
            int alt160=3;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==INTO_KEYWORD) ) {
                alt160=1;
            }
            else if ( (LA160_0==BULK_KEYWORD) ) {
                alt160=2;
            }
            switch (alt160) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:32: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate_statement8459);
                    into_clause465=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause465.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:46: bulk_collect_into_clause
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8463);
                    bulk_collect_into_clause466=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause466.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:31: ( using_clause )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==USING_KEYWORD) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate_statement8497);
                    using_clause467=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause467.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, execute_immediate_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "execute_immediate_statement"

    public static class into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:1: into_clause : INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.into_clause_return into_clause() throws RecognitionException {
        PL_SQLParser.into_clause_return retval = new PL_SQLParser.into_clause_return();
        retval.start = input.LT(1);
        int into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTO_KEYWORD468=null;
        Token char_literal470=null;
        PL_SQLParser.universal_identifier_return universal_identifier469 = null;

        PL_SQLParser.universal_identifier_return universal_identifier471 = null;


        CommonTree INTO_KEYWORD468_tree=null;
        CommonTree char_literal470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:13: ( INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:15: INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            INTO_KEYWORD468=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_into_clause8506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD468_tree = (CommonTree)adaptor.create(INTO_KEYWORD468);
            adaptor.addChild(root_0, INTO_KEYWORD468_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_into_clause8508);
            universal_identifier469=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier469.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:49: ( ',' universal_identifier )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:50: ',' universal_identifier
            	    {
            	    char_literal470=(Token)match(input,COMMA,FOLLOW_COMMA_in_into_clause8511); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal470_tree = (CommonTree)adaptor.create(char_literal470);
            	    adaptor.addChild(root_0, char_literal470_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_into_clause8513);
            	    universal_identifier471=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier471.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "into_clause"

    public static class bulk_collect_into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_collect_into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:1: bulk_collect_into_clause : BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause() throws RecognitionException {
        PL_SQLParser.bulk_collect_into_clause_return retval = new PL_SQLParser.bulk_collect_into_clause_return();
        retval.start = input.LT(1);
        int bulk_collect_into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BULK_KEYWORD472=null;
        Token COLLECT_KEYWORD473=null;
        Token INTO_KEYWORD474=null;
        Token char_literal476=null;
        PL_SQLParser.universal_identifier_return universal_identifier475 = null;

        PL_SQLParser.universal_identifier_return universal_identifier477 = null;


        CommonTree BULK_KEYWORD472_tree=null;
        CommonTree COLLECT_KEYWORD473_tree=null;
        CommonTree INTO_KEYWORD474_tree=null;
        CommonTree char_literal476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:26: ( BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:28: BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            BULK_KEYWORD472=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BULK_KEYWORD472_tree = (CommonTree)adaptor.create(BULK_KEYWORD472);
            adaptor.addChild(root_0, BULK_KEYWORD472_tree);
            }
            COLLECT_KEYWORD473=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLLECT_KEYWORD473_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD473);
            adaptor.addChild(root_0, COLLECT_KEYWORD473_tree);
            }
            INTO_KEYWORD474=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD474_tree = (CommonTree)adaptor.create(INTO_KEYWORD474);
            adaptor.addChild(root_0, INTO_KEYWORD474_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8556);
            universal_identifier475=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier475.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:49: ( ',' universal_identifier )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:50: ',' universal_identifier
            	    {
            	    char_literal476=(Token)match(input,COMMA,FOLLOW_COMMA_in_bulk_collect_into_clause8559); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal476_tree = (CommonTree)adaptor.create(char_literal476);
            	    adaptor.addChild(root_0, char_literal476_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8561);
            	    universal_identifier477=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier477.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, bulk_collect_into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bulk_collect_into_clause"

    public static class using_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:1: using_clause : USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* ;
    public final PL_SQLParser.using_clause_return using_clause() throws RecognitionException {
        PL_SQLParser.using_clause_return retval = new PL_SQLParser.using_clause_return();
        retval.start = input.LT(1);
        int using_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token USING_KEYWORD478=null;
        Token IN_KEYWORD479=null;
        Token OUT_KEYWORD480=null;
        Token IN_KEYWORD481=null;
        Token OUT_KEYWORD482=null;
        Token char_literal484=null;
        Token IN_KEYWORD485=null;
        Token OUT_KEYWORD486=null;
        Token IN_KEYWORD487=null;
        Token OUT_KEYWORD488=null;
        PL_SQLParser.expression_return expression483 = null;

        PL_SQLParser.expression_return expression489 = null;


        CommonTree USING_KEYWORD478_tree=null;
        CommonTree IN_KEYWORD479_tree=null;
        CommonTree OUT_KEYWORD480_tree=null;
        CommonTree IN_KEYWORD481_tree=null;
        CommonTree OUT_KEYWORD482_tree=null;
        CommonTree char_literal484_tree=null;
        CommonTree IN_KEYWORD485_tree=null;
        CommonTree OUT_KEYWORD486_tree=null;
        CommonTree IN_KEYWORD487_tree=null;
        CommonTree OUT_KEYWORD488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:14: ( USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:16: USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            USING_KEYWORD478=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_using_clause8570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_KEYWORD478_tree = (CommonTree)adaptor.create(USING_KEYWORD478);
            adaptor.addChild(root_0, USING_KEYWORD478_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            int alt164=4;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==OUT_KEYWORD) ) {
                alt164=2;
            }
            else if ( (LA164_0==IN_KEYWORD) ) {
                int LA164_2 = input.LA(2);

                if ( (synpred279_PL_SQL()) ) {
                    alt164=1;
                }
                else if ( (synpred281_PL_SQL()) ) {
                    alt164=3;
                }
            }
            switch (alt164) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:31: IN_KEYWORD
                    {
                    IN_KEYWORD479=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD479_tree = (CommonTree)adaptor.create(IN_KEYWORD479);
                    adaptor.addChild(root_0, IN_KEYWORD479_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:44: OUT_KEYWORD
                    {
                    OUT_KEYWORD480=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD480_tree = (CommonTree)adaptor.create(OUT_KEYWORD480);
                    adaptor.addChild(root_0, OUT_KEYWORD480_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:58: ( IN_KEYWORD OUT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:58: ( IN_KEYWORD OUT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:59: IN_KEYWORD OUT_KEYWORD
                    {
                    IN_KEYWORD481=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD481_tree = (CommonTree)adaptor.create(IN_KEYWORD481);
                    adaptor.addChild(root_0, IN_KEYWORD481_tree);
                    }
                    OUT_KEYWORD482=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD482_tree = (CommonTree)adaptor.create(OUT_KEYWORD482);
                    adaptor.addChild(root_0, OUT_KEYWORD482_tree);
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_using_clause8589);
            expression483=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression483.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:16: ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:17: ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression
            	    {
            	    char_literal484=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause8607); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal484_tree = (CommonTree)adaptor.create(char_literal484);
            	    adaptor.addChild(root_0, char_literal484_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            	    int alt165=4;
            	    int LA165_0 = input.LA(1);

            	    if ( (LA165_0==OUT_KEYWORD) ) {
            	        alt165=2;
            	    }
            	    else if ( (LA165_0==IN_KEYWORD) ) {
            	        int LA165_3 = input.LA(2);

            	        if ( (synpred282_PL_SQL()) ) {
            	            alt165=1;
            	        }
            	        else if ( (synpred284_PL_SQL()) ) {
            	            alt165=3;
            	        }
            	    }
            	    switch (alt165) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:22: IN_KEYWORD
            	            {
            	            IN_KEYWORD485=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8610); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD485_tree = (CommonTree)adaptor.create(IN_KEYWORD485);
            	            adaptor.addChild(root_0, IN_KEYWORD485_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:35: OUT_KEYWORD
            	            {
            	            OUT_KEYWORD486=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8614); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD486_tree = (CommonTree)adaptor.create(OUT_KEYWORD486);
            	            adaptor.addChild(root_0, OUT_KEYWORD486_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:49: ( IN_KEYWORD OUT_KEYWORD )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:49: ( IN_KEYWORD OUT_KEYWORD )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:50: IN_KEYWORD OUT_KEYWORD
            	            {
            	            IN_KEYWORD487=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8619); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD487_tree = (CommonTree)adaptor.create(IN_KEYWORD487);
            	            adaptor.addChild(root_0, IN_KEYWORD487_tree);
            	            }
            	            OUT_KEYWORD488=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8621); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD488_tree = (CommonTree)adaptor.create(OUT_KEYWORD488);
            	            adaptor.addChild(root_0, OUT_KEYWORD488_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expression_in_using_clause8626);
            	    expression489=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, using_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class exit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:1: exit_statement : EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.exit_statement_return exit_statement() throws RecognitionException {
        PL_SQLParser.exit_statement_return retval = new PL_SQLParser.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXIT_KEYWORD490=null;
        Token WHEN_KEYWORD492=null;
        PL_SQLParser.identifier_return identifier491 = null;

        PL_SQLParser.expression_return expression493 = null;


        CommonTree EXIT_KEYWORD490_tree=null;
        CommonTree WHEN_KEYWORD492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:16: ( EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:18: EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXIT_KEYWORD490=(Token)match(input,EXIT_KEYWORD,FOLLOW_EXIT_KEYWORD_in_exit_statement8635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT_KEYWORD490_tree = (CommonTree)adaptor.create(EXIT_KEYWORD490);
            adaptor.addChild(root_0, EXIT_KEYWORD490_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:31: ( identifier )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==IDENTIFIER||LA167_0==INTERVAL_KEYWORD||LA167_0==RESULT_KEYWORD) ) {
                int LA167_2 = input.LA(2);

                if ( (synpred286_PL_SQL()) ) {
                    alt167=1;
                }
            }
            switch (alt167) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_exit_statement8637);
                    identifier491=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier491.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:43: ( WHEN_KEYWORD expression )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==WHEN_KEYWORD) ) {
                int LA168_2 = input.LA(2);

                if ( (synpred287_PL_SQL()) ) {
                    alt168=1;
                }
            }
            switch (alt168) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:44: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD492=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exit_statement8641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD492_tree = (CommonTree)adaptor.create(WHEN_KEYWORD492);
                    adaptor.addChild(root_0, WHEN_KEYWORD492_tree);
                    }
                    pushFollow(FOLLOW_expression_in_exit_statement8643);
                    expression493=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression493.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:1: fetch_statement : FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) ;
    public final PL_SQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
        PL_SQLParser.fetch_statement_return retval = new PL_SQLParser.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FETCH_KEYWORD494=null;
        Token LIMIT_KEYWORD497=null;
        PL_SQLParser.expression_return expression495 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause496 = null;

        PL_SQLParser.expression_return expression498 = null;

        PL_SQLParser.into_clause_return into_clause499 = null;


        CommonTree FETCH_KEYWORD494_tree=null;
        CommonTree LIMIT_KEYWORD497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:17: ( FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:19: FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            {
            root_0 = (CommonTree)adaptor.nil();

            FETCH_KEYWORD494=(Token)match(input,FETCH_KEYWORD,FOLLOW_FETCH_KEYWORD_in_fetch_statement8652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FETCH_KEYWORD494_tree = (CommonTree)adaptor.create(FETCH_KEYWORD494);
            adaptor.addChild(root_0, FETCH_KEYWORD494_tree);
            }
            pushFollow(FOLLOW_expression_in_fetch_statement8654);
            expression495=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression495.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:19: ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==BULK_KEYWORD) ) {
                alt170=1;
            }
            else if ( (LA170_0==INTO_KEYWORD) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:21: bulk_collect_into_clause ( LIMIT_KEYWORD expression )?
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_fetch_statement8677);
                    bulk_collect_into_clause496=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause496.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:46: ( LIMIT_KEYWORD expression )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==LIMIT_KEYWORD) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:47: LIMIT_KEYWORD expression
                            {
                            LIMIT_KEYWORD497=(Token)match(input,LIMIT_KEYWORD,FOLLOW_LIMIT_KEYWORD_in_fetch_statement8680); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LIMIT_KEYWORD497_tree = (CommonTree)adaptor.create(LIMIT_KEYWORD497);
                            adaptor.addChild(root_0, LIMIT_KEYWORD497_tree);
                            }
                            pushFollow(FOLLOW_expression_in_fetch_statement8682);
                            expression498=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:789:78: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_fetch_statement8690);
                    into_clause499=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause499.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class forall_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:1: forall_statement : FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements ;
    public final PL_SQLParser.forall_statement_return forall_statement() throws RecognitionException {
        PL_SQLParser.forall_statement_return retval = new PL_SQLParser.forall_statement_return();
        retval.start = input.LT(1);
        int forall_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FORALL_KEYWORD500=null;
        Token IN_KEYWORD502=null;
        Token SAVE_KEYWORD504=null;
        Token EXCEPTIONS_KEYWORD505=null;
        PL_SQLParser.identifier_return identifier501 = null;

        PL_SQLParser.bounds_clause_return bounds_clause503 = null;

        PL_SQLParser.sql_statements_return sql_statements506 = null;


        CommonTree FORALL_KEYWORD500_tree=null;
        CommonTree IN_KEYWORD502_tree=null;
        CommonTree SAVE_KEYWORD504_tree=null;
        CommonTree EXCEPTIONS_KEYWORD505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:18: ( FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:20: FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements
            {
            root_0 = (CommonTree)adaptor.nil();

            FORALL_KEYWORD500=(Token)match(input,FORALL_KEYWORD,FOLLOW_FORALL_KEYWORD_in_forall_statement8698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORALL_KEYWORD500_tree = (CommonTree)adaptor.create(FORALL_KEYWORD500);
            adaptor.addChild(root_0, FORALL_KEYWORD500_tree);
            }
            pushFollow(FOLLOW_identifier_in_forall_statement8700);
            identifier501=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier501.getTree());
            IN_KEYWORD502=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_forall_statement8702); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD502_tree = (CommonTree)adaptor.create(IN_KEYWORD502);
            adaptor.addChild(root_0, IN_KEYWORD502_tree);
            }
            pushFollow(FOLLOW_bounds_clause_in_forall_statement8704);
            bounds_clause503=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bounds_clause503.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:791:20: ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==SAVE_KEYWORD) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:791:21: SAVE_KEYWORD EXCEPTIONS_KEYWORD
                    {
                    SAVE_KEYWORD504=(Token)match(input,SAVE_KEYWORD,FOLLOW_SAVE_KEYWORD_in_forall_statement8726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAVE_KEYWORD504_tree = (CommonTree)adaptor.create(SAVE_KEYWORD504);
                    adaptor.addChild(root_0, SAVE_KEYWORD504_tree);
                    }
                    EXCEPTIONS_KEYWORD505=(Token)match(input,EXCEPTIONS_KEYWORD,FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTIONS_KEYWORD505_tree = (CommonTree)adaptor.create(EXCEPTIONS_KEYWORD505);
                    adaptor.addChild(root_0, EXCEPTIONS_KEYWORD505_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_statements_in_forall_statement8732);
            sql_statements506=sql_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements506.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, forall_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forall_statement"

    public static class bounds_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bounds_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:1: bounds_clause : ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) );
    public final PL_SQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
        PL_SQLParser.bounds_clause_return retval = new PL_SQLParser.bounds_clause_return();
        retval.start = input.LT(1);
        int bounds_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal508=null;
        Token INDICES_KEYWORD510=null;
        Token OF_KEYWORD511=null;
        Token BETWEEN_KEYWORD513=null;
        Token AND_OPERATOR515=null;
        Token VALUES_KEYWORD517=null;
        Token OF_KEYWORD518=null;
        PL_SQLParser.expression_return expression507 = null;

        PL_SQLParser.expression_return expression509 = null;

        PL_SQLParser.universal_identifier_return universal_identifier512 = null;

        PL_SQLParser.expression_return expression514 = null;

        PL_SQLParser.expression_return expression516 = null;

        PL_SQLParser.universal_identifier_return universal_identifier519 = null;


        CommonTree string_literal508_tree=null;
        CommonTree INDICES_KEYWORD510_tree=null;
        CommonTree OF_KEYWORD511_tree=null;
        CommonTree BETWEEN_KEYWORD513_tree=null;
        CommonTree AND_OPERATOR515_tree=null;
        CommonTree VALUES_KEYWORD517_tree=null;
        CommonTree OF_KEYWORD518_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:15: ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) )
            int alt173=3;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case LPAREN:
            case NOT_OPERATOR:
            case 214:
            case 215:
                {
                alt173=1;
                }
                break;
            case INDICES_KEYWORD:
                {
                alt173=2;
                }
                break;
            case VALUES_KEYWORD:
                {
                alt173=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:17: ( expression '..' expression )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:17: ( expression '..' expression )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:18: expression '..' expression
                    {
                    pushFollow(FOLLOW_expression_in_bounds_clause8740);
                    expression507=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                    string_literal508=(Token)match(input,229,FOLLOW_229_in_bounds_clause8742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal508_tree = (CommonTree)adaptor.create(string_literal508);
                    adaptor.addChild(root_0, string_literal508_tree);
                    }
                    pushFollow(FOLLOW_expression_in_bounds_clause8744);
                    expression509=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression509.getTree());

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:18: INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    {
                    INDICES_KEYWORD510=(Token)match(input,INDICES_KEYWORD,FOLLOW_INDICES_KEYWORD_in_bounds_clause8766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDICES_KEYWORD510_tree = (CommonTree)adaptor.create(INDICES_KEYWORD510);
                    adaptor.addChild(root_0, INDICES_KEYWORD510_tree);
                    }
                    OF_KEYWORD511=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD511_tree = (CommonTree)adaptor.create(OF_KEYWORD511);
                    adaptor.addChild(root_0, OF_KEYWORD511_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8770);
                    universal_identifier512=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier512.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:17: ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==BETWEEN_KEYWORD) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:18: BETWEEN_KEYWORD expression AND_OPERATOR expression
                            {
                            BETWEEN_KEYWORD513=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8790); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BETWEEN_KEYWORD513_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD513);
                            adaptor.addChild(root_0, BETWEEN_KEYWORD513_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8792);
                            expression514=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression514.getTree());
                            AND_OPERATOR515=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_bounds_clause8794); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_OPERATOR515_tree = (CommonTree)adaptor.create(AND_OPERATOR515);
                            adaptor.addChild(root_0, AND_OPERATOR515_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8796);
                            expression516=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression516.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:795:18: VALUES_KEYWORD OF_KEYWORD universal_identifier
                    {
                    VALUES_KEYWORD517=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_bounds_clause8821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD517_tree = (CommonTree)adaptor.create(VALUES_KEYWORD517);
                    adaptor.addChild(root_0, VALUES_KEYWORD517_tree);
                    }
                    OF_KEYWORD518=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD518_tree = (CommonTree)adaptor.create(OF_KEYWORD518);
                    adaptor.addChild(root_0, OF_KEYWORD518_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8825);
                    universal_identifier519=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier519.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, bounds_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"

    public static class pragma_inline_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_inline_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:1: pragma_inline_statement : PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' ;
    public final PL_SQLParser.pragma_inline_statement_return pragma_inline_statement() throws RecognitionException {
        PL_SQLParser.pragma_inline_statement_return retval = new PL_SQLParser.pragma_inline_statement_return();
        retval.start = input.LT(1);
        int pragma_inline_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD520=null;
        Token INLINE_KEYWORD521=null;
        Token char_literal522=null;
        Token STRING523=null;
        Token char_literal524=null;
        Token STRING525=null;
        Token char_literal526=null;

        CommonTree PRAGMA_KEYWORD520_tree=null;
        CommonTree INLINE_KEYWORD521_tree=null;
        CommonTree char_literal522_tree=null;
        CommonTree STRING523_tree=null;
        CommonTree char_literal524_tree=null;
        CommonTree STRING525_tree=null;
        CommonTree char_literal526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:25: ( PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:27: PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD520=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD520_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD520);
            adaptor.addChild(root_0, PRAGMA_KEYWORD520_tree);
            }
            INLINE_KEYWORD521=(Token)match(input,INLINE_KEYWORD,FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INLINE_KEYWORD521_tree = (CommonTree)adaptor.create(INLINE_KEYWORD521);
            adaptor.addChild(root_0, INLINE_KEYWORD521_tree);
            }
            char_literal522=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_inline_statement8864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal522_tree = (CommonTree)adaptor.create(char_literal522);
            adaptor.addChild(root_0, char_literal522_tree);
            }
            STRING523=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING523_tree = (CommonTree)adaptor.create(STRING523);
            adaptor.addChild(root_0, STRING523_tree);
            }
            char_literal524=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_inline_statement8868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal524_tree = (CommonTree)adaptor.create(char_literal524);
            adaptor.addChild(root_0, char_literal524_tree);
            }
            STRING525=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING525_tree = (CommonTree)adaptor.create(STRING525);
            adaptor.addChild(root_0, STRING525_tree);
            }
            char_literal526=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_inline_statement8872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal526_tree = (CommonTree)adaptor.create(char_literal526);
            adaptor.addChild(root_0, char_literal526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, pragma_inline_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_inline_statement"

    public static class open_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:1: open_statement : OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? ;
    public final PL_SQLParser.open_statement_return open_statement() throws RecognitionException {
        PL_SQLParser.open_statement_return retval = new PL_SQLParser.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OPEN_KEYWORD527=null;
        Token FOR_KEYWORD530=null;
        Token STRING532=null;
        PL_SQLParser.universal_identifier_return universal_identifier528 = null;

        PL_SQLParser.open_params_return open_params529 = null;

        PL_SQLParser.select_statement_return select_statement531 = null;

        PL_SQLParser.universal_identifier_return universal_identifier533 = null;

        PL_SQLParser.using_clause_return using_clause534 = null;


        CommonTree OPEN_KEYWORD527_tree=null;
        CommonTree FOR_KEYWORD530_tree=null;
        CommonTree STRING532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:16: ( OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:18: OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            OPEN_KEYWORD527=(Token)match(input,OPEN_KEYWORD,FOLLOW_OPEN_KEYWORD_in_open_statement8879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_KEYWORD527_tree = (CommonTree)adaptor.create(OPEN_KEYWORD527);
            adaptor.addChild(root_0, OPEN_KEYWORD527_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_open_statement8881);
            universal_identifier528=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier528.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:52: ( open_params )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LPAREN) ) {
                int LA174_1 = input.LA(2);

                if ( (synpred294_PL_SQL()) ) {
                    alt174=1;
                }
            }
            switch (alt174) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: open_params
                    {
                    pushFollow(FOLLOW_open_params_in_open_statement8883);
                    open_params529=open_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_params529.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==FOR_KEYWORD) ) {
                int LA177_2 = input.LA(2);

                if ( (synpred298_PL_SQL()) ) {
                    alt177=1;
                }
            }
            switch (alt177) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
                    {
                    FOR_KEYWORD530=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_open_statement8904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD530_tree = (CommonTree)adaptor.create(FOR_KEYWORD530);
                    adaptor.addChild(root_0, FOR_KEYWORD530_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:31: ( select_statement | STRING | universal_identifier )
                    int alt175=3;
                    switch ( input.LA(1) ) {
                    case SELECT_KEYWORD:
                        {
                        alt175=1;
                        }
                        break;
                    case STRING:
                        {
                        alt175=2;
                        }
                        break;
                    case IDENTIFIER:
                    case EXT_IDENTIFIER:
                    case INTERVAL_KEYWORD:
                    case RESULT_KEYWORD:
                        {
                        alt175=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);

                        throw nvae;
                    }

                    switch (alt175) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:32: select_statement
                            {
                            pushFollow(FOLLOW_select_statement_in_open_statement8907);
                            select_statement531=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement531.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:51: STRING
                            {
                            STRING532=(Token)match(input,STRING,FOLLOW_STRING_in_open_statement8911); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STRING532_tree = (CommonTree)adaptor.create(STRING532);
                            adaptor.addChild(root_0, STRING532_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:60: universal_identifier
                            {
                            pushFollow(FOLLOW_universal_identifier_in_open_statement8915);
                            universal_identifier533=universal_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier533.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:82: ( using_clause )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==USING_KEYWORD) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_open_statement8918);
                            using_clause534=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause534.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class open_params_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_params"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:1: open_params : '(' expression ( ',' expression )* ')' ;
    public final PL_SQLParser.open_params_return open_params() throws RecognitionException {
        PL_SQLParser.open_params_return retval = new PL_SQLParser.open_params_return();
        retval.start = input.LT(1);
        int open_params_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal535=null;
        Token char_literal537=null;
        Token char_literal539=null;
        PL_SQLParser.expression_return expression536 = null;

        PL_SQLParser.expression_return expression538 = null;


        CommonTree char_literal535_tree=null;
        CommonTree char_literal537_tree=null;
        CommonTree char_literal539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:13: ( '(' expression ( ',' expression )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:15: '(' expression ( ',' expression )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal535=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_open_params8928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal535_tree = (CommonTree)adaptor.create(char_literal535);
            adaptor.addChild(root_0, char_literal535_tree);
            }
            pushFollow(FOLLOW_expression_in_open_params8930);
            expression536=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:30: ( ',' expression )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:800:31: ',' expression
            	    {
            	    char_literal537=(Token)match(input,COMMA,FOLLOW_COMMA_in_open_params8933); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal537_tree = (CommonTree)adaptor.create(char_literal537);
            	    adaptor.addChild(root_0, char_literal537_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_open_params8935);
            	    expression538=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression538.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);

            char_literal539=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_open_params8939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal539_tree = (CommonTree)adaptor.create(char_literal539);
            adaptor.addChild(root_0, char_literal539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, open_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_params"

    public static class sqlcode_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcode_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:1: sqlcode_function : SQLCODE_KEYWORD ;
    public final PL_SQLParser.sqlcode_function_return sqlcode_function() throws RecognitionException {
        PL_SQLParser.sqlcode_function_return retval = new PL_SQLParser.sqlcode_function_return();
        retval.start = input.LT(1);
        int sqlcode_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLCODE_KEYWORD540=null;

        CommonTree SQLCODE_KEYWORD540_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:18: ( SQLCODE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:20: SQLCODE_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLCODE_KEYWORD540=(Token)match(input,SQLCODE_KEYWORD,FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLCODE_KEYWORD540_tree = (CommonTree)adaptor.create(SQLCODE_KEYWORD540);
            adaptor.addChild(root_0, SQLCODE_KEYWORD540_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, sqlcode_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlcode_function"

    public static class sqlerrm_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerrm_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:1: sqlerrm_function : SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.sqlerrm_function_return sqlerrm_function() throws RecognitionException {
        PL_SQLParser.sqlerrm_function_return retval = new PL_SQLParser.sqlerrm_function_return();
        retval.start = input.LT(1);
        int sqlerrm_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLERRM_KEYWORD541=null;
        Token char_literal542=null;
        Token set543=null;
        Token NUMBER_UNSIGNED544=null;
        Token char_literal545=null;

        CommonTree SQLERRM_KEYWORD541_tree=null;
        CommonTree char_literal542_tree=null;
        CommonTree set543_tree=null;
        CommonTree NUMBER_UNSIGNED544_tree=null;
        CommonTree char_literal545_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:18: ( SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:20: SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLERRM_KEYWORD541=(Token)match(input,SQLERRM_KEYWORD,FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLERRM_KEYWORD541_tree = (CommonTree)adaptor.create(SQLERRM_KEYWORD541);
            adaptor.addChild(root_0, SQLERRM_KEYWORD541_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:36: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LPAREN) ) {
                int LA180_2 = input.LA(2);

                if ( (synpred302_PL_SQL()) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal542=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlerrm_function8956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal542_tree = (CommonTree)adaptor.create(char_literal542);
                    adaptor.addChild(root_0, char_literal542_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:41: ( '+' | '-' )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( ((LA179_0>=214 && LA179_0<=215)) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set543=(Token)input.LT(1);
                            if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set543));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER_UNSIGNED544=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED544_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED544);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED544_tree);
                    }
                    char_literal545=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlerrm_function8967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal545_tree = (CommonTree)adaptor.create(char_literal545);
                    adaptor.addChild(root_0, char_literal545_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, sqlerrm_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlerrm_function"

    public static class anonymous_block_declare_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block_declare_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:1: anonymous_block_declare_section : DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* ;
    public final PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section() throws RecognitionException {
        PL_SQLParser.anonymous_block_declare_section_return retval = new PL_SQLParser.anonymous_block_declare_section_return();
        retval.start = input.LT(1);
        int anonymous_block_declare_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DECLARE_KEYWORD546=null;
        PL_SQLParser.variable_declaration_return variable_declaration547 = null;

        PL_SQLParser.function_declaration_return function_declaration548 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration549 = null;


        CommonTree DECLARE_KEYWORD546_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:33: ( DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:35: DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE_KEYWORD546=(Token)match(input,DECLARE_KEYWORD,FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE_KEYWORD546_tree = (CommonTree)adaptor.create(DECLARE_KEYWORD546);
            adaptor.addChild(root_0, DECLARE_KEYWORD546_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:35: ( variable_declaration )*
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==IDENTIFIER||LA181_0==TYPE_KEYWORD||LA181_0==INTERVAL_KEYWORD||LA181_0==SUBTYPE_KEYWORD||LA181_0==PRAGMA_KEYWORD||LA181_0==CURSOR_KEYWORD||LA181_0==RESULT_KEYWORD) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:36: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_anonymous_block_declare_section9014);
            	    variable_declaration547=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration547.getTree());

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:35: ( function_declaration | procedure_declaration )*
            loop182:
            do {
                int alt182=3;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==FUNCTION_KEYWORD) ) {
                    alt182=1;
                }
                else if ( (LA182_0==PROCEDURE_KEYWORD) ) {
                    alt182=2;
                }


                switch (alt182) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:36: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_anonymous_block_declare_section9054);
            	    function_declaration548=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration548.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:59: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_anonymous_block_declare_section9058);
            	    procedure_declaration549=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration549.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, anonymous_block_declare_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block_declare_section"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:1: variable_declaration : ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR ;
    public final PL_SQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
        PL_SQLParser.variable_declaration_return retval = new PL_SQLParser.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONSTANT_KEYWORD554=null;
        Token EXCEPTION_KEYWORD560=null;
        Token PRAGMA_KEYWORD561=null;
        Token AUTONOMOUS_TRANSACTION_KEYWORD562=null;
        Token SERIALLY_REUSABLE_KEYWORD563=null;
        Token EXCEPTION_INIT_KEYWORD564=null;
        Token char_literal565=null;
        Token char_literal567=null;
        Token char_literal569=null;
        Token RESTRICT_REFERENCES_KEYWORD570=null;
        Token char_literal571=null;
        Token char_literal573=null;
        Token char_literal575=null;
        Token SEPARATOR577=null;
        PL_SQLParser.identifier_return identifier550 = null;

        PL_SQLParser.data_type_return data_type551 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part552 = null;

        PL_SQLParser.identifier_return identifier553 = null;

        PL_SQLParser.data_type_return data_type555 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part556 = null;

        PL_SQLParser.subtype_datatype_return subtype_datatype557 = null;

        PL_SQLParser.record_collection_datatype_return record_collection_datatype558 = null;

        PL_SQLParser.identifier_return identifier559 = null;

        PL_SQLParser.expression_return expression566 = null;

        PL_SQLParser.expression_return expression568 = null;

        PL_SQLParser.expression_return expression572 = null;

        PL_SQLParser.expression_return expression574 = null;

        PL_SQLParser.cursor_datatype_return cursor_datatype576 = null;


        CommonTree CONSTANT_KEYWORD554_tree=null;
        CommonTree EXCEPTION_KEYWORD560_tree=null;
        CommonTree PRAGMA_KEYWORD561_tree=null;
        CommonTree AUTONOMOUS_TRANSACTION_KEYWORD562_tree=null;
        CommonTree SERIALLY_REUSABLE_KEYWORD563_tree=null;
        CommonTree EXCEPTION_INIT_KEYWORD564_tree=null;
        CommonTree char_literal565_tree=null;
        CommonTree char_literal567_tree=null;
        CommonTree char_literal569_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD570_tree=null;
        CommonTree char_literal571_tree=null;
        CommonTree char_literal573_tree=null;
        CommonTree char_literal575_tree=null;
        CommonTree SEPARATOR577_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:22: ( ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype )
            int alt186=7;
            switch ( input.LA(1) ) {
            case SUBTYPE_KEYWORD:
                {
                alt186=3;
                }
                break;
            case IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                int LA186_2 = input.LA(2);

                if ( (synpred307_PL_SQL()) ) {
                    alt186=1;
                }
                else if ( (synpred308_PL_SQL()) ) {
                    alt186=2;
                }
                else if ( (synpred311_PL_SQL()) ) {
                    alt186=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 186, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt186=6;
                }
                break;
            case TYPE_KEYWORD:
                {
                alt186=4;
                }
                break;
            case CURSOR_KEYWORD:
                {
                alt186=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:25: ( identifier data_type ( variable_declaration_part )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:25: ( identifier data_type ( variable_declaration_part )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:26: identifier data_type ( variable_declaration_part )?
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration9069);
                    identifier550=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier550.getTree());
                    pushFollow(FOLLOW_data_type_in_variable_declaration9071);
                    data_type551=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type551.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:24: ( variable_declaration_part )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==DEFAULT_KEYWORD||LA183_0==NOT_OPERATOR||LA183_0==230) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                            {
                            pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration9097);
                            variable_declaration_part552=variable_declaration_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part552.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration9115);
                    identifier553=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier553.getTree());
                    CONSTANT_KEYWORD554=(Token)match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_variable_declaration9117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT_KEYWORD554_tree = (CommonTree)adaptor.create(CONSTANT_KEYWORD554);
                    adaptor.addChild(root_0, CONSTANT_KEYWORD554_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_variable_declaration9119);
                    data_type555=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type555.getTree());
                    pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration9145);
                    variable_declaration_part556=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part556.getTree());

                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:811:11: subtype_datatype
                    {
                    pushFollow(FOLLOW_subtype_datatype_in_variable_declaration9158);
                    subtype_datatype557=subtype_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_datatype557.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:812:11: record_collection_datatype
                    {
                    pushFollow(FOLLOW_record_collection_datatype_in_variable_declaration9170);
                    record_collection_datatype558=record_collection_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_collection_datatype558.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:11: ( identifier EXCEPTION_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:11: ( identifier EXCEPTION_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:12: identifier EXCEPTION_KEYWORD
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration9183);
                    identifier559=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier559.getTree());
                    EXCEPTION_KEYWORD560=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration9185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTION_KEYWORD560_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD560);
                    adaptor.addChild(root_0, EXCEPTION_KEYWORD560_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:10: PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    {
                    PRAGMA_KEYWORD561=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_variable_declaration9208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRAGMA_KEYWORD561_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD561);
                    adaptor.addChild(root_0, PRAGMA_KEYWORD561_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:25: ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    int alt185=4;
                    switch ( input.LA(1) ) {
                    case AUTONOMOUS_TRANSACTION_KEYWORD:
                        {
                        alt185=1;
                        }
                        break;
                    case SERIALLY_REUSABLE_KEYWORD:
                        {
                        alt185=2;
                        }
                        break;
                    case EXCEPTION_INIT_KEYWORD:
                        {
                        alt185=3;
                        }
                        break;
                    case RESTRICT_REFERENCES_KEYWORD:
                        {
                        alt185=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 185, 0, input);

                        throw nvae;
                    }

                    switch (alt185) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:26: AUTONOMOUS_TRANSACTION_KEYWORD
                            {
                            AUTONOMOUS_TRANSACTION_KEYWORD562=(Token)match(input,AUTONOMOUS_TRANSACTION_KEYWORD,FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration9211); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AUTONOMOUS_TRANSACTION_KEYWORD562_tree = (CommonTree)adaptor.create(AUTONOMOUS_TRANSACTION_KEYWORD562);
                            adaptor.addChild(root_0, AUTONOMOUS_TRANSACTION_KEYWORD562_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:59: SERIALLY_REUSABLE_KEYWORD
                            {
                            SERIALLY_REUSABLE_KEYWORD563=(Token)match(input,SERIALLY_REUSABLE_KEYWORD,FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration9215); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SERIALLY_REUSABLE_KEYWORD563_tree = (CommonTree)adaptor.create(SERIALLY_REUSABLE_KEYWORD563);
                            adaptor.addChild(root_0, SERIALLY_REUSABLE_KEYWORD563_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:8: EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')'
                            {
                            EXCEPTION_INIT_KEYWORD564=(Token)match(input,EXCEPTION_INIT_KEYWORD,FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration9226); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXCEPTION_INIT_KEYWORD564_tree = (CommonTree)adaptor.create(EXCEPTION_INIT_KEYWORD564);
                            adaptor.addChild(root_0, EXCEPTION_INIT_KEYWORD564_tree);
                            }
                            char_literal565=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_variable_declaration9228); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal565_tree = (CommonTree)adaptor.create(char_literal565);
                            adaptor.addChild(root_0, char_literal565_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9230);
                            expression566=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression566.getTree());
                            char_literal567=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration9232); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal567_tree = (CommonTree)adaptor.create(char_literal567);
                            adaptor.addChild(root_0, char_literal567_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9234);
                            expression568=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());
                            char_literal569=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_variable_declaration9236); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal569_tree = (CommonTree)adaptor.create(char_literal569);
                            adaptor.addChild(root_0, char_literal569_tree);
                            }

                            }


                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:8: RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
                            {
                            RESTRICT_REFERENCES_KEYWORD570=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration9248); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RESTRICT_REFERENCES_KEYWORD570_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD570);
                            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD570_tree);
                            }
                            char_literal571=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_variable_declaration9250); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal571_tree = (CommonTree)adaptor.create(char_literal571);
                            adaptor.addChild(root_0, char_literal571_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration9252);
                            expression572=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression572.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:51: ( ',' expression )+
                            int cnt184=0;
                            loop184:
                            do {
                                int alt184=2;
                                int LA184_0 = input.LA(1);

                                if ( (LA184_0==COMMA) ) {
                                    alt184=1;
                                }


                                switch (alt184) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:52: ',' expression
                            	    {
                            	    char_literal573=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration9255); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal573_tree = (CommonTree)adaptor.create(char_literal573);
                            	    adaptor.addChild(root_0, char_literal573_tree);
                            	    }
                            	    pushFollow(FOLLOW_expression_in_variable_declaration9257);
                            	    expression574=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression574.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt184 >= 1 ) break loop184;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(184, input);
                                        throw eee;
                                }
                                cnt184++;
                            } while (true);

                            char_literal575=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_variable_declaration9261); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal575_tree = (CommonTree)adaptor.create(char_literal575);
                            adaptor.addChild(root_0, char_literal575_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:11: cursor_datatype
                    {
                    pushFollow(FOLLOW_cursor_datatype_in_variable_declaration9278);
                    cursor_datatype576=cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_datatype576.getTree());

                    }
                    break;

            }

            SEPARATOR577=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_variable_declaration9289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR577_tree = (CommonTree)adaptor.create(SEPARATOR577);
            adaptor.addChild(root_0, SEPARATOR577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class variable_declaration_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:1: variable_declaration_part : ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression ;
    public final PL_SQLParser.variable_declaration_part_return variable_declaration_part() throws RecognitionException {
        PL_SQLParser.variable_declaration_part_return retval = new PL_SQLParser.variable_declaration_part_return();
        retval.start = input.LT(1);
        int variable_declaration_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR578=null;
        Token NULL_KEYWORD579=null;
        PL_SQLParser.variable_def_part_return variable_def_part580 = null;

        PL_SQLParser.expression_return expression581 = null;


        CommonTree NOT_OPERATOR578_tree=null;
        CommonTree NULL_KEYWORD579_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:27: ( ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:29: ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:29: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==NOT_OPERATOR) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:30: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR578=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_variable_declaration_part9297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR578_tree = (CommonTree)adaptor.create(NOT_OPERATOR578);
                    adaptor.addChild(root_0, NOT_OPERATOR578_tree);
                    }
                    NULL_KEYWORD579=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_variable_declaration_part9299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD579_tree = (CommonTree)adaptor.create(NULL_KEYWORD579);
                    adaptor.addChild(root_0, NULL_KEYWORD579_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_variable_def_part_in_variable_declaration_part9303);
            variable_def_part580=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part580.getTree());
            pushFollow(FOLLOW_expression_in_variable_declaration_part9305);
            expression581=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression581.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, variable_declaration_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_part"

    public static class variable_def_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_def_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:1: variable_def_part : ( ':=' | DEFAULT_KEYWORD );
    public final PL_SQLParser.variable_def_part_return variable_def_part() throws RecognitionException {
        PL_SQLParser.variable_def_part_return retval = new PL_SQLParser.variable_def_part_return();
        retval.start = input.LT(1);
        int variable_def_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set582=null;

        CommonTree set582_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:19: ( ':=' | DEFAULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set582=(Token)input.LT(1);
            if ( input.LA(1)==DEFAULT_KEYWORD||input.LA(1)==230 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set582));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, variable_def_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_def_part"

    public static class data_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );
    public final PL_SQLParser.data_type_return data_type() throws RecognitionException {
        PL_SQLParser.data_type_return retval = new PL_SQLParser.data_type_return();
        retval.start = input.LT(1);
        int data_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SOME_TYPES583=null;
        Token REF_KEYWORD591=null;
        PL_SQLParser.scale_types_return scale_types584 = null;

        PL_SQLParser.size_types_return size_types585 = null;

        PL_SQLParser.char_types_return char_types586 = null;

        PL_SQLParser.raw_type_return raw_type587 = null;

        PL_SQLParser.timestamp_types_return timestamp_types588 = null;

        PL_SQLParser.interval_year_type_return interval_year_type589 = null;

        PL_SQLParser.interval_day_type_return interval_day_type590 = null;

        PL_SQLParser.universal_identifier_return universal_identifier592 = null;

        PL_SQLParser.special_datatype_return special_datatype593 = null;


        CommonTree SOME_TYPES583_tree=null;
        CommonTree REF_KEYWORD591_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:11: ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype )
            int alt189=10;
            alt189 = dfa189.predict(input);
            switch (alt189) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:13: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES583=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_data_type9323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES583_tree = (CommonTree)adaptor.create(SOME_TYPES583);
                    adaptor.addChild(root_0, SOME_TYPES583_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:26: scale_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_scale_types_in_data_type9327);
                    scale_types584=scale_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scale_types584.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:40: size_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_size_types_in_data_type9331);
                    size_types585=size_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, size_types585.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:53: char_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_char_types_in_data_type9335);
                    char_types586=char_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_types586.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:66: raw_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raw_type_in_data_type9339);
                    raw_type587=raw_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raw_type587.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:13: timestamp_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timestamp_types_in_data_type9355);
                    timestamp_types588=timestamp_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_types588.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:31: interval_year_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_year_type_in_data_type9359);
                    interval_year_type589=interval_year_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_year_type589.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:52: interval_day_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_day_type_in_data_type9363);
                    interval_day_type590=interval_day_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_day_type590.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:13: ( ( REF_KEYWORD )? universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:13: ( ( REF_KEYWORD )? universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:14: ( REF_KEYWORD )? universal_identifier
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:14: ( REF_KEYWORD )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==REF_KEYWORD) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                            {
                            REF_KEYWORD591=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_data_type9381); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            REF_KEYWORD591_tree = (CommonTree)adaptor.create(REF_KEYWORD591);
                            adaptor.addChild(root_0, REF_KEYWORD591_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_universal_identifier_in_data_type9384);
                    universal_identifier592=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier592.getTree());

                    }


                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:50: special_datatype
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_special_datatype_in_data_type9388);
                    special_datatype593=special_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, special_datatype593.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, data_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class char_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:1: char_types : ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? ;
    public final PL_SQLParser.char_types_return char_types() throws RecognitionException {
        PL_SQLParser.char_types_return retval = new PL_SQLParser.char_types_return();
        retval.start = input.LT(1);
        int char_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set594=null;
        Token char_literal595=null;
        Token char_literal596=null;
        Token NUMBER_UNSIGNED597=null;
        Token set598=null;
        Token char_literal599=null;

        CommonTree set594_tree=null;
        CommonTree char_literal595_tree=null;
        CommonTree char_literal596_tree=null;
        CommonTree NUMBER_UNSIGNED597_tree=null;
        CommonTree set598_tree=null;
        CommonTree char_literal599_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:12: ( ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:14: ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            set594=(Token)input.LT(1);
            if ( (input.LA(1)>=CHAR_TYPES && input.LA(1)<=CHAR_TYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set594));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:39: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==LPAREN) ) {
                int LA192_2 = input.LA(2);

                if ( (synpred333_PL_SQL()) ) {
                    alt192=1;
                }
            }
            switch (alt192) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
                    {
                    char_literal595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_char_types9404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal595_tree = (CommonTree)adaptor.create(char_literal595);
                    adaptor.addChild(root_0, char_literal595_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:44: ( '+' )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==214) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal596=(Token)match(input,214,FOLLOW_214_in_char_types9406); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal596_tree = (CommonTree)adaptor.create(char_literal596);
                            adaptor.addChild(root_0, char_literal596_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED597=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_char_types9409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED597_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED597);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED597_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:65: ( CHAR_TYPE | BYTE_TYPE )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( ((LA191_0>=CHAR_TYPE && LA191_0<=BYTE_TYPE)) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set598=(Token)input.LT(1);
                            if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set598));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    char_literal599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_char_types9420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal599_tree = (CommonTree)adaptor.create(char_literal599);
                    adaptor.addChild(root_0, char_literal599_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, char_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_types"

    public static class timestamp_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:1: timestamp_types : timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? ;
    public final PL_SQLParser.timestamp_types_return timestamp_types() throws RecognitionException {
        PL_SQLParser.timestamp_types_return retval = new PL_SQLParser.timestamp_types_return();
        retval.start = input.LT(1);
        int timestamp_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WITH_KEYWORD601=null;
        Token LOCAL_KEYWORD602=null;
        Token TIME_KEYWORD603=null;
        Token ZONE_KEYWORD604=null;
        PL_SQLParser.timestamp_type_return timestamp_type600 = null;


        CommonTree WITH_KEYWORD601_tree=null;
        CommonTree LOCAL_KEYWORD602_tree=null;
        CommonTree TIME_KEYWORD603_tree=null;
        CommonTree ZONE_KEYWORD604_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:17: ( timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:19: timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestamp_type_in_timestamp_types9429);
            timestamp_type600=timestamp_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_type600.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:34: ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==WITH_KEYWORD) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:35: WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD
                    {
                    WITH_KEYWORD601=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_timestamp_types9432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD601_tree = (CommonTree)adaptor.create(WITH_KEYWORD601);
                    adaptor.addChild(root_0, WITH_KEYWORD601_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:826:48: ( LOCAL_KEYWORD )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==LOCAL_KEYWORD) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: LOCAL_KEYWORD
                            {
                            LOCAL_KEYWORD602=(Token)match(input,LOCAL_KEYWORD,FOLLOW_LOCAL_KEYWORD_in_timestamp_types9434); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LOCAL_KEYWORD602_tree = (CommonTree)adaptor.create(LOCAL_KEYWORD602);
                            adaptor.addChild(root_0, LOCAL_KEYWORD602_tree);
                            }

                            }
                            break;

                    }

                    TIME_KEYWORD603=(Token)match(input,TIME_KEYWORD,FOLLOW_TIME_KEYWORD_in_timestamp_types9437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_KEYWORD603_tree = (CommonTree)adaptor.create(TIME_KEYWORD603);
                    adaptor.addChild(root_0, TIME_KEYWORD603_tree);
                    }
                    ZONE_KEYWORD604=(Token)match(input,ZONE_KEYWORD,FOLLOW_ZONE_KEYWORD_in_timestamp_types9439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ZONE_KEYWORD604_tree = (CommonTree)adaptor.create(ZONE_KEYWORD604);
                    adaptor.addChild(root_0, ZONE_KEYWORD604_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, timestamp_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_types"

    public static class interval_year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:1: interval_year_type : INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD ;
    public final PL_SQLParser.interval_year_type_return interval_year_type() throws RecognitionException {
        PL_SQLParser.interval_year_type_return retval = new PL_SQLParser.interval_year_type_return();
        retval.start = input.LT(1);
        int interval_year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD605=null;
        Token TO_KEYWORD607=null;
        Token MONTH_KEYWORD608=null;
        PL_SQLParser.year_type_return year_type606 = null;


        CommonTree INTERVAL_KEYWORD605_tree=null;
        CommonTree TO_KEYWORD607_tree=null;
        CommonTree MONTH_KEYWORD608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:20: ( INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:22: INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD605=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD605_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD605);
            adaptor.addChild(root_0, INTERVAL_KEYWORD605_tree);
            }
            pushFollow(FOLLOW_year_type_in_interval_year_type9450);
            year_type606=year_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, year_type606.getTree());
            TO_KEYWORD607=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_year_type9452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD607_tree = (CommonTree)adaptor.create(TO_KEYWORD607);
            adaptor.addChild(root_0, TO_KEYWORD607_tree);
            }
            MONTH_KEYWORD608=(Token)match(input,MONTH_KEYWORD,FOLLOW_MONTH_KEYWORD_in_interval_year_type9454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MONTH_KEYWORD608_tree = (CommonTree)adaptor.create(MONTH_KEYWORD608);
            adaptor.addChild(root_0, MONTH_KEYWORD608_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, interval_year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_year_type"

    public static class interval_day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:1: interval_day_type : INTERVAL_KEYWORD day_type TO_KEYWORD second_type ;
    public final PL_SQLParser.interval_day_type_return interval_day_type() throws RecognitionException {
        PL_SQLParser.interval_day_type_return retval = new PL_SQLParser.interval_day_type_return();
        retval.start = input.LT(1);
        int interval_day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD609=null;
        Token TO_KEYWORD611=null;
        PL_SQLParser.day_type_return day_type610 = null;

        PL_SQLParser.second_type_return second_type612 = null;


        CommonTree INTERVAL_KEYWORD609_tree=null;
        CommonTree TO_KEYWORD611_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:19: ( INTERVAL_KEYWORD day_type TO_KEYWORD second_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:828:21: INTERVAL_KEYWORD day_type TO_KEYWORD second_type
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD609=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD609_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD609);
            adaptor.addChild(root_0, INTERVAL_KEYWORD609_tree);
            }
            pushFollow(FOLLOW_day_type_in_interval_day_type9463);
            day_type610=day_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, day_type610.getTree());
            TO_KEYWORD611=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_day_type9465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD611_tree = (CommonTree)adaptor.create(TO_KEYWORD611);
            adaptor.addChild(root_0, TO_KEYWORD611_tree);
            }
            pushFollow(FOLLOW_second_type_in_interval_day_type9467);
            second_type612=second_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, second_type612.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, interval_day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_day_type"

    public static class subtype_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:1: subtype_datatype : SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.subtype_datatype_return subtype_datatype() throws RecognitionException {
        PL_SQLParser.subtype_datatype_return retval = new PL_SQLParser.subtype_datatype_return();
        retval.start = input.LT(1);
        int subtype_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUBTYPE_KEYWORD613=null;
        Token IS_KEYWORD615=null;
        Token NOT_OPERATOR617=null;
        Token NULL_KEYWORD618=null;
        PL_SQLParser.identifier_return identifier614 = null;

        PL_SQLParser.data_type_return data_type616 = null;


        CommonTree SUBTYPE_KEYWORD613_tree=null;
        CommonTree IS_KEYWORD615_tree=null;
        CommonTree NOT_OPERATOR617_tree=null;
        CommonTree NULL_KEYWORD618_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:18: ( SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:20: SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SUBTYPE_KEYWORD613=(Token)match(input,SUBTYPE_KEYWORD,FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBTYPE_KEYWORD613_tree = (CommonTree)adaptor.create(SUBTYPE_KEYWORD613);
            adaptor.addChild(root_0, SUBTYPE_KEYWORD613_tree);
            }
            pushFollow(FOLLOW_identifier_in_subtype_datatype9476);
            identifier614=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier614.getTree());
            IS_KEYWORD615=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_subtype_datatype9478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD615_tree = (CommonTree)adaptor.create(IS_KEYWORD615);
            adaptor.addChild(root_0, IS_KEYWORD615_tree);
            }
            pushFollow(FOLLOW_data_type_in_subtype_datatype9480);
            data_type616=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type616.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:68: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==NOT_OPERATOR) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:829:69: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR617=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_subtype_datatype9483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR617_tree = (CommonTree)adaptor.create(NOT_OPERATOR617);
                    adaptor.addChild(root_0, NOT_OPERATOR617_tree);
                    }
                    NULL_KEYWORD618=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_subtype_datatype9485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD618_tree = (CommonTree)adaptor.create(NULL_KEYWORD618);
                    adaptor.addChild(root_0, NULL_KEYWORD618_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, subtype_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_datatype"

    public static class record_collection_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_collection_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:1: record_collection_datatype : TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) ;
    public final PL_SQLParser.record_collection_datatype_return record_collection_datatype() throws RecognitionException {
        PL_SQLParser.record_collection_datatype_return retval = new PL_SQLParser.record_collection_datatype_return();
        retval.start = input.LT(1);
        int record_collection_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD619=null;
        Token IS_KEYWORD621=null;
        PL_SQLParser.identifier_return identifier620 = null;

        PL_SQLParser.record_datatype_return record_datatype622 = null;

        PL_SQLParser.collection_table_datatype_return collection_table_datatype623 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype624 = null;

        PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype625 = null;


        CommonTree TYPE_KEYWORD619_tree=null;
        CommonTree IS_KEYWORD621_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:28: ( TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:30: TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            {
            root_0 = (CommonTree)adaptor.nil();

            TYPE_KEYWORD619=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD619_tree = (CommonTree)adaptor.create(TYPE_KEYWORD619);
            adaptor.addChild(root_0, TYPE_KEYWORD619_tree);
            }
            pushFollow(FOLLOW_identifier_in_record_collection_datatype9497);
            identifier620=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier620.getTree());
            IS_KEYWORD621=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_record_collection_datatype9499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD621_tree = (CommonTree)adaptor.create(IS_KEYWORD621);
            adaptor.addChild(root_0, IS_KEYWORD621_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:29: ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            int alt196=4;
            switch ( input.LA(1) ) {
            case RECORD_KEYWORD:
                {
                alt196=1;
                }
                break;
            case TABLE_KEYWORD:
                {
                alt196=2;
                }
                break;
            case VARRAY_KEYWORD:
            case VARYING_KEYWORD:
                {
                alt196=3;
                }
                break;
            case REF_KEYWORD:
                {
                alt196=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:30: record_datatype
                    {
                    pushFollow(FOLLOW_record_datatype_in_record_collection_datatype9531);
                    record_datatype622=record_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_datatype622.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:48: collection_table_datatype
                    {
                    pushFollow(FOLLOW_collection_table_datatype_in_record_collection_datatype9535);
                    collection_table_datatype623=collection_table_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_table_datatype623.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:76: collection_varray_datatype
                    {
                    pushFollow(FOLLOW_collection_varray_datatype_in_record_collection_datatype9539);
                    collection_varray_datatype624=collection_varray_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype624.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:29: ref_cursor_datatype
                    {
                    pushFollow(FOLLOW_ref_cursor_datatype_in_record_collection_datatype9571);
                    ref_cursor_datatype625=ref_cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_cursor_datatype625.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, record_collection_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_collection_datatype"

    public static class record_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:1: record_datatype : RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' ;
    public final PL_SQLParser.record_datatype_return record_datatype() throws RecognitionException {
        PL_SQLParser.record_datatype_return retval = new PL_SQLParser.record_datatype_return();
        retval.start = input.LT(1);
        int record_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RECORD_KEYWORD626=null;
        Token char_literal627=null;
        Token char_literal629=null;
        Token char_literal631=null;
        PL_SQLParser.record_field_declaration_return record_field_declaration628 = null;

        PL_SQLParser.record_field_declaration_return record_field_declaration630 = null;


        CommonTree RECORD_KEYWORD626_tree=null;
        CommonTree char_literal627_tree=null;
        CommonTree char_literal629_tree=null;
        CommonTree char_literal631_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:17: ( RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:19: RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            RECORD_KEYWORD626=(Token)match(input,RECORD_KEYWORD,FOLLOW_RECORD_KEYWORD_in_record_datatype9579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECORD_KEYWORD626_tree = (CommonTree)adaptor.create(RECORD_KEYWORD626);
            adaptor.addChild(root_0, RECORD_KEYWORD626_tree);
            }
            char_literal627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_record_datatype9581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal627_tree = (CommonTree)adaptor.create(char_literal627);
            adaptor.addChild(root_0, char_literal627_tree);
            }
            pushFollow(FOLLOW_record_field_declaration_in_record_datatype9583);
            record_field_declaration628=record_field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration628.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:63: ( ',' record_field_declaration )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==COMMA) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:64: ',' record_field_declaration
            	    {
            	    char_literal629=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_datatype9586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal629_tree = (CommonTree)adaptor.create(char_literal629);
            	    adaptor.addChild(root_0, char_literal629_tree);
            	    }
            	    pushFollow(FOLLOW_record_field_declaration_in_record_datatype9588);
            	    record_field_declaration630=record_field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration630.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);

            char_literal631=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_record_datatype9592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal631_tree = (CommonTree)adaptor.create(char_literal631);
            adaptor.addChild(root_0, char_literal631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, record_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_datatype"

    public static class record_field_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_field_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:1: record_field_declaration : identifier data_type ( variable_declaration_part )? ;
    public final PL_SQLParser.record_field_declaration_return record_field_declaration() throws RecognitionException {
        PL_SQLParser.record_field_declaration_return retval = new PL_SQLParser.record_field_declaration_return();
        retval.start = input.LT(1);
        int record_field_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.identifier_return identifier632 = null;

        PL_SQLParser.data_type_return data_type633 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part634 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:26: ( identifier data_type ( variable_declaration_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:28: identifier data_type ( variable_declaration_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_field_declaration9600);
            identifier632=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier632.getTree());
            pushFollow(FOLLOW_data_type_in_record_field_declaration9602);
            data_type633=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type633.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:49: ( variable_declaration_part )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==DEFAULT_KEYWORD||LA198_0==NOT_OPERATOR||LA198_0==230) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                    {
                    pushFollow(FOLLOW_variable_declaration_part_in_record_field_declaration9604);
                    variable_declaration_part634=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part634.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, record_field_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_field_declaration"

    public static class collection_table_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_table_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:1: collection_table_datatype : TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? ;
    public final PL_SQLParser.collection_table_datatype_return collection_table_datatype() throws RecognitionException {
        PL_SQLParser.collection_table_datatype_return retval = new PL_SQLParser.collection_table_datatype_return();
        retval.start = input.LT(1);
        int collection_table_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD635=null;
        Token OF_KEYWORD636=null;
        Token NOT_OPERATOR638=null;
        Token NULL_KEYWORD639=null;
        Token INDEX_KEYWORD640=null;
        Token BY_KEYWORD641=null;
        PL_SQLParser.data_type_return data_type637 = null;

        PL_SQLParser.data_type_return data_type642 = null;


        CommonTree TABLE_KEYWORD635_tree=null;
        CommonTree OF_KEYWORD636_tree=null;
        CommonTree NOT_OPERATOR638_tree=null;
        CommonTree NULL_KEYWORD639_tree=null;
        CommonTree INDEX_KEYWORD640_tree=null;
        CommonTree BY_KEYWORD641_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:27: ( TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:29: TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TABLE_KEYWORD635=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD635_tree = (CommonTree)adaptor.create(TABLE_KEYWORD635);
            adaptor.addChild(root_0, TABLE_KEYWORD635_tree);
            }
            OF_KEYWORD636=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_table_datatype9614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD636_tree = (CommonTree)adaptor.create(OF_KEYWORD636);
            adaptor.addChild(root_0, OF_KEYWORD636_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_table_datatype9616);
            data_type637=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type637.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:64: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==NOT_OPERATOR) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:65: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR638=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_table_datatype9619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR638_tree = (CommonTree)adaptor.create(NOT_OPERATOR638);
                    adaptor.addChild(root_0, NOT_OPERATOR638_tree);
                    }
                    NULL_KEYWORD639=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_table_datatype9621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD639_tree = (CommonTree)adaptor.create(NULL_KEYWORD639);
                    adaptor.addChild(root_0, NULL_KEYWORD639_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:23: ( INDEX_KEYWORD BY_KEYWORD data_type )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==INDEX_KEYWORD) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:24: INDEX_KEYWORD BY_KEYWORD data_type
                    {
                    INDEX_KEYWORD640=(Token)match(input,INDEX_KEYWORD,FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_KEYWORD640_tree = (CommonTree)adaptor.create(INDEX_KEYWORD640);
                    adaptor.addChild(root_0, INDEX_KEYWORD640_tree);
                    }
                    BY_KEYWORD641=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_collection_table_datatype9650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD641_tree = (CommonTree)adaptor.create(BY_KEYWORD641);
                    adaptor.addChild(root_0, BY_KEYWORD641_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_collection_table_datatype9652);
                    data_type642=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type642.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, collection_table_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_table_datatype"

    public static class collection_varray_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_varray_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:1: collection_varray_datatype : ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.collection_varray_datatype_return collection_varray_datatype() throws RecognitionException {
        PL_SQLParser.collection_varray_datatype_return retval = new PL_SQLParser.collection_varray_datatype_return();
        retval.start = input.LT(1);
        int collection_varray_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token VARRAY_KEYWORD643=null;
        Token VARYING_KEYWORD644=null;
        Token ARRAY_KEYWORD645=null;
        Token char_literal646=null;
        Token char_literal647=null;
        Token NUMBER_UNSIGNED648=null;
        Token char_literal649=null;
        Token OF_KEYWORD650=null;
        Token NOT_OPERATOR652=null;
        Token NULL_KEYWORD653=null;
        PL_SQLParser.data_type_return data_type651 = null;


        CommonTree VARRAY_KEYWORD643_tree=null;
        CommonTree VARYING_KEYWORD644_tree=null;
        CommonTree ARRAY_KEYWORD645_tree=null;
        CommonTree char_literal646_tree=null;
        CommonTree char_literal647_tree=null;
        CommonTree NUMBER_UNSIGNED648_tree=null;
        CommonTree char_literal649_tree=null;
        CommonTree OF_KEYWORD650_tree=null;
        CommonTree NOT_OPERATOR652_tree=null;
        CommonTree NULL_KEYWORD653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:28: ( ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==VARRAY_KEYWORD) ) {
                alt201=1;
            }
            else if ( (LA201_0==VARYING_KEYWORD) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:31: VARRAY_KEYWORD
                    {
                    VARRAY_KEYWORD643=(Token)match(input,VARRAY_KEYWORD,FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARRAY_KEYWORD643_tree = (CommonTree)adaptor.create(VARRAY_KEYWORD643);
                    adaptor.addChild(root_0, VARRAY_KEYWORD643_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:49: VARYING_KEYWORD ARRAY_KEYWORD
                    {
                    VARYING_KEYWORD644=(Token)match(input,VARYING_KEYWORD,FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARYING_KEYWORD644_tree = (CommonTree)adaptor.create(VARYING_KEYWORD644);
                    adaptor.addChild(root_0, VARYING_KEYWORD644_tree);
                    }
                    ARRAY_KEYWORD645=(Token)match(input,ARRAY_KEYWORD,FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY_KEYWORD645_tree = (CommonTree)adaptor.create(ARRAY_KEYWORD645);
                    adaptor.addChild(root_0, ARRAY_KEYWORD645_tree);
                    }

                    }


                    }
                    break;

            }

            char_literal646=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_collection_varray_datatype9702); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal646_tree = (CommonTree)adaptor.create(char_literal646);
            adaptor.addChild(root_0, char_literal646_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:34: ( '+' )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==214) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                    {
                    char_literal647=(Token)match(input,214,FOLLOW_214_in_collection_varray_datatype9704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal647_tree = (CommonTree)adaptor.create(char_literal647);
                    adaptor.addChild(root_0, char_literal647_tree);
                    }

                    }
                    break;

            }

            NUMBER_UNSIGNED648=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_UNSIGNED648_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED648);
            adaptor.addChild(root_0, NUMBER_UNSIGNED648_tree);
            }
            char_literal649=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_collection_varray_datatype9709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal649_tree = (CommonTree)adaptor.create(char_literal649);
            adaptor.addChild(root_0, char_literal649_tree);
            }
            OF_KEYWORD650=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_varray_datatype9711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD650_tree = (CommonTree)adaptor.create(OF_KEYWORD650);
            adaptor.addChild(root_0, OF_KEYWORD650_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_varray_datatype9713);
            data_type651=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type651.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:80: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==NOT_OPERATOR) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:81: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR652=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR652_tree = (CommonTree)adaptor.create(NOT_OPERATOR652);
                    adaptor.addChild(root_0, NOT_OPERATOR652_tree);
                    }
                    NULL_KEYWORD653=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD653_tree = (CommonTree)adaptor.create(NULL_KEYWORD653);
                    adaptor.addChild(root_0, NULL_KEYWORD653_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, collection_varray_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_varray_datatype"

    public static class ref_cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:1: ref_cursor_datatype : REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? ;
    public final PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype() throws RecognitionException {
        PL_SQLParser.ref_cursor_datatype_return retval = new PL_SQLParser.ref_cursor_datatype_return();
        retval.start = input.LT(1);
        int ref_cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REF_KEYWORD654=null;
        Token CURSOR_KEYWORD655=null;
        Token RETURN_KEYWORD656=null;
        PL_SQLParser.data_type_return data_type657 = null;


        CommonTree REF_KEYWORD654_tree=null;
        CommonTree CURSOR_KEYWORD655_tree=null;
        CommonTree RETURN_KEYWORD656_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:21: ( REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:23: REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            REF_KEYWORD654=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REF_KEYWORD654_tree = (CommonTree)adaptor.create(REF_KEYWORD654);
            adaptor.addChild(root_0, REF_KEYWORD654_tree);
            }
            CURSOR_KEYWORD655=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD655_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD655);
            adaptor.addChild(root_0, CURSOR_KEYWORD655_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:50: ( RETURN_KEYWORD data_type )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==RETURN_KEYWORD) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:51: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD656=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD656_tree = (CommonTree)adaptor.create(RETURN_KEYWORD656);
                    adaptor.addChild(root_0, RETURN_KEYWORD656_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_ref_cursor_datatype9734);
                    data_type657=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type657.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, ref_cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_cursor_datatype"

    public static class cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:1: cursor_datatype : CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? ;
    public final PL_SQLParser.cursor_datatype_return cursor_datatype() throws RecognitionException {
        PL_SQLParser.cursor_datatype_return retval = new PL_SQLParser.cursor_datatype_return();
        retval.start = input.LT(1);
        int cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CURSOR_KEYWORD658=null;
        Token RETURN_KEYWORD661=null;
        Token IS_KEYWORD663=null;
        PL_SQLParser.identifier_return identifier659 = null;

        PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration660 = null;

        PL_SQLParser.data_type_return data_type662 = null;

        PL_SQLParser.select_statement_return select_statement664 = null;


        CommonTree CURSOR_KEYWORD658_tree=null;
        CommonTree RETURN_KEYWORD661_tree=null;
        CommonTree IS_KEYWORD663_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:17: ( CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:19: CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CURSOR_KEYWORD658=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD658_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD658);
            adaptor.addChild(root_0, CURSOR_KEYWORD658_tree);
            }
            pushFollow(FOLLOW_identifier_in_cursor_datatype9745);
            identifier659=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier659.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:45: ( cursor_parameter_declaration )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==LPAREN) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: cursor_parameter_declaration
                    {
                    pushFollow(FOLLOW_cursor_parameter_declaration_in_cursor_datatype9747);
                    cursor_parameter_declaration660=cursor_parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter_declaration660.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:842:19: ( RETURN_KEYWORD data_type )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==RETURN_KEYWORD) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:842:20: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD661=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_cursor_datatype9769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD661_tree = (CommonTree)adaptor.create(RETURN_KEYWORD661);
                    adaptor.addChild(root_0, RETURN_KEYWORD661_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_cursor_datatype9771);
                    data_type662=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type662.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:842:47: ( IS_KEYWORD select_statement )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==IS_KEYWORD) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:842:48: IS_KEYWORD select_statement
                    {
                    IS_KEYWORD663=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_cursor_datatype9776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD663_tree = (CommonTree)adaptor.create(IS_KEYWORD663);
                    adaptor.addChild(root_0, IS_KEYWORD663_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_datatype9778);
                    select_statement664=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement664.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_datatype"

    public static class cursor_parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:1: cursor_parameter_declaration : '(' cursor_parameter ( ',' cursor_parameter )* ')' ;
    public final PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration() throws RecognitionException {
        PL_SQLParser.cursor_parameter_declaration_return retval = new PL_SQLParser.cursor_parameter_declaration_return();
        retval.start = input.LT(1);
        int cursor_parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal665=null;
        Token char_literal667=null;
        Token char_literal669=null;
        PL_SQLParser.cursor_parameter_return cursor_parameter666 = null;

        PL_SQLParser.cursor_parameter_return cursor_parameter668 = null;


        CommonTree char_literal665_tree=null;
        CommonTree char_literal667_tree=null;
        CommonTree char_literal669_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:30: ( '(' cursor_parameter ( ',' cursor_parameter )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:32: '(' cursor_parameter ( ',' cursor_parameter )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal665=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_parameter_declaration9787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal665_tree = (CommonTree)adaptor.create(char_literal665);
            adaptor.addChild(root_0, char_literal665_tree);
            }
            pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9789);
            cursor_parameter666=cursor_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter666.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:53: ( ',' cursor_parameter )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:54: ',' cursor_parameter
            	    {
            	    char_literal667=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_parameter_declaration9792); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal667_tree = (CommonTree)adaptor.create(char_literal667);
            	    adaptor.addChild(root_0, char_literal667_tree);
            	    }
            	    pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9794);
            	    cursor_parameter668=cursor_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter668.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);

            char_literal669=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_parameter_declaration9798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal669_tree = (CommonTree)adaptor.create(char_literal669);
            adaptor.addChild(root_0, char_literal669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, cursor_parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter_declaration"

    public static class cursor_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:1: cursor_parameter : identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? ;
    public final PL_SQLParser.cursor_parameter_return cursor_parameter() throws RecognitionException {
        PL_SQLParser.cursor_parameter_return retval = new PL_SQLParser.cursor_parameter_return();
        retval.start = input.LT(1);
        int cursor_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD671=null;
        PL_SQLParser.identifier_return identifier670 = null;

        PL_SQLParser.data_type_return data_type672 = null;

        PL_SQLParser.variable_def_part_return variable_def_part673 = null;

        PL_SQLParser.expression_return expression674 = null;


        CommonTree IN_KEYWORD671_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:18: ( identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:20: identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_parameter9806);
            identifier670=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier670.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:31: ( IN_KEYWORD )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IN_KEYWORD) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
                    {
                    IN_KEYWORD671=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_cursor_parameter9808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD671_tree = (CommonTree)adaptor.create(IN_KEYWORD671);
                    adaptor.addChild(root_0, IN_KEYWORD671_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_cursor_parameter9811);
            data_type672=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type672.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:53: ( variable_def_part expression )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==DEFAULT_KEYWORD||LA210_0==230) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:54: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_cursor_parameter9814);
                    variable_def_part673=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part673.getTree());
                    pushFollow(FOLLOW_expression_in_cursor_parameter9816);
                    expression674=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression674.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, cursor_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter"

    public static class special_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:1: special_datatype : ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) ;
    public final PL_SQLParser.special_datatype_return special_datatype() throws RecognitionException {
        PL_SQLParser.special_datatype_return retval = new PL_SQLParser.special_datatype_return();
        retval.start = input.LT(1);
        int special_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER676=null;
        Token set677=null;
        PL_SQLParser.identifier_return identifier675 = null;


        CommonTree EXT_IDENTIFIER676_tree=null;
        CommonTree set677_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:18: ( ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:20: ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:20: ( identifier | EXT_IDENTIFIER )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==IDENTIFIER||LA211_0==INTERVAL_KEYWORD||LA211_0==RESULT_KEYWORD) ) {
                alt211=1;
            }
            else if ( (LA211_0==EXT_IDENTIFIER) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:21: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_special_datatype9827);
                    identifier675=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier675.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:34: EXT_IDENTIFIER
                    {
                    EXT_IDENTIFIER676=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_special_datatype9831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER676_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER676);
                    adaptor.addChild(root_0, EXT_IDENTIFIER676_tree);
                    }

                    }
                    break;

            }

            set677=(Token)input.LT(1);
            if ( (input.LA(1)>=ROWTYPE_KEYWORD && input.LA(1)<=LIKE_TYPE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set677));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, special_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_datatype"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:1: expression : universal_expression ;
    public final PL_SQLParser.expression_return expression() throws RecognitionException {
        PL_SQLParser.expression_return retval = new PL_SQLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.universal_expression_return universal_expression678 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:12: ( universal_expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:14: universal_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_expression_in_expression9850);
            universal_expression678=universal_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression678.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class in_notin_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_notin_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:1: in_notin_expression : ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) ;
    public final PL_SQLParser.in_notin_expression_return in_notin_expression() throws RecognitionException {
        PL_SQLParser.in_notin_expression_return retval = new PL_SQLParser.in_notin_expression_return();
        retval.start = input.LT(1);
        int in_notin_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR679=null;
        Token IN_KEYWORD680=null;
        Token char_literal682=null;
        Token char_literal684=null;
        PL_SQLParser.universal_expression_return universal_expression681 = null;

        PL_SQLParser.select_statement_return select_statement683 = null;


        CommonTree NOT_OPERATOR679_tree=null;
        CommonTree IN_KEYWORD680_tree=null;
        CommonTree char_literal682_tree=null;
        CommonTree char_literal684_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:21: ( ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:23: ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:23: ( ( NOT_OPERATOR )? IN_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:24: ( NOT_OPERATOR )? IN_KEYWORD
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:24: ( NOT_OPERATOR )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==NOT_OPERATOR) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR679=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_in_notin_expression9858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR679_tree = (CommonTree)adaptor.create(NOT_OPERATOR679);
                    adaptor.addChild(root_0, NOT_OPERATOR679_tree);
                    }

                    }
                    break;

            }

            IN_KEYWORD680=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_in_notin_expression9861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD680_tree = (CommonTree)adaptor.create(IN_KEYWORD680);
            adaptor.addChild(root_0, IN_KEYWORD680_tree);
            }

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:23: ( universal_expression | ( '(' select_statement ')' ) )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==NUMBER_UNSIGNED||LA213_0==STRING||(LA213_0>=IDENTIFIER && LA213_0<=EXT_IDENTIFIER)||LA213_0==NULL_KEYWORD||(LA213_0>=TRUE_KEYWORD && LA213_0<=FALSE_KEYWORD)||LA213_0==INTERVAL_KEYWORD||LA213_0==REPLACE_KEYWORD||LA213_0==IN_KEYWORD||LA213_0==CASE_KEYWORD||(LA213_0>=SQLCODE_KEYWORD && LA213_0<=SQLERRM_KEYWORD)||LA213_0==RESULT_KEYWORD||LA213_0==NOT_OPERATOR||(LA213_0>=214 && LA213_0<=215)) ) {
                alt213=1;
            }
            else if ( (LA213_0==LPAREN) ) {
                int LA213_2 = input.LA(2);

                if ( (synpred357_PL_SQL()) ) {
                    alt213=1;
                }
                else if ( (true) ) {
                    alt213=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:25: universal_expression
                    {
                    pushFollow(FOLLOW_universal_expression_in_in_notin_expression9889);
                    universal_expression681=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression681.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:48: ( '(' select_statement ')' )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:48: ( '(' select_statement ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:50: '(' select_statement ')'
                    {
                    char_literal682=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_in_notin_expression9895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal682_tree = (CommonTree)adaptor.create(char_literal682);
                    adaptor.addChild(root_0, char_literal682_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_in_notin_expression9897);
                    select_statement683=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement683.getTree());
                    char_literal684=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_in_notin_expression9899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal684_tree = (CommonTree)adaptor.create(char_literal684);
                    adaptor.addChild(root_0, char_literal684_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, in_notin_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_notin_expression"

    public static class operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );
    public final PL_SQLParser.operator_return operator() throws RecognitionException {
        PL_SQLParser.operator_return retval = new PL_SQLParser.operator_return();
        retval.start = input.LT(1);
        int operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal685=null;
        Token char_literal686=null;
        Token char_literal687=null;
        Token char_literal688=null;
        Token string_literal689=null;
        Token string_literal690=null;
        Token string_literal691=null;
        Token char_literal692=null;
        Token string_literal693=null;
        Token char_literal694=null;
        Token char_literal695=null;
        Token string_literal696=null;
        Token string_literal697=null;
        Token char_literal698=null;
        Token string_literal699=null;
        Token string_literal700=null;
        Token string_literal701=null;
        Token AND_OPERATOR702=null;
        Token OR_OPERATOR703=null;
        Token LIKE_KEYWORD704=null;
        Token NOT_OPERATOR705=null;
        Token BETWEEN_KEYWORD706=null;

        CommonTree char_literal685_tree=null;
        CommonTree char_literal686_tree=null;
        CommonTree char_literal687_tree=null;
        CommonTree char_literal688_tree=null;
        CommonTree string_literal689_tree=null;
        CommonTree string_literal690_tree=null;
        CommonTree string_literal691_tree=null;
        CommonTree char_literal692_tree=null;
        CommonTree string_literal693_tree=null;
        CommonTree char_literal694_tree=null;
        CommonTree char_literal695_tree=null;
        CommonTree string_literal696_tree=null;
        CommonTree string_literal697_tree=null;
        CommonTree char_literal698_tree=null;
        CommonTree string_literal699_tree=null;
        CommonTree string_literal700_tree=null;
        CommonTree string_literal701_tree=null;
        CommonTree AND_OPERATOR702_tree=null;
        CommonTree OR_OPERATOR703_tree=null;
        CommonTree LIKE_KEYWORD704_tree=null;
        CommonTree NOT_OPERATOR705_tree=null;
        CommonTree BETWEEN_KEYWORD706_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:10: ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) )
            int alt215=21;
            alt215 = dfa215.predict(input);
            switch (alt215) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:12: '+'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal685=(Token)match(input,214,FOLLOW_214_in_operator9908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal685_tree = (CommonTree)adaptor.create(char_literal685);
                    adaptor.addChild(root_0, char_literal685_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:18: '-'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal686=(Token)match(input,215,FOLLOW_215_in_operator9912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal686_tree = (CommonTree)adaptor.create(char_literal686);
                    adaptor.addChild(root_0, char_literal686_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:24: '*'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal687=(Token)match(input,216,FOLLOW_216_in_operator9916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal687_tree = (CommonTree)adaptor.create(char_literal687);
                    adaptor.addChild(root_0, char_literal687_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:30: '/'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal688=(Token)match(input,212,FOLLOW_212_in_operator9920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal688_tree = (CommonTree)adaptor.create(char_literal688);
                    adaptor.addChild(root_0, char_literal688_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:36: '**'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal689=(Token)match(input,217,FOLLOW_217_in_operator9924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal689_tree = (CommonTree)adaptor.create(string_literal689);
                    adaptor.addChild(root_0, string_literal689_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:43: '||'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal690=(Token)match(input,218,FOLLOW_218_in_operator9928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal690_tree = (CommonTree)adaptor.create(string_literal690);
                    adaptor.addChild(root_0, string_literal690_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:50: ':='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal691=(Token)match(input,230,FOLLOW_230_in_operator9932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal691_tree = (CommonTree)adaptor.create(string_literal691);
                    adaptor.addChild(root_0, string_literal691_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:57: '.'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal692=(Token)match(input,231,FOLLOW_231_in_operator9936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal692_tree = (CommonTree)adaptor.create(char_literal692);
                    adaptor.addChild(root_0, char_literal692_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:12: '^='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal693=(Token)match(input,223,FOLLOW_223_in_operator9951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal693_tree = (CommonTree)adaptor.create(string_literal693);
                    adaptor.addChild(root_0, string_literal693_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:19: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal694=(Token)match(input,224,FOLLOW_224_in_operator9955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal694_tree = (CommonTree)adaptor.create(char_literal694);
                    adaptor.addChild(root_0, char_literal694_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:25: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal695=(Token)match(input,225,FOLLOW_225_in_operator9959); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal695_tree = (CommonTree)adaptor.create(char_literal695);
                    adaptor.addChild(root_0, char_literal695_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:31: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal696=(Token)match(input,226,FOLLOW_226_in_operator9963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal696_tree = (CommonTree)adaptor.create(string_literal696);
                    adaptor.addChild(root_0, string_literal696_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:38: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal697=(Token)match(input,227,FOLLOW_227_in_operator9967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal697_tree = (CommonTree)adaptor.create(string_literal697);
                    adaptor.addChild(root_0, string_literal697_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:45: '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal698=(Token)match(input,219,FOLLOW_219_in_operator9971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal698_tree = (CommonTree)adaptor.create(char_literal698);
                    adaptor.addChild(root_0, char_literal698_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:51: '<>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal699=(Token)match(input,220,FOLLOW_220_in_operator9975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal699_tree = (CommonTree)adaptor.create(string_literal699);
                    adaptor.addChild(root_0, string_literal699_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:58: '!='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal700=(Token)match(input,221,FOLLOW_221_in_operator9979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal700_tree = (CommonTree)adaptor.create(string_literal700);
                    adaptor.addChild(root_0, string_literal700_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:854:65: '~='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal701=(Token)match(input,222,FOLLOW_222_in_operator9983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal701_tree = (CommonTree)adaptor.create(string_literal701);
                    adaptor.addChild(root_0, string_literal701_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:855:12: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR702=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_operator9998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR702_tree = (CommonTree)adaptor.create(AND_OPERATOR702);
                    adaptor.addChild(root_0, AND_OPERATOR702_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:855:27: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR703=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_operator10002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR703_tree = (CommonTree)adaptor.create(OR_OPERATOR703);
                    adaptor.addChild(root_0, OR_OPERATOR703_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:12: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD704=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_operator10017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD704_tree = (CommonTree)adaptor.create(LIKE_KEYWORD704);
                    adaptor.addChild(root_0, LIKE_KEYWORD704_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:28: ( NOT_OPERATOR )? BETWEEN_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:28: ( NOT_OPERATOR )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NOT_OPERATOR) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:29: NOT_OPERATOR
                            {
                            NOT_OPERATOR705=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_operator10023); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR705_tree = (CommonTree)adaptor.create(NOT_OPERATOR705);
                            adaptor.addChild(root_0, NOT_OPERATOR705_tree);
                            }

                            }
                            break;

                    }

                    BETWEEN_KEYWORD706=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_operator10027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD706_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD706);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD706_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator"

    public static class unary_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:1: unary_op : ( NOT_OPERATOR | '+' | '-' );
    public final PL_SQLParser.unary_op_return unary_op() throws RecognitionException {
        PL_SQLParser.unary_op_return retval = new PL_SQLParser.unary_op_return();
        retval.start = input.LT(1);
        int unary_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set707=null;

        CommonTree set707_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:857:10: ( NOT_OPERATOR | '+' | '-' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set707=(Token)input.LT(1);
            if ( input.LA(1)==NOT_OPERATOR||(input.LA(1)>=214 && input.LA(1)<=215) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set707));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, unary_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class postfix_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:1: postfix_op : ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' );
    public final PL_SQLParser.postfix_op_return postfix_op() throws RecognitionException {
        PL_SQLParser.postfix_op_return retval = new PL_SQLParser.postfix_op_return();
        retval.start = input.LT(1);
        int postfix_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IS_KEYWORD708=null;
        Token NOT_OPERATOR709=null;
        Token NULL_KEYWORD710=null;
        Token string_literal711=null;

        CommonTree IS_KEYWORD708_tree=null;
        CommonTree NOT_OPERATOR709_tree=null;
        CommonTree NULL_KEYWORD710_tree=null;
        CommonTree string_literal711_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:12: ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==IS_KEYWORD) ) {
                alt217=1;
            }
            else if ( (LA217_0==228) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:15: IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD
                    {
                    IS_KEYWORD708=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_postfix_op10051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD708_tree = (CommonTree)adaptor.create(IS_KEYWORD708);
                    adaptor.addChild(root_0, IS_KEYWORD708_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:26: ( NOT_OPERATOR )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==NOT_OPERATOR) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR709=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_postfix_op10053); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR709_tree = (CommonTree)adaptor.create(NOT_OPERATOR709);
                            adaptor.addChild(root_0, NOT_OPERATOR709_tree);
                            }

                            }
                            break;

                    }

                    NULL_KEYWORD710=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_postfix_op10056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD710_tree = (CommonTree)adaptor.create(NULL_KEYWORD710);
                    adaptor.addChild(root_0, NULL_KEYWORD710_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:56: '(+)'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal711=(Token)match(input,228,FOLLOW_228_in_postfix_op10061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal711_tree = (CommonTree)adaptor.create(string_literal711);
                    adaptor.addChild(root_0, string_literal711_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, postfix_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_op"

    public static class universal_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:1: universal_expression : ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* ;
    public final PL_SQLParser.universal_expression_return universal_expression() throws RecognitionException {
        PL_SQLParser.universal_expression_return retval = new PL_SQLParser.universal_expression_return();
        retval.start = input.LT(1);
        int universal_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal717=null;
        Token char_literal719=null;
        PL_SQLParser.unary_op_return unary_op712 = null;

        PL_SQLParser.universal_factor_return universal_factor713 = null;

        PL_SQLParser.postfix_op_return postfix_op714 = null;

        PL_SQLParser.operator_return operator715 = null;

        PL_SQLParser.universal_expression_return universal_expression716 = null;

        PL_SQLParser.select_statement_return select_statement718 = null;


        CommonTree char_literal717_tree=null;
        CommonTree char_literal719_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:22: ( ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:24: ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:24: ( unary_op )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( ((LA218_0>=214 && LA218_0<=215)) ) {
                alt218=1;
            }
            else if ( (LA218_0==NOT_OPERATOR) ) {
                int LA218_2 = input.LA(2);

                if ( (synpred383_PL_SQL()) ) {
                    alt218=1;
                }
            }
            switch (alt218) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: unary_op
                    {
                    pushFollow(FOLLOW_unary_op_in_universal_expression10069);
                    unary_op712=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op712.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_factor_in_universal_expression10072);
            universal_factor713=universal_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_factor713.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:51: ( postfix_op )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==IS_KEYWORD||LA219_0==228) ) {
                int LA219_1 = input.LA(2);

                if ( (synpred384_PL_SQL()) ) {
                    alt219=1;
                }
            }
            switch (alt219) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: postfix_op
                    {
                    pushFollow(FOLLOW_postfix_op_in_universal_expression10074);
                    postfix_op714=postfix_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_op714.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( ((LA221_0>=AND_OPERATOR && LA221_0<=OR_OPERATOR)||LA221_0==LIKE_KEYWORD||LA221_0==BETWEEN_KEYWORD||LA221_0==NOT_OPERATOR||LA221_0==212||(LA221_0>=214 && LA221_0<=227)||(LA221_0>=230 && LA221_0<=231)) ) {
                    int LA221_2 = input.LA(2);

                    if ( (synpred386_PL_SQL()) ) {
                        alt221=1;
                    }


                }


                switch (alt221) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:64: operator ( universal_expression | ( '(' select_statement ')' ) )
            	    {
            	    pushFollow(FOLLOW_operator_in_universal_expression10078);
            	    operator715=operator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator715.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:73: ( universal_expression | ( '(' select_statement ')' ) )
            	    int alt220=2;
            	    int LA220_0 = input.LA(1);

            	    if ( (LA220_0==LPAREN) ) {
            	        int LA220_1 = input.LA(2);

            	        if ( (synpred385_PL_SQL()) ) {
            	            alt220=1;
            	        }
            	        else if ( (true) ) {
            	            alt220=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 220, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA220_0==NUMBER_UNSIGNED||LA220_0==STRING||(LA220_0>=IDENTIFIER && LA220_0<=EXT_IDENTIFIER)||LA220_0==NULL_KEYWORD||(LA220_0>=TRUE_KEYWORD && LA220_0<=FALSE_KEYWORD)||LA220_0==INTERVAL_KEYWORD||LA220_0==REPLACE_KEYWORD||LA220_0==IN_KEYWORD||LA220_0==CASE_KEYWORD||(LA220_0>=SQLCODE_KEYWORD && LA220_0<=SQLERRM_KEYWORD)||LA220_0==RESULT_KEYWORD||LA220_0==NOT_OPERATOR||(LA220_0>=214 && LA220_0<=215)) ) {
            	        alt220=1;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 220, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt220) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:74: universal_expression
            	            {
            	            pushFollow(FOLLOW_universal_expression_in_universal_expression10081);
            	            universal_expression716=universal_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression716.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:97: ( '(' select_statement ')' )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:97: ( '(' select_statement ')' )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:98: '(' select_statement ')'
            	            {
            	            char_literal717=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_universal_expression10086); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal717_tree = (CommonTree)adaptor.create(char_literal717);
            	            adaptor.addChild(root_0, char_literal717_tree);
            	            }
            	            pushFollow(FOLLOW_select_statement_in_universal_expression10088);
            	            select_statement718=select_statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement718.getTree());
            	            char_literal719=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_universal_expression10090); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal719_tree = (CommonTree)adaptor.create(char_literal719);
            	            adaptor.addChild(root_0, char_literal719_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, universal_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_expression"

    public static class universal_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );
    public final PL_SQLParser.universal_factor_return universal_factor() throws RecognitionException {
        PL_SQLParser.universal_factor_return retval = new PL_SQLParser.universal_factor_return();
        retval.start = input.LT(1);
        int universal_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRUE_KEYWORD720=null;
        Token FALSE_KEYWORD721=null;
        Token NUMBER_UNSIGNED722=null;
        Token STRING724=null;
        Token NULL_KEYWORD725=null;
        Token char_literal730=null;
        Token char_literal732=null;
        Token char_literal734=null;
        PL_SQLParser.in_notin_expression_return in_notin_expression723 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression726 = null;

        PL_SQLParser.sub_identifier_return sub_identifier727 = null;

        PL_SQLParser.call_statement_param_return call_statement_param728 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression729 = null;

        PL_SQLParser.universal_expression_return universal_expression731 = null;

        PL_SQLParser.universal_expression_return universal_expression733 = null;


        CommonTree TRUE_KEYWORD720_tree=null;
        CommonTree FALSE_KEYWORD721_tree=null;
        CommonTree NUMBER_UNSIGNED722_tree=null;
        CommonTree STRING724_tree=null;
        CommonTree NULL_KEYWORD725_tree=null;
        CommonTree char_literal730_tree=null;
        CommonTree char_literal732_tree=null;
        CommonTree char_literal734_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:18: ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) )
            int alt225=9;
            alt225 = dfa225.predict(input);
            switch (alt225) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:20: TRUE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRUE_KEYWORD720=(Token)match(input,TRUE_KEYWORD,FOLLOW_TRUE_KEYWORD_in_universal_factor10102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE_KEYWORD720_tree = (CommonTree)adaptor.create(TRUE_KEYWORD720);
                    adaptor.addChild(root_0, TRUE_KEYWORD720_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:35: FALSE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FALSE_KEYWORD721=(Token)match(input,FALSE_KEYWORD,FOLLOW_FALSE_KEYWORD_in_universal_factor10106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE_KEYWORD721_tree = (CommonTree)adaptor.create(FALSE_KEYWORD721);
                    adaptor.addChild(root_0, FALSE_KEYWORD721_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:860:51: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED722=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_universal_factor10110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED722_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED722);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED722_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:20: in_notin_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor10133);
                    in_notin_expression723=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression723.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:20: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING724=(Token)match(input,STRING,FOLLOW_STRING_in_universal_factor10156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING724_tree = (CommonTree)adaptor.create(STRING724);
                    adaptor.addChild(root_0, STRING724_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:29: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD725=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_universal_factor10160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD725_tree = (CommonTree)adaptor.create(NULL_KEYWORD725);
                    adaptor.addChild(root_0, NULL_KEYWORD725_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:862:44: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_universal_factor10164);
                    case_statement_expression726=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression726.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:20: sub_identifier ( call_statement_param ( in_notin_expression )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_in_universal_factor10187);
                    sub_identifier727=sub_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier727.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:35: ( call_statement_param ( in_notin_expression )? )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==LPAREN) ) {
                        int LA223_1 = input.LA(2);

                        if ( (synpred395_PL_SQL()) ) {
                            alt223=1;
                        }
                    }
                    switch (alt223) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:36: call_statement_param ( in_notin_expression )?
                            {
                            pushFollow(FOLLOW_call_statement_param_in_universal_factor10190);
                            call_statement_param728=call_statement_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement_param728.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:57: ( in_notin_expression )?
                            int alt222=2;
                            int LA222_0 = input.LA(1);

                            if ( (LA222_0==IN_KEYWORD||LA222_0==NOT_OPERATOR) ) {
                                int LA222_2 = input.LA(2);

                                if ( (synpred394_PL_SQL()) ) {
                                    alt222=1;
                                }
                            }
                            switch (alt222) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:58: in_notin_expression
                                    {
                                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor10193);
                                    in_notin_expression729=in_notin_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression729.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:21: '(' universal_expression ( ',' universal_expression )* ')'
                    {
                    char_literal730=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_universal_factor10221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal730_tree = (CommonTree)adaptor.create(char_literal730);
                    adaptor.addChild(root_0, char_literal730_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_universal_factor10223);
                    universal_expression731=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression731.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:46: ( ',' universal_expression )*
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);

                        if ( (LA224_0==COMMA) ) {
                            alt224=1;
                        }


                        switch (alt224) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:47: ',' universal_expression
                    	    {
                    	    char_literal732=(Token)match(input,COMMA,FOLLOW_COMMA_in_universal_factor10226); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal732_tree = (CommonTree)adaptor.create(char_literal732);
                    	    adaptor.addChild(root_0, char_literal732_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_universal_factor10228);
                    	    universal_expression733=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression733.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop224;
                        }
                    } while (true);

                    char_literal734=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_universal_factor10233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal734_tree = (CommonTree)adaptor.create(char_literal734);
                    adaptor.addChild(root_0, char_literal734_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, universal_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_factor"

    public static class sub_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:1: sub_identifier : ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function );
    public final PL_SQLParser.sub_identifier_return sub_identifier() throws RecognitionException {
        PL_SQLParser.sub_identifier_return retval = new PL_SQLParser.sub_identifier_return();
        retval.start = input.LT(1);
        int sub_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REPLACE_KEYWORD736=null;
        PL_SQLParser.sub_identifier_factor_return sub_identifier_factor735 = null;

        PL_SQLParser.sqlcode_function_return sqlcode_function737 = null;

        PL_SQLParser.sqlerrm_function_return sqlerrm_function738 = null;


        CommonTree REPLACE_KEYWORD736_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:16: ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function )
            int alt226=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt226=1;
                }
                break;
            case REPLACE_KEYWORD:
                {
                alt226=2;
                }
                break;
            case SQLCODE_KEYWORD:
                {
                alt226=3;
                }
                break;
            case SQLERRM_KEYWORD:
                {
                alt226=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:18: sub_identifier_factor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_factor_in_sub_identifier10241);
                    sub_identifier_factor735=sub_identifier_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier_factor735.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:42: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD736=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sub_identifier10245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD736_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD736);
                    adaptor.addChild(root_0, REPLACE_KEYWORD736_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:60: sqlcode_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlcode_function_in_sub_identifier10249);
                    sqlcode_function737=sqlcode_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcode_function737.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:865:79: sqlerrm_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlerrm_function_in_sub_identifier10253);
                    sqlerrm_function738=sqlerrm_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlerrm_function738.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, sub_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier"

    public static class sub_identifier_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:1: sub_identifier_factor : universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? ;
    public final PL_SQLParser.sub_identifier_factor_return sub_identifier_factor() throws RecognitionException {
        PL_SQLParser.sub_identifier_factor_return retval = new PL_SQLParser.sub_identifier_factor_return();
        retval.start = input.LT(1);
        int sub_identifier_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOTFOUND_KEYWORD740=null;
        Token FOUND_KEYWORD741=null;
        Token ISOPEN_KEYWORD742=null;
        Token ROWCOUNT_KEYWORD743=null;
        PL_SQLParser.universal_identifier_return universal_identifier739 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression744 = null;


        CommonTree NOTFOUND_KEYWORD740_tree=null;
        CommonTree FOUND_KEYWORD741_tree=null;
        CommonTree ISOPEN_KEYWORD742_tree=null;
        CommonTree ROWCOUNT_KEYWORD743_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:23: ( universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:25: universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_identifier_in_sub_identifier_factor10260);
            universal_identifier739=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier739.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            int alt227=6;
            switch ( input.LA(1) ) {
                case ROWCOUNT_KEYWORD:
                    {
                    alt227=4;
                    }
                    break;
                case NOTFOUND_KEYWORD:
                    {
                    alt227=1;
                    }
                    break;
                case IN_KEYWORD:
                case NOT_OPERATOR:
                    {
                    int LA227_4 = input.LA(2);

                    if ( (synpred405_PL_SQL()) ) {
                        alt227=5;
                    }
                    }
                    break;
                case ISOPEN_KEYWORD:
                    {
                    alt227=3;
                    }
                    break;
                case FOUND_KEYWORD:
                    {
                    alt227=2;
                    }
                    break;
            }

            switch (alt227) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:47: NOTFOUND_KEYWORD
                    {
                    NOTFOUND_KEYWORD740=(Token)match(input,NOTFOUND_KEYWORD,FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor10263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTFOUND_KEYWORD740_tree = (CommonTree)adaptor.create(NOTFOUND_KEYWORD740);
                    adaptor.addChild(root_0, NOTFOUND_KEYWORD740_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:66: FOUND_KEYWORD
                    {
                    FOUND_KEYWORD741=(Token)match(input,FOUND_KEYWORD,FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor10267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOUND_KEYWORD741_tree = (CommonTree)adaptor.create(FOUND_KEYWORD741);
                    adaptor.addChild(root_0, FOUND_KEYWORD741_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:25: ISOPEN_KEYWORD
                    {
                    ISOPEN_KEYWORD742=(Token)match(input,ISOPEN_KEYWORD,FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor10295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISOPEN_KEYWORD742_tree = (CommonTree)adaptor.create(ISOPEN_KEYWORD742);
                    adaptor.addChild(root_0, ISOPEN_KEYWORD742_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:42: ROWCOUNT_KEYWORD
                    {
                    ROWCOUNT_KEYWORD743=(Token)match(input,ROWCOUNT_KEYWORD,FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor10299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWCOUNT_KEYWORD743_tree = (CommonTree)adaptor.create(ROWCOUNT_KEYWORD743);
                    adaptor.addChild(root_0, ROWCOUNT_KEYWORD743_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:61: in_notin_expression
                    {
                    pushFollow(FOLLOW_in_notin_expression_in_sub_identifier_factor10303);
                    in_notin_expression744=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression744.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, sub_identifier_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier_factor"

    public static class call_statement_param_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_statement_param"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:1: call_statement_param : ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) );
    public final PL_SQLParser.call_statement_param_return call_statement_param() throws RecognitionException {
        PL_SQLParser.call_statement_param_return retval = new PL_SQLParser.call_statement_param_return();
        retval.start = input.LT(1);
        int call_statement_param_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal745=null;
        Token char_literal747=null;
        Token char_literal749=null;
        Token char_literal750=null;
        Token string_literal752=null;
        Token char_literal754=null;
        Token string_literal756=null;
        Token char_literal758=null;
        PL_SQLParser.universal_expression_return universal_expression746 = null;

        PL_SQLParser.universal_expression_return universal_expression748 = null;

        PL_SQLParser.identifier_return identifier751 = null;

        PL_SQLParser.universal_expression_return universal_expression753 = null;

        PL_SQLParser.identifier_return identifier755 = null;

        PL_SQLParser.universal_expression_return universal_expression757 = null;


        CommonTree char_literal745_tree=null;
        CommonTree char_literal747_tree=null;
        CommonTree char_literal749_tree=null;
        CommonTree char_literal750_tree=null;
        CommonTree string_literal752_tree=null;
        CommonTree char_literal754_tree=null;
        CommonTree string_literal756_tree=null;
        CommonTree char_literal758_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:22: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==LPAREN) ) {
                int LA231_1 = input.LA(2);

                if ( (synpred408_PL_SQL()) ) {
                    alt231=1;
                }
                else if ( (true) ) {
                    alt231=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 231, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
                    {
                    char_literal745=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement_param10313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal745_tree = (CommonTree)adaptor.create(char_literal745);
                    adaptor.addChild(root_0, char_literal745_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:29: ( universal_expression ( ',' universal_expression )* )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==NUMBER_UNSIGNED||LA229_0==STRING||(LA229_0>=IDENTIFIER && LA229_0<=EXT_IDENTIFIER)||LA229_0==NULL_KEYWORD||(LA229_0>=TRUE_KEYWORD && LA229_0<=FALSE_KEYWORD)||LA229_0==INTERVAL_KEYWORD||LA229_0==REPLACE_KEYWORD||LA229_0==IN_KEYWORD||LA229_0==CASE_KEYWORD||(LA229_0>=SQLCODE_KEYWORD && LA229_0<=SQLERRM_KEYWORD)||LA229_0==RESULT_KEYWORD||LA229_0==LPAREN||LA229_0==NOT_OPERATOR||(LA229_0>=214 && LA229_0<=215)) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:30: universal_expression ( ',' universal_expression )*
                            {
                            pushFollow(FOLLOW_universal_expression_in_call_statement_param10316);
                            universal_expression746=universal_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression746.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:51: ( ',' universal_expression )*
                            loop228:
                            do {
                                int alt228=2;
                                int LA228_0 = input.LA(1);

                                if ( (LA228_0==COMMA) ) {
                                    alt228=1;
                                }


                                switch (alt228) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:52: ',' universal_expression
                            	    {
                            	    char_literal747=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10319); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal747_tree = (CommonTree)adaptor.create(char_literal747);
                            	    adaptor.addChild(root_0, char_literal747_tree);
                            	    }
                            	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10321);
                            	    universal_expression748=universal_expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression748.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop228;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal749=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement_param10328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal749_tree = (CommonTree)adaptor.create(char_literal749);
                    adaptor.addChild(root_0, char_literal749_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:25: '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')'
                    {
                    char_literal750=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement_param10357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal750_tree = (CommonTree)adaptor.create(char_literal750);
                    adaptor.addChild(root_0, char_literal750_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_call_statement_param10359);
                    identifier751=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier751.getTree());
                    string_literal752=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal752_tree = (CommonTree)adaptor.create(string_literal752);
                    adaptor.addChild(root_0, string_literal752_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_call_statement_param10363);
                    universal_expression753=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression753.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:66: ( ',' identifier '=>' universal_expression )*
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);

                        if ( (LA230_0==COMMA) ) {
                            alt230=1;
                        }


                        switch (alt230) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:67: ',' identifier '=>' universal_expression
                    	    {
                    	    char_literal754=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10366); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal754_tree = (CommonTree)adaptor.create(char_literal754);
                    	    adaptor.addChild(root_0, char_literal754_tree);
                    	    }
                    	    pushFollow(FOLLOW_identifier_in_call_statement_param10368);
                    	    identifier755=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier755.getTree());
                    	    string_literal756=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10370); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal756_tree = (CommonTree)adaptor.create(string_literal756);
                    	    adaptor.addChild(root_0, string_literal756_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10372);
                    	    universal_expression757=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression757.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop230;
                        }
                    } while (true);

                    char_literal758=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement_param10377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal758_tree = (CommonTree)adaptor.create(char_literal758);
                    adaptor.addChild(root_0, char_literal758_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, call_statement_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_statement_param"

    public static class exception_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:1: exception_section : EXCEPTION_KEYWORD ( exception_handler )+ ;
    public final PL_SQLParser.exception_section_return exception_section() throws RecognitionException {
        PL_SQLParser.exception_section_return retval = new PL_SQLParser.exception_section_return();
        retval.start = input.LT(1);
        int exception_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXCEPTION_KEYWORD759=null;
        PL_SQLParser.exception_handler_return exception_handler760 = null;


        CommonTree EXCEPTION_KEYWORD759_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:19: ( EXCEPTION_KEYWORD ( exception_handler )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:21: EXCEPTION_KEYWORD ( exception_handler )+
            {
            root_0 = (CommonTree)adaptor.nil();

            EXCEPTION_KEYWORD759=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_exception_section10386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPTION_KEYWORD759_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD759);
            adaptor.addChild(root_0, EXCEPTION_KEYWORD759_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:39: ( exception_handler )+
            int cnt232=0;
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==WHEN_KEYWORD) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:40: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_section10389);
            	    exception_handler760=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler760.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt232 >= 1 ) break loop232;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(232, input);
                        throw eee;
                }
                cnt232++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, exception_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_section"

    public static class exception_handler_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:1: exception_handler : WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ ;
    public final PL_SQLParser.exception_handler_return exception_handler() throws RecognitionException {
        PL_SQLParser.exception_handler_return retval = new PL_SQLParser.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHEN_KEYWORD761=null;
        Token OR_OPERATOR763=null;
        Token THEN_KEYWORD765=null;
        PL_SQLParser.universal_identifier_return universal_identifier762 = null;

        PL_SQLParser.universal_identifier_return universal_identifier764 = null;

        PL_SQLParser.executable_section_return executable_section766 = null;


        CommonTree WHEN_KEYWORD761_tree=null;
        CommonTree OR_OPERATOR763_tree=null;
        CommonTree THEN_KEYWORD765_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:19: ( WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:21: WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+
            {
            root_0 = (CommonTree)adaptor.nil();

            WHEN_KEYWORD761=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exception_handler10398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN_KEYWORD761_tree = (CommonTree)adaptor.create(WHEN_KEYWORD761);
            adaptor.addChild(root_0, WHEN_KEYWORD761_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_exception_handler10400);
            universal_identifier762=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier762.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:55: ( OR_OPERATOR universal_identifier )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==OR_OPERATOR) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:871:56: OR_OPERATOR universal_identifier
            	    {
            	    OR_OPERATOR763=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_exception_handler10403); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR_OPERATOR763_tree = (CommonTree)adaptor.create(OR_OPERATOR763);
            	    adaptor.addChild(root_0, OR_OPERATOR763_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_exception_handler10405);
            	    universal_identifier764=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier764.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);

            THEN_KEYWORD765=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_exception_handler10429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD765_tree = (CommonTree)adaptor.create(THEN_KEYWORD765);
            adaptor.addChild(root_0, THEN_KEYWORD765_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:34: ( executable_section )+
            int cnt234=0;
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==NUMBER_UNSIGNED||LA234_0==STRING||(LA234_0>=IDENTIFIER && LA234_0<=EXT_IDENTIFIER)||LA234_0==BEGIN_KEYWORD||LA234_0==DECLARE_KEYWORD||LA234_0==NULL_KEYWORD||(LA234_0>=TRUE_KEYWORD && LA234_0<=FALSE_KEYWORD)||LA234_0==INTERVAL_KEYWORD||LA234_0==REPLACE_KEYWORD||(LA234_0>=RETURN_KEYWORD && LA234_0<=IN_KEYWORD)||LA234_0==IF_KEYWORD||(LA234_0>=GOTO_KEYWORD && LA234_0<=FOR_KEYWORD)||LA234_0==SELECT_KEYWORD||(LA234_0>=RAISE_KEYWORD && LA234_0<=PRAGMA_KEYWORD)||(LA234_0>=CASE_KEYWORD && LA234_0<=CLOSE_KEYWORD)||LA234_0==COMMIT_KEYWORD||LA234_0==CONTINUE_KEYWORD||(LA234_0>=DELETE_KEYWORD && LA234_0<=EXECUTE_KEYWORD)||LA234_0==EXIT_KEYWORD||LA234_0==FETCH_KEYWORD||LA234_0==FORALL_KEYWORD||(LA234_0>=INSERT_KEYWORD && LA234_0<=OPEN_KEYWORD)||(LA234_0>=ROLLBACK_KEYWORD && LA234_0<=SAVEPOINT_KEYWORD)||LA234_0==SET_KEYWORD||(LA234_0>=SQLCODE_KEYWORD && LA234_0<=UPDATE_KEYWORD)||LA234_0==RESULT_KEYWORD||LA234_0==LPAREN||LA234_0==NOT_OPERATOR||LA234_0==210||(LA234_0>=214 && LA234_0<=215)) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:35: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_exception_handler10432);
            	    executable_section766=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section766.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt234 >= 1 ) break loop234;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(234, input);
                        throw eee;
                }
                cnt234++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    public static class scale_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scale_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:874:1: scale_types : SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? ;
    public final PL_SQLParser.scale_types_return scale_types() throws RecognitionException {
        PL_SQLParser.scale_types_return retval = new PL_SQLParser.scale_types_return();
        retval.start = input.LT(1);
        int scale_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SCALE_TYPES767=null;
        Token char_literal768=null;
        Token char_literal769=null;
        Token NUMBER_UNSIGNED770=null;
        Token COMMA771=null;
        Token set772=null;
        Token NUMBER_UNSIGNED773=null;
        Token char_literal774=null;

        CommonTree SCALE_TYPES767_tree=null;
        CommonTree char_literal768_tree=null;
        CommonTree char_literal769_tree=null;
        CommonTree NUMBER_UNSIGNED770_tree=null;
        CommonTree COMMA771_tree=null;
        CommonTree set772_tree=null;
        CommonTree NUMBER_UNSIGNED773_tree=null;
        CommonTree char_literal774_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:2: ( SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:4: SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SCALE_TYPES767=(Token)match(input,SCALE_TYPES,FOLLOW_SCALE_TYPES_in_scale_types10443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCALE_TYPES767_tree = (CommonTree)adaptor.create(SCALE_TYPES767);
            adaptor.addChild(root_0, SCALE_TYPES767_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:16: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==LPAREN) ) {
                int LA238_2 = input.LA(2);

                if ( (synpred417_PL_SQL()) ) {
                    alt238=1;
                }
            }
            switch (alt238) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
                    {
                    char_literal768=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_scale_types10446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal768_tree = (CommonTree)adaptor.create(char_literal768);
                    adaptor.addChild(root_0, char_literal768_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:21: ( '+' )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==214) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal769=(Token)match(input,214,FOLLOW_214_in_scale_types10448); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal769_tree = (CommonTree)adaptor.create(char_literal769);
                            adaptor.addChild(root_0, char_literal769_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED770=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED770_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED770);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED770_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==COMMA) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                            {
                            COMMA771=(Token)match(input,COMMA,FOLLOW_COMMA_in_scale_types10454); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA771_tree = (CommonTree)adaptor.create(COMMA771);
                            adaptor.addChild(root_0, COMMA771_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:49: ( '+' | '-' )?
                            int alt236=2;
                            int LA236_0 = input.LA(1);

                            if ( ((LA236_0>=214 && LA236_0<=215)) ) {
                                alt236=1;
                            }
                            switch (alt236) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                                    {
                                    set772=(Token)input.LT(1);
                                    if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                                        input.consume();
                                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set772));
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        throw mse;
                                    }


                                    }
                                    break;

                            }

                            NUMBER_UNSIGNED773=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER_UNSIGNED773_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED773);
                            adaptor.addChild(root_0, NUMBER_UNSIGNED773_tree);
                            }

                            }
                            break;

                    }

                    char_literal774=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_scale_types10469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal774_tree = (CommonTree)adaptor.create(char_literal774);
                    adaptor.addChild(root_0, char_literal774_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, scale_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scale_types"

    public static class size_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "size_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:877:1: size_types : SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.size_types_return size_types() throws RecognitionException {
        PL_SQLParser.size_types_return retval = new PL_SQLParser.size_types_return();
        retval.start = input.LT(1);
        int size_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SIZE_TYPES775=null;
        Token char_literal776=null;
        Token char_literal777=null;
        Token NUMBER_UNSIGNED778=null;
        Token char_literal779=null;

        CommonTree SIZE_TYPES775_tree=null;
        CommonTree char_literal776_tree=null;
        CommonTree char_literal777_tree=null;
        CommonTree NUMBER_UNSIGNED778_tree=null;
        CommonTree char_literal779_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:2: ( SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:4: SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SIZE_TYPES775=(Token)match(input,SIZE_TYPES,FOLLOW_SIZE_TYPES_in_size_types10480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SIZE_TYPES775_tree = (CommonTree)adaptor.create(SIZE_TYPES775);
            adaptor.addChild(root_0, SIZE_TYPES775_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:15: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==LPAREN) ) {
                int LA240_1 = input.LA(2);

                if ( (synpred419_PL_SQL()) ) {
                    alt240=1;
                }
            }
            switch (alt240) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal776=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_size_types10484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal776_tree = (CommonTree)adaptor.create(char_literal776);
                    adaptor.addChild(root_0, char_literal776_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:21: ( '+' )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==214) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal777=(Token)match(input,214,FOLLOW_214_in_size_types10486); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal777_tree = (CommonTree)adaptor.create(char_literal777);
                            adaptor.addChild(root_0, char_literal777_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED778=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_size_types10489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED778_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED778);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED778_tree);
                    }
                    char_literal779=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_size_types10491); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal779_tree = (CommonTree)adaptor.create(char_literal779);
                    adaptor.addChild(root_0, char_literal779_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, size_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "size_types"

    public static class raw_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raw_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:1: raw_type : RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.raw_type_return raw_type() throws RecognitionException {
        PL_SQLParser.raw_type_return retval = new PL_SQLParser.raw_type_return();
        retval.start = input.LT(1);
        int raw_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAW_TYPE780=null;
        Token char_literal781=null;
        Token char_literal782=null;
        Token NUMBER_UNSIGNED783=null;
        Token char_literal784=null;

        CommonTree RAW_TYPE780_tree=null;
        CommonTree char_literal781_tree=null;
        CommonTree char_literal782_tree=null;
        CommonTree NUMBER_UNSIGNED783_tree=null;
        CommonTree char_literal784_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:9: ( RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:11: RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAW_TYPE780=(Token)match(input,RAW_TYPE,FOLLOW_RAW_TYPE_in_raw_type10501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAW_TYPE780_tree = (CommonTree)adaptor.create(RAW_TYPE780);
            adaptor.addChild(root_0, RAW_TYPE780_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:20: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==LPAREN) ) {
                int LA242_1 = input.LA(2);

                if ( (synpred421_PL_SQL()) ) {
                    alt242=1;
                }
            }
            switch (alt242) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal781=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_raw_type10505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal781_tree = (CommonTree)adaptor.create(char_literal781);
                    adaptor.addChild(root_0, char_literal781_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:26: ( '+' )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==214) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal782=(Token)match(input,214,FOLLOW_214_in_raw_type10507); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal782_tree = (CommonTree)adaptor.create(char_literal782);
                            adaptor.addChild(root_0, char_literal782_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED783=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_raw_type10510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED783_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED783);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED783_tree);
                    }
                    char_literal784=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_raw_type10512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal784_tree = (CommonTree)adaptor.create(char_literal784);
                    adaptor.addChild(root_0, char_literal784_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, raw_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raw_type"

    public static class year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:882:1: year_type : YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.year_type_return year_type() throws RecognitionException {
        PL_SQLParser.year_type_return retval = new PL_SQLParser.year_type_return();
        retval.start = input.LT(1);
        int year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token YEAR_TYPE785=null;
        Token char_literal786=null;
        Token char_literal787=null;
        Token NUMBER_UNSIGNED788=null;
        Token char_literal789=null;

        CommonTree YEAR_TYPE785_tree=null;
        CommonTree char_literal786_tree=null;
        CommonTree char_literal787_tree=null;
        CommonTree NUMBER_UNSIGNED788_tree=null;
        CommonTree char_literal789_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:2: ( YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:4: YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            YEAR_TYPE785=(Token)match(input,YEAR_TYPE,FOLLOW_YEAR_TYPE_in_year_type10524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YEAR_TYPE785_tree = (CommonTree)adaptor.create(YEAR_TYPE785);
            adaptor.addChild(root_0, YEAR_TYPE785_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:14: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==LPAREN) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:16: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal786=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_year_type10528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal786_tree = (CommonTree)adaptor.create(char_literal786);
                    adaptor.addChild(root_0, char_literal786_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:883:20: ( '+' )?
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==214) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal787=(Token)match(input,214,FOLLOW_214_in_year_type10530); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal787_tree = (CommonTree)adaptor.create(char_literal787);
                            adaptor.addChild(root_0, char_literal787_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED788=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_year_type10533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED788_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED788);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED788_tree);
                    }
                    char_literal789=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_year_type10535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal789_tree = (CommonTree)adaptor.create(char_literal789);
                    adaptor.addChild(root_0, char_literal789_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "year_type"

    public static class timestamp_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:885:1: timestamp_type : TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.timestamp_type_return timestamp_type() throws RecognitionException {
        PL_SQLParser.timestamp_type_return retval = new PL_SQLParser.timestamp_type_return();
        retval.start = input.LT(1);
        int timestamp_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TIMESTAMP_TYPE790=null;
        Token char_literal791=null;
        Token char_literal792=null;
        Token NUMBER_UNSIGNED793=null;
        Token char_literal794=null;

        CommonTree TIMESTAMP_TYPE790_tree=null;
        CommonTree char_literal791_tree=null;
        CommonTree char_literal792_tree=null;
        CommonTree NUMBER_UNSIGNED793_tree=null;
        CommonTree char_literal794_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:2: ( TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:4: TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TIMESTAMP_TYPE790=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TIMESTAMP_TYPE790_tree = (CommonTree)adaptor.create(TIMESTAMP_TYPE790);
            adaptor.addChild(root_0, TIMESTAMP_TYPE790_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:19: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==LPAREN) ) {
                int LA246_2 = input.LA(2);

                if ( (synpred425_PL_SQL()) ) {
                    alt246=1;
                }
            }
            switch (alt246) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal791=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_timestamp_type10551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal791_tree = (CommonTree)adaptor.create(char_literal791);
                    adaptor.addChild(root_0, char_literal791_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:25: ( '+' )?
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==214) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal792=(Token)match(input,214,FOLLOW_214_in_timestamp_type10553); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal792_tree = (CommonTree)adaptor.create(char_literal792);
                            adaptor.addChild(root_0, char_literal792_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED793=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED793_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED793);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED793_tree);
                    }
                    char_literal794=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_timestamp_type10558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal794_tree = (CommonTree)adaptor.create(char_literal794);
                    adaptor.addChild(root_0, char_literal794_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, timestamp_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_type"

    public static class day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:888:1: day_type : DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.day_type_return day_type() throws RecognitionException {
        PL_SQLParser.day_type_return retval = new PL_SQLParser.day_type_return();
        retval.start = input.LT(1);
        int day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DAY_TYPE795=null;
        Token char_literal796=null;
        Token char_literal797=null;
        Token NUMBER_UNSIGNED798=null;
        Token char_literal799=null;

        CommonTree DAY_TYPE795_tree=null;
        CommonTree char_literal796_tree=null;
        CommonTree char_literal797_tree=null;
        CommonTree NUMBER_UNSIGNED798_tree=null;
        CommonTree char_literal799_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:889:2: ( DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:889:4: DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            DAY_TYPE795=(Token)match(input,DAY_TYPE,FOLLOW_DAY_TYPE_in_day_type10570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DAY_TYPE795_tree = (CommonTree)adaptor.create(DAY_TYPE795);
            adaptor.addChild(root_0, DAY_TYPE795_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:889:13: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==LPAREN) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:889:15: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal796=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_day_type10574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal796_tree = (CommonTree)adaptor.create(char_literal796);
                    adaptor.addChild(root_0, char_literal796_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:889:19: ( '+' )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==214) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal797=(Token)match(input,214,FOLLOW_214_in_day_type10576); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal797_tree = (CommonTree)adaptor.create(char_literal797);
                            adaptor.addChild(root_0, char_literal797_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED798=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_day_type10579); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED798_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED798);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED798_tree);
                    }
                    char_literal799=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_day_type10581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal799_tree = (CommonTree)adaptor.create(char_literal799);
                    adaptor.addChild(root_0, char_literal799_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "day_type"

    public static class second_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "second_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:891:1: second_type : SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.second_type_return second_type() throws RecognitionException {
        PL_SQLParser.second_type_return retval = new PL_SQLParser.second_type_return();
        retval.start = input.LT(1);
        int second_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SECOND_TYPE800=null;
        Token char_literal801=null;
        Token char_literal802=null;
        Token NUMBER_UNSIGNED803=null;
        Token char_literal804=null;

        CommonTree SECOND_TYPE800_tree=null;
        CommonTree char_literal801_tree=null;
        CommonTree char_literal802_tree=null;
        CommonTree NUMBER_UNSIGNED803_tree=null;
        CommonTree char_literal804_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:2: ( SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:4: SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SECOND_TYPE800=(Token)match(input,SECOND_TYPE,FOLLOW_SECOND_TYPE_in_second_type10593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SECOND_TYPE800_tree = (CommonTree)adaptor.create(SECOND_TYPE800);
            adaptor.addChild(root_0, SECOND_TYPE800_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:16: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==LPAREN) ) {
                int LA250_2 = input.LA(2);

                if ( (synpred429_PL_SQL()) ) {
                    alt250=1;
                }
            }
            switch (alt250) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal801=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_second_type10597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal801_tree = (CommonTree)adaptor.create(char_literal801);
                    adaptor.addChild(root_0, char_literal801_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:22: ( '+' )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==214) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal802=(Token)match(input,214,FOLLOW_214_in_second_type10599); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal802_tree = (CommonTree)adaptor.create(char_literal802);
                            adaptor.addChild(root_0, char_literal802_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED803=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_second_type10602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED803_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED803);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED803_tree);
                    }
                    char_literal804=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_second_type10604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal804_tree = (CommonTree)adaptor.create(char_literal804);
                    adaptor.addChild(root_0, char_literal804_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, second_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "second_type"

    // $ANTLR start synpred36_PL_SQL
    public final void synpred36_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:23: ( ( PACKAGE_KEYWORD package_spec ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:23: ( PACKAGE_KEYWORD package_spec )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:23: ( PACKAGE_KEYWORD package_spec )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:24: PACKAGE_KEYWORD package_spec
        {
        match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_synpred36_PL_SQL5312); if (state.failed) return ;
        pushFollow(FOLLOW_package_spec_in_synpred36_PL_SQL5314);
        package_spec();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred36_PL_SQL

    // $ANTLR start synpred69_PL_SQL
    public final void synpred69_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:37: ( dml_event_clause_factor )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:37: dml_event_clause_factor
        {
        pushFollow(FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5810);
        dml_event_clause_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_PL_SQL

    // $ANTLR start synpred73_PL_SQL
    public final void synpred73_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:43: ( referencing_clause )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:43: referencing_clause
        {
        pushFollow(FOLLOW_referencing_clause_in_synpred73_PL_SQL5865);
        referencing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_PL_SQL

    // $ANTLR start synpred84_PL_SQL
    public final void synpred84_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:20: ( ( TYPE_KEYWORD type_spec_declaration ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:20: ( TYPE_KEYWORD type_spec_declaration )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:20: ( TYPE_KEYWORD type_spec_declaration )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:21: TYPE_KEYWORD type_spec_declaration
        {
        match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_synpred84_PL_SQL6000); if (state.failed) return ;
        pushFollow(FOLLOW_type_spec_declaration_in_synpred84_PL_SQL6002);
        type_spec_declaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred84_PL_SQL

    // $ANTLR start synpred90_PL_SQL
    public final void synpred90_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:19: ( object_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:19: object_type
        {
        pushFollow(FOLLOW_object_type_in_synpred90_PL_SQL6142);
        object_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_PL_SQL

    // $ANTLR start synpred91_PL_SQL
    public final void synpred91_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:33: ( varray_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:33: varray_type
        {
        pushFollow(FOLLOW_varray_type_in_synpred91_PL_SQL6146);
        varray_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_PL_SQL

    // $ANTLR start synpred95_PL_SQL
    public final void synpred95_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:17: ( ( NOT_OPERATOR )? FINAL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:17: ( NOT_OPERATOR )? FINAL_KEYWORD
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:17: ( NOT_OPERATOR )?
        int alt267=2;
        int LA267_0 = input.LA(1);

        if ( (LA267_0==NOT_OPERATOR) ) {
            alt267=1;
        }
        switch (alt267) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                {
                match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred95_PL_SQL6206); if (state.failed) return ;

                }
                break;

        }

        match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_synpred95_PL_SQL6209); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_PL_SQL

    // $ANTLR start synpred102_PL_SQL
    public final void synpred102_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:16: ( inheritance_clauses )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:16: inheritance_clauses
        {
        pushFollow(FOLLOW_inheritance_clauses_in_synpred102_PL_SQL6253);
        inheritance_clauses();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_PL_SQL

    // $ANTLR start synpred105_PL_SQL
    public final void synpred105_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:101: ( ',' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:101: ','
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred105_PL_SQL6269); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_PL_SQL

    // $ANTLR start synpred106_PL_SQL
    public final void synpred106_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:38: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
        int alt271=3;
        switch ( input.LA(1) ) {
        case MEMBER_KEYWORD:
        case STATIC_KEYWORD:
            {
            alt271=1;
            }
            break;
        case FINAL_KEYWORD:
        case INSTANTIABLE_KEYWORD:
        case CONSTRUCTOR_KEYWORD:
            {
            alt271=2;
            }
            break;
        case MAP_KEYWORD:
        case ORDER_KEYWORD:
            {
            alt271=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 271, 0, input);

            throw nvae;
        }

        switch (alt271) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:39: subprogram_spec
                {
                pushFollow(FOLLOW_subprogram_spec_in_synpred106_PL_SQL6258);
                subprogram_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:57: constructor_spec
                {
                pushFollow(FOLLOW_constructor_spec_in_synpred106_PL_SQL6262);
                constructor_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:76: map_order_function_spec
                {
                pushFollow(FOLLOW_map_order_function_spec_in_synpred106_PL_SQL6266);
                map_order_function_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:101: ( ',' )?
        int alt272=2;
        int LA272_0 = input.LA(1);

        if ( (LA272_0==COMMA) ) {
            alt272=1;
        }
        switch (alt272) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred106_PL_SQL6269); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred106_PL_SQL

    // $ANTLR start synpred138_PL_SQL
    public final void synpred138_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:21: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:21: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred138_PL_SQL6759);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_PL_SQL

    // $ANTLR start synpred190_PL_SQL
    public final void synpred190_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:36: ( sql_operator )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:36: sql_operator
        {
        pushFollow(FOLLOW_sql_operator_in_synpred190_PL_SQL7189);
        sql_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_PL_SQL

    // $ANTLR start synpred192_PL_SQL
    public final void synpred192_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:66: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:66: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred192_PL_SQL7197); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_PL_SQL

    // $ANTLR start synpred193_PL_SQL
    public final void synpred193_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:79: ( NOT_OPERATOR IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:79: NOT_OPERATOR IN_KEYWORD
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred193_PL_SQL7201); if (state.failed) return ;
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred193_PL_SQL7203); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_PL_SQL

    // $ANTLR start synpred202_PL_SQL
    public final void synpred202_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: ( SET_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:16: SET_KEYWORD
        {
        match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_synpred202_PL_SQL7284); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_PL_SQL

    // $ANTLR start synpred208_PL_SQL
    public final void synpred208_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:33: ( REPLACE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:33: REPLACE_KEYWORD
        {
        match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_synpred208_PL_SQL7323); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_PL_SQL

    // $ANTLR start synpred209_PL_SQL
    public final void synpred209_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:16: ( NUMBER_UNSIGNED )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:16: NUMBER_UNSIGNED
        {
        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred209_PL_SQL7342); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_PL_SQL

    // $ANTLR start synpred211_PL_SQL
    public final void synpred211_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:50: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:50: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred211_PL_SQL7350);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_PL_SQL

    // $ANTLR start synpred212_PL_SQL
    public final void synpred212_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:73: ( case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:73: case_statement_expression
        {
        pushFollow(FOLLOW_case_statement_expression_in_synpred212_PL_SQL7354);
        case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_PL_SQL

    // $ANTLR start synpred213_PL_SQL
    public final void synpred213_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:16: ( STRING )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:16: STRING
        {
        match(input,STRING,FOLLOW_STRING_in_synpred213_PL_SQL7373); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_PL_SQL

    // $ANTLR start synpred214_PL_SQL
    public final void synpred214_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:25: ( COMMA )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:25: COMMA
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred214_PL_SQL7377); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_PL_SQL

    // $ANTLR start synpred217_PL_SQL
    public final void synpred217_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:62: ( NOT_OPERATOR )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:62: NOT_OPERATOR
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred217_PL_SQL7389); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_PL_SQL

    // $ANTLR start synpred218_PL_SQL
    public final void synpred218_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:16: ( IS_KEYWORD NOT_OPERATOR NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred218_PL_SQL7408); if (state.failed) return ;
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred218_PL_SQL7410); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7412); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_PL_SQL

    // $ANTLR start synpred219_PL_SQL
    public final void synpred219_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:55: ( IS_KEYWORD NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:55: IS_KEYWORD NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred219_PL_SQL7416); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred219_PL_SQL7418); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_PL_SQL

    // $ANTLR start synpred220_PL_SQL
    public final void synpred220_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:81: ( NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:727:81: NULL_KEYWORD
        {
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred220_PL_SQL7422); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_PL_SQL

    // $ANTLR start synpred223_PL_SQL
    public final void synpred223_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:16: ( sql_statements )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:16: sql_statements
        {
        pushFollow(FOLLOW_sql_statements_in_synpred223_PL_SQL7465);
        sql_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_PL_SQL

    // $ANTLR start synpred224_PL_SQL
    public final void synpred224_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:16: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:16: expression
        {
        pushFollow(FOLLOW_expression_in_synpred224_PL_SQL7485);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_PL_SQL

    // $ANTLR start synpred228_PL_SQL
    public final void synpred228_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:36: ( ( sql_not_parsed | ON_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:36: ( sql_not_parsed | ON_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:36: ( sql_not_parsed | ON_KEYWORD )
        int alt279=2;
        int LA279_0 = input.LA(1);

        if ( ((LA279_0>=NUMBER_UNSIGNED && LA279_0<=OR_OPERATOR)||(LA279_0>=STRING && LA279_0<=SOME_TYPES)||(LA279_0>=KEYWORD && LA279_0<=ALIAS)||LA279_0==COMMA||LA279_0==NULL_KEYWORD||(LA279_0>=TRUE_KEYWORD && LA279_0<=FALSE_KEYWORD)||LA279_0==WITH_KEYWORD||LA279_0==INTERVAL_KEYWORD||LA279_0==IS_KEYWORD||LA279_0==REPLACE_KEYWORD||LA279_0==AS_KEYWORD||LA279_0==IN_KEYWORD||(LA279_0>=SELECT_KEYWORD && LA279_0<=COUNT_KEYWORD)||LA279_0==LIKE_KEYWORD||LA279_0==CASE_KEYWORD||(LA279_0>=TABLE_KEYWORD && LA279_0<=OF_KEYWORD)||LA279_0==BY_KEYWORD||LA279_0==COMMIT_KEYWORD||LA279_0==DELETE_KEYWORD||LA279_0==INTO_KEYWORD||(LA279_0>=BULK_KEYWORD && LA279_0<=COLLECT_KEYWORD)||(LA279_0>=VALUES_KEYWORD && LA279_0<=BETWEEN_KEYWORD)||(LA279_0>=INSERT_KEYWORD && LA279_0<=MERGE_KEYWORD)||(LA279_0>=RETURNING_KEYWORD && LA279_0<=SAVEPOINT_KEYWORD)||LA279_0==SET_KEYWORD||(LA279_0>=SQLCODE_KEYWORD && LA279_0<=EXISTS_KEYWORD)||LA279_0==ROW_KEYWORD||LA279_0==RESULT_KEYWORD||LA279_0==JOIN_KEYWORD||LA279_0==LPAREN||LA279_0==NOT_OPERATOR||LA279_0==THE_REST||LA279_0==212||(LA279_0>=214 && LA279_0<=228)) ) {
            alt279=1;
        }
        else if ( (LA279_0==ON_KEYWORD) ) {
            alt279=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 279, 0, input);

            throw nvae;
        }
        switch (alt279) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:37: sql_not_parsed
                {
                pushFollow(FOLLOW_sql_not_parsed_in_synpred228_PL_SQL7516);
                sql_not_parsed();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:54: ON_KEYWORD
                {
                match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred228_PL_SQL7520); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred228_PL_SQL

    // $ANTLR start synpred229_PL_SQL
    public final void synpred229_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:68: ( ( FOR_KEYWORD UPDATE_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:734:69: FOR_KEYWORD UPDATE_KEYWORD
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred229_PL_SQL7526); if (state.failed) return ;
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred229_PL_SQL7528); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred229_PL_SQL

    // $ANTLR start synpred230_PL_SQL
    public final void synpred230_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:35: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:35: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7540);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_PL_SQL

    // $ANTLR start synpred231_PL_SQL
    public final void synpred231_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7551);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_PL_SQL

    // $ANTLR start synpred232_PL_SQL
    public final void synpred232_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7563);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_PL_SQL

    // $ANTLR start synpred233_PL_SQL
    public final void synpred233_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:52: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:52: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred233_PL_SQL7577);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_PL_SQL

    // $ANTLR start synpred234_PL_SQL
    public final void synpred234_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:34: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:34: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred234_PL_SQL7589);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_PL_SQL

    // $ANTLR start synpred235_PL_SQL
    public final void synpred235_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:51: ( ON_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:51: ON_KEYWORD
        {
        match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred235_PL_SQL7593); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_PL_SQL

    // $ANTLR start synpred236_PL_SQL
    public final void synpred236_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:19: ( USING_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:19: USING_KEYWORD
        {
        match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_synpred236_PL_SQL7615); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_PL_SQL

    // $ANTLR start synpred237_PL_SQL
    public final void synpred237_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:35: ( WHEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:35: WHEN_KEYWORD
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred237_PL_SQL7619); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_PL_SQL

    // $ANTLR start synpred238_PL_SQL
    public final void synpred238_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:50: ( THEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:50: THEN_KEYWORD
        {
        match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_synpred238_PL_SQL7623); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_PL_SQL

    // $ANTLR start synpred239_PL_SQL
    public final void synpred239_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:65: ( INSERT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:65: INSERT_KEYWORD
        {
        match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_synpred239_PL_SQL7627); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_PL_SQL

    // $ANTLR start synpred240_PL_SQL
    public final void synpred240_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:741:19: ( UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:741:19: UPDATE_KEYWORD
        {
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred240_PL_SQL7649); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_PL_SQL

    // $ANTLR start synpred242_PL_SQL
    public final void synpred242_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:51: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:51: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred242_PL_SQL7663);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_PL_SQL

    // $ANTLR start synpred243_PL_SQL
    public final void synpred243_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:62: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:62: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred243_PL_SQL7685);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_PL_SQL

    // $ANTLR start synpred244_PL_SQL
    public final void synpred244_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred244_PL_SQL7697);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_PL_SQL

    // $ANTLR start synpred245_PL_SQL
    public final void synpred245_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:35: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:35: expression
        {
        pushFollow(FOLLOW_expression_in_synpred245_PL_SQL7719);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_PL_SQL

    // $ANTLR start synpred252_PL_SQL
    public final void synpred252_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:78: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:78: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred252_PL_SQL7859);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_PL_SQL

    // $ANTLR start synpred255_PL_SQL
    public final void synpred255_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:23: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
        {
        pushFollow(FOLLOW_expression_in_synpred255_PL_SQL7930);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
        int alt282=2;
        int LA282_0 = input.LA(1);

        if ( (LA282_0==229) ) {
            alt282=1;
        }
        else if ( (LA282_0==LOOP_KEYWORD) ) {
            alt282=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 282, 0, input);

            throw nvae;
        }
        switch (alt282) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:36: for_loop_statement_part
                {
                pushFollow(FOLLOW_for_loop_statement_part_in_synpred255_PL_SQL7933);
                for_loop_statement_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:62: cursor_for_loop_statement1
                {
                pushFollow(FOLLOW_cursor_for_loop_statement1_in_synpred255_PL_SQL7937);
                cursor_for_loop_statement1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred255_PL_SQL

    // $ANTLR start synpred256_PL_SQL
    public final void synpred256_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:33: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:33: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred256_PL_SQL8007);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_PL_SQL

    // $ANTLR start synpred257_PL_SQL
    public final void synpred257_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:29: ( simple_case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:29: simple_case_statement_expression
        {
        pushFollow(FOLLOW_simple_case_statement_expression_in_synpred257_PL_SQL8015);
        simple_case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_PL_SQL

    // $ANTLR start synpred262_PL_SQL
    public final void synpred262_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred262_PL_SQL8130); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_PL_SQL

    // $ANTLR start synpred263_PL_SQL
    public final void synpred263_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred263_PL_SQL8133);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_PL_SQL

    // $ANTLR start synpred268_PL_SQL
    public final void synpred268_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred268_PL_SQL8282); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_PL_SQL

    // $ANTLR start synpred269_PL_SQL
    public final void synpred269_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred269_PL_SQL8285);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_PL_SQL

    // $ANTLR start synpred270_PL_SQL
    public final void synpred270_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:39: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:39: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred270_PL_SQL8368);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_PL_SQL

    // $ANTLR start synpred271_PL_SQL
    public final void synpred271_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:52: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:52: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred271_PL_SQL8372); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred271_PL_SQL8374);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_PL_SQL

    // $ANTLR start synpred279_PL_SQL
    public final void synpred279_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:31: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:31: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8573); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_PL_SQL

    // $ANTLR start synpred281_PL_SQL
    public final void synpred281_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:58: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:58: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:58: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:59: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred281_PL_SQL8582); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred281_PL_SQL8584); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred281_PL_SQL

    // $ANTLR start synpred282_PL_SQL
    public final void synpred282_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:22: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:22: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred282_PL_SQL8610); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_PL_SQL

    // $ANTLR start synpred284_PL_SQL
    public final void synpred284_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:49: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:49: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:49: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:50: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred284_PL_SQL8619); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred284_PL_SQL8621); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred284_PL_SQL

    // $ANTLR start synpred286_PL_SQL
    public final void synpred286_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:31: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:31: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred286_PL_SQL8637);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_PL_SQL

    // $ANTLR start synpred287_PL_SQL
    public final void synpred287_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:44: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:44: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred287_PL_SQL8641); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred287_PL_SQL8643);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_PL_SQL

    // $ANTLR start synpred294_PL_SQL
    public final void synpred294_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:52: ( open_params )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:52: open_params
        {
        pushFollow(FOLLOW_open_params_in_synpred294_PL_SQL8883);
        open_params();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_PL_SQL

    // $ANTLR start synpred298_PL_SQL
    public final void synpred298_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:19: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred298_PL_SQL8904); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:31: ( select_statement | STRING | universal_identifier )
        int alt290=3;
        switch ( input.LA(1) ) {
        case SELECT_KEYWORD:
            {
            alt290=1;
            }
            break;
        case STRING:
            {
            alt290=2;
            }
            break;
        case IDENTIFIER:
        case EXT_IDENTIFIER:
        case INTERVAL_KEYWORD:
        case RESULT_KEYWORD:
            {
            alt290=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 290, 0, input);

            throw nvae;
        }

        switch (alt290) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:32: select_statement
                {
                pushFollow(FOLLOW_select_statement_in_synpred298_PL_SQL8907);
                select_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:51: STRING
                {
                match(input,STRING,FOLLOW_STRING_in_synpred298_PL_SQL8911); if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:60: universal_identifier
                {
                pushFollow(FOLLOW_universal_identifier_in_synpred298_PL_SQL8915);
                universal_identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:82: ( using_clause )?
        int alt291=2;
        int LA291_0 = input.LA(1);

        if ( (LA291_0==USING_KEYWORD) ) {
            alt291=1;
        }
        switch (alt291) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred298_PL_SQL8918);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred298_PL_SQL

    // $ANTLR start synpred302_PL_SQL
    public final void synpred302_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:37: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred302_PL_SQL8956); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:41: ( '+' | '-' )?
        int alt292=2;
        int LA292_0 = input.LA(1);

        if ( ((LA292_0>=214 && LA292_0<=215)) ) {
            alt292=1;
        }
        switch (alt292) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred302_PL_SQL8965); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred302_PL_SQL8967); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_PL_SQL

    // $ANTLR start synpred307_PL_SQL
    public final void synpred307_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:25: ( ( identifier data_type ( variable_declaration_part )? ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:25: ( identifier data_type ( variable_declaration_part )? )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:25: ( identifier data_type ( variable_declaration_part )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:26: identifier data_type ( variable_declaration_part )?
        {
        pushFollow(FOLLOW_identifier_in_synpred307_PL_SQL9069);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred307_PL_SQL9071);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:24: ( variable_declaration_part )?
        int alt293=2;
        int LA293_0 = input.LA(1);

        if ( (LA293_0==DEFAULT_KEYWORD||LA293_0==NOT_OPERATOR||LA293_0==230) ) {
            alt293=1;
        }
        switch (alt293) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                {
                pushFollow(FOLLOW_variable_declaration_part_in_synpred307_PL_SQL9097);
                variable_declaration_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred307_PL_SQL

    // $ANTLR start synpred308_PL_SQL
    public final void synpred308_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
        {
        pushFollow(FOLLOW_identifier_in_synpred308_PL_SQL9115);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_synpred308_PL_SQL9117); if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred308_PL_SQL9119);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variable_declaration_part_in_synpred308_PL_SQL9145);
        variable_declaration_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred308_PL_SQL

    // $ANTLR start synpred311_PL_SQL
    public final void synpred311_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:11: ( ( identifier EXCEPTION_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:11: ( identifier EXCEPTION_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:11: ( identifier EXCEPTION_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:12: identifier EXCEPTION_KEYWORD
        {
        pushFollow(FOLLOW_identifier_in_synpred311_PL_SQL9183);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_synpred311_PL_SQL9185); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred311_PL_SQL

    // $ANTLR start synpred325_PL_SQL
    public final void synpred325_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:31: ( interval_year_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:31: interval_year_type
        {
        pushFollow(FOLLOW_interval_year_type_in_synpred325_PL_SQL9359);
        interval_year_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_PL_SQL

    // $ANTLR start synpred326_PL_SQL
    public final void synpred326_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:52: ( interval_day_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:52: interval_day_type
        {
        pushFollow(FOLLOW_interval_day_type_in_synpred326_PL_SQL9363);
        interval_day_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_PL_SQL

    // $ANTLR start synpred328_PL_SQL
    public final void synpred328_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:13: ( ( ( REF_KEYWORD )? universal_identifier ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:13: ( ( REF_KEYWORD )? universal_identifier )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:13: ( ( REF_KEYWORD )? universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:14: ( REF_KEYWORD )? universal_identifier
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:14: ( REF_KEYWORD )?
        int alt296=2;
        int LA296_0 = input.LA(1);

        if ( (LA296_0==REF_KEYWORD) ) {
            alt296=1;
        }
        switch (alt296) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                {
                match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_synpred328_PL_SQL9381); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_universal_identifier_in_synpred328_PL_SQL9384);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred328_PL_SQL

    // $ANTLR start synpred333_PL_SQL
    public final void synpred333_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:40: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred333_PL_SQL9404); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:44: ( '+' )?
        int alt297=2;
        int LA297_0 = input.LA(1);

        if ( (LA297_0==214) ) {
            alt297=1;
        }
        switch (alt297) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred333_PL_SQL9406); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred333_PL_SQL9409); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:65: ( CHAR_TYPE | BYTE_TYPE )?
        int alt298=2;
        int LA298_0 = input.LA(1);

        if ( ((LA298_0>=CHAR_TYPE && LA298_0<=BYTE_TYPE)) ) {
            alt298=1;
        }
        switch (alt298) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred333_PL_SQL9420); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_PL_SQL

    // $ANTLR start synpred357_PL_SQL
    public final void synpred357_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:25: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:25: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred357_PL_SQL9889);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_PL_SQL

    // $ANTLR start synpred383_PL_SQL
    public final void synpred383_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:24: ( unary_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:24: unary_op
        {
        pushFollow(FOLLOW_unary_op_in_synpred383_PL_SQL10069);
        unary_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_PL_SQL

    // $ANTLR start synpred384_PL_SQL
    public final void synpred384_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:51: ( postfix_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:51: postfix_op
        {
        pushFollow(FOLLOW_postfix_op_in_synpred384_PL_SQL10074);
        postfix_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_PL_SQL

    // $ANTLR start synpred385_PL_SQL
    public final void synpred385_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:74: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:74: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred385_PL_SQL10081);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_PL_SQL

    // $ANTLR start synpred386_PL_SQL
    public final void synpred386_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:64: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:64: operator ( universal_expression | ( '(' select_statement ')' ) )
        {
        pushFollow(FOLLOW_operator_in_synpred386_PL_SQL10078);
        operator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:73: ( universal_expression | ( '(' select_statement ')' ) )
        int alt301=2;
        int LA301_0 = input.LA(1);

        if ( (LA301_0==NUMBER_UNSIGNED||LA301_0==STRING||(LA301_0>=IDENTIFIER && LA301_0<=EXT_IDENTIFIER)||LA301_0==NULL_KEYWORD||(LA301_0>=TRUE_KEYWORD && LA301_0<=FALSE_KEYWORD)||LA301_0==INTERVAL_KEYWORD||LA301_0==REPLACE_KEYWORD||LA301_0==IN_KEYWORD||LA301_0==CASE_KEYWORD||(LA301_0>=SQLCODE_KEYWORD && LA301_0<=SQLERRM_KEYWORD)||LA301_0==RESULT_KEYWORD||LA301_0==NOT_OPERATOR||(LA301_0>=214 && LA301_0<=215)) ) {
            alt301=1;
        }
        else if ( (LA301_0==LPAREN) ) {
            int LA301_2 = input.LA(2);

            if ( (synpred385_PL_SQL()) ) {
                alt301=1;
            }
            else if ( (true) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 301, 0, input);

            throw nvae;
        }
        switch (alt301) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:74: universal_expression
                {
                pushFollow(FOLLOW_universal_expression_in_synpred386_PL_SQL10081);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:97: ( '(' select_statement ')' )
                {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:97: ( '(' select_statement ')' )
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:98: '(' select_statement ')'
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred386_PL_SQL10086); if (state.failed) return ;
                pushFollow(FOLLOW_select_statement_in_synpred386_PL_SQL10088);
                select_statement();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred386_PL_SQL10090); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred386_PL_SQL

    // $ANTLR start synpred394_PL_SQL
    public final void synpred394_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:58: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:58: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred394_PL_SQL10193);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_PL_SQL

    // $ANTLR start synpred395_PL_SQL
    public final void synpred395_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:36: ( call_statement_param ( in_notin_expression )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:36: call_statement_param ( in_notin_expression )?
        {
        pushFollow(FOLLOW_call_statement_param_in_synpred395_PL_SQL10190);
        call_statement_param();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:57: ( in_notin_expression )?
        int alt302=2;
        int LA302_0 = input.LA(1);

        if ( (LA302_0==IN_KEYWORD||LA302_0==NOT_OPERATOR) ) {
            alt302=1;
        }
        switch (alt302) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:58: in_notin_expression
                {
                pushFollow(FOLLOW_in_notin_expression_in_synpred395_PL_SQL10193);
                in_notin_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred395_PL_SQL

    // $ANTLR start synpred405_PL_SQL
    public final void synpred405_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:61: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:61: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred405_PL_SQL10303);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_PL_SQL

    // $ANTLR start synpred408_PL_SQL
    public final void synpred408_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:24: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred408_PL_SQL10313); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:29: ( universal_expression ( ',' universal_expression )* )?
        int alt307=2;
        int LA307_0 = input.LA(1);

        if ( (LA307_0==NUMBER_UNSIGNED||LA307_0==STRING||(LA307_0>=IDENTIFIER && LA307_0<=EXT_IDENTIFIER)||LA307_0==NULL_KEYWORD||(LA307_0>=TRUE_KEYWORD && LA307_0<=FALSE_KEYWORD)||LA307_0==INTERVAL_KEYWORD||LA307_0==REPLACE_KEYWORD||LA307_0==IN_KEYWORD||LA307_0==CASE_KEYWORD||(LA307_0>=SQLCODE_KEYWORD && LA307_0<=SQLERRM_KEYWORD)||LA307_0==RESULT_KEYWORD||LA307_0==LPAREN||LA307_0==NOT_OPERATOR||(LA307_0>=214 && LA307_0<=215)) ) {
            alt307=1;
        }
        switch (alt307) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:30: universal_expression ( ',' universal_expression )*
                {
                pushFollow(FOLLOW_universal_expression_in_synpred408_PL_SQL10316);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:51: ( ',' universal_expression )*
                loop306:
                do {
                    int alt306=2;
                    int LA306_0 = input.LA(1);

                    if ( (LA306_0==COMMA) ) {
                        alt306=1;
                    }


                    switch (alt306) {
                	case 1 :
                	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:868:52: ',' universal_expression
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred408_PL_SQL10319); if (state.failed) return ;
                	    pushFollow(FOLLOW_universal_expression_in_synpred408_PL_SQL10321);
                	    universal_expression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop306;
                    }
                } while (true);


                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred408_PL_SQL10328); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred408_PL_SQL

    // $ANTLR start synpred417_PL_SQL
    public final void synpred417_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:17: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred417_PL_SQL10446); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:21: ( '+' )?
        int alt309=2;
        int LA309_0 = input.LA(1);

        if ( (LA309_0==214) ) {
            alt309=1;
        }
        switch (alt309) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred417_PL_SQL10448); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10451); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
        int alt311=2;
        int LA311_0 = input.LA(1);

        if ( (LA311_0==COMMA) ) {
            alt311=1;
        }
        switch (alt311) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred417_PL_SQL10454); if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:875:49: ( '+' | '-' )?
                int alt310=2;
                int LA310_0 = input.LA(1);

                if ( ((LA310_0>=214 && LA310_0<=215)) ) {
                    alt310=1;
                }
                switch (alt310) {
                    case 1 :
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                        {
                        if ( (input.LA(1)>=214 && input.LA(1)<=215) ) {
                            input.consume();
                            state.errorRecovery=false;state.failed=false;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }

                match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10465); if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred417_PL_SQL10469); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_PL_SQL

    // $ANTLR start synpred419_PL_SQL
    public final void synpred419_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:17: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred419_PL_SQL10484); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:878:21: ( '+' )?
        int alt312=2;
        int LA312_0 = input.LA(1);

        if ( (LA312_0==214) ) {
            alt312=1;
        }
        switch (alt312) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred419_PL_SQL10486); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred419_PL_SQL10489); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred419_PL_SQL10491); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_PL_SQL

    // $ANTLR start synpred421_PL_SQL
    public final void synpred421_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:22: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred421_PL_SQL10505); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:880:26: ( '+' )?
        int alt313=2;
        int LA313_0 = input.LA(1);

        if ( (LA313_0==214) ) {
            alt313=1;
        }
        switch (alt313) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred421_PL_SQL10507); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred421_PL_SQL10510); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred421_PL_SQL10512); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_PL_SQL

    // $ANTLR start synpred425_PL_SQL
    public final void synpred425_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:21: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred425_PL_SQL10551); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:886:25: ( '+' )?
        int alt315=2;
        int LA315_0 = input.LA(1);

        if ( (LA315_0==214) ) {
            alt315=1;
        }
        switch (alt315) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred425_PL_SQL10553); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred425_PL_SQL10556); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred425_PL_SQL10558); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_PL_SQL

    // $ANTLR start synpred429_PL_SQL
    public final void synpred429_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:18: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred429_PL_SQL10597); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:892:22: ( '+' )?
        int alt317=2;
        int LA317_0 = input.LA(1);

        if ( (LA317_0==214) ) {
            alt317=1;
        }
        switch (alt317) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,214,FOLLOW_214_in_synpred429_PL_SQL10599); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred429_PL_SQL10602); if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred429_PL_SQL10604); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_PL_SQL

    // Delegated rules

    public final boolean synpred425_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA225 dfa225 = new DFA225(this);
    static final String DFA117_eotS =
        "\22\uffff";
    static final String DFA117_eofS =
        "\22\uffff";
    static final String DFA117_minS =
        "\1\4\21\uffff";
    static final String DFA117_maxS =
        "\1\u00d7\21\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21";
    static final String DFA117_specialS =
        "\22\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\1\6\uffff\1\1\14\uffff\2\1\12\uffff\1\1\4\uffff\2\1\5\uffff"+
            "\1\1\6\uffff\1\1\2\uffff\1\7\1\1\12\uffff\1\10\2\uffff\1\2\1"+
            "\3\1\4\1\5\1\uffff\1\6\3\uffff\1\11\1\20\1\uffff\1\1\1\12\7"+
            "\uffff\1\6\1\uffff\1\13\1\uffff\1\6\1\14\1\uffff\1\15\4\uffff"+
            "\1\16\1\uffff\1\17\6\uffff\3\6\1\21\4\uffff\2\6\1\uffff\1\6"+
            "\5\uffff\2\1\1\6\32\uffff\1\1\15\uffff\1\1\7\uffff\1\1\36\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "708:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );";
        }
    }
    static final String DFA118_eotS =
        "\13\uffff";
    static final String DFA118_eofS =
        "\13\uffff";
    static final String DFA118_minS =
        "\1\116\12\uffff";
    static final String DFA118_maxS =
        "\1\u0086\12\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA118_specialS =
        "\13\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\1\17\uffff\1\2\3\uffff\1\3\20\uffff\1\5\1\6\1\7\5\uffff"+
            "\1\10\1\11\1\uffff\1\12\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "714:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );";
        }
    }
    static final String DFA120_eotS =
        "\67\uffff";
    static final String DFA120_eofS =
        "\67\uffff";
    static final String DFA120_minS =
        "\1\4\1\uffff\1\0\5\uffff\1\0\7\uffff\1\0\2\uffff\1\0\1\uffff\1"+
        "\0\1\uffff\1\0\3\uffff\1\0\3\uffff\1\0\3\uffff\1\0\3\uffff\1\0\4"+
        "\uffff\1\0\4\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA120_maxS =
        "\1\u00e4\1\uffff\1\0\5\uffff\1\0\7\uffff\1\0\2\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\3\uffff\1\0\3\uffff\1\0\3\uffff\1\0\3\uffff\1\0"+
        "\4\uffff\1\0\4\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\46\1\uffff\1\32\1\45\1\11\1\1\1\2\1\uffff\1\41\1\44"+
        "\1\16\1\42\1\34\1\15\1\4\1\uffff\1\31\1\43\1\uffff\1\5\1\uffff\1"+
        "\3\1\uffff\1\6\1\36\1\45\1\uffff\1\25\1\3\1\23\1\uffff\1\47\1\20"+
        "\1\24\1\uffff\1\33\1\12\1\35\1\uffff\1\26\1\22\1\21\1\13\1\uffff"+
        "\1\30\1\10\1\7\1\27\1\uffff\1\37\1\40\1\uffff\1\17\1\14";
    static final String DFA120_specialS =
        "\2\uffff\1\0\5\uffff\1\1\7\uffff\1\2\2\uffff\1\3\1\uffff\1\4\1"+
        "\uffff\1\5\3\uffff\1\6\3\uffff\1\7\3\uffff\1\10\3\uffff\1\11\4\uffff"+
        "\1\12\4\uffff\1\13\2\uffff\1\14\2\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\47\1\15\1\46\4\uffff\1\2\1\45\12\uffff\1\7\2\54\1\6\1\uffff"+
            "\1\43\7\uffff\1\10\4\uffff\2\32\1\uffff\1\52\3\uffff\1\54\3"+
            "\uffff\1\61\2\uffff\1\33\1\uffff\1\57\1\uffff\1\23\22\uffff"+
            "\1\12\1\60\1\uffff\1\14\3\uffff\1\20\1\uffff\1\51\1\22\1\uffff"+
            "\1\41\3\uffff\1\12\3\uffff\1\12\3\uffff\1\17\1\uffff\1\53\1"+
            "\66\6\uffff\1\56\1\5\1\uffff\3\12\4\uffff\1\16\2\12\1\uffff"+
            "\1\64\5\uffff\2\32\1\12\1\42\13\uffff\1\13\15\uffff\1\54\2\uffff"+
            "\1\36\12\uffff\1\37\7\uffff\1\27\31\uffff\1\1\2\uffff\1\35\1"+
            "\uffff\2\25\15\35",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "720:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_2 = input.LA(1);

                         
                        int index120_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_PL_SQL()) ) {s = 3;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_8 = input.LA(1);

                         
                        int index120_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_PL_SQL()) ) {s = 9;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_16 = input.LA(1);

                         
                        int index120_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred212_PL_SQL()) ) {s = 17;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_PL_SQL()) ) {s = 20;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA120_21 = input.LA(1);

                         
                        int index120_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_PL_SQL()) ) {s = 22;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA120_23 = input.LA(1);

                         
                        int index120_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_PL_SQL()) ) {s = 24;}

                        else if ( (synpred217_PL_SQL()) ) {s = 25;}

                        else if ( (synpred224_PL_SQL()) ) {s = 4;}

                         
                        input.seek(index120_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA120_27 = input.LA(1);

                         
                        int index120_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_PL_SQL()) ) {s = 28;}

                        else if ( (synpred224_PL_SQL()) ) {s = 26;}

                         
                        input.seek(index120_27);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA120_31 = input.LA(1);

                         
                        int index120_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_PL_SQL()) ) {s = 26;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index120_31);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA120_35 = input.LA(1);

                         
                        int index120_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_PL_SQL()) ) {s = 29;}

                        else if ( (synpred214_PL_SQL()) ) {s = 36;}

                         
                        input.seek(index120_35);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA120_39 = input.LA(1);

                         
                        int index120_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_PL_SQL()) ) {s = 40;}

                        else if ( (synpred224_PL_SQL()) ) {s = 26;}

                         
                        input.seek(index120_39);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA120_44 = input.LA(1);

                         
                        int index120_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_PL_SQL()) ) {s = 45;}

                        else if ( (synpred224_PL_SQL()) ) {s = 26;}

                         
                        input.seek(index120_44);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA120_49 = input.LA(1);

                         
                        int index120_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_PL_SQL()) ) {s = 50;}

                        else if ( (synpred219_PL_SQL()) ) {s = 51;}

                         
                        input.seek(index120_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA120_52 = input.LA(1);

                         
                        int index120_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_PL_SQL()) ) {s = 53;}

                        else if ( (synpred223_PL_SQL()) ) {s = 10;}

                         
                        input.seek(index120_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\21\uffff";
    static final String DFA127_eofS =
        "\21\uffff";
    static final String DFA127_minS =
        "\1\4\1\0\2\uffff\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff";
    static final String DFA127_maxS =
        "\1\u00e4\1\0\2\uffff\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff";
    static final String DFA127_acceptS =
        "\2\uffff\1\2\1\10\1\uffff\1\5\1\10\1\uffff\1\3\1\uffff\1\1\1\uffff"+
        "\1\6\1\uffff\1\7\1\uffff\1\4";
    static final String DFA127_specialS =
        "\1\uffff\1\0\2\uffff\1\1\2\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1"+
        "\uffff\1\5\1\uffff\1\6\1\uffff}>";
    static final String[] DFA127_transitionS = {
            "\3\11\4\uffff\2\11\12\uffff\4\11\1\6\1\11\1\uffff\3\6\1\uffff"+
            "\1\17\1\4\1\11\4\uffff\2\11\1\uffff\1\11\3\uffff\1\11\3\uffff"+
            "\1\11\2\uffff\1\11\1\uffff\1\11\1\6\1\11\12\uffff\2\6\1\uffff"+
            "\4\6\1\uffff\2\11\1\uffff\1\11\2\6\1\uffff\1\11\1\6\2\11\1\uffff"+
            "\1\11\3\uffff\1\11\1\uffff\1\6\1\uffff\1\11\1\6\1\uffff\1\6"+
            "\1\11\1\7\2\11\1\6\1\uffff\1\6\3\uffff\2\11\1\uffff\1\13\2\11"+
            "\1\6\3\uffff\3\11\1\uffff\1\11\5\uffff\2\11\1\15\1\11\4\uffff"+
            "\1\1\6\uffff\1\11\15\uffff\1\11\2\uffff\1\11\12\uffff\1\11\1"+
            "\6\6\uffff\1\11\31\uffff\1\11\1\6\1\uffff\1\11\1\uffff\17\11",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()+ loopback of 739:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_4 = input.LA(1);

                         
                        int index127_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index127_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_7 = input.LA(1);

                         
                        int index127_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_PL_SQL()) ) {s = 8;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index127_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 10;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA127_11 = input.LA(1);

                         
                        int index127_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 10;}

                        else if ( (synpred239_PL_SQL()) ) {s = 12;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index127_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA127_13 = input.LA(1);

                         
                        int index127_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 10;}

                        else if ( (synpred240_PL_SQL()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index127_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA127_15 = input.LA(1);

                         
                        int index127_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_PL_SQL()) ) {s = 16;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index127_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA189_eotS =
        "\15\uffff";
    static final String DFA189_eofS =
        "\15\uffff";
    static final String DFA189_minS =
        "\1\14\5\uffff\1\0\4\uffff\1\0\1\uffff";
    static final String DFA189_maxS =
        "\1\u00a1\5\uffff\1\0\4\uffff\1\0\1\uffff";
    static final String DFA189_acceptS =
        "\1\uffff\1\3\1\6\1\2\1\5\1\11\1\uffff\1\7\1\10\1\12\1\4\1\uffff"+
        "\1\1";
    static final String DFA189_specialS =
        "\6\uffff\1\0\4\uffff\1\1\1\uffff}>";
    static final String[] DFA189_transitionS = {
            "\1\14\1\3\1\1\2\12\1\uffff\1\4\1\2\4\uffff\2\13\26\uffff\1"+
            "\6\56\uffff\1\5\101\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "822:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_6 = input.LA(1);

                         
                        int index189_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_PL_SQL()) ) {s = 7;}

                        else if ( (synpred326_PL_SQL()) ) {s = 8;}

                        else if ( (synpred328_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index189_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA189_11 = input.LA(1);

                         
                        int index189_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index189_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA215_eotS =
        "\26\uffff";
    static final String DFA215_eofS =
        "\26\uffff";
    static final String DFA215_minS =
        "\1\5\25\uffff";
    static final String DFA215_maxS =
        "\1\u00e7\25\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String DFA215_specialS =
        "\26\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\22\1\23\112\uffff\1\24\37\uffff\1\25\105\uffff\1\25\34\uffff"+
            "\1\4\1\uffff\1\1\1\2\1\3\1\5\1\6\1\16\1\17\1\20\1\21\1\11\1"+
            "\12\1\13\1\14\1\15\2\uffff\1\7\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "853:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );";
        }
    }
    static final String DFA225_eotS =
        "\12\uffff";
    static final String DFA225_eofS =
        "\12\uffff";
    static final String DFA225_minS =
        "\1\4\11\uffff";
    static final String DFA225_maxS =
        "\1\u00b7\11\uffff";
    static final String DFA225_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA225_specialS =
        "\12\uffff}>";
    static final String[] DFA225_transitionS = {
            "\1\3\6\uffff\1\5\14\uffff\2\10\12\uffff\1\6\4\uffff\1\1\1\2"+
            "\5\uffff\1\10\6\uffff\1\10\3\uffff\1\4\31\uffff\1\7\56\uffff"+
            "\2\10\33\uffff\1\10\15\uffff\1\11\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA225_eot = DFA.unpackEncodedString(DFA225_eotS);
    static final short[] DFA225_eof = DFA.unpackEncodedString(DFA225_eofS);
    static final char[] DFA225_min = DFA.unpackEncodedStringToUnsignedChars(DFA225_minS);
    static final char[] DFA225_max = DFA.unpackEncodedStringToUnsignedChars(DFA225_maxS);
    static final short[] DFA225_accept = DFA.unpackEncodedString(DFA225_acceptS);
    static final short[] DFA225_special = DFA.unpackEncodedString(DFA225_specialS);
    static final short[][] DFA225_transition;

    static {
        int numStates = DFA225_transitionS.length;
        DFA225_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA225_transition[i] = DFA.unpackEncodedString(DFA225_transitionS[i]);
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = DFA225_eot;
            this.eof = DFA225_eof;
            this.min = DFA225_min;
            this.max = DFA225_max;
            this.accept = DFA225_accept;
            this.special = DFA225_special;
            this.transition = DFA225_transition;
        }
        public String getDescription() {
            return "860:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );";
        }
    }
 

    public static final BitSet FOLLOW_source_element_in_grammar_def4695 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_grammar_def4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_source_element4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_replace_part_in_source_element4731 = new BitSet(new long[]{0x0100010000000000L,0x0080000000000020L,0x0000000000000100L});
    public static final BitSet FOLLOW_function_declaration_in_source_element4753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_source_element4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_declaration_in_source_element4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trigger_declaration_in_source_element4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_source_element4788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_universal_identifier4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_universal_identifier4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_label4824 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_label4826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_label4828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_KEYWORD_in_create_replace_part4835 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_create_replace_part4838 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_create_replace_part4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_as_is_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4860 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4863 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4873 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameter_declaration4884 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4886 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4888 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4891 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0001000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4894 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4896 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration4925 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4927 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4929 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4932 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0001000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4935 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4937 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameter_declaration4943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_function_spec4950 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_name_in_function_spec4968 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_function_spec4970 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_function_spec4989 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_function_spec4991 = new BitSet(new long[]{0x4000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_invoker_clause_in_function_spec4993 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_function_spec_add2_in_function_spec4997 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_universal_identifier_in_function_name5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_function_name5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_KEYWORD_in_invoker_clause5017 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_invoker_clause5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_spec_add20 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration5051 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration5053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEPARATOR_in_function_declaration_in_pck_body_choose5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration_in_pck_body_choose5095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration_in_pck_body5102 = new BitSet(new long[]{0x0210000008000000L});
    public static final BitSet FOLLOW_function_declaration_in_pck_body_choose_in_function_declaration_in_pck_body5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5163 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec5165 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_parameter_declaration_in_procedure_spec5167 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_invoker_clause_in_procedure_spec5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_procedure_name5195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_procedure_name5199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration5206 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_procedure_declaration5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration_in_pck_body5247 = new BitSet(new long[]{0x0210000008000000L});
    public static final BitSet FOLLOW_function_declaration_in_pck_body_choose_in_procedure_declaration_in_pck_body5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_function_procedure_body5288 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_function_procedure_body5291 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_function_procedure_body5296 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_function_procedure_body5300 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_function_procedure_body5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5312 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_package_declaration5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5330 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_package_body_in_package_declaration5332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_spec_name_in_package_spec5348 = new BitSet(new long[]{0x4210000000000000L});
    public static final BitSet FOLLOW_invoker_clause_in_package_spec5350 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_spec5353 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_spec5371 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec2_in_package_spec5375 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_spec5395 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec5397 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_package_spec5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_spec25411 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec25413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_spec25444 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec25446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec_name5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_spec_name5467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_package_body5474 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_body_name_in_package_body5476 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_body5478 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_body5496 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_pck_body_in_package_body5500 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_pck_body_in_package_body5504 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_package_body5524 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_package_body5527 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_body5548 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body5550 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_body5553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_package_body5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body_name5564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_body_name5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5575 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_declaration5578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_trigger_type_in_trigger_declaration5580 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0080800200700070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_follows_part_in_trigger_declaration5582 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0080800200600070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_trigger_part_in_trigger_declaration5585 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_anonymous_block_in_trigger_declaration5609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_trigger_name5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_trigger_name5620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_KEYWORD_in_follows_part5627 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_follows_part5629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_trigger_part5636 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_trigger_part5646 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_trigger_part5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_KEYWORD_in_trigger_type5658 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_KEYWORD_in_trigger_type5687 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTEAD_KEYWORD_in_trigger_type5716 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_trigger_type5718 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_trigger_type5740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5747 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger5749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_non_dml_trigger5760 = new BitSet(new long[]{0x0001000001000040L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_non_dml_trigger5762 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_non_dml_trigger5767 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_non_dml_trigger5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_dml_event_clause5778 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_dml_event_clause5782 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5808 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5810 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_dml_event_clause5835 = new BitSet(new long[]{0x0000000000000000L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5838 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_part_in_dml_event_clause5863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_dml_event_clause5865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_dml_event_clause5889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_EACH_KEYWORD_in_dml_event_clause5891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_dml_event_clause5893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5902 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_factor5905 = new BitSet(new long[]{0x0001000013000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_clause_factor5907 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_dml_event_clause_part5917 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200002000L});
    public static final BitSet FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5923 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_dml_event_clause_part5925 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_part5927 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_part5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_set_in_referencing_clause5943 = new BitSet(new long[]{0x0201000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_referencing_clause5976 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_OLD_KEYWORD_in_referencing_clause5980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_NEW_KEYWORD_in_referencing_clause5984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_identifier_in_referencing_clause5988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration6000 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_type_declaration6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration6054 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_type_body_declaration_in_type_declaration6056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_name_in_type_spec_declaration6072 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_oid_part_in_type_spec_declaration6074 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_invoker_clause_in_type_spec_declaration6077 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_spec_types_in_type_spec_declaration6080 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_spec_declaration6106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_type_spec_declaration6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_spec_name6117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_spec_name6121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OID_KEYWORD_in_type_oid_part6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_type_oid_part6130 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_type_oid_part6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_type_oid_part6134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_type_spec_types6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_type_spec_types6146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_in_type_spec_types6150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_object_type6159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OBJECT_KEYWORD_in_object_type6161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008080000C000000L});
    public static final BitSet FOLLOW_UNDER_KEYWORD_in_object_type6167 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_object_type6169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008080000C000000L});
    public static final BitSet FOLLOW_object_type_part_in_object_type6187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x008000000C000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_object_type6209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000008000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type6214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_object_type6217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_object_type_part6226 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_object_type_part6229 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_object_type_part6231 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0081000EFC000000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part6233 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0081000EFC000000L});
    public static final BitSet FOLLOW_element_spec_in_object_type_part6239 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0081000CFC000000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0081000CFC000000L});
    public static final BitSet FOLLOW_RPAREN_in_object_type_part6246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_element_spec6253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec6258 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec6262 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec6266 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_COMMA_in_element_spec6269 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0080000CFC000000L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_clause6297 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause6299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_clause6301 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6303 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause6306 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6308 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_clause6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec6319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6327 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec6329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_spec6336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6342 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6344 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec6365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_spec6367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_constructor_spec_part6375 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6378 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part6380 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_constructor_spec_part6382 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6384 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_constructor_spec_part6413 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part6415 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec_part6418 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6420 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_spec_part6425 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6453 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_constructor_spec_part6455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_spec6464 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec6473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec6477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_inheritance_clauses6485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_set_in_inheritance_clauses6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_varray_type6505 = new BitSet(new long[]{0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_varray_type6507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_nested_table_type6514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_nested_table_type6516 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_nested_table_type6518 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_nested_table_type6520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_type_body_declaration6527 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_body_name_in_type_body_declaration6529 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_type_body_declaration6531 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_subprogram_declaration_in_type_body_declaration6559 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_declaration6563 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_COMMA_in_type_body_declaration6566 = new BitSet(new long[]{0x0100000080000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_type_body_declaration6572 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_body_declaration6598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_type_body_declaration6601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_body_name6609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_body_name6613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_declaration6620 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x00000000EC000000L});
    public static final BitSet FOLLOW_function_declaration_in_subprogram_declaration6655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_subprogram_declaration6659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprogram_declaration6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_declaration6671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6677 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6679 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_declaration6707 = new BitSet(new long[]{0x0210000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_declaration6709 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_constructor_declaration6712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration6719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6727 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_map_order_func_declaration6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_block6737 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_block6741 = new BitSet(new long[]{0x0D890713C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_exception_section_in_block6746 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_block6757 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_universal_identifier_in_block6759 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SEPARATOR_in_block6762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_block6773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_declare_section_in_anonymous_block6825 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_anonymous_block6828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_executable_section6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_section6839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_executable_case_section6848 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_statements_in_executable_case_section6852 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_SEPARATOR_in_executable_case_section6854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_case_section6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement6868 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_statements_in_statement6872 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_statement6874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statements6881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statements6885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statements6889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statements6906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_loop_statement_in_statements6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_statements6914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statements6931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statements6935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statements6939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_statements6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statements6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_statement_in_statements6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statements6968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_statements6985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statements6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_inline_statement_in_statements6993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_statements7010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_sql_statements7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_sql_statements7021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_sql_statements7025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_sql_statements7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_sql_statements7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_sql_statements7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_sql_statements7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_sql_statements7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_sql_statements7083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_statement_in_sql_statements7087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sql_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_sql_not_parsed7181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEYWORD_in_sql_not_parsed7185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_sql_not_parsed7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_sql_not_parsed7193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed7197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7201 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed7203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_sql_not_parsed7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_sql_not_parsed7226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed7230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_sql_not_parsed7234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_sql_not_parsed7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed7257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed7261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_sql_not_parsed7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_sql_not_parsed7284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_sql_not_parsed7288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_sql_not_parsed7292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_sql_not_parsed7296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_KEYWORD_in_sql_not_parsed7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sql_not_parsed7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_sql_not_parsed7354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_sql_not_parsed7373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_not_parsed7377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_sql_not_parsed7381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_sql_not_parsed7385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7410 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7416 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_sql_not_parsed7446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_sql_not_parsed7465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_sql_not_parsed7485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THE_REST_in_sql_not_parsed7489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_sql_not_parsed7494 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00818012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_sql_not_parsed7497 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00818012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_RPAREN_in_sql_not_parsed7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_KEYWORD_in_select_statement7512 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_select_statement7516 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_select_statement7520 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_select_statement7526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_select_statement7528 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_COMMIT_KEYWORD_in_commit_statement7538 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_commit_statement7540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_delete_statement7548 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_delete_statement7551 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_insert_statement7560 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_insert_statement7563 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_LOCK_KEYWORD_in_lock_table_statement7572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_lock_table_statement7574 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_lock_table_statement7577 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_MERGE_KEYWORD_in_merge_statement7586 = new BitSet(new long[]{0x0A91161C17801870L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_merge_statement7589 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_merge_statement7593 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_merge_statement7615 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_merge_statement7619 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_merge_statement7623 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_merge_statement7627 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_merge_statement7649 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00808012000810F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7658 = new BitSet(new long[]{0x0A93161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_rollback_statement7660 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_rollback_statement7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7671 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_savepoint_statement7673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_set_transaction_statement7680 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7682 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_set_transaction_statement7685 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_update_statement7694 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_sql_not_parsed_in_update_statement7697 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00808012000800F0L,0x0000001FFFD20000L});
    public static final BitSet FOLLOW_GOTO_KEYWORD_in_goto_statement7708 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_return_statement7717 = new BitSet(new long[]{0x0881061003000812L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_return_statement7719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7727 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_if_statement7729 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7731 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7734 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSIF_KEYWORD_in_if_statement7754 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_if_statement7756 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7758 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7761 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_if_statement7783 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7786 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_if_statement7807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7848 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_loop_statement7851 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_loop_statement7855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7857 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_loop_statement7859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_KEYWORD_in_while_loop_statement7886 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_while_loop_statement7888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_while_loop_statement7890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_for_loop_statement7897 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_for_loop_statement7899 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_for_loop_statement7901 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7903 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_for_loop_statement7933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_229_in_for_loop_statement_part7974 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement_part7976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_for_loop_statement_part7978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement17985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_for_loop_statement27992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_for_loop_statement27994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_for_loop_statement27996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement27998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_KEYWORD_in_raise_statement8005 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_raise_statement8007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_case_statement_expression8015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_expression_in_case_statement_expression8019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8026 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression8028 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression8056 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression8058 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression8060 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression8063 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression8094 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression8097 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_simple_case_statement_expression8128 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression8130 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_simple_case_statement_expression8133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8181 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression8208 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_searched_case_statement_expression8210 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression8212 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression8215 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression8246 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression8249 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_searched_case_statement_expression8280 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression8282 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_searched_case_statement_expression8285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_KEYWORD_in_close_statement8357 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_close_statement8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_KEYWORD_in_continue_statement8366 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_continue_statement8368 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_continue_statement8372 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_continue_statement8374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8383 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8385 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_execute_immediate_statement8387 = new BitSet(new long[]{0x0400000000000002L,0x040001C000000000L});
    public static final BitSet FOLLOW_set_in_execute_immediate_statement8419 = new BitSet(new long[]{0x0000000000000002L,0x000001C000000000L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate_statement8459 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8463 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate_statement8497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_into_clause8506 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8508 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_into_clause8511 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8513 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8522 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8524 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8526 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8556 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_bulk_collect_into_clause8559 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8561 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_using_clause8570 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8573 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8577 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8582 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8584 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_using_clause8589 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause8607 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8610 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8614 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8619 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8621 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_using_clause8626 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_EXIT_KEYWORD_in_exit_statement8635 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_exit_statement8637 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exit_statement8641 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_exit_statement8643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FETCH_KEYWORD_in_fetch_statement8652 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8654 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_fetch_statement8677 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_LIMIT_KEYWORD_in_fetch_statement8680 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_clause_in_fetch_statement8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_KEYWORD_in_forall_statement8698 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_forall_statement8700 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_forall_statement8702 = new BitSet(new long[]{0x0881061003000810L,0x0001800080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement8704 = new BitSet(new long[]{0x0000000000000000L,0x5838200440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SAVE_KEYWORD_in_forall_statement8726 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8728 = new BitSet(new long[]{0x0000000000000000L,0x5838000440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_sql_statements_in_forall_statement8732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_229_in_bounds_clause8742 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDICES_KEYWORD_in_bounds_clause8766 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8768 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8770 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8790 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8792 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_bounds_clause8794 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_bounds_clause8821 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8823 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8834 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_inline_statement8864 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8866 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_inline_statement8868 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_inline_statement8872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_KEYWORD_in_open_statement8879 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000800000000000L});
    public static final BitSet FOLLOW_open_params_in_open_statement8883 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_open_statement8904 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_open_statement8907 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_open_statement8911 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8915 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_open_statement8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_open_params8928 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_open_params8930 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_open_params8933 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_open_params8935 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_open_params8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sqlerrm_function8956 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_sqlerrm_function8958 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sqlerrm_function8967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8976 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_anonymous_block_declare_section9014 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_anonymous_block_declare_section9054 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_procedure_declaration_in_anonymous_block_declare_section9058 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration9069 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration9071 = new BitSet(new long[]{0x0000002008000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration9097 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration9115 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_variable_declaration9117 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration9119 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration9145 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subtype_datatype_in_variable_declaration9158 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_record_collection_datatype_in_variable_declaration9170 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration9183 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration9185 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_variable_declaration9208 = new BitSet(new long[]{0x0000000000000000L,0x2200000000110000L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration9211 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration9215 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration9226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_variable_declaration9228 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9230 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration9232 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_variable_declaration9236 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration9248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_variable_declaration9250 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9252 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration9255 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration9257 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_variable_declaration9261 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_cursor_datatype_in_variable_declaration9278 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_variable_declaration9289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_variable_declaration_part9297 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_variable_declaration_part9299 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_variable_declaration_part9303 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration_part9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variable_def_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_data_type9323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scale_types_in_data_type9327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_size_types_in_data_type9331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_types_in_data_type9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raw_type_in_data_type9339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_types_in_data_type9355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_data_type9359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_data_type9363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_data_type9381 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_data_type9384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_datatype_in_data_type9388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_char_types9395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_char_types9404 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_char_types9406 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_char_types9409 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_char_types9411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_char_types9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_type_in_timestamp_types9429 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_timestamp_types9432 = new BitSet(new long[]{0x0000600000000000L});
    public static final BitSet FOLLOW_LOCAL_KEYWORD_in_timestamp_types9434 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_TIME_KEYWORD_in_timestamp_types9437 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ZONE_KEYWORD_in_timestamp_types9439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9448 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_year_type_in_interval_year_type9450 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_year_type9452 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_MONTH_KEYWORD_in_interval_year_type9454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9461 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_day_type_in_interval_day_type9463 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_day_type9465 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_second_type_in_interval_day_type9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9474 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_subtype_datatype9476 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_subtype_datatype9478 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_subtype_datatype9480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_subtype_datatype9483 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_subtype_datatype9485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9495 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_record_collection_datatype9497 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_record_collection_datatype9499 = new BitSet(new long[]{0x0020000000000000L,0x0000000098800000L});
    public static final BitSet FOLLOW_record_datatype_in_record_collection_datatype9531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_table_datatype_in_record_collection_datatype9535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_record_collection_datatype9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_cursor_datatype_in_record_collection_datatype9571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_KEYWORD_in_record_datatype9579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_record_datatype9581 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9583 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_record_datatype9586 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9588 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_record_datatype9592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_field_declaration9600 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_record_field_declaration9602 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_record_field_declaration9604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9612 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_table_datatype9614 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9616 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_table_datatype9619 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_table_datatype9621 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9648 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_collection_table_datatype9650 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9667 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_collection_varray_datatype9702 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_collection_varray_datatype9704 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_collection_varray_datatype9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_varray_datatype9711 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_varray_datatype9713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9716 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9727 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9729 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9732 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_ref_cursor_datatype9734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9743 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_cursor_datatype9745 = new BitSet(new long[]{0x0410000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_cursor_parameter_declaration_in_cursor_datatype9747 = new BitSet(new long[]{0x0410000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_cursor_datatype9769 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_datatype9771 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_cursor_datatype9776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_datatype9778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_parameter_declaration9787 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9789 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_cursor_parameter_declaration9792 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9794 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_parameter_declaration9798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_parameter9806 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_cursor_parameter9808 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_parameter9811 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_def_part_in_cursor_parameter9814 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_cursor_parameter9816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_special_datatype9827 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_special_datatype9831 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_set_in_special_datatype9834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_expression9850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_in_notin_expression9858 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_in_notin_expression9861 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_in_notin_expression9889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_in_notin_expression9895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_in_notin_expression9897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_in_notin_expression9899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_operator9908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_operator9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_operator9916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_operator9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_operator9924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_operator9928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_230_in_operator9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_231_in_operator9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_operator9951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_operator9955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_operator9959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_operator9963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_operator9967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_operator9971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_operator9975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_operator9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_operator9983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_operator9998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_operator10002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_operator10017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_operator10023 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_operator10027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_postfix_op10051 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_postfix_op10053 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_postfix_op10056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_postfix_op10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_universal_expression10069 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_factor_in_universal_expression10072 = new BitSet(new long[]{0x0010000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000DFFFD00000L});
    public static final BitSet FOLLOW_postfix_op_in_universal_expression10074 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_operator_in_universal_expression10078 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_expression10081 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_LPAREN_in_universal_expression10086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_universal_expression10088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_universal_expression10090 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0080000000000000L,0x000000CFFFD00000L});
    public static final BitSet FOLLOW_TRUE_KEYWORD_in_universal_factor10102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_KEYWORD_in_universal_factor10106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_universal_factor10110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor10133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_universal_factor10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_universal_factor10160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_universal_factor10164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_in_universal_factor10187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_call_statement_param_in_universal_factor10190 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_universal_factor10221 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor10223 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_universal_factor10226 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor10228 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_universal_factor10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_factor_in_sub_identifier10241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sub_identifier10245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcode_function_in_sub_identifier10249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlerrm_function_in_sub_identifier10253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sub_identifier_factor10260 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x008000000000000FL});
    public static final BitSet FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor10263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor10267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor10295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor10299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_sub_identifier_factor10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_call_statement_param10313 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0081800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10316 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10319 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10321 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_call_statement_param10328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_call_statement_param10357 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10359 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10361 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10363 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10366 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10368 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10370 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10372 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_call_statement_param10377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_exception_section10386 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_section10389 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exception_handler10398 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10400 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_exception_handler10403 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10405 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_exception_handler10429 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_executable_section_in_exception_handler10432 = new BitSet(new long[]{0x0D89071143000812L,0x5878142FC06C5E60L,0x0080800200000070L,0x0000000000C40000L});
    public static final BitSet FOLLOW_SCALE_TYPES_in_scale_types10443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_scale_types10446 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_scale_types10448 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10451 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_scale_types10454 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_scale_types10456 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_scale_types10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_TYPES_in_size_types10480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_size_types10484 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_size_types10486 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_size_types10489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_size_types10491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_TYPE_in_raw_type10501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_raw_type10505 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_raw_type10507 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_raw_type10510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_raw_type10512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_TYPE_in_year_type10524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_year_type10528 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_year_type10530 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_year_type10533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_year_type10535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_timestamp_type10551 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_timestamp_type10553 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_timestamp_type10558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_TYPE_in_day_type10570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_day_type10574 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_day_type10576 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_day_type10579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_day_type10581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECOND_TYPE_in_second_type10593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_second_type10597 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_second_type10599 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_second_type10602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_second_type10604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_synpred36_PL_SQL5312 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_synpred36_PL_SQL5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_clause_in_synpred73_PL_SQL5865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_synpred84_PL_SQL6000 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_synpred84_PL_SQL6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_synpred90_PL_SQL6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_synpred91_PL_SQL6146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred95_PL_SQL6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_synpred95_PL_SQL6209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_synpred102_PL_SQL6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_PL_SQL6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_synpred106_PL_SQL6258 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_constructor_spec_in_synpred106_PL_SQL6262 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_synpred106_PL_SQL6266 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred106_PL_SQL6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred138_PL_SQL6759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_synpred190_PL_SQL7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred192_PL_SQL7197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred193_PL_SQL7201 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred193_PL_SQL7203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_synpred202_PL_SQL7284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_synpred208_PL_SQL7323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred209_PL_SQL7342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred211_PL_SQL7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_synpred212_PL_SQL7354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred213_PL_SQL7373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred214_PL_SQL7377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred217_PL_SQL7389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred218_PL_SQL7408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred218_PL_SQL7410 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred219_PL_SQL7416 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred219_PL_SQL7418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred220_PL_SQL7422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_synpred223_PL_SQL7465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred224_PL_SQL7485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred228_PL_SQL7516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred228_PL_SQL7520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred229_PL_SQL7526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred229_PL_SQL7528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred233_PL_SQL7577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred234_PL_SQL7589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred235_PL_SQL7593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_synpred236_PL_SQL7615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred237_PL_SQL7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_synpred238_PL_SQL7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_synpred239_PL_SQL7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred240_PL_SQL7649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred242_PL_SQL7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred243_PL_SQL7685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred244_PL_SQL7697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred245_PL_SQL7719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred252_PL_SQL7859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred255_PL_SQL7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_synpred255_PL_SQL7933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_synpred255_PL_SQL7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred256_PL_SQL8007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_synpred257_PL_SQL8015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred262_PL_SQL8130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred263_PL_SQL8133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred268_PL_SQL8282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred269_PL_SQL8285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred270_PL_SQL8368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred271_PL_SQL8372 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_synpred271_PL_SQL8374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred281_PL_SQL8582 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred281_PL_SQL8584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred282_PL_SQL8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred284_PL_SQL8619 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred284_PL_SQL8621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred286_PL_SQL8637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred287_PL_SQL8641 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_expression_in_synpred287_PL_SQL8643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_params_in_synpred294_PL_SQL8883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred298_PL_SQL8904 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred298_PL_SQL8907 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_synpred298_PL_SQL8911 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred298_PL_SQL8915 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_synpred298_PL_SQL8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred302_PL_SQL8956 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_synpred302_PL_SQL8958 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred302_PL_SQL8965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred302_PL_SQL8967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred307_PL_SQL9069 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred307_PL_SQL9071 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred307_PL_SQL9097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred308_PL_SQL9115 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_synpred308_PL_SQL9117 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred308_PL_SQL9119 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred308_PL_SQL9145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred311_PL_SQL9183 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_synpred311_PL_SQL9185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_synpred325_PL_SQL9359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_synpred326_PL_SQL9363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_synpred328_PL_SQL9381 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred328_PL_SQL9384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred333_PL_SQL9404 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred333_PL_SQL9406 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred333_PL_SQL9409 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_synpred333_PL_SQL9411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred333_PL_SQL9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred357_PL_SQL9889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_synpred383_PL_SQL10069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_op_in_synpred384_PL_SQL10074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred385_PL_SQL10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred386_PL_SQL10078 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred386_PL_SQL10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred386_PL_SQL10086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_synpred386_PL_SQL10088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred386_PL_SQL10090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred394_PL_SQL10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_statement_param_in_synpred395_PL_SQL10190 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred395_PL_SQL10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred405_PL_SQL10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred408_PL_SQL10313 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0081800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred408_PL_SQL10316 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred408_PL_SQL10319 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0080800200000030L,0x0000000000C00000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred408_PL_SQL10321 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred408_PL_SQL10328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred417_PL_SQL10446 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred417_PL_SQL10448 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10451 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred417_PL_SQL10454 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_set_in_synpred417_PL_SQL10456 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred417_PL_SQL10465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred417_PL_SQL10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred419_PL_SQL10484 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred419_PL_SQL10486 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred419_PL_SQL10489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred419_PL_SQL10491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred421_PL_SQL10505 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred421_PL_SQL10507 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred421_PL_SQL10510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred421_PL_SQL10512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred425_PL_SQL10551 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred425_PL_SQL10553 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred425_PL_SQL10556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred425_PL_SQL10558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred429_PL_SQL10597 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred429_PL_SQL10599 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred429_PL_SQL10602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred429_PL_SQL10604 = new BitSet(new long[]{0x0000000000000002L});

}