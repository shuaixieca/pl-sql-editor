// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g 2010-04-06 16:52:53
package org.netbeans.modules.languages.pl_sql.antlr;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class PL_SQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER_UNSIGNED", "AND_OPERATOR", "OR_OPERATOR", "NOT_OPEARTOR", "STRING", "SOME_TYPES", "SCALE_TYPES", "SIZE_TYPES", "CHAR_TYPES", "CHAR_TYPE", "BYTE_TYPE", "RAW_TYPE", "TIMESTAMP_TYPE", "YEAR_TYPE", "DAY_TYPE", "SECOND_TYPE", "KEYWORD", "IDENTIFIER", "EXT_IDENTIFIER", "ALIAS", "BLOCK_COMMENT", "LINE_COMMENT", "WHITESPACE", "O", "R", "A", "N", "D", "T", "NOT_OPERATOR", "DIGITS", "EXP_DIGITS", "U", "L", "P", "S", "I", "E", "G", "V", "Y", "M", "B", "F", "W", "C", "COMMA", "H", "DIGIT", "X", "BEGIN_KEYWORD", "END_KEYWORD", "DECLARE_KEYWORD", "EXCEPTION_KEYWORD", "WHEN_KEYWORD", "THEN_KEYWORD", "NULL_KEYWORD", "DEFAULT_KEYWORD", "ROWTYPE_KEYWORD", "LIKE_TYPE_KEYWORD", "TYPE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "CONSTANT_KEYWORD", "WITH_KEYWORD", "LOCAL_KEYWORD", "TIME_KEYWORD", "Z", "ZONE_KEYWORD", "INTERVAL_KEYWORD", "TO_KEYWORD", "MONTH_KEYWORD", "SUBTYPE_KEYWORD", "IS_KEYWORD", "RECORD_KEYWORD", "CREATE_KEYWORD", "REPLACE_KEYWORD", "FUNCTION_KEYWORD", "AS_KEYWORD", "RETURN_KEYWORD", "IN_KEYWORD", "OUT_KEYWORD", "NOCOPY_KEYWORD", "AUTHID_KEYWORD", "CURRENT_USER_KEYWORD", "DEFINER_KEYWORD", "DETERMINISTIC_KEYWORD", "PARALLEL_ENABLED_KEYWORD", "PIPELINED_KEYWORD", "RESULT_CACHE_KEYWORD", "PROCEDURE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "ELSIF_KEYWORD", "GOTO_KEYWORD", "LOOP_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "REVERSE_KEYWORD", "SELECT_KEYWORD", "COUNT_KEYWORD", "EXCEPTION_INIT_KEYWORD", "K", "LIKE_KEYWORD", "RAISE_KEYWORD", "PRAGMA_KEYWORD", "AUTONOMOUS_TRANSACTION_KEYWORD", "CASE_KEYWORD", "CLOSE_KEYWORD", "TABLE_KEYWORD", "OF_KEYWORD", "INDEX_KEYWORD", "BY_KEYWORD", "VARRAY_KEYWORD", "VARYING_KEYWORD", "ARRAY_KEYWORD", "COMMIT_KEYWORD", "REF_KEYWORD", "CONTINUE_KEYWORD", "CURSOR_KEYWORD", "DELETE_KEYWORD", "EXECUTE_KEYWORD", "IMMEDIATE_KEYWORD", "EXIT_KEYWORD", "INTO_KEYWORD", "USING_KEYWORD", "BULK_KEYWORD", "COLLECT_KEYWORD", "FETCH_KEYWORD", "LIMIT_KEYWORD", "FORALL_KEYWORD", "SAVE_KEYWORD", "EXCEPTIONS_KEYWORD", "INDICES_KEYWORD", "VALUES_KEYWORD", "BETWEEN_KEYWORD", "INLINE_KEYWORD", "INSERT_KEYWORD", "LOCK_KEYWORD", "MERGE_KEYWORD", "OPEN_KEYWORD", "PACKAGE_KEYWORD", "BODY_KEYWORD", "RESTRICT_REFERENCES_KEYWORD", "RETURNING_KEYWORD", "ROLLBACK_KEYWORD", "SAVEPOINT_KEYWORD", "SERIALLY_REUSABLE_KEYWORD", "SET_KEYWORD", "TRANSACTION_KEYWORD", "NOTFOUND_KEYWORD", "FOUND_KEYWORD", "ISOPEN_KEYWORD", "ROWCOUNT_KEYWORD", "Q", "SQLCODE_KEYWORD", "SQLERRM_KEYWORD", "UPDATE_KEYWORD", "EXISTS_KEYWORD", "TRIGGER_KEYWORD", "BEFORE_KEYWORD", "AFTER_KEYWORD", "INSTEAD_KEYWORD", "ON_KEYWORD", "NESTED_KEYWORD", "REFERENCING_KEYWORD", "OLD_KEYWORD", "NEW_KEYWORD", "PARENT_KEYWORD", "EACH_KEYWORD", "ROW_KEYWORD", "FOLLOWS_KEYWORD", "ENABLE_KEYWORD", "DISABLE_KEYWORD", "OID_KEYWORD", "J", "OBJECT_KEYWORD", "UNDER_KEYWORD", "FINAL_KEYWORD", "INSTANTIABLE_KEYWORD", "OVERRIDING_KEYWORD", "MEMBER_KEYWORD", "STATIC_KEYWORD", "CONSTRUCTOR_KEYWORD", "SELF_KEYWORD", "RESULT_KEYWORD", "MAP_KEYWORD", "ORDER_KEYWORD", "JOIN_KEYWORD", "CHARS", "SEPARATOR", "PARAM_VALUE", "QUOTATION_MARK", "THE_REST", "'<<'", "'>>'", "'('", "')'", "'/'", "'\\''", "'+'", "'-'", "'*'", "'**'", "'||'", "'='", "'<>'", "'!='", "'~='", "'^='", "'>'", "'<'", "'<='", "'>='", "'(+)'", "'..'", "':='", "'.'"
    };
    public static final int VARRAY_KEYWORD=117;
    public static final int TRIGGER_KEYWORD=163;
    public static final int RESULT_KEYWORD=189;
    public static final int EXIT_KEYWORD=127;
    public static final int V=43;
    public static final int DISABLE_KEYWORD=177;
    public static final int RESTRICT_REFERENCES_KEYWORD=147;
    public static final int ALIAS=23;
    public static final int WHILE_KEYWORD=100;
    public static final int AUTONOMOUS_TRANSACTION_KEYWORD=110;
    public static final int U=36;
    public static final int BEGIN_KEYWORD=54;
    public static final int ELSE_KEYWORD=96;
    public static final int SOME_TYPES=9;
    public static final int COLLECT_KEYWORD=131;
    public static final int T__214=214;
    public static final int CONSTANT_KEYWORD=67;
    public static final int INTERVAL_KEYWORD=73;
    public static final int VALUES_KEYWORD=138;
    public static final int PRAGMA_KEYWORD=109;
    public static final int R=28;
    public static final int MEMBER_KEYWORD=185;
    public static final int ZONE_KEYWORD=72;
    public static final int CHARS=193;
    public static final int CREATE_KEYWORD=79;
    public static final int ROLLBACK_KEYWORD=149;
    public static final int Q=158;
    public static final int CLOSE_KEYWORD=112;
    public static final int T__220=220;
    public static final int TRUE_KEYWORD=65;
    public static final int T__198=198;
    public static final int DEFINER_KEYWORD=89;
    public static final int CONTINUE_KEYWORD=122;
    public static final int CURRENT_USER_KEYWORD=88;
    public static final int LOOP_KEYWORD=99;
    public static final int EXECUTE_KEYWORD=125;
    public static final int W=48;
    public static final int T__218=218;
    public static final int DELETE_KEYWORD=124;
    public static final int INDEX_KEYWORD=115;
    public static final int STRING=8;
    public static final int RESULT_CACHE_KEYWORD=93;
    public static final int BEFORE_KEYWORD=164;
    public static final int EACH_KEYWORD=173;
    public static final int FOLLOWS_KEYWORD=175;
    public static final int X=53;
    public static final int T__215=215;
    public static final int T__201=201;
    public static final int UNDER_KEYWORD=181;
    public static final int UPDATE_KEYWORD=161;
    public static final int AND_OPERATOR=5;
    public static final int CHAR_TYPE=13;
    public static final int OPEN_KEYWORD=144;
    public static final int J=179;
    public static final int OR_OPERATOR=6;
    public static final int T__219=219;
    public static final int OID_KEYWORD=178;
    public static final int USING_KEYWORD=129;
    public static final int O=27;
    public static final int PARAM_VALUE=195;
    public static final int CURSOR_KEYWORD=123;
    public static final int ARRAY_KEYWORD=119;
    public static final int P=38;
    public static final int REFERENCING_KEYWORD=169;
    public static final int ISOPEN_KEYWORD=156;
    public static final int OF_KEYWORD=114;
    public static final int S=39;
    public static final int SELF_KEYWORD=188;
    public static final int OVERRIDING_KEYWORD=184;
    public static final int DECLARE_KEYWORD=56;
    public static final int T__202=202;
    public static final int VARYING_KEYWORD=118;
    public static final int THE_REST=197;
    public static final int BETWEEN_KEYWORD=139;
    public static final int M=45;
    public static final int EXCEPTION_INIT_KEYWORD=105;
    public static final int T=32;
    public static final int T__210=210;
    public static final int FALSE_KEYWORD=66;
    public static final int NOT_OPERATOR=33;
    public static final int REF_KEYWORD=121;
    public static final int EXP_DIGITS=35;
    public static final int SIZE_TYPES=11;
    public static final int SQLCODE_KEYWORD=159;
    public static final int DETERMINISTIC_KEYWORD=90;
    public static final int KEYWORD=20;
    public static final int EXCEPTION_KEYWORD=57;
    public static final int T__216=216;
    public static final int T__199=199;
    public static final int SCALE_TYPES=10;
    public static final int INSERT_KEYWORD=141;
    public static final int MONTH_KEYWORD=75;
    public static final int FORALL_KEYWORD=134;
    public static final int N=30;
    public static final int SQLERRM_KEYWORD=160;
    public static final int CASE_KEYWORD=111;
    public static final int PACKAGE_KEYWORD=145;
    public static final int INLINE_KEYWORD=140;
    public static final int AS_KEYWORD=82;
    public static final int DAY_TYPE=18;
    public static final int T__217=217;
    public static final int ROWCOUNT_KEYWORD=157;
    public static final int JOIN_KEYWORD=192;
    public static final int ELSIF_KEYWORD=97;
    public static final int COUNT_KEYWORD=104;
    public static final int PARENT_KEYWORD=172;
    public static final int FINAL_KEYWORD=182;
    public static final int SUBTYPE_KEYWORD=76;
    public static final int COMMA=50;
    public static final int FETCH_KEYWORD=132;
    public static final int FUNCTION_KEYWORD=81;
    public static final int STATIC_KEYWORD=186;
    public static final int EXISTS_KEYWORD=162;
    public static final int TABLE_KEYWORD=113;
    public static final int COMMIT_KEYWORD=120;
    public static final int NESTED_KEYWORD=168;
    public static final int T__208=208;
    public static final int IS_KEYWORD=77;
    public static final int BULK_KEYWORD=130;
    public static final int D=31;
    public static final int T__211=211;
    public static final int PROCEDURE_KEYWORD=94;
    public static final int IF_KEYWORD=95;
    public static final int YEAR_TYPE=17;
    public static final int LIKE_TYPE_KEYWORD=63;
    public static final int RAISE_KEYWORD=108;
    public static final int CHAR_TYPES=12;
    public static final int TIME_KEYWORD=70;
    public static final int ORDER_KEYWORD=191;
    public static final int CONSTRUCTOR_KEYWORD=187;
    public static final int SAVEPOINT_KEYWORD=150;
    public static final int ROWTYPE_KEYWORD=62;
    public static final int T__209=209;
    public static final int RETURN_KEYWORD=83;
    public static final int T__203=203;
    public static final int PIPELINED_KEYWORD=92;
    public static final int MAP_KEYWORD=190;
    public static final int TIMESTAMP_TYPE=16;
    public static final int NOT_OPEARTOR=7;
    public static final int NOTFOUND_KEYWORD=154;
    public static final int T__205=205;
    public static final int AUTHID_KEYWORD=87;
    public static final int A=29;
    public static final int IN_KEYWORD=84;
    public static final int LINE_COMMENT=25;
    public static final int WITH_KEYWORD=68;
    public static final int INSTEAD_KEYWORD=166;
    public static final int PARALLEL_ENABLED_KEYWORD=91;
    public static final int ENABLE_KEYWORD=176;
    public static final int BYTE_TYPE=14;
    public static final int WHEN_KEYWORD=58;
    public static final int T__207=207;
    public static final int C=49;
    public static final int T__212=212;
    public static final int T__206=206;
    public static final int L=37;
    public static final int ROW_KEYWORD=174;
    public static final int SECOND_TYPE=19;
    public static final int LOCAL_KEYWORD=69;
    public static final int END_KEYWORD=55;
    public static final int AFTER_KEYWORD=165;
    public static final int LIMIT_KEYWORD=133;
    public static final int SET_KEYWORD=152;
    public static final int SERIALLY_REUSABLE_KEYWORD=151;
    public static final int IDENTIFIER=21;
    public static final int TYPE_KEYWORD=64;
    public static final int T__204=204;
    public static final int LOCK_KEYWORD=142;
    public static final int ON_KEYWORD=167;
    public static final int BODY_KEYWORD=146;
    public static final int FOUND_KEYWORD=155;
    public static final int MERGE_KEYWORD=143;
    public static final int I=40;
    public static final int OBJECT_KEYWORD=180;
    public static final int F=47;
    public static final int T__200=200;
    public static final int TRANSACTION_KEYWORD=153;
    public static final int INSTANTIABLE_KEYWORD=183;
    public static final int SAVE_KEYWORD=135;
    public static final int RAW_TYPE=15;
    public static final int EXCEPTIONS_KEYWORD=136;
    public static final int QUOTATION_MARK=196;
    public static final int LIKE_KEYWORD=107;
    public static final int RETURNING_KEYWORD=148;
    public static final int NEW_KEYWORD=171;
    public static final int K=106;
    public static final int RECORD_KEYWORD=78;
    public static final int B=46;
    public static final int OUT_KEYWORD=85;
    public static final int NULL_KEYWORD=60;
    public static final int INTO_KEYWORD=128;
    public static final int DIGIT=52;
    public static final int DEFAULT_KEYWORD=61;
    public static final int OLD_KEYWORD=170;
    public static final int DIGITS=34;
    public static final int H=51;
    public static final int IMMEDIATE_KEYWORD=126;
    public static final int NUMBER_UNSIGNED=4;
    public static final int G=42;
    public static final int BLOCK_COMMENT=24;
    public static final int FOR_KEYWORD=101;
    public static final int EXT_IDENTIFIER=22;
    public static final int WHITESPACE=26;
    public static final int TO_KEYWORD=74;
    public static final int Z=71;
    public static final int THEN_KEYWORD=59;
    public static final int REVERSE_KEYWORD=102;
    public static final int BY_KEYWORD=116;
    public static final int SEPARATOR=194;
    public static final int EOF=-1;
    public static final int SELECT_KEYWORD=103;
    public static final int REPLACE_KEYWORD=80;
    public static final int GOTO_KEYWORD=98;
    public static final int INDICES_KEYWORD=137;
    public static final int T__213=213;
    public static final int NOCOPY_KEYWORD=86;
    public static final int Y=44;
    public static final int T__221=221;
    public static final int E=41;

    // delegates
    // delegators


        public PL_SQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PL_SQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[540+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PL_SQLParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g"; }



    public class SyntaxError {

        public RecognitionException exception;
        public String message;
        public int line;
        public int charPositionInLine;
    }
    	public List<SyntaxError> syntaxErrors = new ArrayList<SyntaxError>();

    	@Override
    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		String message = super.getErrorMessage(e, tokenNames);
    		SyntaxError syntaxError = new SyntaxError();
    		syntaxError.exception = e;
    		syntaxError.message = message;
    		syntaxError.line = e.line;
    		syntaxError.charPositionInLine = e.charPositionInLine;
    		syntaxErrors.add(syntaxError);
    		return message;
    	}

    	@Override
    	public void emitErrorMessage(String msg) {
    	}
    	
    /*protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException
    {
    throw new MismatchedTokenException(ttype, input);
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input,
    RecognitionException e,
    BitSet follow)
    throws RecognitionException
    {
    throw e;
    }
    }
    // Alter code generation so catch-clauses get replace with
    // this action.
    @rulecatch {
    catch (RecognitionException e) {
    throw e;
    }*/


    public static class grammar_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grammar_def"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:437:1: grammar_def : source_element EOF ;
    public final PL_SQLParser.grammar_def_return grammar_def() throws RecognitionException {
        PL_SQLParser.grammar_def_return retval = new PL_SQLParser.grammar_def_return();
        retval.start = input.LT(1);
        int grammar_def_StartIndex = input.index();
        Object root_0 = null;

        Token EOF2=null;
        PL_SQLParser.source_element_return source_element1 = null;


        Object EOF2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:438:2: ( source_element EOF )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:438:4: source_element EOF
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_source_element_in_grammar_def4434);
            source_element1=source_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, source_element1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_grammar_def4437); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, grammar_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grammar_def"

    public static class source_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "source_element"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:1: source_element : ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) ) );
    public final PL_SQLParser.source_element_return source_element() throws RecognitionException {
        PL_SQLParser.source_element_return retval = new PL_SQLParser.source_element_return();
        retval.start = input.LT(1);
        int source_element_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.anonymous_block_return anonymous_block3 = null;

        PL_SQLParser.create_replace_part_return create_replace_part4 = null;

        PL_SQLParser.function_declaration_return function_declaration5 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration6 = null;

        PL_SQLParser.package_spec_return package_spec7 = null;

        PL_SQLParser.package_body_return package_body8 = null;

        PL_SQLParser.trigger_declaration_return trigger_declaration9 = null;

        PL_SQLParser.type_spec_declaration_return type_spec_declaration10 = null;

        PL_SQLParser.type_body_declaration_return type_body_declaration11 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:16: ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BEGIN_KEYWORD||LA3_0==DECLARE_KEYWORD) ) {
                alt3=1;
            }
            else if ( (LA3_0==TYPE_KEYWORD||LA3_0==CREATE_KEYWORD||LA3_0==FUNCTION_KEYWORD||LA3_0==PROCEDURE_KEYWORD||LA3_0==PACKAGE_KEYWORD||LA3_0==TRIGGER_KEYWORD) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:441:18: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_source_element4447);
                    anonymous_block3=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block3.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:19: ( create_replace_part )? ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:442:19: ( create_replace_part )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==CREATE_KEYWORD) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: create_replace_part
                            {
                            pushFollow(FOLLOW_create_replace_part_in_source_element4470);
                            create_replace_part4=create_replace_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_replace_part4.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:19: ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )
                    int alt2=7;
                    alt2 = dfa2.predict(input);
                    switch (alt2) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:20: function_declaration
                            {
                            pushFollow(FOLLOW_function_declaration_in_source_element4492);
                            function_declaration5=function_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration5.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:43: procedure_declaration
                            {
                            pushFollow(FOLLOW_procedure_declaration_in_source_element4496);
                            procedure_declaration6=procedure_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration6.getTree());

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:67: package_spec
                            {
                            pushFollow(FOLLOW_package_spec_in_source_element4500);
                            package_spec7=package_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec7.getTree());

                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:82: package_body
                            {
                            pushFollow(FOLLOW_package_body_in_source_element4504);
                            package_body8=package_body();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body8.getTree());

                            }
                            break;
                        case 5 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:20: trigger_declaration
                            {
                            pushFollow(FOLLOW_trigger_declaration_in_source_element4527);
                            trigger_declaration9=trigger_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_declaration9.getTree());

                            }
                            break;
                        case 6 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:42: type_spec_declaration
                            {
                            pushFollow(FOLLOW_type_spec_declaration_in_source_element4531);
                            type_spec_declaration10=type_spec_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_declaration10.getTree());

                            }
                            break;
                        case 7 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:66: type_body_declaration
                            {
                            pushFollow(FOLLOW_type_body_declaration_in_source_element4535);
                            type_body_declaration11=type_body_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_declaration11.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, source_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "source_element"

    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:445:1: identifier : ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD );
    public final PL_SQLParser.identifier_return identifier() throws RecognitionException {
        PL_SQLParser.identifier_return retval = new PL_SQLParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        Object root_0 = null;

        Token set12=null;

        Object set12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:445:12: ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==INTERVAL_KEYWORD||input.LA(1)==RESULT_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class universal_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:1: universal_identifier : ( identifier | EXT_IDENTIFIER );
    public final PL_SQLParser.universal_identifier_return universal_identifier() throws RecognitionException {
        PL_SQLParser.universal_identifier_return retval = new PL_SQLParser.universal_identifier_return();
        retval.start = input.LT(1);
        int universal_identifier_StartIndex = input.index();
        Object root_0 = null;

        Token EXT_IDENTIFIER14=null;
        PL_SQLParser.identifier_return identifier13 = null;


        Object EXT_IDENTIFIER14_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:22: ( identifier | EXT_IDENTIFIER )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER||LA4_0==INTERVAL_KEYWORD||LA4_0==RESULT_KEYWORD) ) {
                alt4=1;
            }
            else if ( (LA4_0==EXT_IDENTIFIER) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:24: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_universal_identifier4559);
                    identifier13=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier13.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:446:37: EXT_IDENTIFIER
                    {
                    root_0 = (Object)adaptor.nil();

                    EXT_IDENTIFIER14=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_universal_identifier4563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER14_tree = (Object)adaptor.create(EXT_IDENTIFIER14);
                    adaptor.addChild(root_0, EXT_IDENTIFIER14_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, universal_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_identifier"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:447:1: label : '<<' identifier '>>' ;
    public final PL_SQLParser.label_return label() throws RecognitionException {
        PL_SQLParser.label_return retval = new PL_SQLParser.label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal15=null;
        Token string_literal17=null;
        PL_SQLParser.identifier_return identifier16 = null;


        Object string_literal15_tree=null;
        Object string_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:447:7: ( '<<' identifier '>>' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:447:9: '<<' identifier '>>'
            {
            root_0 = (Object)adaptor.nil();

            string_literal15=(Token)match(input,198,FOLLOW_198_in_label4570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (Object)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }
            pushFollow(FOLLOW_identifier_in_label4572);
            identifier16=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier16.getTree());
            string_literal17=(Token)match(input,199,FOLLOW_199_in_label4574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal17_tree = (Object)adaptor.create(string_literal17);
            adaptor.addChild(root_0, string_literal17_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class create_replace_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_replace_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:1: create_replace_part : CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? ;
    public final PL_SQLParser.create_replace_part_return create_replace_part() throws RecognitionException {
        PL_SQLParser.create_replace_part_return retval = new PL_SQLParser.create_replace_part_return();
        retval.start = input.LT(1);
        int create_replace_part_StartIndex = input.index();
        Object root_0 = null;

        Token CREATE_KEYWORD18=null;
        Token OR_OPERATOR19=null;
        Token REPLACE_KEYWORD20=null;

        Object CREATE_KEYWORD18_tree=null;
        Object OR_OPERATOR19_tree=null;
        Object REPLACE_KEYWORD20_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:21: ( CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:23: CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            CREATE_KEYWORD18=(Token)match(input,CREATE_KEYWORD,FOLLOW_CREATE_KEYWORD_in_create_replace_part4581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE_KEYWORD18_tree = (Object)adaptor.create(CREATE_KEYWORD18);
            adaptor.addChild(root_0, CREATE_KEYWORD18_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:38: ( OR_OPERATOR REPLACE_KEYWORD )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==OR_OPERATOR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:448:39: OR_OPERATOR REPLACE_KEYWORD
                    {
                    OR_OPERATOR19=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_create_replace_part4584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR19_tree = (Object)adaptor.create(OR_OPERATOR19);
                    adaptor.addChild(root_0, OR_OPERATOR19_tree);
                    }
                    REPLACE_KEYWORD20=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_create_replace_part4586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD20_tree = (Object)adaptor.create(REPLACE_KEYWORD20);
                    adaptor.addChild(root_0, REPLACE_KEYWORD20_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, create_replace_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_replace_part"

    public static class as_is_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_is_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:1: as_is_part : ( IS_KEYWORD | AS_KEYWORD );
    public final PL_SQLParser.as_is_part_return as_is_part() throws RecognitionException {
        PL_SQLParser.as_is_part_return retval = new PL_SQLParser.as_is_part_return();
        retval.start = input.LT(1);
        int as_is_part_StartIndex = input.index();
        Object root_0 = null;

        Token set21=null;

        Object set21_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:449:12: ( IS_KEYWORD | AS_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set21=(Token)input.LT(1);
            if ( input.LA(1)==IS_KEYWORD||input.LA(1)==AS_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set21));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, as_is_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "as_is_part"

    public static class parameter_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:1: parameter_type : ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) );
    public final PL_SQLParser.parameter_type_return parameter_type() throws RecognitionException {
        PL_SQLParser.parameter_type_return retval = new PL_SQLParser.parameter_type_return();
        retval.start = input.LT(1);
        int parameter_type_StartIndex = input.index();
        Object root_0 = null;

        Token IN_KEYWORD22=null;
        Token OUT_KEYWORD23=null;
        Token NOCOPY_KEYWORD24=null;
        Token OUT_KEYWORD25=null;
        Token NOCOPY_KEYWORD26=null;

        Object IN_KEYWORD22_tree=null;
        Object OUT_KEYWORD23_tree=null;
        Object NOCOPY_KEYWORD24_tree=null;
        Object OUT_KEYWORD25_tree=null;
        Object NOCOPY_KEYWORD26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:16: ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IN_KEYWORD) ) {
                alt9=1;
            }
            else if ( (LA9_0==OUT_KEYWORD) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:18: IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    {
                    root_0 = (Object)adaptor.nil();

                    IN_KEYWORD22=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD22_tree = (Object)adaptor.create(IN_KEYWORD22);
                    adaptor.addChild(root_0, IN_KEYWORD22_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:29: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==OUT_KEYWORD) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:30: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                            {
                            OUT_KEYWORD23=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4609); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUT_KEYWORD23_tree = (Object)adaptor.create(OUT_KEYWORD23);
                            adaptor.addChild(root_0, OUT_KEYWORD23_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:42: ( NOCOPY_KEYWORD )?
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==NOCOPY_KEYWORD) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                                    {
                                    NOCOPY_KEYWORD24=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4611); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOCOPY_KEYWORD24_tree = (Object)adaptor.create(NOCOPY_KEYWORD24);
                                    adaptor.addChild(root_0, NOCOPY_KEYWORD24_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:63: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    OUT_KEYWORD25=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD25_tree = (Object)adaptor.create(OUT_KEYWORD25);
                    adaptor.addChild(root_0, OUT_KEYWORD25_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:450:75: ( NOCOPY_KEYWORD )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==NOCOPY_KEYWORD) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD26=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4621); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD26_tree = (Object)adaptor.create(NOCOPY_KEYWORD26);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD26_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, parameter_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:1: parameter_declaration : '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' ;
    public final PL_SQLParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PL_SQLParser.parameter_declaration_return retval = new PL_SQLParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal33=null;
        Token char_literal39=null;
        PL_SQLParser.identifier_return identifier28 = null;

        PL_SQLParser.parameter_type_return parameter_type29 = null;

        PL_SQLParser.data_type_return data_type30 = null;

        PL_SQLParser.variable_def_part_return variable_def_part31 = null;

        PL_SQLParser.expression_return expression32 = null;

        PL_SQLParser.identifier_return identifier34 = null;

        PL_SQLParser.parameter_type_return parameter_type35 = null;

        PL_SQLParser.data_type_return data_type36 = null;

        PL_SQLParser.variable_def_part_return variable_def_part37 = null;

        PL_SQLParser.expression_return expression38 = null;


        Object char_literal27_tree=null;
        Object char_literal33_tree=null;
        Object char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:23: ( '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:25: '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal27=(Token)match(input,200,FOLLOW_200_in_parameter_declaration4630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (Object)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }
            pushFollow(FOLLOW_identifier_in_parameter_declaration4632);
            identifier28=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier28.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:40: ( parameter_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=IN_KEYWORD && LA10_0<=OUT_KEYWORD)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
                    {
                    pushFollow(FOLLOW_parameter_type_in_parameter_declaration4634);
                    parameter_type29=parameter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type29.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_parameter_declaration4637);
            data_type30=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type30.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:66: ( variable_def_part expression )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT_KEYWORD||LA11_0==220) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:451:67: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4640);
                    variable_def_part31=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part31.getTree());
                    pushFollow(FOLLOW_expression_in_parameter_declaration4642);
                    expression32=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression32.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:25: ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:26: ',' identifier ( parameter_type )? data_type ( variable_def_part expression )?
            	    {
            	    char_literal33=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration4671); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal33_tree = (Object)adaptor.create(char_literal33);
            	    adaptor.addChild(root_0, char_literal33_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_parameter_declaration4673);
            	    identifier34=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier34.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:41: ( parameter_type )?
            	    int alt12=2;
            	    int LA12_0 = input.LA(1);

            	    if ( ((LA12_0>=IN_KEYWORD && LA12_0<=OUT_KEYWORD)) ) {
            	        alt12=1;
            	    }
            	    switch (alt12) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
            	            {
            	            pushFollow(FOLLOW_parameter_type_in_parameter_declaration4675);
            	            parameter_type35=parameter_type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type35.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_parameter_declaration4678);
            	    data_type36=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type36.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:67: ( variable_def_part expression )?
            	    int alt13=2;
            	    int LA13_0 = input.LA(1);

            	    if ( (LA13_0==DEFAULT_KEYWORD||LA13_0==220) ) {
            	        alt13=1;
            	    }
            	    switch (alt13) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:452:68: variable_def_part expression
            	            {
            	            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4681);
            	            variable_def_part37=variable_def_part();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part37.getTree());
            	            pushFollow(FOLLOW_expression_in_parameter_declaration4683);
            	            expression38=expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression38.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal39=(Token)match(input,201,FOLLOW_201_in_parameter_declaration4689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal39_tree = (Object)adaptor.create(char_literal39);
            adaptor.addChild(root_0, char_literal39_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:1: function_spec : FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* ;
    public final PL_SQLParser.function_spec_return function_spec() throws RecognitionException {
        PL_SQLParser.function_spec_return retval = new PL_SQLParser.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        Object root_0 = null;

        Token FUNCTION_KEYWORD40=null;
        Token RETURN_KEYWORD43=null;
        PL_SQLParser.function_name_return function_name41 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration42 = null;

        PL_SQLParser.data_type_return data_type44 = null;

        PL_SQLParser.invoker_clause_return invoker_clause45 = null;

        PL_SQLParser.function_spec_add2_return function_spec_add246 = null;


        Object FUNCTION_KEYWORD40_tree=null;
        Object RETURN_KEYWORD43_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:15: ( FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:453:17: FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )*
            {
            root_0 = (Object)adaptor.nil();

            FUNCTION_KEYWORD40=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_function_spec4696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD40_tree = (Object)adaptor.create(FUNCTION_KEYWORD40);
            adaptor.addChild(root_0, FUNCTION_KEYWORD40_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4714);
            function_name41=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name41.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:454:31: ( parameter_declaration )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==200) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_function_spec4716);
                    parameter_declaration42=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration42.getTree());

                    }
                    break;

            }

            RETURN_KEYWORD43=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_function_spec4735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD43_tree = (Object)adaptor.create(RETURN_KEYWORD43);
            adaptor.addChild(root_0, RETURN_KEYWORD43_tree);
            }
            pushFollow(FOLLOW_data_type_in_function_spec4737);
            data_type44=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type44.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:42: ( invoker_clause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==AUTHID_KEYWORD) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_function_spec4739);
                    invoker_clause45=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause45.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:58: ( function_spec_add2 )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( ((LA17_0>=DETERMINISTIC_KEYWORD && LA17_0<=RESULT_CACHE_KEYWORD)) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:455:59: function_spec_add2
            	    {
            	    pushFollow(FOLLOW_function_spec_add2_in_function_spec4743);
            	    function_spec_add246=function_spec_add2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec_add246.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class function_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:1: function_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.function_name_return function_name() throws RecognitionException {
        PL_SQLParser.function_name_return retval = new PL_SQLParser.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS48=null;
        PL_SQLParser.universal_identifier_return universal_identifier47 = null;


        Object ALIAS48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:15: ( universal_identifier | ALIAS )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=IDENTIFIER && LA18_0<=EXT_IDENTIFIER)||LA18_0==INTERVAL_KEYWORD||LA18_0==RESULT_KEYWORD) ) {
                alt18=1;
            }
            else if ( (LA18_0==ALIAS) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:17: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_function_name4752);
                    universal_identifier47=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier47.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:456:40: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS48=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_function_name4756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS48_tree = (Object)adaptor.create(ALIAS48);
                    adaptor.addChild(root_0, ALIAS48_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class invoker_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invoker_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:1: invoker_clause : AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) ;
    public final PL_SQLParser.invoker_clause_return invoker_clause() throws RecognitionException {
        PL_SQLParser.invoker_clause_return retval = new PL_SQLParser.invoker_clause_return();
        retval.start = input.LT(1);
        int invoker_clause_StartIndex = input.index();
        Object root_0 = null;

        Token AUTHID_KEYWORD49=null;
        Token set50=null;

        Object AUTHID_KEYWORD49_tree=null;
        Object set50_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:16: ( AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:457:18: AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            AUTHID_KEYWORD49=(Token)match(input,AUTHID_KEYWORD,FOLLOW_AUTHID_KEYWORD_in_invoker_clause4763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUTHID_KEYWORD49_tree = (Object)adaptor.create(AUTHID_KEYWORD49);
            adaptor.addChild(root_0, AUTHID_KEYWORD49_tree);
            }
            set50=(Token)input.LT(1);
            if ( (input.LA(1)>=CURRENT_USER_KEYWORD && input.LA(1)<=DEFINER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set50));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, invoker_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invoker_clause"

    public static class function_spec_add2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec_add2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:1: function_spec_add2 : ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD );
    public final PL_SQLParser.function_spec_add2_return function_spec_add2() throws RecognitionException {
        PL_SQLParser.function_spec_add2_return retval = new PL_SQLParser.function_spec_add2_return();
        retval.start = input.LT(1);
        int function_spec_add2_StartIndex = input.index();
        Object root_0 = null;

        Token set51=null;

        Object set51_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:458:20: ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set51=(Token)input.LT(1);
            if ( (input.LA(1)>=DETERMINISTIC_KEYWORD && input.LA(1)<=RESULT_CACHE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set51));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, function_spec_add2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec_add2"

    public static class function_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:459:1: function_declaration : function_spec function_procedure_body ;
    public final PL_SQLParser.function_declaration_return function_declaration() throws RecognitionException {
        PL_SQLParser.function_declaration_return retval = new PL_SQLParser.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.function_spec_return function_spec52 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body53 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:459:22: ( function_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:459:24: function_spec function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_function_spec_in_function_declaration4797);
            function_spec52=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec52.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_function_declaration4799);
            function_procedure_body53=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body53.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:1: procedure_spec : PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? ;
    public final PL_SQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
        PL_SQLParser.procedure_spec_return retval = new PL_SQLParser.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        Object root_0 = null;

        Token PROCEDURE_KEYWORD54=null;
        PL_SQLParser.procedure_name_return procedure_name55 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration56 = null;

        PL_SQLParser.invoker_clause_return invoker_clause57 = null;


        Object PROCEDURE_KEYWORD54_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:16: ( PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:18: PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )?
            {
            root_0 = (Object)adaptor.nil();

            PROCEDURE_KEYWORD54=(Token)match(input,PROCEDURE_KEYWORD,FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec4806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE_KEYWORD54_tree = (Object)adaptor.create(PROCEDURE_KEYWORD54);
            adaptor.addChild(root_0, PROCEDURE_KEYWORD54_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec4808);
            procedure_name55=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name55.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:460:51: ( parameter_declaration )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==200) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_procedure_spec4810);
                    parameter_declaration56=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration56.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:461:18: ( invoker_clause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AUTHID_KEYWORD) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_procedure_spec4830);
                    invoker_clause57=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause57.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class procedure_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:1: procedure_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.procedure_name_return procedure_name() throws RecognitionException {
        PL_SQLParser.procedure_name_return retval = new PL_SQLParser.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS59=null;
        PL_SQLParser.universal_identifier_return universal_identifier58 = null;


        Object ALIAS59_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:16: ( universal_identifier | ALIAS )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( ((LA21_0>=IDENTIFIER && LA21_0<=EXT_IDENTIFIER)||LA21_0==INTERVAL_KEYWORD||LA21_0==RESULT_KEYWORD) ) {
                alt21=1;
            }
            else if ( (LA21_0==ALIAS) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_procedure_name4838);
                    universal_identifier58=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier58.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:462:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS59=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_procedure_name4842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS59_tree = (Object)adaptor.create(ALIAS59);
                    adaptor.addChild(root_0, ALIAS59_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:1: procedure_declaration : procedure_spec function_procedure_body ;
    public final PL_SQLParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PL_SQLParser.procedure_declaration_return retval = new PL_SQLParser.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec60 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body61 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:23: ( procedure_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:463:25: procedure_spec function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration4849);
            procedure_spec60=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec60.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_procedure_declaration4851);
            function_procedure_body61=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body61.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class function_procedure_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_procedure_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:1: function_procedure_body : as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block ;
    public final PL_SQLParser.function_procedure_body_return function_procedure_body() throws RecognitionException {
        PL_SQLParser.function_procedure_body_return retval = new PL_SQLParser.function_procedure_body_return();
        retval.start = input.LT(1);
        int function_procedure_body_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part62 = null;

        PL_SQLParser.variable_declaration_return variable_declaration63 = null;

        PL_SQLParser.function_declaration_return function_declaration64 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration65 = null;

        PL_SQLParser.block_return block66 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:25: ( as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:27: as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_function_procedure_body4858);
            as_is_part62=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part62.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:38: ( variable_declaration )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==IDENTIFIER||LA22_0==TYPE_KEYWORD||LA22_0==INTERVAL_KEYWORD||LA22_0==SUBTYPE_KEYWORD||LA22_0==PRAGMA_KEYWORD||LA22_0==CURSOR_KEYWORD||LA22_0==RESULT_KEYWORD) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:39: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_function_procedure_body4861);
            	    variable_declaration63=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration63.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:62: ( function_declaration | procedure_declaration )*
            loop23:
            do {
                int alt23=3;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==FUNCTION_KEYWORD) ) {
                    alt23=1;
                }
                else if ( (LA23_0==PROCEDURE_KEYWORD) ) {
                    alt23=2;
                }


                switch (alt23) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:63: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_function_procedure_body4866);
            	    function_declaration64=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration64.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:464:86: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_function_procedure_body4870);
            	    procedure_declaration65=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration65.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_block_in_function_procedure_body4874);
            block66=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block66.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, function_procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_procedure_body"

    public static class package_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:1: package_spec : PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_spec_return package_spec() throws RecognitionException {
        PL_SQLParser.package_spec_return retval = new PL_SQLParser.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        Object root_0 = null;

        Token PACKAGE_KEYWORD67=null;
        Token char_literal74=null;
        Token END_KEYWORD75=null;
        Token SEPARATOR77=null;
        Token char_literal78=null;
        PL_SQLParser.package_spec_name_return package_spec_name68 = null;

        PL_SQLParser.invoker_clause_return invoker_clause69 = null;

        PL_SQLParser.as_is_part_return as_is_part70 = null;

        PL_SQLParser.variable_declaration_return variable_declaration71 = null;

        PL_SQLParser.function_spec_return function_spec72 = null;

        PL_SQLParser.procedure_spec_return procedure_spec73 = null;

        PL_SQLParser.universal_identifier_return universal_identifier76 = null;


        Object PACKAGE_KEYWORD67_tree=null;
        Object char_literal74_tree=null;
        Object END_KEYWORD75_tree=null;
        Object SEPARATOR77_tree=null;
        Object char_literal78_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:14: ( PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:16: PACKAGE_KEYWORD package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            PACKAGE_KEYWORD67=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_spec4882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE_KEYWORD67_tree = (Object)adaptor.create(PACKAGE_KEYWORD67);
            adaptor.addChild(root_0, PACKAGE_KEYWORD67_tree);
            }
            pushFollow(FOLLOW_package_spec_name_in_package_spec4884);
            package_spec_name68=package_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec_name68.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:466:50: ( invoker_clause )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AUTHID_KEYWORD) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_package_spec4886);
                    invoker_clause69=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_as_is_part_in_package_spec4889);
            as_is_part70=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part70.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:16: ( variable_declaration | ( ( function_spec | procedure_spec ) ';' ) )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==IDENTIFIER||LA26_0==TYPE_KEYWORD||LA26_0==INTERVAL_KEYWORD||LA26_0==SUBTYPE_KEYWORD||LA26_0==PRAGMA_KEYWORD||LA26_0==CURSOR_KEYWORD||LA26_0==RESULT_KEYWORD) ) {
                    alt26=1;
                }
                else if ( (LA26_0==FUNCTION_KEYWORD||LA26_0==PROCEDURE_KEYWORD) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_spec4907);
            	    variable_declaration71=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration71.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:40: ( ( function_spec | procedure_spec ) ';' )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:40: ( ( function_spec | procedure_spec ) ';' )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:41: ( function_spec | procedure_spec ) ';'
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:41: ( function_spec | procedure_spec )
            	    int alt25=2;
            	    int LA25_0 = input.LA(1);

            	    if ( (LA25_0==FUNCTION_KEYWORD) ) {
            	        alt25=1;
            	    }
            	    else if ( (LA25_0==PROCEDURE_KEYWORD) ) {
            	        alt25=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 25, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt25) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:42: function_spec
            	            {
            	            pushFollow(FOLLOW_function_spec_in_package_spec4913);
            	            function_spec72=function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec72.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:467:58: procedure_spec
            	            {
            	            pushFollow(FOLLOW_procedure_spec_in_package_spec4917);
            	            procedure_spec73=procedure_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec73.getTree());

            	            }
            	            break;

            	    }

            	    char_literal74=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec4920); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal74_tree = (Object)adaptor.create(char_literal74);
            	    adaptor.addChild(root_0, char_literal74_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            END_KEYWORD75=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_spec4941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD75_tree = (Object)adaptor.create(END_KEYWORD75);
            adaptor.addChild(root_0, END_KEYWORD75_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:28: ( universal_identifier )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( ((LA27_0>=IDENTIFIER && LA27_0<=EXT_IDENTIFIER)||LA27_0==INTERVAL_KEYWORD||LA27_0==RESULT_KEYWORD) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_spec4943);
                    universal_identifier76=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier76.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:50: ( SEPARATOR )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SEPARATOR) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR77=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec4946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR77_tree = (Object)adaptor.create(SEPARATOR77);
                    adaptor.addChild(root_0, SEPARATOR77_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:468:61: ( '/' )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==202) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal78=(Token)match(input,202,FOLLOW_202_in_package_spec4949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal78_tree = (Object)adaptor.create(char_literal78);
                    adaptor.addChild(root_0, char_literal78_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_spec_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:1: package_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_spec_name_return package_spec_name() throws RecognitionException {
        PL_SQLParser.package_spec_name_return retval = new PL_SQLParser.package_spec_name_return();
        retval.start = input.LT(1);
        int package_spec_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS80=null;
        PL_SQLParser.universal_identifier_return universal_identifier79 = null;


        Object ALIAS80_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:19: ( universal_identifier | ALIAS )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=IDENTIFIER && LA30_0<=EXT_IDENTIFIER)||LA30_0==INTERVAL_KEYWORD||LA30_0==RESULT_KEYWORD) ) {
                alt30=1;
            }
            else if ( (LA30_0==ALIAS) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:21: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_spec_name4957);
                    universal_identifier79=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier79.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:469:44: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS80=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_spec_name4961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS80_tree = (Object)adaptor.create(ALIAS80);
                    adaptor.addChild(root_0, ALIAS80_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, package_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec_name"

    public static class package_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:1: package_body : PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_body_return package_body() throws RecognitionException {
        PL_SQLParser.package_body_return retval = new PL_SQLParser.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        Object root_0 = null;

        Token PACKAGE_KEYWORD81=null;
        Token BODY_KEYWORD82=null;
        Token BEGIN_KEYWORD88=null;
        Token END_KEYWORD90=null;
        Token SEPARATOR92=null;
        Token char_literal93=null;
        PL_SQLParser.package_body_name_return package_body_name83 = null;

        PL_SQLParser.as_is_part_return as_is_part84 = null;

        PL_SQLParser.variable_declaration_return variable_declaration85 = null;

        PL_SQLParser.function_declaration_return function_declaration86 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration87 = null;

        PL_SQLParser.executable_section_return executable_section89 = null;

        PL_SQLParser.universal_identifier_return universal_identifier91 = null;


        Object PACKAGE_KEYWORD81_tree=null;
        Object BODY_KEYWORD82_tree=null;
        Object BEGIN_KEYWORD88_tree=null;
        Object END_KEYWORD90_tree=null;
        Object SEPARATOR92_tree=null;
        Object char_literal93_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:14: ( PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:470:16: PACKAGE_KEYWORD BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            PACKAGE_KEYWORD81=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_body4968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE_KEYWORD81_tree = (Object)adaptor.create(PACKAGE_KEYWORD81);
            adaptor.addChild(root_0, PACKAGE_KEYWORD81_tree);
            }
            BODY_KEYWORD82=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_package_body4970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD82_tree = (Object)adaptor.create(BODY_KEYWORD82);
            adaptor.addChild(root_0, BODY_KEYWORD82_tree);
            }
            pushFollow(FOLLOW_package_body_name_in_package_body4972);
            package_body_name83=package_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body_name83.getTree());
            pushFollow(FOLLOW_as_is_part_in_package_body4974);
            as_is_part84=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part84.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:16: ( variable_declaration | function_declaration | procedure_declaration )*
            loop31:
            do {
                int alt31=4;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case TYPE_KEYWORD:
                case INTERVAL_KEYWORD:
                case SUBTYPE_KEYWORD:
                case PRAGMA_KEYWORD:
                case CURSOR_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt31=1;
                    }
                    break;
                case FUNCTION_KEYWORD:
                    {
                    alt31=2;
                    }
                    break;
                case PROCEDURE_KEYWORD:
                    {
                    alt31=3;
                    }
                    break;

                }

                switch (alt31) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_body4992);
            	    variable_declaration85=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration85.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:40: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_package_body4996);
            	    function_declaration86=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration86.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:471:63: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_package_body5000);
            	    procedure_declaration87=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration87.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:16: ( BEGIN_KEYWORD ( executable_section )+ )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BEGIN_KEYWORD) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:17: BEGIN_KEYWORD ( executable_section )+
                    {
                    BEGIN_KEYWORD88=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_package_body5020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEGIN_KEYWORD88_tree = (Object)adaptor.create(BEGIN_KEYWORD88);
                    adaptor.addChild(root_0, BEGIN_KEYWORD88_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:31: ( executable_section )+
                    int cnt32=0;
                    loop32:
                    do {
                        int alt32=2;
                        int LA32_0 = input.LA(1);

                        if ( (LA32_0==NUMBER_UNSIGNED||LA32_0==STRING||(LA32_0>=IDENTIFIER && LA32_0<=EXT_IDENTIFIER)||LA32_0==NOT_OPERATOR||LA32_0==BEGIN_KEYWORD||LA32_0==DECLARE_KEYWORD||LA32_0==NULL_KEYWORD||(LA32_0>=TRUE_KEYWORD && LA32_0<=FALSE_KEYWORD)||LA32_0==INTERVAL_KEYWORD||LA32_0==REPLACE_KEYWORD||(LA32_0>=RETURN_KEYWORD && LA32_0<=IN_KEYWORD)||LA32_0==IF_KEYWORD||(LA32_0>=GOTO_KEYWORD && LA32_0<=FOR_KEYWORD)||LA32_0==SELECT_KEYWORD||(LA32_0>=RAISE_KEYWORD && LA32_0<=PRAGMA_KEYWORD)||(LA32_0>=CASE_KEYWORD && LA32_0<=CLOSE_KEYWORD)||LA32_0==COMMIT_KEYWORD||LA32_0==CONTINUE_KEYWORD||(LA32_0>=DELETE_KEYWORD && LA32_0<=EXECUTE_KEYWORD)||LA32_0==EXIT_KEYWORD||LA32_0==FETCH_KEYWORD||LA32_0==FORALL_KEYWORD||(LA32_0>=INSERT_KEYWORD && LA32_0<=OPEN_KEYWORD)||(LA32_0>=ROLLBACK_KEYWORD && LA32_0<=SAVEPOINT_KEYWORD)||LA32_0==SET_KEYWORD||(LA32_0>=SQLCODE_KEYWORD && LA32_0<=UPDATE_KEYWORD)||LA32_0==RESULT_KEYWORD||LA32_0==198||LA32_0==200||(LA32_0>=204 && LA32_0<=205)) ) {
                            alt32=1;
                        }


                        switch (alt32) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:472:32: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_package_body5023);
                    	    executable_section89=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section89.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt32 >= 1 ) break loop32;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(32, input);
                                throw eee;
                        }
                        cnt32++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD90=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_body5044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD90_tree = (Object)adaptor.create(END_KEYWORD90);
            adaptor.addChild(root_0, END_KEYWORD90_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:473:28: ( universal_identifier )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=IDENTIFIER && LA34_0<=EXT_IDENTIFIER)||LA34_0==INTERVAL_KEYWORD||LA34_0==RESULT_KEYWORD) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_body5046);
                    universal_identifier91=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier91.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:473:50: ( SEPARATOR )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==SEPARATOR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR92=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_body5049); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR92_tree = (Object)adaptor.create(SEPARATOR92);
                    adaptor.addChild(root_0, SEPARATOR92_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:473:61: ( '/' )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==202) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal93=(Token)match(input,202,FOLLOW_202_in_package_body5052); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal93_tree = (Object)adaptor.create(char_literal93);
                    adaptor.addChild(root_0, char_literal93_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_body_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:1: package_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_body_name_return package_body_name() throws RecognitionException {
        PL_SQLParser.package_body_name_return retval = new PL_SQLParser.package_body_name_return();
        retval.start = input.LT(1);
        int package_body_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS95=null;
        PL_SQLParser.universal_identifier_return universal_identifier94 = null;


        Object ALIAS95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:19: ( universal_identifier | ALIAS )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=IDENTIFIER && LA37_0<=EXT_IDENTIFIER)||LA37_0==INTERVAL_KEYWORD||LA37_0==RESULT_KEYWORD) ) {
                alt37=1;
            }
            else if ( (LA37_0==ALIAS) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:21: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_body_name5060);
                    universal_identifier94=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier94.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:474:44: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS95=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_body_name5064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS95_tree = (Object)adaptor.create(ALIAS95);
                    adaptor.addChild(root_0, ALIAS95_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body_name"

    public static class trigger_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:1: trigger_declaration : TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block ;
    public final PL_SQLParser.trigger_declaration_return trigger_declaration() throws RecognitionException {
        PL_SQLParser.trigger_declaration_return retval = new PL_SQLParser.trigger_declaration_return();
        retval.start = input.LT(1);
        int trigger_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token TRIGGER_KEYWORD96=null;
        PL_SQLParser.trigger_name_return trigger_name97 = null;

        PL_SQLParser.trigger_type_return trigger_type98 = null;

        PL_SQLParser.follows_part_return follows_part99 = null;

        PL_SQLParser.trigger_part_return trigger_part100 = null;

        PL_SQLParser.anonymous_block_return anonymous_block101 = null;


        Object TRIGGER_KEYWORD96_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:21: ( TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:23: TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block
            {
            root_0 = (Object)adaptor.nil();

            TRIGGER_KEYWORD96=(Token)match(input,TRIGGER_KEYWORD,FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRIGGER_KEYWORD96_tree = (Object)adaptor.create(TRIGGER_KEYWORD96);
            adaptor.addChild(root_0, TRIGGER_KEYWORD96_tree);
            }
            pushFollow(FOLLOW_trigger_name_in_trigger_declaration5073);
            trigger_name97=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_name97.getTree());
            pushFollow(FOLLOW_trigger_type_in_trigger_declaration5075);
            trigger_type98=trigger_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_type98.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:475:65: ( follows_part )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==FOLLOWS_KEYWORD) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: follows_part
                    {
                    pushFollow(FOLLOW_follows_part_in_trigger_declaration5077);
                    follows_part99=follows_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_part99.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_trigger_part_in_trigger_declaration5080);
            trigger_part100=trigger_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_part100.getTree());
            pushFollow(FOLLOW_anonymous_block_in_trigger_declaration5104);
            anonymous_block101=anonymous_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block101.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, trigger_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_declaration"

    public static class trigger_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:1: trigger_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.trigger_name_return trigger_name() throws RecognitionException {
        PL_SQLParser.trigger_name_return retval = new PL_SQLParser.trigger_name_return();
        retval.start = input.LT(1);
        int trigger_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS103=null;
        PL_SQLParser.universal_identifier_return universal_identifier102 = null;


        Object ALIAS103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:14: ( universal_identifier | ALIAS )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=IDENTIFIER && LA39_0<=EXT_IDENTIFIER)||LA39_0==INTERVAL_KEYWORD||LA39_0==RESULT_KEYWORD) ) {
                alt39=1;
            }
            else if ( (LA39_0==ALIAS) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:16: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_trigger_name5111);
                    universal_identifier102=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier102.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:477:39: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS103=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_trigger_name5115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS103_tree = (Object)adaptor.create(ALIAS103);
                    adaptor.addChild(root_0, ALIAS103_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, trigger_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_name"

    public static class follows_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:1: follows_part : FOLLOWS_KEYWORD universal_identifier ;
    public final PL_SQLParser.follows_part_return follows_part() throws RecognitionException {
        PL_SQLParser.follows_part_return retval = new PL_SQLParser.follows_part_return();
        retval.start = input.LT(1);
        int follows_part_StartIndex = input.index();
        Object root_0 = null;

        Token FOLLOWS_KEYWORD104=null;
        PL_SQLParser.universal_identifier_return universal_identifier105 = null;


        Object FOLLOWS_KEYWORD104_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:14: ( FOLLOWS_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:478:16: FOLLOWS_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            FOLLOWS_KEYWORD104=(Token)match(input,FOLLOWS_KEYWORD,FOLLOW_FOLLOWS_KEYWORD_in_follows_part5122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOLLOWS_KEYWORD104_tree = (Object)adaptor.create(FOLLOWS_KEYWORD104);
            adaptor.addChild(root_0, FOLLOWS_KEYWORD104_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_follows_part5124);
            universal_identifier105=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, follows_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "follows_part"

    public static class trigger_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:1: trigger_part : ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? ;
    public final PL_SQLParser.trigger_part_return trigger_part() throws RecognitionException {
        PL_SQLParser.trigger_part_return retval = new PL_SQLParser.trigger_part_return();
        retval.start = input.LT(1);
        int trigger_part_StartIndex = input.index();
        Object root_0 = null;

        Token set106=null;
        Token WHEN_KEYWORD107=null;
        PL_SQLParser.universal_expression_return universal_expression108 = null;


        Object set106_tree=null;
        Object WHEN_KEYWORD107_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:14: ( ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=ENABLE_KEYWORD && LA40_0<=DISABLE_KEYWORD)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set106=(Token)input.LT(1);
                    if ( (input.LA(1)>=ENABLE_KEYWORD && input.LA(1)<=DISABLE_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set106));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:52: ( WHEN_KEYWORD universal_expression )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHEN_KEYWORD) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:479:53: WHEN_KEYWORD universal_expression
                    {
                    WHEN_KEYWORD107=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_trigger_part5141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD107_tree = (Object)adaptor.create(WHEN_KEYWORD107);
                    adaptor.addChild(root_0, WHEN_KEYWORD107_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_trigger_part5143);
                    universal_expression108=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression108.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, trigger_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_part"

    public static class trigger_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:1: trigger_type : ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger );
    public final PL_SQLParser.trigger_type_return trigger_type() throws RecognitionException {
        PL_SQLParser.trigger_type_return retval = new PL_SQLParser.trigger_type_return();
        retval.start = input.LT(1);
        int trigger_type_StartIndex = input.index();
        Object root_0 = null;

        Token BEFORE_KEYWORD109=null;
        Token AFTER_KEYWORD112=null;
        Token INSTEAD_KEYWORD115=null;
        Token OF_KEYWORD116=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause110 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger111 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause113 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger114 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause117 = null;

        PL_SQLParser.compound_dml_trigger_return compound_dml_trigger118 = null;


        Object BEFORE_KEYWORD109_tree=null;
        Object AFTER_KEYWORD112_tree=null;
        Object INSTEAD_KEYWORD115_tree=null;
        Object OF_KEYWORD116_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:14: ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger )
            int alt44=4;
            switch ( input.LA(1) ) {
            case BEFORE_KEYWORD:
                {
                alt44=1;
                }
                break;
            case AFTER_KEYWORD:
                {
                alt44=2;
                }
                break;
            case INSTEAD_KEYWORD:
                {
                alt44=3;
                }
                break;
            case FOR_KEYWORD:
                {
                alt44=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:17: BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    BEFORE_KEYWORD109=(Token)match(input,BEFORE_KEYWORD,FOLLOW_BEFORE_KEYWORD_in_trigger_type5153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEFORE_KEYWORD109_tree = (Object)adaptor.create(BEFORE_KEYWORD109);
                    adaptor.addChild(root_0, BEFORE_KEYWORD109_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:32: ( dml_event_clause | non_dml_trigger )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==DELETE_KEYWORD||LA42_0==INSERT_KEYWORD||LA42_0==UPDATE_KEYWORD) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==IDENTIFIER||LA42_0==INTERVAL_KEYWORD||LA42_0==RESULT_KEYWORD) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:33: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5156);
                            dml_event_clause110=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause110.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:480:52: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5160);
                            non_dml_trigger111=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger111.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:17: AFTER_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    AFTER_KEYWORD112=(Token)match(input,AFTER_KEYWORD,FOLLOW_AFTER_KEYWORD_in_trigger_type5182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AFTER_KEYWORD112_tree = (Object)adaptor.create(AFTER_KEYWORD112);
                    adaptor.addChild(root_0, AFTER_KEYWORD112_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:31: ( dml_event_clause | non_dml_trigger )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==DELETE_KEYWORD||LA43_0==INSERT_KEYWORD||LA43_0==UPDATE_KEYWORD) ) {
                        alt43=1;
                    }
                    else if ( (LA43_0==IDENTIFIER||LA43_0==INTERVAL_KEYWORD||LA43_0==RESULT_KEYWORD) ) {
                        alt43=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 0, input);

                        throw nvae;
                    }
                    switch (alt43) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:32: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5185);
                            dml_event_clause113=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause113.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:481:51: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5189);
                            non_dml_trigger114=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger114.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:482:17: INSTEAD_KEYWORD OF_KEYWORD dml_event_clause
                    {
                    INSTEAD_KEYWORD115=(Token)match(input,INSTEAD_KEYWORD,FOLLOW_INSTEAD_KEYWORD_in_trigger_type5211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTEAD_KEYWORD115_tree = (Object)adaptor.create(INSTEAD_KEYWORD115);
                    adaptor.addChild(root_0, INSTEAD_KEYWORD115_tree);
                    }
                    OF_KEYWORD116=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_trigger_type5213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD116_tree = (Object)adaptor.create(OF_KEYWORD116);
                    adaptor.addChild(root_0, OF_KEYWORD116_tree);
                    }
                    pushFollow(FOLLOW_dml_event_clause_in_trigger_type5215);
                    dml_event_clause117=dml_event_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause117.getTree());

                    }


                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:483:16: compound_dml_trigger
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_dml_trigger_in_trigger_type5235);
                    compound_dml_trigger118=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_dml_trigger118.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, trigger_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_type"

    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:1: compound_dml_trigger : FOR_KEYWORD dml_event_clause ( referencing_clause )? ;
    public final PL_SQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        PL_SQLParser.compound_dml_trigger_return retval = new PL_SQLParser.compound_dml_trigger_return();
        retval.start = input.LT(1);
        int compound_dml_trigger_StartIndex = input.index();
        Object root_0 = null;

        Token FOR_KEYWORD119=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause120 = null;

        PL_SQLParser.referencing_clause_return referencing_clause121 = null;


        Object FOR_KEYWORD119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:22: ( FOR_KEYWORD dml_event_clause ( referencing_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:24: FOR_KEYWORD dml_event_clause ( referencing_clause )?
            {
            root_0 = (Object)adaptor.nil();

            FOR_KEYWORD119=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD119_tree = (Object)adaptor.create(FOR_KEYWORD119);
            adaptor.addChild(root_0, FOR_KEYWORD119_tree);
            }
            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger5244);
            dml_event_clause120=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause120.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:484:53: ( referencing_clause )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==REFERENCING_KEYWORD) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger5246);
                    referencing_clause121=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause121.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, compound_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"

    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:1: non_dml_trigger : ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier ;
    public final PL_SQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        PL_SQLParser.non_dml_trigger_return retval = new PL_SQLParser.non_dml_trigger_return();
        retval.start = input.LT(1);
        int non_dml_trigger_StartIndex = input.index();
        Object root_0 = null;

        Token OR_OPERATOR123=null;
        Token ON_KEYWORD124=null;
        PL_SQLParser.identifier_return identifier122 = null;

        PL_SQLParser.universal_identifier_return universal_identifier125 = null;


        Object OR_OPERATOR123_tree=null;
        Object ON_KEYWORD124_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:17: ( ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:19: ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:19: ( identifier ( OR_OPERATOR )? )+
            int cnt47=0;
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==IDENTIFIER||LA47_0==INTERVAL_KEYWORD||LA47_0==RESULT_KEYWORD) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:20: identifier ( OR_OPERATOR )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_non_dml_trigger5255);
            	    identifier122=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier122.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:485:31: ( OR_OPERATOR )?
            	    int alt46=2;
            	    int LA46_0 = input.LA(1);

            	    if ( (LA46_0==OR_OPERATOR) ) {
            	        alt46=1;
            	    }
            	    switch (alt46) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR123=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_non_dml_trigger5257); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR123_tree = (Object)adaptor.create(OR_OPERATOR123);
            	            adaptor.addChild(root_0, OR_OPERATOR123_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt47 >= 1 ) break loop47;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(47, input);
                        throw eee;
                }
                cnt47++;
            } while (true);

            ON_KEYWORD124=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_non_dml_trigger5262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD124_tree = (Object)adaptor.create(ON_KEYWORD124);
            adaptor.addChild(root_0, ON_KEYWORD124_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_non_dml_trigger5264);
            universal_identifier125=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier125.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, non_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"

    public static class dml_event_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:1: dml_event_clause : ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? ;
    public final PL_SQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
        PL_SQLParser.dml_event_clause_return retval = new PL_SQLParser.dml_event_clause_return();
        retval.start = input.LT(1);
        int dml_event_clause_StartIndex = input.index();
        Object root_0 = null;

        Token INSERT_KEYWORD126=null;
        Token DELETE_KEYWORD127=null;
        Token UPDATE_KEYWORD128=null;
        Token OR_OPERATOR130=null;
        Token FOR_KEYWORD134=null;
        Token EACH_KEYWORD135=null;
        Token ROW_KEYWORD136=null;
        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor129 = null;

        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor131 = null;

        PL_SQLParser.dml_event_clause_part_return dml_event_clause_part132 = null;

        PL_SQLParser.referencing_clause_return referencing_clause133 = null;


        Object INSERT_KEYWORD126_tree=null;
        Object DELETE_KEYWORD127_tree=null;
        Object UPDATE_KEYWORD128_tree=null;
        Object OR_OPERATOR130_tree=null;
        Object FOR_KEYWORD134_tree=null;
        Object EACH_KEYWORD135_tree=null;
        Object ROW_KEYWORD136_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:18: ( ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==DELETE_KEYWORD||LA52_0==INSERT_KEYWORD||LA52_0==UPDATE_KEYWORD) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) )
            	    int alt49=3;
            	    switch ( input.LA(1) ) {
            	    case INSERT_KEYWORD:
            	        {
            	        alt49=1;
            	        }
            	        break;
            	    case DELETE_KEYWORD:
            	        {
            	        alt49=2;
            	        }
            	        break;
            	    case UPDATE_KEYWORD:
            	        {
            	        alt49=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 49, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt49) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:22: INSERT_KEYWORD
            	            {
            	            INSERT_KEYWORD126=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_dml_event_clause5273); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INSERT_KEYWORD126_tree = (Object)adaptor.create(INSERT_KEYWORD126);
            	            adaptor.addChild(root_0, INSERT_KEYWORD126_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:486:39: DELETE_KEYWORD
            	            {
            	            DELETE_KEYWORD127=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_dml_event_clause5277); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DELETE_KEYWORD127_tree = (Object)adaptor.create(DELETE_KEYWORD127);
            	            adaptor.addChild(root_0, DELETE_KEYWORD127_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:22: UPDATE_KEYWORD ( dml_event_clause_factor )?
            	            {
            	            UPDATE_KEYWORD128=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5303); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UPDATE_KEYWORD128_tree = (Object)adaptor.create(UPDATE_KEYWORD128);
            	            adaptor.addChild(root_0, UPDATE_KEYWORD128_tree);
            	            }
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:37: ( dml_event_clause_factor )?
            	            int alt48=2;
            	            int LA48_0 = input.LA(1);

            	            if ( (LA48_0==OF_KEYWORD) ) {
            	                int LA48_1 = input.LA(2);

            	                if ( (synpred69_PL_SQL()) ) {
            	                    alt48=1;
            	                }
            	            }
            	            switch (alt48) {
            	                case 1 :
            	                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	                    {
            	                    pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5305);
            	                    dml_event_clause_factor129=dml_event_clause_factor();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor129.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:21: ( OR_OPERATOR )?
            	    int alt50=2;
            	    int LA50_0 = input.LA(1);

            	    if ( (LA50_0==OR_OPERATOR) ) {
            	        alt50=1;
            	    }
            	    switch (alt50) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR130=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_dml_event_clause5330); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR130_tree = (Object)adaptor.create(OR_OPERATOR130);
            	            adaptor.addChild(root_0, OR_OPERATOR130_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:488:34: ( dml_event_clause_factor )?
            	    int alt51=2;
            	    int LA51_0 = input.LA(1);

            	    if ( (LA51_0==OF_KEYWORD) ) {
            	        alt51=1;
            	    }
            	    switch (alt51) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	            {
            	            pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5333);
            	            dml_event_clause_factor131=dml_event_clause_factor();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor131.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);

            pushFollow(FOLLOW_dml_event_clause_part_in_dml_event_clause5358);
            dml_event_clause_part132=dml_event_clause_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_part132.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:43: ( referencing_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==REFERENCING_KEYWORD) ) {
                int LA53_2 = input.LA(2);

                if ( (synpred73_PL_SQL()) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_dml_event_clause5360);
                    referencing_clause133=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause133.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:21: ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==FOR_KEYWORD) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:490:22: FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD
                    {
                    FOR_KEYWORD134=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_dml_event_clause5384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD134_tree = (Object)adaptor.create(FOR_KEYWORD134);
                    adaptor.addChild(root_0, FOR_KEYWORD134_tree);
                    }
                    EACH_KEYWORD135=(Token)match(input,EACH_KEYWORD,FOLLOW_EACH_KEYWORD_in_dml_event_clause5386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EACH_KEYWORD135_tree = (Object)adaptor.create(EACH_KEYWORD135);
                    adaptor.addChild(root_0, EACH_KEYWORD135_tree);
                    }
                    ROW_KEYWORD136=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_dml_event_clause5388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD136_tree = (Object)adaptor.create(ROW_KEYWORD136);
                    adaptor.addChild(root_0, ROW_KEYWORD136_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, dml_event_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"

    public static class dml_event_clause_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:1: dml_event_clause_factor : OF_KEYWORD ( universal_identifier ( COMMA )? )+ ;
    public final PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor() throws RecognitionException {
        PL_SQLParser.dml_event_clause_factor_return retval = new PL_SQLParser.dml_event_clause_factor_return();
        retval.start = input.LT(1);
        int dml_event_clause_factor_StartIndex = input.index();
        Object root_0 = null;

        Token OF_KEYWORD137=null;
        Token COMMA139=null;
        PL_SQLParser.universal_identifier_return universal_identifier138 = null;


        Object OF_KEYWORD137_tree=null;
        Object COMMA139_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:25: ( OF_KEYWORD ( universal_identifier ( COMMA )? )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:27: OF_KEYWORD ( universal_identifier ( COMMA )? )+
            {
            root_0 = (Object)adaptor.nil();

            OF_KEYWORD137=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD137_tree = (Object)adaptor.create(OF_KEYWORD137);
            adaptor.addChild(root_0, OF_KEYWORD137_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:38: ( universal_identifier ( COMMA )? )+
            int cnt56=0;
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( ((LA56_0>=IDENTIFIER && LA56_0<=EXT_IDENTIFIER)||LA56_0==INTERVAL_KEYWORD||LA56_0==RESULT_KEYWORD) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:39: universal_identifier ( COMMA )?
            	    {
            	    pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_factor5400);
            	    universal_identifier138=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier138.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:491:60: ( COMMA )?
            	    int alt55=2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0==COMMA) ) {
            	        alt55=1;
            	    }
            	    switch (alt55) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: COMMA
            	            {
            	            COMMA139=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_clause_factor5402); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA139_tree = (Object)adaptor.create(COMMA139);
            	            adaptor.addChild(root_0, COMMA139_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        throw eee;
                }
                cnt56++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, dml_event_clause_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_factor"

    public static class dml_event_clause_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:1: dml_event_clause_part : ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) ;
    public final PL_SQLParser.dml_event_clause_part_return dml_event_clause_part() throws RecognitionException {
        PL_SQLParser.dml_event_clause_part_return retval = new PL_SQLParser.dml_event_clause_part_return();
        retval.start = input.LT(1);
        int dml_event_clause_part_StartIndex = input.index();
        Object root_0 = null;

        Token ON_KEYWORD140=null;
        Token NESTED_KEYWORD141=null;
        Token TABLE_KEYWORD142=null;
        Token OF_KEYWORD144=null;
        PL_SQLParser.identifier_return identifier143 = null;

        PL_SQLParser.universal_identifier_return universal_identifier145 = null;


        Object ON_KEYWORD140_tree=null;
        Object NESTED_KEYWORD141_tree=null;
        Object TABLE_KEYWORD142_tree=null;
        Object OF_KEYWORD144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:23: ( ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:25: ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            {
            root_0 = (Object)adaptor.nil();

            ON_KEYWORD140=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_dml_event_clause_part5412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD140_tree = (Object)adaptor.create(ON_KEYWORD140);
            adaptor.addChild(root_0, ON_KEYWORD140_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:36: ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==NESTED_KEYWORD) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:492:38: NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD
                    {
                    NESTED_KEYWORD141=(Token)match(input,NESTED_KEYWORD,FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_KEYWORD141_tree = (Object)adaptor.create(NESTED_KEYWORD141);
                    adaptor.addChild(root_0, NESTED_KEYWORD141_tree);
                    }
                    TABLE_KEYWORD142=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD142_tree = (Object)adaptor.create(TABLE_KEYWORD142);
                    adaptor.addChild(root_0, TABLE_KEYWORD142_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_dml_event_clause_part5420);
                    identifier143=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier143.getTree());
                    OF_KEYWORD144=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_part5422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD144_tree = (Object)adaptor.create(OF_KEYWORD144);
                    adaptor.addChild(root_0, OF_KEYWORD144_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_part5426);
            universal_identifier145=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier145.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, dml_event_clause_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_part"

    public static class referencing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:1: referencing_clause : REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ ;
    public final PL_SQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
        PL_SQLParser.referencing_clause_return retval = new PL_SQLParser.referencing_clause_return();
        retval.start = input.LT(1);
        int referencing_clause_StartIndex = input.index();
        Object root_0 = null;

        Token REFERENCING_KEYWORD146=null;
        Token set147=null;
        Token AS_KEYWORD148=null;
        Token OLD_KEYWORD149=null;
        Token NEW_KEYWORD150=null;
        PL_SQLParser.identifier_return identifier151 = null;


        Object REFERENCING_KEYWORD146_tree=null;
        Object set147_tree=null;
        Object AS_KEYWORD148_tree=null;
        Object OLD_KEYWORD149_tree=null;
        Object NEW_KEYWORD150_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:20: ( REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:22: REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            {
            root_0 = (Object)adaptor.nil();

            REFERENCING_KEYWORD146=(Token)match(input,REFERENCING_KEYWORD,FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCING_KEYWORD146_tree = (Object)adaptor.create(REFERENCING_KEYWORD146);
            adaptor.addChild(root_0, REFERENCING_KEYWORD146_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:42: ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            int cnt60=0;
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>=OLD_KEYWORD && LA60_0<=PARENT_KEYWORD)) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:493:44: ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    {
            	    set147=(Token)input.LT(1);
            	    if ( (input.LA(1)>=OLD_KEYWORD && input.LA(1)<=PARENT_KEYWORD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set147));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:22: ( AS_KEYWORD )?
            	    int alt58=2;
            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==AS_KEYWORD) ) {
            	        alt58=1;
            	    }
            	    switch (alt58) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: AS_KEYWORD
            	            {
            	            AS_KEYWORD148=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_referencing_clause5471); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AS_KEYWORD148_tree = (Object)adaptor.create(AS_KEYWORD148);
            	            adaptor.addChild(root_0, AS_KEYWORD148_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:34: ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    int alt59=3;
            	    switch ( input.LA(1) ) {
            	    case OLD_KEYWORD:
            	        {
            	        alt59=1;
            	        }
            	        break;
            	    case NEW_KEYWORD:
            	        {
            	        alt59=2;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    case INTERVAL_KEYWORD:
            	    case RESULT_KEYWORD:
            	        {
            	        alt59=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 59, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt59) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:35: OLD_KEYWORD
            	            {
            	            OLD_KEYWORD149=(Token)match(input,OLD_KEYWORD,FOLLOW_OLD_KEYWORD_in_referencing_clause5475); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OLD_KEYWORD149_tree = (Object)adaptor.create(OLD_KEYWORD149);
            	            adaptor.addChild(root_0, OLD_KEYWORD149_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:49: NEW_KEYWORD
            	            {
            	            NEW_KEYWORD150=(Token)match(input,NEW_KEYWORD,FOLLOW_NEW_KEYWORD_in_referencing_clause5479); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NEW_KEYWORD150_tree = (Object)adaptor.create(NEW_KEYWORD150);
            	            adaptor.addChild(root_0, NEW_KEYWORD150_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:494:63: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_referencing_clause5483);
            	            identifier151=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier151.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt60 >= 1 ) break loop60;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(60, input);
                        throw eee;
                }
                cnt60++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, referencing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"

    public static class type_spec_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:1: type_spec_declaration : TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_spec_declaration_return type_spec_declaration() throws RecognitionException {
        PL_SQLParser.type_spec_declaration_return retval = new PL_SQLParser.type_spec_declaration_return();
        retval.start = input.LT(1);
        int type_spec_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token TYPE_KEYWORD152=null;
        Token SEPARATOR157=null;
        Token char_literal158=null;
        PL_SQLParser.type_spec_name_return type_spec_name153 = null;

        PL_SQLParser.type_oid_part_return type_oid_part154 = null;

        PL_SQLParser.invoker_clause_return invoker_clause155 = null;

        PL_SQLParser.type_spec_types_return type_spec_types156 = null;


        Object TYPE_KEYWORD152_tree=null;
        Object SEPARATOR157_tree=null;
        Object char_literal158_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:23: ( TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:25: TYPE_KEYWORD type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD152=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_spec_declaration5494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD152_tree = (Object)adaptor.create(TYPE_KEYWORD152);
            adaptor.addChild(root_0, TYPE_KEYWORD152_tree);
            }
            pushFollow(FOLLOW_type_spec_name_in_type_spec_declaration5496);
            type_spec_name153=type_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_name153.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:53: ( type_oid_part )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==OID_KEYWORD) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: type_oid_part
                    {
                    pushFollow(FOLLOW_type_oid_part_in_type_spec_declaration5498);
                    type_oid_part154=type_oid_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_oid_part154.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:495:68: ( invoker_clause )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AUTHID_KEYWORD) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_type_spec_declaration5501);
                    invoker_clause155=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause155.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_types_in_type_spec_declaration5504);
            type_spec_types156=type_spec_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_types156.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:25: ( SEPARATOR )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==SEPARATOR) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR157=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_spec_declaration5530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR157_tree = (Object)adaptor.create(SEPARATOR157);
                    adaptor.addChild(root_0, SEPARATOR157_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:496:36: ( '/' )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==202) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal158=(Token)match(input,202,FOLLOW_202_in_type_spec_declaration5533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (Object)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, type_spec_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_declaration"

    public static class type_spec_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:1: type_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_spec_name_return type_spec_name() throws RecognitionException {
        PL_SQLParser.type_spec_name_return retval = new PL_SQLParser.type_spec_name_return();
        retval.start = input.LT(1);
        int type_spec_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS160=null;
        PL_SQLParser.universal_identifier_return universal_identifier159 = null;


        Object ALIAS160_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:16: ( universal_identifier | ALIAS )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=IDENTIFIER && LA65_0<=EXT_IDENTIFIER)||LA65_0==INTERVAL_KEYWORD||LA65_0==RESULT_KEYWORD) ) {
                alt65=1;
            }
            else if ( (LA65_0==ALIAS) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_spec_name5541);
                    universal_identifier159=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier159.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:497:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS160=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_spec_name5545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS160_tree = (Object)adaptor.create(ALIAS160);
                    adaptor.addChild(root_0, ALIAS160_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, type_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_name"

    public static class type_oid_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_oid_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:498:1: type_oid_part : OID_KEYWORD '\\'' universal_identifier '\\'' ;
    public final PL_SQLParser.type_oid_part_return type_oid_part() throws RecognitionException {
        PL_SQLParser.type_oid_part_return retval = new PL_SQLParser.type_oid_part_return();
        retval.start = input.LT(1);
        int type_oid_part_StartIndex = input.index();
        Object root_0 = null;

        Token OID_KEYWORD161=null;
        Token char_literal162=null;
        Token char_literal164=null;
        PL_SQLParser.universal_identifier_return universal_identifier163 = null;


        Object OID_KEYWORD161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal164_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:498:15: ( OID_KEYWORD '\\'' universal_identifier '\\'' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:498:17: OID_KEYWORD '\\'' universal_identifier '\\''
            {
            root_0 = (Object)adaptor.nil();

            OID_KEYWORD161=(Token)match(input,OID_KEYWORD,FOLLOW_OID_KEYWORD_in_type_oid_part5552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OID_KEYWORD161_tree = (Object)adaptor.create(OID_KEYWORD161);
            adaptor.addChild(root_0, OID_KEYWORD161_tree);
            }
            char_literal162=(Token)match(input,203,FOLLOW_203_in_type_oid_part5554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal162_tree = (Object)adaptor.create(char_literal162);
            adaptor.addChild(root_0, char_literal162_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_type_oid_part5556);
            universal_identifier163=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier163.getTree());
            char_literal164=(Token)match(input,203,FOLLOW_203_in_type_oid_part5558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal164_tree = (Object)adaptor.create(char_literal164);
            adaptor.addChild(root_0, char_literal164_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, type_oid_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_oid_part"

    public static class type_spec_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:1: type_spec_types : ( object_type | varray_type | nested_table_type );
    public final PL_SQLParser.type_spec_types_return type_spec_types() throws RecognitionException {
        PL_SQLParser.type_spec_types_return retval = new PL_SQLParser.type_spec_types_return();
        retval.start = input.LT(1);
        int type_spec_types_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.object_type_return object_type165 = null;

        PL_SQLParser.varray_type_return varray_type166 = null;

        PL_SQLParser.nested_table_type_return nested_table_type167 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:17: ( object_type | varray_type | nested_table_type )
            int alt66=3;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==UNDER_KEYWORD) ) {
                alt66=1;
            }
            else if ( (LA66_0==IS_KEYWORD||LA66_0==AS_KEYWORD) ) {
                int LA66_2 = input.LA(2);

                if ( (synpred89_PL_SQL()) ) {
                    alt66=1;
                }
                else if ( (synpred90_PL_SQL()) ) {
                    alt66=2;
                }
                else if ( (true) ) {
                    alt66=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:19: object_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_object_type_in_type_spec_types5566);
                    object_type165=object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type165.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:33: varray_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varray_type_in_type_spec_types5570);
                    varray_type166=varray_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_type166.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:47: nested_table_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nested_table_type_in_type_spec_types5574);
                    nested_table_type167=nested_table_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_type167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, type_spec_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_types"

    public static class object_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:1: object_type : ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? ;
    public final PL_SQLParser.object_type_return object_type() throws RecognitionException {
        PL_SQLParser.object_type_return retval = new PL_SQLParser.object_type_return();
        retval.start = input.LT(1);
        int object_type_StartIndex = input.index();
        Object root_0 = null;

        Token OBJECT_KEYWORD169=null;
        Token UNDER_KEYWORD170=null;
        Token NOT_OPERATOR173=null;
        Token FINAL_KEYWORD174=null;
        Token NOT_OPERATOR175=null;
        Token INSTANTIABLE_KEYWORD176=null;
        PL_SQLParser.as_is_part_return as_is_part168 = null;

        PL_SQLParser.universal_identifier_return universal_identifier171 = null;

        PL_SQLParser.object_type_part_return object_type_part172 = null;


        Object OBJECT_KEYWORD169_tree=null;
        Object UNDER_KEYWORD170_tree=null;
        Object NOT_OPERATOR173_tree=null;
        Object FINAL_KEYWORD174_tree=null;
        Object NOT_OPERATOR175_tree=null;
        Object INSTANTIABLE_KEYWORD176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:13: ( ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==IS_KEYWORD||LA67_0==AS_KEYWORD) ) {
                alt67=1;
            }
            else if ( (LA67_0==UNDER_KEYWORD) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:16: ( as_is_part OBJECT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:16: ( as_is_part OBJECT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:17: as_is_part OBJECT_KEYWORD
                    {
                    pushFollow(FOLLOW_as_is_part_in_object_type5583);
                    as_is_part168=as_is_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part168.getTree());
                    OBJECT_KEYWORD169=(Token)match(input,OBJECT_KEYWORD,FOLLOW_OBJECT_KEYWORD_in_object_type5585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OBJECT_KEYWORD169_tree = (Object)adaptor.create(OBJECT_KEYWORD169);
                    adaptor.addChild(root_0, OBJECT_KEYWORD169_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:46: ( UNDER_KEYWORD universal_identifier )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:46: ( UNDER_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:500:47: UNDER_KEYWORD universal_identifier
                    {
                    UNDER_KEYWORD170=(Token)match(input,UNDER_KEYWORD,FOLLOW_UNDER_KEYWORD_in_object_type5591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDER_KEYWORD170_tree = (Object)adaptor.create(UNDER_KEYWORD170);
                    adaptor.addChild(root_0, UNDER_KEYWORD170_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_object_type5593);
                    universal_identifier171=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier171.getTree());

                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:501:15: ( object_type_part )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==200) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: object_type_part
                    {
                    pushFollow(FOLLOW_object_type_part_in_object_type5611);
                    object_type_part172=object_type_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type_part172.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:16: ( ( NOT_OPERATOR )? FINAL_KEYWORD )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==FINAL_KEYWORD) ) {
                alt70=1;
            }
            else if ( (LA70_0==NOT_OPERATOR) ) {
                int LA70_3 = input.LA(2);

                if ( (synpred94_PL_SQL()) ) {
                    alt70=1;
                }
            }
            switch (alt70) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:17: ( NOT_OPERATOR )? FINAL_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:17: ( NOT_OPERATOR )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==NOT_OPERATOR) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR173=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5630); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR173_tree = (Object)adaptor.create(NOT_OPERATOR173);
                            adaptor.addChild(root_0, NOT_OPERATOR173_tree);
                            }

                            }
                            break;

                    }

                    FINAL_KEYWORD174=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_object_type5633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD174_tree = (Object)adaptor.create(FINAL_KEYWORD174);
                    adaptor.addChild(root_0, FINAL_KEYWORD174_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:47: ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==NOT_OPERATOR||LA72_0==INSTANTIABLE_KEYWORD) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:48: ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:48: ( NOT_OPERATOR )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==NOT_OPERATOR) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR175=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5638); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR175_tree = (Object)adaptor.create(NOT_OPERATOR175);
                            adaptor.addChild(root_0, NOT_OPERATOR175_tree);
                            }

                            }
                            break;

                    }

                    INSTANTIABLE_KEYWORD176=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD176_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD176);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD176_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, object_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type"

    public static class object_type_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:1: object_type_part : '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' ;
    public final PL_SQLParser.object_type_part_return object_type_part() throws RecognitionException {
        PL_SQLParser.object_type_part_return retval = new PL_SQLParser.object_type_part_return();
        retval.start = input.LT(1);
        int object_type_part_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal177=null;
        Token char_literal180=null;
        Token char_literal182=null;
        Token char_literal183=null;
        PL_SQLParser.identifier_return identifier178 = null;

        PL_SQLParser.data_type_return data_type179 = null;

        PL_SQLParser.element_spec_return element_spec181 = null;


        Object char_literal177_tree=null;
        Object char_literal180_tree=null;
        Object char_literal182_tree=null;
        Object char_literal183_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:18: ( '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:20: '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal177=(Token)match(input,200,FOLLOW_200_in_object_type_part5650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal177_tree = (Object)adaptor.create(char_literal177);
            adaptor.addChild(root_0, char_literal177_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:24: ( identifier data_type ( ',' )? )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==IDENTIFIER||LA74_0==INTERVAL_KEYWORD||LA74_0==RESULT_KEYWORD) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:25: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_object_type_part5653);
            	    identifier178=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier178.getTree());
            	    pushFollow(FOLLOW_data_type_in_object_type_part5655);
            	    data_type179=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type179.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:46: ( ',' )?
            	    int alt73=2;
            	    int LA73_0 = input.LA(1);

            	    if ( (LA73_0==COMMA) ) {
            	        alt73=1;
            	    }
            	    switch (alt73) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal180=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5657); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal180_tree = (Object)adaptor.create(char_literal180);
            	            adaptor.addChild(root_0, char_literal180_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:53: ( element_spec ( ',' )? )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==NOT_OPERATOR||(LA76_0>=FINAL_KEYWORD && LA76_0<=CONSTRUCTOR_KEYWORD)||(LA76_0>=MAP_KEYWORD && LA76_0<=ORDER_KEYWORD)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:54: element_spec ( ',' )?
            	    {
            	    pushFollow(FOLLOW_element_spec_in_object_type_part5663);
            	    element_spec181=element_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec181.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:503:67: ( ',' )?
            	    int alt75=2;
            	    int LA75_0 = input.LA(1);

            	    if ( (LA75_0==COMMA) ) {
            	        alt75=1;
            	    }
            	    switch (alt75) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal182=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5665); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal182_tree = (Object)adaptor.create(char_literal182);
            	            adaptor.addChild(root_0, char_literal182_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            char_literal183=(Token)match(input,201,FOLLOW_201_in_object_type_part5670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal183_tree = (Object)adaptor.create(char_literal183);
            adaptor.addChild(root_0, char_literal183_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, object_type_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type_part"

    public static class element_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:1: element_spec : ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? ;
    public final PL_SQLParser.element_spec_return element_spec() throws RecognitionException {
        PL_SQLParser.element_spec_return retval = new PL_SQLParser.element_spec_return();
        retval.start = input.LT(1);
        int element_spec_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal188=null;
        PL_SQLParser.inheritance_clauses_return inheritance_clauses184 = null;

        PL_SQLParser.subprogram_spec_return subprogram_spec185 = null;

        PL_SQLParser.constructor_spec_return constructor_spec186 = null;

        PL_SQLParser.map_order_function_spec_return map_order_function_spec187 = null;

        PL_SQLParser.pragma_clause_return pragma_clause189 = null;


        Object char_literal188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:14: ( ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:16: ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:16: ( inheritance_clauses )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=FINAL_KEYWORD && LA77_0<=INSTANTIABLE_KEYWORD)) ) {
                int LA77_1 = input.LA(2);

                if ( (synpred101_PL_SQL()) ) {
                    alt77=1;
                }
            }
            else if ( (LA77_0==NOT_OPERATOR||LA77_0==OVERRIDING_KEYWORD) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: inheritance_clauses
                    {
                    pushFollow(FOLLOW_inheritance_clauses_in_element_spec5677);
                    inheritance_clauses184=inheritance_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inheritance_clauses184.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:37: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( ((LA80_0>=FINAL_KEYWORD && LA80_0<=INSTANTIABLE_KEYWORD)||(LA80_0>=MEMBER_KEYWORD && LA80_0<=CONSTRUCTOR_KEYWORD)||(LA80_0>=MAP_KEYWORD && LA80_0<=ORDER_KEYWORD)) ) {
                    int LA80_1 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt80=1;
                    }


                }


                switch (alt80) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
            	    int alt78=3;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_KEYWORD:
            	    case STATIC_KEYWORD:
            	        {
            	        alt78=1;
            	        }
            	        break;
            	    case FINAL_KEYWORD:
            	    case INSTANTIABLE_KEYWORD:
            	    case CONSTRUCTOR_KEYWORD:
            	        {
            	        alt78=2;
            	        }
            	        break;
            	    case MAP_KEYWORD:
            	    case ORDER_KEYWORD:
            	        {
            	        alt78=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 78, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt78) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:39: subprogram_spec
            	            {
            	            pushFollow(FOLLOW_subprogram_spec_in_element_spec5682);
            	            subprogram_spec185=subprogram_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec185.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:57: constructor_spec
            	            {
            	            pushFollow(FOLLOW_constructor_spec_in_element_spec5686);
            	            constructor_spec186=constructor_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec186.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:76: map_order_function_spec
            	            {
            	            pushFollow(FOLLOW_map_order_function_spec_in_element_spec5690);
            	            map_order_function_spec187=map_order_function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec187.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:101: ( ',' )?
            	    int alt79=2;
            	    int LA79_0 = input.LA(1);

            	    if ( (LA79_0==COMMA) ) {
            	        int LA79_1 = input.LA(2);

            	        if ( (synpred104_PL_SQL()) ) {
            	            alt79=1;
            	        }
            	    }
            	    switch (alt79) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal188=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec5693); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal188_tree = (Object)adaptor.create(char_literal188);
            	            adaptor.addChild(root_0, char_literal188_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:505:16: ( pragma_clause )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==PRAGMA_KEYWORD) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec5713);
                    pragma_clause189=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_clause189.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, element_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_spec"

    public static class pragma_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:1: pragma_clause : PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ;
    public final PL_SQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
        PL_SQLParser.pragma_clause_return retval = new PL_SQLParser.pragma_clause_return();
        retval.start = input.LT(1);
        int pragma_clause_StartIndex = input.index();
        Object root_0 = null;

        Token PRAGMA_KEYWORD190=null;
        Token RESTRICT_REFERENCES_KEYWORD191=null;
        Token char_literal192=null;
        Token char_literal194=null;
        Token char_literal196=null;
        PL_SQLParser.expression_return expression193 = null;

        PL_SQLParser.expression_return expression195 = null;


        Object PRAGMA_KEYWORD190_tree=null;
        Object RESTRICT_REFERENCES_KEYWORD191_tree=null;
        Object char_literal192_tree=null;
        Object char_literal194_tree=null;
        Object char_literal196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:15: ( PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:17: PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
            {
            root_0 = (Object)adaptor.nil();

            PRAGMA_KEYWORD190=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD190_tree = (Object)adaptor.create(PRAGMA_KEYWORD190);
            adaptor.addChild(root_0, PRAGMA_KEYWORD190_tree);
            }
            RESTRICT_REFERENCES_KEYWORD191=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESTRICT_REFERENCES_KEYWORD191_tree = (Object)adaptor.create(RESTRICT_REFERENCES_KEYWORD191);
            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD191_tree);
            }
            char_literal192=(Token)match(input,200,FOLLOW_200_in_pragma_clause5725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal192_tree = (Object)adaptor.create(char_literal192);
            adaptor.addChild(root_0, char_literal192_tree);
            }
            pushFollow(FOLLOW_expression_in_pragma_clause5727);
            expression193=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression193.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:75: ( ',' expression )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:506:76: ',' expression
            	    {
            	    char_literal194=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause5730); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal194_tree = (Object)adaptor.create(char_literal194);
            	    adaptor.addChild(root_0, char_literal194_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_pragma_clause5732);
            	    expression195=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression195.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);

            char_literal196=(Token)match(input,201,FOLLOW_201_in_pragma_clause5736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal196_tree = (Object)adaptor.create(char_literal196);
            adaptor.addChild(root_0, char_literal196_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, pragma_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"

    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:1: map_order_function_spec : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec ;
    public final PL_SQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        PL_SQLParser.map_order_function_spec_return retval = new PL_SQLParser.map_order_function_spec_return();
        retval.start = input.LT(1);
        int map_order_function_spec_StartIndex = input.index();
        Object root_0 = null;

        Token set197=null;
        Token MEMBER_KEYWORD198=null;
        PL_SQLParser.function_spec_return function_spec199 = null;


        Object set197_tree=null;
        Object MEMBER_KEYWORD198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:25: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:507:27: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec
            {
            root_0 = (Object)adaptor.nil();

            set197=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set197));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD198=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec5751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD198_tree = (Object)adaptor.create(MEMBER_KEYWORD198);
            adaptor.addChild(root_0, MEMBER_KEYWORD198_tree);
            }
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec5753);
            function_spec199=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec199.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, map_order_function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"

    public static class constructor_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:1: constructor_spec : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? ;
    public final PL_SQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
        PL_SQLParser.constructor_spec_return retval = new PL_SQLParser.constructor_spec_return();
        retval.start = input.LT(1);
        int constructor_spec_StartIndex = input.index();
        Object root_0 = null;

        Token FINAL_KEYWORD200=null;
        Token INSTANTIABLE_KEYWORD201=null;
        Token CONSTRUCTOR_KEYWORD202=null;
        Token FUNCTION_KEYWORD203=null;
        PL_SQLParser.data_type_return data_type204 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part205 = null;


        Object FINAL_KEYWORD200_tree=null;
        Object INSTANTIABLE_KEYWORD201_tree=null;
        Object CONSTRUCTOR_KEYWORD202_tree=null;
        Object FUNCTION_KEYWORD203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:18: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:20: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:20: ( FINAL_KEYWORD )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FINAL_KEYWORD) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD200=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_spec5760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD200_tree = (Object)adaptor.create(FINAL_KEYWORD200);
                    adaptor.addChild(root_0, FINAL_KEYWORD200_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:508:35: ( INSTANTIABLE_KEYWORD )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==INSTANTIABLE_KEYWORD) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD201=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec5763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD201_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD201);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD201_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD202=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec5766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD202_tree = (Object)adaptor.create(CONSTRUCTOR_KEYWORD202);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD202_tree);
            }
            FUNCTION_KEYWORD203=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_spec5768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD203_tree = (Object)adaptor.create(FUNCTION_KEYWORD203);
            adaptor.addChild(root_0, FUNCTION_KEYWORD203_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_spec5789);
            data_type204=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type204.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:509:30: ( constructor_spec_part )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==200) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_spec5791);
                    constructor_spec_part205=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part205.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, constructor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"

    public static class constructor_spec_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:1: constructor_spec_part : '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD ;
    public final PL_SQLParser.constructor_spec_part_return constructor_spec_part() throws RecognitionException {
        PL_SQLParser.constructor_spec_part_return retval = new PL_SQLParser.constructor_spec_part_return();
        retval.start = input.LT(1);
        int constructor_spec_part_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal206=null;
        Token SELF_KEYWORD207=null;
        Token IN_KEYWORD208=null;
        Token OUT_KEYWORD209=null;
        Token char_literal210=null;
        Token char_literal213=null;
        Token char_literal214=null;
        Token RETURN_KEYWORD215=null;
        Token SELF_KEYWORD216=null;
        Token AS_KEYWORD217=null;
        Token RESULT_KEYWORD218=null;
        PL_SQLParser.identifier_return identifier211 = null;

        PL_SQLParser.data_type_return data_type212 = null;


        Object char_literal206_tree=null;
        Object SELF_KEYWORD207_tree=null;
        Object IN_KEYWORD208_tree=null;
        Object OUT_KEYWORD209_tree=null;
        Object char_literal210_tree=null;
        Object char_literal213_tree=null;
        Object char_literal214_tree=null;
        Object RETURN_KEYWORD215_tree=null;
        Object SELF_KEYWORD216_tree=null;
        Object AS_KEYWORD217_tree=null;
        Object RESULT_KEYWORD218_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:23: ( '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:25: '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            char_literal206=(Token)match(input,200,FOLLOW_200_in_constructor_spec_part5799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal206_tree = (Object)adaptor.create(char_literal206);
            adaptor.addChild(root_0, char_literal206_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:29: ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SELF_KEYWORD) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:510:30: SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ','
                    {
                    SELF_KEYWORD207=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part5802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF_KEYWORD207_tree = (Object)adaptor.create(SELF_KEYWORD207);
                    adaptor.addChild(root_0, SELF_KEYWORD207_tree);
                    }
                    IN_KEYWORD208=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part5804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD208_tree = (Object)adaptor.create(IN_KEYWORD208);
                    adaptor.addChild(root_0, IN_KEYWORD208_tree);
                    }
                    OUT_KEYWORD209=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_constructor_spec_part5806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD209_tree = (Object)adaptor.create(OUT_KEYWORD209);
                    adaptor.addChild(root_0, OUT_KEYWORD209_tree);
                    }
                    char_literal210=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part5808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal210_tree = (Object)adaptor.create(char_literal210);
                    adaptor.addChild(root_0, char_literal210_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:25: ( identifier data_type ( ',' )? )+
            int cnt88=0;
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==IDENTIFIER||LA88_0==INTERVAL_KEYWORD||LA88_0==RESULT_KEYWORD) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:26: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_constructor_spec_part5837);
            	    identifier211=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier211.getTree());
            	    pushFollow(FOLLOW_data_type_in_constructor_spec_part5839);
            	    data_type212=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type212.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:511:47: ( ',' )?
            	    int alt87=2;
            	    int LA87_0 = input.LA(1);

            	    if ( (LA87_0==COMMA) ) {
            	        alt87=1;
            	    }
            	    switch (alt87) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal213=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part5841); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal213_tree = (Object)adaptor.create(char_literal213);
            	            adaptor.addChild(root_0, char_literal213_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);

            char_literal214=(Token)match(input,201,FOLLOW_201_in_constructor_spec_part5846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal214_tree = (Object)adaptor.create(char_literal214);
            adaptor.addChild(root_0, char_literal214_tree);
            }
            RETURN_KEYWORD215=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_constructor_spec_part5872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD215_tree = (Object)adaptor.create(RETURN_KEYWORD215);
            adaptor.addChild(root_0, RETURN_KEYWORD215_tree);
            }
            SELF_KEYWORD216=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part5874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELF_KEYWORD216_tree = (Object)adaptor.create(SELF_KEYWORD216);
            adaptor.addChild(root_0, SELF_KEYWORD216_tree);
            }
            AS_KEYWORD217=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_constructor_spec_part5876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_KEYWORD217_tree = (Object)adaptor.create(AS_KEYWORD217);
            adaptor.addChild(root_0, AS_KEYWORD217_tree);
            }
            RESULT_KEYWORD218=(Token)match(input,RESULT_KEYWORD,FOLLOW_RESULT_KEYWORD_in_constructor_spec_part5878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESULT_KEYWORD218_tree = (Object)adaptor.create(RESULT_KEYWORD218);
            adaptor.addChild(root_0, RESULT_KEYWORD218_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, constructor_spec_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec_part"

    public static class subprogram_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:1: subprogram_spec : ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) ;
    public final PL_SQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
        PL_SQLParser.subprogram_spec_return retval = new PL_SQLParser.subprogram_spec_return();
        retval.start = input.LT(1);
        int subprogram_spec_StartIndex = input.index();
        Object root_0 = null;

        Token set219=null;
        PL_SQLParser.function_spec_return function_spec220 = null;

        PL_SQLParser.procedure_spec_return procedure_spec221 = null;


        Object set219_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:17: ( ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:19: ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec )
            {
            root_0 = (Object)adaptor.nil();

            set219=(Token)input.LT(1);
            if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set219));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:53: ( function_spec | procedure_spec )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==FUNCTION_KEYWORD) ) {
                alt89=1;
            }
            else if ( (LA89_0==PROCEDURE_KEYWORD) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:54: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec5894);
                    function_spec220=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec220.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:513:70: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec5898);
                    procedure_spec221=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec221.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, subprogram_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"

    public static class inheritance_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritance_clauses"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:1: inheritance_clauses : ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) ;
    public final PL_SQLParser.inheritance_clauses_return inheritance_clauses() throws RecognitionException {
        PL_SQLParser.inheritance_clauses_return retval = new PL_SQLParser.inheritance_clauses_return();
        retval.start = input.LT(1);
        int inheritance_clauses_StartIndex = input.index();
        Object root_0 = null;

        Token NOT_OPERATOR222=null;
        Token set223=null;

        Object NOT_OPERATOR222_tree=null;
        Object set223_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:21: ( ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:23: ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:514:23: ( NOT_OPERATOR )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==NOT_OPERATOR) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR222=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_inheritance_clauses5906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR222_tree = (Object)adaptor.create(NOT_OPERATOR222);
                    adaptor.addChild(root_0, NOT_OPERATOR222_tree);
                    }

                    }
                    break;

            }

            set223=(Token)input.LT(1);
            if ( (input.LA(1)>=FINAL_KEYWORD && input.LA(1)<=OVERRIDING_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set223));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, inheritance_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inheritance_clauses"

    public static class varray_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:1: varray_type : as_is_part collection_varray_datatype ;
    public final PL_SQLParser.varray_type_return varray_type() throws RecognitionException {
        PL_SQLParser.varray_type_return retval = new PL_SQLParser.varray_type_return();
        retval.start = input.LT(1);
        int varray_type_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part224 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype225 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:13: ( as_is_part collection_varray_datatype )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:515:15: as_is_part collection_varray_datatype
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_varray_type5926);
            as_is_part224=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part224.getTree());
            pushFollow(FOLLOW_collection_varray_datatype_in_varray_type5928);
            collection_varray_datatype225=collection_varray_datatype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype225.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, varray_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_type"

    public static class nested_table_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:516:1: nested_table_type : as_is_part TABLE_KEYWORD OF_KEYWORD data_type ;
    public final PL_SQLParser.nested_table_type_return nested_table_type() throws RecognitionException {
        PL_SQLParser.nested_table_type_return retval = new PL_SQLParser.nested_table_type_return();
        retval.start = input.LT(1);
        int nested_table_type_StartIndex = input.index();
        Object root_0 = null;

        Token TABLE_KEYWORD227=null;
        Token OF_KEYWORD228=null;
        PL_SQLParser.as_is_part_return as_is_part226 = null;

        PL_SQLParser.data_type_return data_type229 = null;


        Object TABLE_KEYWORD227_tree=null;
        Object OF_KEYWORD228_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:516:19: ( as_is_part TABLE_KEYWORD OF_KEYWORD data_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:516:21: as_is_part TABLE_KEYWORD OF_KEYWORD data_type
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_nested_table_type5935);
            as_is_part226=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part226.getTree());
            TABLE_KEYWORD227=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_nested_table_type5937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD227_tree = (Object)adaptor.create(TABLE_KEYWORD227);
            adaptor.addChild(root_0, TABLE_KEYWORD227_tree);
            }
            OF_KEYWORD228=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_nested_table_type5939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD228_tree = (Object)adaptor.create(OF_KEYWORD228);
            adaptor.addChild(root_0, OF_KEYWORD228_tree);
            }
            pushFollow(FOLLOW_data_type_in_nested_table_type5941);
            data_type229=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type229.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, nested_table_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_type"

    public static class type_body_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:1: type_body_declaration : TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_body_declaration_return type_body_declaration() throws RecognitionException {
        PL_SQLParser.type_body_declaration_return retval = new PL_SQLParser.type_body_declaration_return();
        retval.start = input.LT(1);
        int type_body_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token TYPE_KEYWORD230=null;
        Token BODY_KEYWORD231=null;
        Token char_literal236=null;
        Token END_KEYWORD237=null;
        Token SEPARATOR238=null;
        Token char_literal239=null;
        PL_SQLParser.type_body_name_return type_body_name232 = null;

        PL_SQLParser.as_is_part_return as_is_part233 = null;

        PL_SQLParser.subprogram_declaration_return subprogram_declaration234 = null;

        PL_SQLParser.map_order_func_declaration_return map_order_func_declaration235 = null;


        Object TYPE_KEYWORD230_tree=null;
        Object BODY_KEYWORD231_tree=null;
        Object char_literal236_tree=null;
        Object END_KEYWORD237_tree=null;
        Object SEPARATOR238_tree=null;
        Object char_literal239_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:23: ( TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:517:25: TYPE_KEYWORD BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD230=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_body_declaration5948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD230_tree = (Object)adaptor.create(TYPE_KEYWORD230);
            adaptor.addChild(root_0, TYPE_KEYWORD230_tree);
            }
            BODY_KEYWORD231=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_type_body_declaration5950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD231_tree = (Object)adaptor.create(BODY_KEYWORD231);
            adaptor.addChild(root_0, BODY_KEYWORD231_tree);
            }
            pushFollow(FOLLOW_type_body_name_in_type_body_declaration5952);
            type_body_name232=type_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_name232.getTree());
            pushFollow(FOLLOW_as_is_part_in_type_body_declaration5954);
            as_is_part233=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part233.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:25: ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==FUNCTION_KEYWORD||LA93_0==PROCEDURE_KEYWORD||(LA93_0>=FINAL_KEYWORD && LA93_0<=INSTANTIABLE_KEYWORD)||(LA93_0>=MEMBER_KEYWORD && LA93_0<=CONSTRUCTOR_KEYWORD)||(LA93_0>=MAP_KEYWORD && LA93_0<=ORDER_KEYWORD)) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:26: ( subprogram_declaration | map_order_func_declaration ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:26: ( subprogram_declaration | map_order_func_declaration )
            	    int alt91=2;
            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==FUNCTION_KEYWORD||LA91_0==PROCEDURE_KEYWORD||(LA91_0>=FINAL_KEYWORD && LA91_0<=INSTANTIABLE_KEYWORD)||(LA91_0>=MEMBER_KEYWORD && LA91_0<=CONSTRUCTOR_KEYWORD)) ) {
            	        alt91=1;
            	    }
            	    else if ( ((LA91_0>=MAP_KEYWORD && LA91_0<=ORDER_KEYWORD)) ) {
            	        alt91=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 91, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt91) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:27: subprogram_declaration
            	            {
            	            pushFollow(FOLLOW_subprogram_declaration_in_type_body_declaration5982);
            	            subprogram_declaration234=subprogram_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_declaration234.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:52: map_order_func_declaration
            	            {
            	            pushFollow(FOLLOW_map_order_func_declaration_in_type_body_declaration5986);
            	            map_order_func_declaration235=map_order_func_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration235.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:518:80: ( ',' )?
            	    int alt92=2;
            	    int LA92_0 = input.LA(1);

            	    if ( (LA92_0==COMMA) ) {
            	        alt92=1;
            	    }
            	    switch (alt92) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal236=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body_declaration5989); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal236_tree = (Object)adaptor.create(char_literal236);
            	            adaptor.addChild(root_0, char_literal236_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);

            END_KEYWORD237=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_type_body_declaration5995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD237_tree = (Object)adaptor.create(END_KEYWORD237);
            adaptor.addChild(root_0, END_KEYWORD237_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:25: ( SEPARATOR )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==SEPARATOR) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR238=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_body_declaration6021); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR238_tree = (Object)adaptor.create(SEPARATOR238);
                    adaptor.addChild(root_0, SEPARATOR238_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:519:36: ( '/' )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==202) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal239=(Token)match(input,202,FOLLOW_202_in_type_body_declaration6024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal239_tree = (Object)adaptor.create(char_literal239);
                    adaptor.addChild(root_0, char_literal239_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, type_body_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_declaration"

    public static class type_body_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:1: type_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_body_name_return type_body_name() throws RecognitionException {
        PL_SQLParser.type_body_name_return retval = new PL_SQLParser.type_body_name_return();
        retval.start = input.LT(1);
        int type_body_name_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS241=null;
        PL_SQLParser.universal_identifier_return universal_identifier240 = null;


        Object ALIAS241_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:16: ( universal_identifier | ALIAS )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=IDENTIFIER && LA96_0<=EXT_IDENTIFIER)||LA96_0==INTERVAL_KEYWORD||LA96_0==RESULT_KEYWORD) ) {
                alt96=1;
            }
            else if ( (LA96_0==ALIAS) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:18: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_body_name6032);
                    universal_identifier240=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier240.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:520:41: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS241=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_body_name6036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS241_tree = (Object)adaptor.create(ALIAS241);
                    adaptor.addChild(root_0, ALIAS241_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, type_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_name"

    public static class subprogram_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:521:1: subprogram_declaration : ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) ;
    public final PL_SQLParser.subprogram_declaration_return subprogram_declaration() throws RecognitionException {
        PL_SQLParser.subprogram_declaration_return retval = new PL_SQLParser.subprogram_declaration_return();
        retval.start = input.LT(1);
        int subprogram_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token set242=null;
        PL_SQLParser.function_declaration_return function_declaration243 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration244 = null;

        PL_SQLParser.constructor_declaration_return constructor_declaration245 = null;


        Object set242_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:521:24: ( ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:521:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:521:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=MEMBER_KEYWORD && LA97_0<=STATIC_KEYWORD)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set242=(Token)input.LT(1);
                    if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set242));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:26: ( function_declaration | procedure_declaration | constructor_declaration )
            int alt98=3;
            switch ( input.LA(1) ) {
            case FUNCTION_KEYWORD:
                {
                alt98=1;
                }
                break;
            case PROCEDURE_KEYWORD:
                {
                alt98=2;
                }
                break;
            case FINAL_KEYWORD:
            case INSTANTIABLE_KEYWORD:
            case CONSTRUCTOR_KEYWORD:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:27: function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_subprogram_declaration6078);
                    function_declaration243=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration243.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:50: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_subprogram_declaration6082);
                    procedure_declaration244=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration244.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:522:74: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprogram_declaration6086);
                    constructor_declaration245=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration245.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, subprogram_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_declaration"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:523:1: constructor_declaration : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body ;
    public final PL_SQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        PL_SQLParser.constructor_declaration_return retval = new PL_SQLParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token FINAL_KEYWORD246=null;
        Token INSTANTIABLE_KEYWORD247=null;
        Token CONSTRUCTOR_KEYWORD248=null;
        Token FUNCTION_KEYWORD249=null;
        PL_SQLParser.data_type_return data_type250 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part251 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body252 = null;


        Object FINAL_KEYWORD246_tree=null;
        Object INSTANTIABLE_KEYWORD247_tree=null;
        Object CONSTRUCTOR_KEYWORD248_tree=null;
        Object FUNCTION_KEYWORD249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:523:25: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:523:27: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:523:27: ( FINAL_KEYWORD )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==FINAL_KEYWORD) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD246=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_declaration6094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD246_tree = (Object)adaptor.create(FINAL_KEYWORD246);
                    adaptor.addChild(root_0, FINAL_KEYWORD246_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:523:42: ( INSTANTIABLE_KEYWORD )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==INSTANTIABLE_KEYWORD) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD247=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD247_tree = (Object)adaptor.create(INSTANTIABLE_KEYWORD247);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD247_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD248=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD248_tree = (Object)adaptor.create(CONSTRUCTOR_KEYWORD248);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD248_tree);
            }
            FUNCTION_KEYWORD249=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD249_tree = (Object)adaptor.create(FUNCTION_KEYWORD249);
            adaptor.addChild(root_0, FUNCTION_KEYWORD249_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_declaration6130);
            data_type250=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type250.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:524:37: ( constructor_spec_part )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==200) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_declaration6132);
                    constructor_spec_part251=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part251.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_procedure_body_in_constructor_declaration6135);
            function_procedure_body252=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body252.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, constructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_func_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:525:1: map_order_func_declaration : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration ;
    public final PL_SQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        PL_SQLParser.map_order_func_declaration_return retval = new PL_SQLParser.map_order_func_declaration_return();
        retval.start = input.LT(1);
        int map_order_func_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token set253=null;
        Token MEMBER_KEYWORD254=null;
        PL_SQLParser.function_declaration_return function_declaration255 = null;


        Object set253_tree=null;
        Object MEMBER_KEYWORD254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:525:28: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:525:30: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration
            {
            root_0 = (Object)adaptor.nil();

            set253=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set253));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD254=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD254_tree = (Object)adaptor.create(MEMBER_KEYWORD254);
            adaptor.addChild(root_0, MEMBER_KEYWORD254_tree);
            }
            pushFollow(FOLLOW_function_declaration_in_map_order_func_declaration6152);
            function_declaration255=function_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration255.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, map_order_func_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:1: block : BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.block_return block() throws RecognitionException {
        PL_SQLParser.block_return retval = new PL_SQLParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token BEGIN_KEYWORD256=null;
        Token END_KEYWORD259=null;
        Token SEPARATOR261=null;
        Token char_literal262=null;
        PL_SQLParser.executable_section_return executable_section257 = null;

        PL_SQLParser.exception_section_return exception_section258 = null;

        PL_SQLParser.universal_identifier_return universal_identifier260 = null;


        Object BEGIN_KEYWORD256_tree=null;
        Object END_KEYWORD259_tree=null;
        Object SEPARATOR261_tree=null;
        Object char_literal262_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:7: ( BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:527:9: BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (Object)adaptor.nil();

            BEGIN_KEYWORD256=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_block6160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BEGIN_KEYWORD256_tree = (Object)adaptor.create(BEGIN_KEYWORD256);
            adaptor.addChild(root_0, BEGIN_KEYWORD256_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:528:2: ( executable_section )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==NUMBER_UNSIGNED||LA102_0==STRING||(LA102_0>=IDENTIFIER && LA102_0<=EXT_IDENTIFIER)||LA102_0==NOT_OPERATOR||LA102_0==BEGIN_KEYWORD||LA102_0==DECLARE_KEYWORD||LA102_0==NULL_KEYWORD||(LA102_0>=TRUE_KEYWORD && LA102_0<=FALSE_KEYWORD)||LA102_0==INTERVAL_KEYWORD||LA102_0==REPLACE_KEYWORD||(LA102_0>=RETURN_KEYWORD && LA102_0<=IN_KEYWORD)||LA102_0==IF_KEYWORD||(LA102_0>=GOTO_KEYWORD && LA102_0<=FOR_KEYWORD)||LA102_0==SELECT_KEYWORD||(LA102_0>=RAISE_KEYWORD && LA102_0<=PRAGMA_KEYWORD)||(LA102_0>=CASE_KEYWORD && LA102_0<=CLOSE_KEYWORD)||LA102_0==COMMIT_KEYWORD||LA102_0==CONTINUE_KEYWORD||(LA102_0>=DELETE_KEYWORD && LA102_0<=EXECUTE_KEYWORD)||LA102_0==EXIT_KEYWORD||LA102_0==FETCH_KEYWORD||LA102_0==FORALL_KEYWORD||(LA102_0>=INSERT_KEYWORD && LA102_0<=OPEN_KEYWORD)||(LA102_0>=ROLLBACK_KEYWORD && LA102_0<=SAVEPOINT_KEYWORD)||LA102_0==SET_KEYWORD||(LA102_0>=SQLCODE_KEYWORD && LA102_0<=UPDATE_KEYWORD)||LA102_0==RESULT_KEYWORD||LA102_0==198||LA102_0==200||(LA102_0>=204 && LA102_0<=205)) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:528:3: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_block6164);
            	    executable_section257=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section257.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:528:25: ( exception_section )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==EXCEPTION_KEYWORD) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: exception_section
                    {
                    pushFollow(FOLLOW_exception_section_in_block6169);
                    exception_section258=exception_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_section258.getTree());

                    }
                    break;

            }

            END_KEYWORD259=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_block6180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD259_tree = (Object)adaptor.create(END_KEYWORD259);
            adaptor.addChild(root_0, END_KEYWORD259_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:21: ( universal_identifier )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( ((LA104_0>=IDENTIFIER && LA104_0<=EXT_IDENTIFIER)||LA104_0==INTERVAL_KEYWORD||LA104_0==RESULT_KEYWORD) ) {
                int LA104_1 = input.LA(2);

                if ( (synpred136_PL_SQL()) ) {
                    alt104=1;
                }
            }
            switch (alt104) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_block6182);
                    universal_identifier260=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier260.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:43: ( SEPARATOR )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==SEPARATOR) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR261=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_block6185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR261_tree = (Object)adaptor.create(SEPARATOR261);
                    adaptor.addChild(root_0, SEPARATOR261_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:530:9: ( '/' )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==202) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal262=(Token)match(input,202,FOLLOW_202_in_block6196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal262_tree = (Object)adaptor.create(char_literal262);
                    adaptor.addChild(root_0, char_literal262_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class anonymous_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:1: anonymous_block : ( anonymous_block_declare_section )? block ;
    public final PL_SQLParser.anonymous_block_return anonymous_block() throws RecognitionException {
        PL_SQLParser.anonymous_block_return retval = new PL_SQLParser.anonymous_block_return();
        retval.start = input.LT(1);
        int anonymous_block_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section263 = null;

        PL_SQLParser.block_return block264 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:17: ( ( anonymous_block_declare_section )? block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:19: ( anonymous_block_declare_section )? block
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:531:19: ( anonymous_block_declare_section )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==DECLARE_KEYWORD) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: anonymous_block_declare_section
                    {
                    pushFollow(FOLLOW_anonymous_block_declare_section_in_anonymous_block6204);
                    anonymous_block_declare_section263=anonymous_block_declare_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block_declare_section263.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_block6207);
            block264=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block264.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, anonymous_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block"

    public static class executable_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:1: executable_section : ( statement | anonymous_block );
    public final PL_SQLParser.executable_section_return executable_section() throws RecognitionException {
        PL_SQLParser.executable_section_return retval = new PL_SQLParser.executable_section_return();
        retval.start = input.LT(1);
        int executable_section_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.statement_return statement265 = null;

        PL_SQLParser.anonymous_block_return anonymous_block266 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:20: ( statement | anonymous_block )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==NUMBER_UNSIGNED||LA108_0==STRING||(LA108_0>=IDENTIFIER && LA108_0<=EXT_IDENTIFIER)||LA108_0==NOT_OPERATOR||LA108_0==NULL_KEYWORD||(LA108_0>=TRUE_KEYWORD && LA108_0<=FALSE_KEYWORD)||LA108_0==INTERVAL_KEYWORD||LA108_0==REPLACE_KEYWORD||(LA108_0>=RETURN_KEYWORD && LA108_0<=IN_KEYWORD)||LA108_0==IF_KEYWORD||(LA108_0>=GOTO_KEYWORD && LA108_0<=FOR_KEYWORD)||LA108_0==SELECT_KEYWORD||(LA108_0>=RAISE_KEYWORD && LA108_0<=PRAGMA_KEYWORD)||(LA108_0>=CASE_KEYWORD && LA108_0<=CLOSE_KEYWORD)||LA108_0==COMMIT_KEYWORD||LA108_0==CONTINUE_KEYWORD||(LA108_0>=DELETE_KEYWORD && LA108_0<=EXECUTE_KEYWORD)||LA108_0==EXIT_KEYWORD||LA108_0==FETCH_KEYWORD||LA108_0==FORALL_KEYWORD||(LA108_0>=INSERT_KEYWORD && LA108_0<=OPEN_KEYWORD)||(LA108_0>=ROLLBACK_KEYWORD && LA108_0<=SAVEPOINT_KEYWORD)||LA108_0==SET_KEYWORD||(LA108_0>=SQLCODE_KEYWORD && LA108_0<=UPDATE_KEYWORD)||LA108_0==RESULT_KEYWORD||LA108_0==198||LA108_0==200||(LA108_0>=204 && LA108_0<=205)) ) {
                alt108=1;
            }
            else if ( (LA108_0==BEGIN_KEYWORD||LA108_0==DECLARE_KEYWORD) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:22: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_executable_section6214);
                    statement265=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement265.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:532:34: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_section6218);
                    anonymous_block266=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, executable_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_section"

    public static class executable_case_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_case_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:1: executable_case_section : ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block );
    public final PL_SQLParser.executable_case_section_return executable_case_section() throws RecognitionException {
        PL_SQLParser.executable_case_section_return retval = new PL_SQLParser.executable_case_section_return();
        retval.start = input.LT(1);
        int executable_case_section_StartIndex = input.index();
        Object root_0 = null;

        Token SEPARATOR269=null;
        PL_SQLParser.label_return label267 = null;

        PL_SQLParser.statements_return statements268 = null;

        PL_SQLParser.anonymous_block_return anonymous_block270 = null;


        Object SEPARATOR269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:25: ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==NUMBER_UNSIGNED||LA111_0==STRING||(LA111_0>=IDENTIFIER && LA111_0<=EXT_IDENTIFIER)||LA111_0==NOT_OPERATOR||LA111_0==NULL_KEYWORD||(LA111_0>=TRUE_KEYWORD && LA111_0<=FALSE_KEYWORD)||LA111_0==INTERVAL_KEYWORD||LA111_0==REPLACE_KEYWORD||(LA111_0>=RETURN_KEYWORD && LA111_0<=IN_KEYWORD)||LA111_0==IF_KEYWORD||(LA111_0>=GOTO_KEYWORD && LA111_0<=FOR_KEYWORD)||LA111_0==SELECT_KEYWORD||(LA111_0>=RAISE_KEYWORD && LA111_0<=PRAGMA_KEYWORD)||(LA111_0>=CASE_KEYWORD && LA111_0<=CLOSE_KEYWORD)||LA111_0==COMMIT_KEYWORD||LA111_0==CONTINUE_KEYWORD||(LA111_0>=DELETE_KEYWORD && LA111_0<=EXECUTE_KEYWORD)||LA111_0==EXIT_KEYWORD||LA111_0==FETCH_KEYWORD||LA111_0==FORALL_KEYWORD||(LA111_0>=INSERT_KEYWORD && LA111_0<=OPEN_KEYWORD)||(LA111_0>=ROLLBACK_KEYWORD && LA111_0<=SAVEPOINT_KEYWORD)||LA111_0==SET_KEYWORD||(LA111_0>=SQLCODE_KEYWORD && LA111_0<=UPDATE_KEYWORD)||LA111_0==RESULT_KEYWORD||LA111_0==198||LA111_0==200||(LA111_0>=204 && LA111_0<=205)) ) {
                alt111=1;
            }
            else if ( (LA111_0==BEGIN_KEYWORD||LA111_0==DECLARE_KEYWORD) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:27: ( ( label )* statements ( SEPARATOR )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:27: ( ( label )* statements ( SEPARATOR )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:28: ( label )* statements ( SEPARATOR )?
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:28: ( label )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==198) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:29: label
                    	    {
                    	    pushFollow(FOLLOW_label_in_executable_case_section6227);
                    	    label267=label();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label267.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);

                    pushFollow(FOLLOW_statements_in_executable_case_section6231);
                    statements268=statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statements268.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:48: ( SEPARATOR )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==SEPARATOR) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                            {
                            SEPARATOR269=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_executable_case_section6233); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEPARATOR269_tree = (Object)adaptor.create(SEPARATOR269);
                            adaptor.addChild(root_0, SEPARATOR269_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:533:62: anonymous_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_case_section6239);
                    anonymous_block270=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, executable_case_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_case_section"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:1: statement : ( label )* statements SEPARATOR ;
    public final PL_SQLParser.statement_return statement() throws RecognitionException {
        PL_SQLParser.statement_return retval = new PL_SQLParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token SEPARATOR273=null;
        PL_SQLParser.label_return label271 = null;

        PL_SQLParser.statements_return statements272 = null;


        Object SEPARATOR273_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:11: ( ( label )* statements SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:13: ( label )* statements SEPARATOR
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:13: ( label )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==198) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:534:14: label
            	    {
            	    pushFollow(FOLLOW_label_in_statement6247);
            	    label271=label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label271.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            pushFollow(FOLLOW_statements_in_statement6251);
            statements272=statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statements272.getTree());
            SEPARATOR273=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_statement6253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR273_tree = (Object)adaptor.create(SEPARATOR273);
            adaptor.addChild(root_0, SEPARATOR273_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );
    public final PL_SQLParser.statements_return statements() throws RecognitionException {
        PL_SQLParser.statements_return retval = new PL_SQLParser.statements_return();
        retval.start = input.LT(1);
        int statements_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.expression_return expression274 = null;

        PL_SQLParser.goto_statement_return goto_statement275 = null;

        PL_SQLParser.loop_statement_return loop_statement276 = null;

        PL_SQLParser.while_loop_statement_return while_loop_statement277 = null;

        PL_SQLParser.for_loop_statement_return for_loop_statement278 = null;

        PL_SQLParser.sql_statements_return sql_statements279 = null;

        PL_SQLParser.return_statement_return return_statement280 = null;

        PL_SQLParser.if_statement_return if_statement281 = null;

        PL_SQLParser.raise_statement_return raise_statement282 = null;

        PL_SQLParser.close_statement_return close_statement283 = null;

        PL_SQLParser.continue_statement_return continue_statement284 = null;

        PL_SQLParser.execute_immediate_statement_return execute_immediate_statement285 = null;

        PL_SQLParser.exit_statement_return exit_statement286 = null;

        PL_SQLParser.fetch_statement_return fetch_statement287 = null;

        PL_SQLParser.forall_statement_return forall_statement288 = null;

        PL_SQLParser.pragma_inline_statement_return pragma_inline_statement289 = null;

        PL_SQLParser.open_statement_return open_statement290 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:12: ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement )
            int alt113=17;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:14: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statements6260);
                    expression274=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression274.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:27: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statements6264);
                    goto_statement275=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement275.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:535:44: loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statements6268);
                    loop_statement276=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement276.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:14: while_loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_while_loop_statement_in_statements6285);
                    while_loop_statement277=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_loop_statement277.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:37: for_loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_for_loop_statement_in_statements6289);
                    for_loop_statement278=for_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement278.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:536:58: sql_statements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_statements6293);
                    sql_statements279=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements279.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:14: return_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statements6310);
                    return_statement280=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement280.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:33: if_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statements6314);
                    if_statement281=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement281.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:48: raise_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statements6318);
                    raise_statement282=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement282.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:537:66: close_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_statements6322);
                    close_statement283=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement283.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:538:14: continue_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_statements6339);
                    continue_statement284=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement284.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:538:35: execute_immediate_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_execute_immediate_statement_in_statements6343);
                    execute_immediate_statement285=execute_immediate_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate_statement285.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:538:65: exit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statements6347);
                    exit_statement286=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement286.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:14: fetch_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_statements6364);
                    fetch_statement287=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement287.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:32: forall_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forall_statement_in_statements6368);
                    forall_statement288=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement288.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:539:51: pragma_inline_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pragma_inline_statement_in_statements6372);
                    pragma_inline_statement289=pragma_inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_inline_statement289.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:540:14: open_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_statements6389);
                    open_statement290=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement290.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statements"

    public static class sql_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );
    public final PL_SQLParser.sql_statements_return sql_statements() throws RecognitionException {
        PL_SQLParser.sql_statements_return retval = new PL_SQLParser.sql_statements_return();
        retval.start = input.LT(1);
        int sql_statements_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.select_statement_return select_statement291 = null;

        PL_SQLParser.commit_statement_return commit_statement292 = null;

        PL_SQLParser.delete_statement_return delete_statement293 = null;

        PL_SQLParser.update_statement_return update_statement294 = null;

        PL_SQLParser.insert_statement_return insert_statement295 = null;

        PL_SQLParser.lock_table_statement_return lock_table_statement296 = null;

        PL_SQLParser.merge_statement_return merge_statement297 = null;

        PL_SQLParser.rollback_statement_return rollback_statement298 = null;

        PL_SQLParser.savepoint_statement_return savepoint_statement299 = null;

        PL_SQLParser.set_transaction_statement_return set_transaction_statement300 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:16: ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement )
            int alt114=10;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:18: select_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_sql_statements6396);
                    select_statement291=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement291.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:37: commit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_sql_statements6400);
                    commit_statement292=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement292.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:56: delete_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_sql_statements6404);
                    delete_statement293=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement293.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:541:75: update_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_sql_statements6408);
                    update_statement294=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement294.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:542:18: insert_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_sql_statements6429);
                    insert_statement295=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement295.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:542:37: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_sql_statements6433);
                    lock_table_statement296=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement296.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:542:60: merge_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_sql_statements6437);
                    merge_statement297=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement297.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:543:18: rollback_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_sql_statements6458);
                    rollback_statement298=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement298.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:543:39: savepoint_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_sql_statements6462);
                    savepoint_statement299=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement299.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:543:61: set_transaction_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_statement_in_sql_statements6466);
                    set_transaction_statement300=set_transaction_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_statement300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, sql_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statements"

    public static class sql_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:544:1: sql_operator : ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' );
    public final PL_SQLParser.sql_operator_return sql_operator() throws RecognitionException {
        PL_SQLParser.sql_operator_return retval = new PL_SQLParser.sql_operator_return();
        retval.start = input.LT(1);
        int sql_operator_StartIndex = input.index();
        Object root_0 = null;

        Token set301=null;

        Object set301_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:544:14: ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set301=(Token)input.LT(1);
            if ( input.LA(1)==COMMA||input.LA(1)==202||(input.LA(1)>=204 && input.LA(1)<=218) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set301));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, sql_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_operator"

    public static class sql_not_parsed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_not_parsed"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );
    public final PL_SQLParser.sql_not_parsed_return sql_not_parsed() throws RecognitionException {
        PL_SQLParser.sql_not_parsed_return retval = new PL_SQLParser.sql_not_parsed_return();
        retval.start = input.LT(1);
        int sql_not_parsed_StartIndex = input.index();
        Object root_0 = null;

        Token ALIAS302=null;
        Token KEYWORD303=null;
        Token INTO_KEYWORD305=null;
        Token IN_KEYWORD306=null;
        Token NOT_OPERATOR307=null;
        Token IN_KEYWORD308=null;
        Token AS_KEYWORD309=null;
        Token VALUES_KEYWORD310=null;
        Token BETWEEN_KEYWORD311=null;
        Token SOME_TYPES312=null;
        Token BULK_KEYWORD313=null;
        Token COLLECT_KEYWORD314=null;
        Token RETURNING_KEYWORD315=null;
        Token ROW_KEYWORD316=null;
        Token SET_KEYWORD317=null;
        Token BY_KEYWORD318=null;
        Token WITH_KEYWORD319=null;
        Token TABLE_KEYWORD320=null;
        Token JOIN_KEYWORD321=null;
        Token EXISTS_KEYWORD322=null;
        Token REPLACE_KEYWORD323=null;
        Token NUMBER_UNSIGNED324=null;
        Token COUNT_KEYWORD325=null;
        Token STRING328=null;
        Token COMMA329=null;
        Token AND_OPERATOR330=null;
        Token OR_OPERATOR331=null;
        Token NOT_OPERATOR332=null;
        Token IS_KEYWORD333=null;
        Token NOT_OPERATOR334=null;
        Token NULL_KEYWORD335=null;
        Token IS_KEYWORD336=null;
        Token NULL_KEYWORD337=null;
        Token NULL_KEYWORD338=null;
        Token LIKE_KEYWORD339=null;
        Token THE_REST342=null;
        Token char_literal343=null;
        Token char_literal345=null;
        PL_SQLParser.sql_operator_return sql_operator304 = null;

        PL_SQLParser.universal_identifier_return universal_identifier326 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression327 = null;

        PL_SQLParser.sql_statements_return sql_statements340 = null;

        PL_SQLParser.expression_return expression341 = null;

        PL_SQLParser.sql_not_parsed_return sql_not_parsed344 = null;


        Object ALIAS302_tree=null;
        Object KEYWORD303_tree=null;
        Object INTO_KEYWORD305_tree=null;
        Object IN_KEYWORD306_tree=null;
        Object NOT_OPERATOR307_tree=null;
        Object IN_KEYWORD308_tree=null;
        Object AS_KEYWORD309_tree=null;
        Object VALUES_KEYWORD310_tree=null;
        Object BETWEEN_KEYWORD311_tree=null;
        Object SOME_TYPES312_tree=null;
        Object BULK_KEYWORD313_tree=null;
        Object COLLECT_KEYWORD314_tree=null;
        Object RETURNING_KEYWORD315_tree=null;
        Object ROW_KEYWORD316_tree=null;
        Object SET_KEYWORD317_tree=null;
        Object BY_KEYWORD318_tree=null;
        Object WITH_KEYWORD319_tree=null;
        Object TABLE_KEYWORD320_tree=null;
        Object JOIN_KEYWORD321_tree=null;
        Object EXISTS_KEYWORD322_tree=null;
        Object REPLACE_KEYWORD323_tree=null;
        Object NUMBER_UNSIGNED324_tree=null;
        Object COUNT_KEYWORD325_tree=null;
        Object STRING328_tree=null;
        Object COMMA329_tree=null;
        Object AND_OPERATOR330_tree=null;
        Object OR_OPERATOR331_tree=null;
        Object NOT_OPERATOR332_tree=null;
        Object IS_KEYWORD333_tree=null;
        Object NOT_OPERATOR334_tree=null;
        Object NULL_KEYWORD335_tree=null;
        Object IS_KEYWORD336_tree=null;
        Object NULL_KEYWORD337_tree=null;
        Object NULL_KEYWORD338_tree=null;
        Object LIKE_KEYWORD339_tree=null;
        Object THE_REST342_tree=null;
        Object char_literal343_tree=null;
        Object char_literal345_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:16: ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) )
            int alt116=38;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:18: ALIAS
                    {
                    root_0 = (Object)adaptor.nil();

                    ALIAS302=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_sql_not_parsed6560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS302_tree = (Object)adaptor.create(ALIAS302);
                    adaptor.addChild(root_0, ALIAS302_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:26: KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    KEYWORD303=(Token)match(input,KEYWORD,FOLLOW_KEYWORD_in_sql_not_parsed6564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYWORD303_tree = (Object)adaptor.create(KEYWORD303);
                    adaptor.addChild(root_0, KEYWORD303_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:36: sql_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_operator_in_sql_not_parsed6568);
                    sql_operator304=sql_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_operator304.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:51: INTO_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    INTO_KEYWORD305=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_sql_not_parsed6572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO_KEYWORD305_tree = (Object)adaptor.create(INTO_KEYWORD305);
                    adaptor.addChild(root_0, INTO_KEYWORD305_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:66: IN_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IN_KEYWORD306=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed6576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD306_tree = (Object)adaptor.create(IN_KEYWORD306);
                    adaptor.addChild(root_0, IN_KEYWORD306_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:79: NOT_OPERATOR IN_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    NOT_OPERATOR307=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed6580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR307_tree = (Object)adaptor.create(NOT_OPERATOR307);
                    adaptor.addChild(root_0, NOT_OPERATOR307_tree);
                    }
                    IN_KEYWORD308=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed6582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD308_tree = (Object)adaptor.create(IN_KEYWORD308);
                    adaptor.addChild(root_0, IN_KEYWORD308_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:548:16: AS_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    AS_KEYWORD309=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_sql_not_parsed6601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS_KEYWORD309_tree = (Object)adaptor.create(AS_KEYWORD309);
                    adaptor.addChild(root_0, AS_KEYWORD309_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:548:29: VALUES_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    VALUES_KEYWORD310=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_sql_not_parsed6605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD310_tree = (Object)adaptor.create(VALUES_KEYWORD310);
                    adaptor.addChild(root_0, VALUES_KEYWORD310_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:548:46: BETWEEN_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    BETWEEN_KEYWORD311=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed6609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD311_tree = (Object)adaptor.create(BETWEEN_KEYWORD311);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD311_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:548:64: SOME_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SOME_TYPES312=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_sql_not_parsed6613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES312_tree = (Object)adaptor.create(SOME_TYPES312);
                    adaptor.addChild(root_0, SOME_TYPES312_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:549:16: BULK_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    BULK_KEYWORD313=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_sql_not_parsed6632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BULK_KEYWORD313_tree = (Object)adaptor.create(BULK_KEYWORD313);
                    adaptor.addChild(root_0, BULK_KEYWORD313_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:549:31: COLLECT_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    COLLECT_KEYWORD314=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed6636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLLECT_KEYWORD314_tree = (Object)adaptor.create(COLLECT_KEYWORD314);
                    adaptor.addChild(root_0, COLLECT_KEYWORD314_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:549:49: RETURNING_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    RETURNING_KEYWORD315=(Token)match(input,RETURNING_KEYWORD,FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed6640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNING_KEYWORD315_tree = (Object)adaptor.create(RETURNING_KEYWORD315);
                    adaptor.addChild(root_0, RETURNING_KEYWORD315_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:549:69: ROW_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    ROW_KEYWORD316=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_sql_not_parsed6644); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD316_tree = (Object)adaptor.create(ROW_KEYWORD316);
                    adaptor.addChild(root_0, ROW_KEYWORD316_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:16: SET_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    SET_KEYWORD317=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_sql_not_parsed6663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_KEYWORD317_tree = (Object)adaptor.create(SET_KEYWORD317);
                    adaptor.addChild(root_0, SET_KEYWORD317_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:30: BY_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    BY_KEYWORD318=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_sql_not_parsed6667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD318_tree = (Object)adaptor.create(BY_KEYWORD318);
                    adaptor.addChild(root_0, BY_KEYWORD318_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:43: WITH_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    WITH_KEYWORD319=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_sql_not_parsed6671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD319_tree = (Object)adaptor.create(WITH_KEYWORD319);
                    adaptor.addChild(root_0, WITH_KEYWORD319_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:58: TABLE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    TABLE_KEYWORD320=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_sql_not_parsed6675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD320_tree = (Object)adaptor.create(TABLE_KEYWORD320);
                    adaptor.addChild(root_0, TABLE_KEYWORD320_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:74: JOIN_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    JOIN_KEYWORD321=(Token)match(input,JOIN_KEYWORD,FOLLOW_JOIN_KEYWORD_in_sql_not_parsed6679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN_KEYWORD321_tree = (Object)adaptor.create(JOIN_KEYWORD321);
                    adaptor.addChild(root_0, JOIN_KEYWORD321_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:551:16: EXISTS_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    EXISTS_KEYWORD322=(Token)match(input,EXISTS_KEYWORD,FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed6698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS_KEYWORD322_tree = (Object)adaptor.create(EXISTS_KEYWORD322);
                    adaptor.addChild(root_0, EXISTS_KEYWORD322_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:551:33: REPLACE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    REPLACE_KEYWORD323=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed6702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD323_tree = (Object)adaptor.create(REPLACE_KEYWORD323);
                    adaptor.addChild(root_0, REPLACE_KEYWORD323_tree);
                    }

                    }
                    break;
                case 22 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:16: NUMBER_UNSIGNED
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER_UNSIGNED324=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed6721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED324_tree = (Object)adaptor.create(NUMBER_UNSIGNED324);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED324_tree);
                    }

                    }
                    break;
                case 23 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:34: COUNT_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    COUNT_KEYWORD325=(Token)match(input,COUNT_KEYWORD,FOLLOW_COUNT_KEYWORD_in_sql_not_parsed6725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT_KEYWORD325_tree = (Object)adaptor.create(COUNT_KEYWORD325);
                    adaptor.addChild(root_0, COUNT_KEYWORD325_tree);
                    }

                    }
                    break;
                case 24 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:50: universal_identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_sql_not_parsed6729);
                    universal_identifier326=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier326.getTree());

                    }
                    break;
                case 25 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:73: case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_sql_not_parsed6733);
                    case_statement_expression327=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression327.getTree());

                    }
                    break;
                case 26 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:16: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING328=(Token)match(input,STRING,FOLLOW_STRING_in_sql_not_parsed6752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING328_tree = (Object)adaptor.create(STRING328);
                    adaptor.addChild(root_0, STRING328_tree);
                    }

                    }
                    break;
                case 27 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:25: COMMA
                    {
                    root_0 = (Object)adaptor.nil();

                    COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_not_parsed6756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA329_tree = (Object)adaptor.create(COMMA329);
                    adaptor.addChild(root_0, COMMA329_tree);
                    }

                    }
                    break;
                case 28 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:33: AND_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_OPERATOR330=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_sql_not_parsed6760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR330_tree = (Object)adaptor.create(AND_OPERATOR330);
                    adaptor.addChild(root_0, AND_OPERATOR330_tree);
                    }

                    }
                    break;
                case 29 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:48: OR_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_OPERATOR331=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_sql_not_parsed6764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR331_tree = (Object)adaptor.create(OR_OPERATOR331);
                    adaptor.addChild(root_0, OR_OPERATOR331_tree);
                    }

                    }
                    break;
                case 30 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:62: NOT_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    NOT_OPERATOR332=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed6768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR332_tree = (Object)adaptor.create(NOT_OPERATOR332);
                    adaptor.addChild(root_0, NOT_OPERATOR332_tree);
                    }

                    }
                    break;
                case 31 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IS_KEYWORD333=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed6787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD333_tree = (Object)adaptor.create(IS_KEYWORD333);
                    adaptor.addChild(root_0, IS_KEYWORD333_tree);
                    }
                    NOT_OPERATOR334=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed6789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR334_tree = (Object)adaptor.create(NOT_OPERATOR334);
                    adaptor.addChild(root_0, NOT_OPERATOR334_tree);
                    }
                    NULL_KEYWORD335=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed6791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD335_tree = (Object)adaptor.create(NULL_KEYWORD335);
                    adaptor.addChild(root_0, NULL_KEYWORD335_tree);
                    }

                    }
                    break;
                case 32 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:55: IS_KEYWORD NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IS_KEYWORD336=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed6795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD336_tree = (Object)adaptor.create(IS_KEYWORD336);
                    adaptor.addChild(root_0, IS_KEYWORD336_tree);
                    }
                    NULL_KEYWORD337=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed6797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD337_tree = (Object)adaptor.create(NULL_KEYWORD337);
                    adaptor.addChild(root_0, NULL_KEYWORD337_tree);
                    }

                    }
                    break;
                case 33 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:81: NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL_KEYWORD338=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed6801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD338_tree = (Object)adaptor.create(NULL_KEYWORD338);
                    adaptor.addChild(root_0, NULL_KEYWORD338_tree);
                    }

                    }
                    break;
                case 34 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:96: LIKE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    LIKE_KEYWORD339=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_sql_not_parsed6805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD339_tree = (Object)adaptor.create(LIKE_KEYWORD339);
                    adaptor.addChild(root_0, LIKE_KEYWORD339_tree);
                    }

                    }
                    break;
                case 35 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:555:16: sql_statements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_sql_not_parsed6825);
                    sql_statements340=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements340.getTree());

                    }
                    break;
                case 36 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:16: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_sql_not_parsed6845);
                    expression341=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression341.getTree());

                    }
                    break;
                case 37 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:29: THE_REST
                    {
                    root_0 = (Object)adaptor.nil();

                    THE_REST342=(Token)match(input,THE_REST,FOLLOW_THE_REST_in_sql_not_parsed6849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THE_REST342_tree = (Object)adaptor.create(THE_REST342);
                    adaptor.addChild(root_0, THE_REST342_tree);
                    }

                    }
                    break;
                case 38 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:40: ( '(' ( sql_not_parsed )* ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:40: ( '(' ( sql_not_parsed )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:41: '(' ( sql_not_parsed )* ')'
                    {
                    char_literal343=(Token)match(input,200,FOLLOW_200_in_sql_not_parsed6854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal343_tree = (Object)adaptor.create(char_literal343);
                    adaptor.addChild(root_0, char_literal343_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:45: ( sql_not_parsed )*
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( ((LA115_0>=NUMBER_UNSIGNED && LA115_0<=OR_OPERATOR)||(LA115_0>=STRING && LA115_0<=SOME_TYPES)||(LA115_0>=KEYWORD && LA115_0<=ALIAS)||LA115_0==NOT_OPERATOR||LA115_0==COMMA||LA115_0==NULL_KEYWORD||(LA115_0>=TRUE_KEYWORD && LA115_0<=FALSE_KEYWORD)||LA115_0==WITH_KEYWORD||LA115_0==INTERVAL_KEYWORD||LA115_0==IS_KEYWORD||LA115_0==REPLACE_KEYWORD||LA115_0==AS_KEYWORD||LA115_0==IN_KEYWORD||(LA115_0>=SELECT_KEYWORD && LA115_0<=COUNT_KEYWORD)||LA115_0==LIKE_KEYWORD||LA115_0==CASE_KEYWORD||LA115_0==TABLE_KEYWORD||LA115_0==BY_KEYWORD||LA115_0==COMMIT_KEYWORD||LA115_0==DELETE_KEYWORD||LA115_0==INTO_KEYWORD||(LA115_0>=BULK_KEYWORD && LA115_0<=COLLECT_KEYWORD)||(LA115_0>=VALUES_KEYWORD && LA115_0<=BETWEEN_KEYWORD)||(LA115_0>=INSERT_KEYWORD && LA115_0<=MERGE_KEYWORD)||(LA115_0>=RETURNING_KEYWORD && LA115_0<=SAVEPOINT_KEYWORD)||LA115_0==SET_KEYWORD||(LA115_0>=SQLCODE_KEYWORD && LA115_0<=EXISTS_KEYWORD)||LA115_0==ROW_KEYWORD||LA115_0==RESULT_KEYWORD||LA115_0==JOIN_KEYWORD||LA115_0==THE_REST||LA115_0==200||LA115_0==202||(LA115_0>=204 && LA115_0<=218)) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:46: sql_not_parsed
                    	    {
                    	    pushFollow(FOLLOW_sql_not_parsed_in_sql_not_parsed6857);
                    	    sql_not_parsed344=sql_not_parsed();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed344.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop115;
                        }
                    } while (true);

                    char_literal345=(Token)match(input,201,FOLLOW_201_in_sql_not_parsed6861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal345_tree = (Object)adaptor.create(char_literal345);
                    adaptor.addChild(root_0, char_literal345_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, sql_not_parsed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_not_parsed"

    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:1: select_statement : SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ ;
    public final PL_SQLParser.select_statement_return select_statement() throws RecognitionException {
        PL_SQLParser.select_statement_return retval = new PL_SQLParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        Object root_0 = null;

        Token SELECT_KEYWORD346=null;
        Token ON_KEYWORD348=null;
        Token FOR_KEYWORD349=null;
        Token UPDATE_KEYWORD350=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed347 = null;


        Object SELECT_KEYWORD346_tree=null;
        Object ON_KEYWORD348_tree=null;
        Object FOR_KEYWORD349_tree=null;
        Object UPDATE_KEYWORD350_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:18: ( SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:20: SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            {
            root_0 = (Object)adaptor.nil();

            SELECT_KEYWORD346=(Token)match(input,SELECT_KEYWORD,FOLLOW_SELECT_KEYWORD_in_select_statement6872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT_KEYWORD346_tree = (Object)adaptor.create(SELECT_KEYWORD346);
            adaptor.addChild(root_0, SELECT_KEYWORD346_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:35: ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            int cnt118=0;
            loop118:
            do {
                int alt118=3;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==FOR_KEYWORD) ) {
                    int LA118_2 = input.LA(2);

                    if ( (synpred226_PL_SQL()) ) {
                        alt118=2;
                    }


                }
                else if ( ((LA118_0>=NUMBER_UNSIGNED && LA118_0<=OR_OPERATOR)||(LA118_0>=STRING && LA118_0<=SOME_TYPES)||(LA118_0>=KEYWORD && LA118_0<=ALIAS)||LA118_0==NOT_OPERATOR||LA118_0==COMMA||LA118_0==NULL_KEYWORD||(LA118_0>=TRUE_KEYWORD && LA118_0<=FALSE_KEYWORD)||LA118_0==WITH_KEYWORD||LA118_0==INTERVAL_KEYWORD||LA118_0==IS_KEYWORD||LA118_0==REPLACE_KEYWORD||LA118_0==AS_KEYWORD||LA118_0==IN_KEYWORD||(LA118_0>=SELECT_KEYWORD && LA118_0<=COUNT_KEYWORD)||LA118_0==LIKE_KEYWORD||LA118_0==CASE_KEYWORD||LA118_0==TABLE_KEYWORD||LA118_0==BY_KEYWORD||LA118_0==COMMIT_KEYWORD||LA118_0==DELETE_KEYWORD||LA118_0==INTO_KEYWORD||(LA118_0>=BULK_KEYWORD && LA118_0<=COLLECT_KEYWORD)||(LA118_0>=VALUES_KEYWORD && LA118_0<=BETWEEN_KEYWORD)||(LA118_0>=INSERT_KEYWORD && LA118_0<=MERGE_KEYWORD)||(LA118_0>=RETURNING_KEYWORD && LA118_0<=SAVEPOINT_KEYWORD)||LA118_0==SET_KEYWORD||(LA118_0>=SQLCODE_KEYWORD && LA118_0<=EXISTS_KEYWORD)||LA118_0==ON_KEYWORD||LA118_0==ROW_KEYWORD||LA118_0==RESULT_KEYWORD||LA118_0==JOIN_KEYWORD||LA118_0==THE_REST||LA118_0==200||LA118_0==202||(LA118_0>=204 && LA118_0<=218)) ) {
                    int LA118_4 = input.LA(2);

                    if ( (synpred225_PL_SQL()) ) {
                        alt118=1;
                    }


                }


                switch (alt118) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: ( sql_not_parsed | ON_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: ( sql_not_parsed | ON_KEYWORD )
            	    int alt117=2;
            	    int LA117_0 = input.LA(1);

            	    if ( ((LA117_0>=NUMBER_UNSIGNED && LA117_0<=OR_OPERATOR)||(LA117_0>=STRING && LA117_0<=SOME_TYPES)||(LA117_0>=KEYWORD && LA117_0<=ALIAS)||LA117_0==NOT_OPERATOR||LA117_0==COMMA||LA117_0==NULL_KEYWORD||(LA117_0>=TRUE_KEYWORD && LA117_0<=FALSE_KEYWORD)||LA117_0==WITH_KEYWORD||LA117_0==INTERVAL_KEYWORD||LA117_0==IS_KEYWORD||LA117_0==REPLACE_KEYWORD||LA117_0==AS_KEYWORD||LA117_0==IN_KEYWORD||(LA117_0>=SELECT_KEYWORD && LA117_0<=COUNT_KEYWORD)||LA117_0==LIKE_KEYWORD||LA117_0==CASE_KEYWORD||LA117_0==TABLE_KEYWORD||LA117_0==BY_KEYWORD||LA117_0==COMMIT_KEYWORD||LA117_0==DELETE_KEYWORD||LA117_0==INTO_KEYWORD||(LA117_0>=BULK_KEYWORD && LA117_0<=COLLECT_KEYWORD)||(LA117_0>=VALUES_KEYWORD && LA117_0<=BETWEEN_KEYWORD)||(LA117_0>=INSERT_KEYWORD && LA117_0<=MERGE_KEYWORD)||(LA117_0>=RETURNING_KEYWORD && LA117_0<=SAVEPOINT_KEYWORD)||LA117_0==SET_KEYWORD||(LA117_0>=SQLCODE_KEYWORD && LA117_0<=EXISTS_KEYWORD)||LA117_0==ROW_KEYWORD||LA117_0==RESULT_KEYWORD||LA117_0==JOIN_KEYWORD||LA117_0==THE_REST||LA117_0==200||LA117_0==202||(LA117_0>=204 && LA117_0<=218)) ) {
            	        alt117=1;
            	    }
            	    else if ( (LA117_0==ON_KEYWORD) ) {
            	        alt117=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 117, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt117) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:37: sql_not_parsed
            	            {
            	            pushFollow(FOLLOW_sql_not_parsed_in_select_statement6876);
            	            sql_not_parsed347=sql_not_parsed();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed347.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:54: ON_KEYWORD
            	            {
            	            ON_KEYWORD348=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_select_statement6880); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ON_KEYWORD348_tree = (Object)adaptor.create(ON_KEYWORD348);
            	            adaptor.addChild(root_0, ON_KEYWORD348_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:69: FOR_KEYWORD UPDATE_KEYWORD
            	    {
            	    FOR_KEYWORD349=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_select_statement6886); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR_KEYWORD349_tree = (Object)adaptor.create(FOR_KEYWORD349);
            	    adaptor.addChild(root_0, FOR_KEYWORD349_tree);
            	    }
            	    UPDATE_KEYWORD350=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_select_statement6888); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD350_tree = (Object)adaptor.create(UPDATE_KEYWORD350);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD350_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class commit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:1: commit_statement : COMMIT_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.commit_statement_return commit_statement() throws RecognitionException {
        PL_SQLParser.commit_statement_return retval = new PL_SQLParser.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        Object root_0 = null;

        Token COMMIT_KEYWORD351=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed352 = null;


        Object COMMIT_KEYWORD351_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:18: ( COMMIT_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:20: COMMIT_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (Object)adaptor.nil();

            COMMIT_KEYWORD351=(Token)match(input,COMMIT_KEYWORD,FOLLOW_COMMIT_KEYWORD_in_commit_statement6898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMIT_KEYWORD351_tree = (Object)adaptor.create(COMMIT_KEYWORD351);
            adaptor.addChild(root_0, COMMIT_KEYWORD351_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:35: ( sql_not_parsed )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=NUMBER_UNSIGNED && LA119_0<=OR_OPERATOR)||(LA119_0>=STRING && LA119_0<=SOME_TYPES)||(LA119_0>=KEYWORD && LA119_0<=ALIAS)||LA119_0==NOT_OPERATOR||LA119_0==COMMA||LA119_0==NULL_KEYWORD||(LA119_0>=TRUE_KEYWORD && LA119_0<=FALSE_KEYWORD)||LA119_0==WITH_KEYWORD||LA119_0==INTERVAL_KEYWORD||LA119_0==IS_KEYWORD||LA119_0==REPLACE_KEYWORD||LA119_0==AS_KEYWORD||LA119_0==IN_KEYWORD||(LA119_0>=SELECT_KEYWORD && LA119_0<=COUNT_KEYWORD)||LA119_0==LIKE_KEYWORD||LA119_0==CASE_KEYWORD||LA119_0==TABLE_KEYWORD||LA119_0==BY_KEYWORD||LA119_0==COMMIT_KEYWORD||LA119_0==DELETE_KEYWORD||LA119_0==INTO_KEYWORD||(LA119_0>=BULK_KEYWORD && LA119_0<=COLLECT_KEYWORD)||(LA119_0>=VALUES_KEYWORD && LA119_0<=BETWEEN_KEYWORD)||(LA119_0>=INSERT_KEYWORD && LA119_0<=MERGE_KEYWORD)||(LA119_0>=RETURNING_KEYWORD && LA119_0<=SAVEPOINT_KEYWORD)||LA119_0==SET_KEYWORD||(LA119_0>=SQLCODE_KEYWORD && LA119_0<=EXISTS_KEYWORD)||LA119_0==ROW_KEYWORD||LA119_0==RESULT_KEYWORD||LA119_0==JOIN_KEYWORD||LA119_0==THE_REST||LA119_0==200||LA119_0==202||(LA119_0>=204 && LA119_0<=218)) ) {
                int LA119_1 = input.LA(2);

                if ( (synpred227_PL_SQL()) ) {
                    alt119=1;
                }
            }
            switch (alt119) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_commit_statement6900);
                    sql_not_parsed352=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed352.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class delete_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:1: delete_statement : DELETE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.delete_statement_return delete_statement() throws RecognitionException {
        PL_SQLParser.delete_statement_return retval = new PL_SQLParser.delete_statement_return();
        retval.start = input.LT(1);
        int delete_statement_StartIndex = input.index();
        Object root_0 = null;

        Token DELETE_KEYWORD353=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed354 = null;


        Object DELETE_KEYWORD353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:18: ( DELETE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:20: DELETE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            DELETE_KEYWORD353=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_delete_statement6908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE_KEYWORD353_tree = (Object)adaptor.create(DELETE_KEYWORD353);
            adaptor.addChild(root_0, DELETE_KEYWORD353_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:35: ( sql_not_parsed )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0>=NUMBER_UNSIGNED && LA120_0<=OR_OPERATOR)||(LA120_0>=STRING && LA120_0<=SOME_TYPES)||(LA120_0>=KEYWORD && LA120_0<=ALIAS)||LA120_0==NOT_OPERATOR||LA120_0==COMMA||LA120_0==NULL_KEYWORD||(LA120_0>=TRUE_KEYWORD && LA120_0<=FALSE_KEYWORD)||LA120_0==WITH_KEYWORD||LA120_0==INTERVAL_KEYWORD||LA120_0==IS_KEYWORD||LA120_0==REPLACE_KEYWORD||LA120_0==AS_KEYWORD||LA120_0==IN_KEYWORD||(LA120_0>=SELECT_KEYWORD && LA120_0<=COUNT_KEYWORD)||LA120_0==LIKE_KEYWORD||LA120_0==CASE_KEYWORD||LA120_0==TABLE_KEYWORD||LA120_0==BY_KEYWORD||LA120_0==COMMIT_KEYWORD||LA120_0==DELETE_KEYWORD||LA120_0==INTO_KEYWORD||(LA120_0>=BULK_KEYWORD && LA120_0<=COLLECT_KEYWORD)||(LA120_0>=VALUES_KEYWORD && LA120_0<=BETWEEN_KEYWORD)||(LA120_0>=INSERT_KEYWORD && LA120_0<=MERGE_KEYWORD)||(LA120_0>=RETURNING_KEYWORD && LA120_0<=SAVEPOINT_KEYWORD)||LA120_0==SET_KEYWORD||(LA120_0>=SQLCODE_KEYWORD && LA120_0<=EXISTS_KEYWORD)||LA120_0==ROW_KEYWORD||LA120_0==RESULT_KEYWORD||LA120_0==JOIN_KEYWORD||LA120_0==THE_REST||LA120_0==200||LA120_0==202||(LA120_0>=204 && LA120_0<=218)) ) {
                    int LA120_1 = input.LA(2);

                    if ( (synpred228_PL_SQL()) ) {
                        alt120=1;
                    }


                }


                switch (alt120) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_delete_statement6911);
            	    sql_not_parsed354=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed354.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, delete_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:1: insert_statement : INSERT_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.insert_statement_return insert_statement() throws RecognitionException {
        PL_SQLParser.insert_statement_return retval = new PL_SQLParser.insert_statement_return();
        retval.start = input.LT(1);
        int insert_statement_StartIndex = input.index();
        Object root_0 = null;

        Token INSERT_KEYWORD355=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed356 = null;


        Object INSERT_KEYWORD355_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:18: ( INSERT_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:20: INSERT_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            INSERT_KEYWORD355=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_insert_statement6920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT_KEYWORD355_tree = (Object)adaptor.create(INSERT_KEYWORD355);
            adaptor.addChild(root_0, INSERT_KEYWORD355_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:35: ( sql_not_parsed )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=NUMBER_UNSIGNED && LA121_0<=OR_OPERATOR)||(LA121_0>=STRING && LA121_0<=SOME_TYPES)||(LA121_0>=KEYWORD && LA121_0<=ALIAS)||LA121_0==NOT_OPERATOR||LA121_0==COMMA||LA121_0==NULL_KEYWORD||(LA121_0>=TRUE_KEYWORD && LA121_0<=FALSE_KEYWORD)||LA121_0==WITH_KEYWORD||LA121_0==INTERVAL_KEYWORD||LA121_0==IS_KEYWORD||LA121_0==REPLACE_KEYWORD||LA121_0==AS_KEYWORD||LA121_0==IN_KEYWORD||(LA121_0>=SELECT_KEYWORD && LA121_0<=COUNT_KEYWORD)||LA121_0==LIKE_KEYWORD||LA121_0==CASE_KEYWORD||LA121_0==TABLE_KEYWORD||LA121_0==BY_KEYWORD||LA121_0==COMMIT_KEYWORD||LA121_0==DELETE_KEYWORD||LA121_0==INTO_KEYWORD||(LA121_0>=BULK_KEYWORD && LA121_0<=COLLECT_KEYWORD)||(LA121_0>=VALUES_KEYWORD && LA121_0<=BETWEEN_KEYWORD)||(LA121_0>=INSERT_KEYWORD && LA121_0<=MERGE_KEYWORD)||(LA121_0>=RETURNING_KEYWORD && LA121_0<=SAVEPOINT_KEYWORD)||LA121_0==SET_KEYWORD||(LA121_0>=SQLCODE_KEYWORD && LA121_0<=EXISTS_KEYWORD)||LA121_0==ROW_KEYWORD||LA121_0==RESULT_KEYWORD||LA121_0==JOIN_KEYWORD||LA121_0==THE_REST||LA121_0==200||LA121_0==202||(LA121_0>=204 && LA121_0<=218)) ) {
                    int LA121_2 = input.LA(2);

                    if ( (synpred229_PL_SQL()) ) {
                        alt121=1;
                    }


                }


                switch (alt121) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_insert_statement6923);
            	    sql_not_parsed356=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed356.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, insert_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:1: lock_table_statement : LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PL_SQLParser.lock_table_statement_return retval = new PL_SQLParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LOCK_KEYWORD357=null;
        Token TABLE_KEYWORD358=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed359 = null;


        Object LOCK_KEYWORD357_tree=null;
        Object TABLE_KEYWORD358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:22: ( LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:24: LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            LOCK_KEYWORD357=(Token)match(input,LOCK_KEYWORD,FOLLOW_LOCK_KEYWORD_in_lock_table_statement6932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOCK_KEYWORD357_tree = (Object)adaptor.create(LOCK_KEYWORD357);
            adaptor.addChild(root_0, LOCK_KEYWORD357_tree);
            }
            TABLE_KEYWORD358=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_lock_table_statement6934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD358_tree = (Object)adaptor.create(TABLE_KEYWORD358);
            adaptor.addChild(root_0, TABLE_KEYWORD358_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:51: ( sql_not_parsed )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=NUMBER_UNSIGNED && LA122_0<=OR_OPERATOR)||(LA122_0>=STRING && LA122_0<=SOME_TYPES)||(LA122_0>=KEYWORD && LA122_0<=ALIAS)||LA122_0==NOT_OPERATOR||LA122_0==COMMA||LA122_0==NULL_KEYWORD||(LA122_0>=TRUE_KEYWORD && LA122_0<=FALSE_KEYWORD)||LA122_0==WITH_KEYWORD||LA122_0==INTERVAL_KEYWORD||LA122_0==IS_KEYWORD||LA122_0==REPLACE_KEYWORD||LA122_0==AS_KEYWORD||LA122_0==IN_KEYWORD||(LA122_0>=SELECT_KEYWORD && LA122_0<=COUNT_KEYWORD)||LA122_0==LIKE_KEYWORD||LA122_0==CASE_KEYWORD||LA122_0==TABLE_KEYWORD||LA122_0==BY_KEYWORD||LA122_0==COMMIT_KEYWORD||LA122_0==DELETE_KEYWORD||LA122_0==INTO_KEYWORD||(LA122_0>=BULK_KEYWORD && LA122_0<=COLLECT_KEYWORD)||(LA122_0>=VALUES_KEYWORD && LA122_0<=BETWEEN_KEYWORD)||(LA122_0>=INSERT_KEYWORD && LA122_0<=MERGE_KEYWORD)||(LA122_0>=RETURNING_KEYWORD && LA122_0<=SAVEPOINT_KEYWORD)||LA122_0==SET_KEYWORD||(LA122_0>=SQLCODE_KEYWORD && LA122_0<=EXISTS_KEYWORD)||LA122_0==ROW_KEYWORD||LA122_0==RESULT_KEYWORD||LA122_0==JOIN_KEYWORD||LA122_0==THE_REST||LA122_0==200||LA122_0==202||(LA122_0>=204 && LA122_0<=218)) ) {
                    int LA122_1 = input.LA(2);

                    if ( (synpred230_PL_SQL()) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:52: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_lock_table_statement6937);
            	    sql_not_parsed359=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed359.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class merge_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:1: merge_statement : MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ ;
    public final PL_SQLParser.merge_statement_return merge_statement() throws RecognitionException {
        PL_SQLParser.merge_statement_return retval = new PL_SQLParser.merge_statement_return();
        retval.start = input.LT(1);
        int merge_statement_StartIndex = input.index();
        Object root_0 = null;

        Token MERGE_KEYWORD360=null;
        Token ON_KEYWORD362=null;
        Token USING_KEYWORD363=null;
        Token WHEN_KEYWORD364=null;
        Token THEN_KEYWORD365=null;
        Token INSERT_KEYWORD366=null;
        Token UPDATE_KEYWORD367=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed361 = null;


        Object MERGE_KEYWORD360_tree=null;
        Object ON_KEYWORD362_tree=null;
        Object USING_KEYWORD363_tree=null;
        Object WHEN_KEYWORD364_tree=null;
        Object THEN_KEYWORD365_tree=null;
        Object INSERT_KEYWORD366_tree=null;
        Object UPDATE_KEYWORD367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:17: ( MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:19: MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            {
            root_0 = (Object)adaptor.nil();

            MERGE_KEYWORD360=(Token)match(input,MERGE_KEYWORD,FOLLOW_MERGE_KEYWORD_in_merge_statement6946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MERGE_KEYWORD360_tree = (Object)adaptor.create(MERGE_KEYWORD360);
            adaptor.addChild(root_0, MERGE_KEYWORD360_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            int cnt123=0;
            loop123:
            do {
                int alt123=8;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:34: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_merge_statement6949);
            	    sql_not_parsed361=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed361.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:51: ON_KEYWORD
            	    {
            	    ON_KEYWORD362=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_merge_statement6953); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON_KEYWORD362_tree = (Object)adaptor.create(ON_KEYWORD362);
            	    adaptor.addChild(root_0, ON_KEYWORD362_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:19: USING_KEYWORD
            	    {
            	    USING_KEYWORD363=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_merge_statement6975); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING_KEYWORD363_tree = (Object)adaptor.create(USING_KEYWORD363);
            	    adaptor.addChild(root_0, USING_KEYWORD363_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:35: WHEN_KEYWORD
            	    {
            	    WHEN_KEYWORD364=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_merge_statement6979); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD364_tree = (Object)adaptor.create(WHEN_KEYWORD364);
            	    adaptor.addChild(root_0, WHEN_KEYWORD364_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:50: THEN_KEYWORD
            	    {
            	    THEN_KEYWORD365=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_merge_statement6983); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD365_tree = (Object)adaptor.create(THEN_KEYWORD365);
            	    adaptor.addChild(root_0, THEN_KEYWORD365_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:65: INSERT_KEYWORD
            	    {
            	    INSERT_KEYWORD366=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_merge_statement6987); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    INSERT_KEYWORD366_tree = (Object)adaptor.create(INSERT_KEYWORD366);
            	    adaptor.addChild(root_0, INSERT_KEYWORD366_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:19: UPDATE_KEYWORD
            	    {
            	    UPDATE_KEYWORD367=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_merge_statement7009); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD367_tree = (Object)adaptor.create(UPDATE_KEYWORD367);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD367_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, merge_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:1: rollback_statement : ROLLBACK_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
        PL_SQLParser.rollback_statement_return retval = new PL_SQLParser.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        Object root_0 = null;

        Token ROLLBACK_KEYWORD368=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed369 = null;


        Object ROLLBACK_KEYWORD368_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:20: ( ROLLBACK_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:22: ROLLBACK_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (Object)adaptor.nil();

            ROLLBACK_KEYWORD368=(Token)match(input,ROLLBACK_KEYWORD,FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ROLLBACK_KEYWORD368_tree = (Object)adaptor.create(ROLLBACK_KEYWORD368);
            adaptor.addChild(root_0, ROLLBACK_KEYWORD368_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:39: ( sql_not_parsed )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( ((LA124_0>=NUMBER_UNSIGNED && LA124_0<=OR_OPERATOR)||(LA124_0>=STRING && LA124_0<=SOME_TYPES)||(LA124_0>=KEYWORD && LA124_0<=ALIAS)||LA124_0==NOT_OPERATOR||LA124_0==COMMA||LA124_0==NULL_KEYWORD||(LA124_0>=TRUE_KEYWORD && LA124_0<=FALSE_KEYWORD)||LA124_0==WITH_KEYWORD||LA124_0==INTERVAL_KEYWORD||LA124_0==IS_KEYWORD||LA124_0==REPLACE_KEYWORD||LA124_0==AS_KEYWORD||LA124_0==IN_KEYWORD||(LA124_0>=SELECT_KEYWORD && LA124_0<=COUNT_KEYWORD)||LA124_0==LIKE_KEYWORD||LA124_0==CASE_KEYWORD||LA124_0==TABLE_KEYWORD||LA124_0==BY_KEYWORD||LA124_0==COMMIT_KEYWORD||LA124_0==DELETE_KEYWORD||LA124_0==INTO_KEYWORD||(LA124_0>=BULK_KEYWORD && LA124_0<=COLLECT_KEYWORD)||(LA124_0>=VALUES_KEYWORD && LA124_0<=BETWEEN_KEYWORD)||(LA124_0>=INSERT_KEYWORD && LA124_0<=MERGE_KEYWORD)||(LA124_0>=RETURNING_KEYWORD && LA124_0<=SAVEPOINT_KEYWORD)||LA124_0==SET_KEYWORD||(LA124_0>=SQLCODE_KEYWORD && LA124_0<=EXISTS_KEYWORD)||LA124_0==ROW_KEYWORD||LA124_0==RESULT_KEYWORD||LA124_0==JOIN_KEYWORD||LA124_0==THE_REST||LA124_0==200||LA124_0==202||(LA124_0>=204 && LA124_0<=218)) ) {
                int LA124_1 = input.LA(2);

                if ( (synpred238_PL_SQL()) ) {
                    alt124=1;
                }
            }
            switch (alt124) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_rollback_statement7020);
                    sql_not_parsed369=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed369.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:1: savepoint_statement : SAVEPOINT_KEYWORD identifier ;
    public final PL_SQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PL_SQLParser.savepoint_statement_return retval = new PL_SQLParser.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        Object root_0 = null;

        Token SAVEPOINT_KEYWORD370=null;
        PL_SQLParser.identifier_return identifier371 = null;


        Object SAVEPOINT_KEYWORD370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:21: ( SAVEPOINT_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:569:23: SAVEPOINT_KEYWORD identifier
            {
            root_0 = (Object)adaptor.nil();

            SAVEPOINT_KEYWORD370=(Token)match(input,SAVEPOINT_KEYWORD,FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAVEPOINT_KEYWORD370_tree = (Object)adaptor.create(SAVEPOINT_KEYWORD370);
            adaptor.addChild(root_0, SAVEPOINT_KEYWORD370_tree);
            }
            pushFollow(FOLLOW_identifier_in_savepoint_statement7030);
            identifier371=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier371.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class set_transaction_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:1: set_transaction_statement : SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.set_transaction_statement_return set_transaction_statement() throws RecognitionException {
        PL_SQLParser.set_transaction_statement_return retval = new PL_SQLParser.set_transaction_statement_return();
        retval.start = input.LT(1);
        int set_transaction_statement_StartIndex = input.index();
        Object root_0 = null;

        Token SET_KEYWORD372=null;
        Token TRANSACTION_KEYWORD373=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed374 = null;


        Object SET_KEYWORD372_tree=null;
        Object TRANSACTION_KEYWORD373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:27: ( SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:29: SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            SET_KEYWORD372=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_set_transaction_statement7037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET_KEYWORD372_tree = (Object)adaptor.create(SET_KEYWORD372);
            adaptor.addChild(root_0, SET_KEYWORD372_tree);
            }
            TRANSACTION_KEYWORD373=(Token)match(input,TRANSACTION_KEYWORD,FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRANSACTION_KEYWORD373_tree = (Object)adaptor.create(TRANSACTION_KEYWORD373);
            adaptor.addChild(root_0, TRANSACTION_KEYWORD373_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:61: ( sql_not_parsed )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( ((LA125_0>=NUMBER_UNSIGNED && LA125_0<=OR_OPERATOR)||(LA125_0>=STRING && LA125_0<=SOME_TYPES)||(LA125_0>=KEYWORD && LA125_0<=ALIAS)||LA125_0==NOT_OPERATOR||LA125_0==COMMA||LA125_0==NULL_KEYWORD||(LA125_0>=TRUE_KEYWORD && LA125_0<=FALSE_KEYWORD)||LA125_0==WITH_KEYWORD||LA125_0==INTERVAL_KEYWORD||LA125_0==IS_KEYWORD||LA125_0==REPLACE_KEYWORD||LA125_0==AS_KEYWORD||LA125_0==IN_KEYWORD||(LA125_0>=SELECT_KEYWORD && LA125_0<=COUNT_KEYWORD)||LA125_0==LIKE_KEYWORD||LA125_0==CASE_KEYWORD||LA125_0==TABLE_KEYWORD||LA125_0==BY_KEYWORD||LA125_0==COMMIT_KEYWORD||LA125_0==DELETE_KEYWORD||LA125_0==INTO_KEYWORD||(LA125_0>=BULK_KEYWORD && LA125_0<=COLLECT_KEYWORD)||(LA125_0>=VALUES_KEYWORD && LA125_0<=BETWEEN_KEYWORD)||(LA125_0>=INSERT_KEYWORD && LA125_0<=MERGE_KEYWORD)||(LA125_0>=RETURNING_KEYWORD && LA125_0<=SAVEPOINT_KEYWORD)||LA125_0==SET_KEYWORD||(LA125_0>=SQLCODE_KEYWORD && LA125_0<=EXISTS_KEYWORD)||LA125_0==ROW_KEYWORD||LA125_0==RESULT_KEYWORD||LA125_0==JOIN_KEYWORD||LA125_0==THE_REST||LA125_0==200||LA125_0==202||(LA125_0>=204 && LA125_0<=218)) ) {
                    int LA125_2 = input.LA(2);

                    if ( (synpred239_PL_SQL()) ) {
                        alt125=1;
                    }


                }


                switch (alt125) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:62: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_set_transaction_statement7042);
            	    sql_not_parsed374=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed374.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, set_transaction_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_statement"

    public static class update_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:1: update_statement : UPDATE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.update_statement_return update_statement() throws RecognitionException {
        PL_SQLParser.update_statement_return retval = new PL_SQLParser.update_statement_return();
        retval.start = input.LT(1);
        int update_statement_StartIndex = input.index();
        Object root_0 = null;

        Token UPDATE_KEYWORD375=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed376 = null;


        Object UPDATE_KEYWORD375_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:18: ( UPDATE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:20: UPDATE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (Object)adaptor.nil();

            UPDATE_KEYWORD375=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_update_statement7051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATE_KEYWORD375_tree = (Object)adaptor.create(UPDATE_KEYWORD375);
            adaptor.addChild(root_0, UPDATE_KEYWORD375_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:35: ( sql_not_parsed )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( ((LA126_0>=NUMBER_UNSIGNED && LA126_0<=OR_OPERATOR)||(LA126_0>=STRING && LA126_0<=SOME_TYPES)||(LA126_0>=KEYWORD && LA126_0<=ALIAS)||LA126_0==NOT_OPERATOR||LA126_0==COMMA||LA126_0==NULL_KEYWORD||(LA126_0>=TRUE_KEYWORD && LA126_0<=FALSE_KEYWORD)||LA126_0==WITH_KEYWORD||LA126_0==INTERVAL_KEYWORD||LA126_0==IS_KEYWORD||LA126_0==REPLACE_KEYWORD||LA126_0==AS_KEYWORD||LA126_0==IN_KEYWORD||(LA126_0>=SELECT_KEYWORD && LA126_0<=COUNT_KEYWORD)||LA126_0==LIKE_KEYWORD||LA126_0==CASE_KEYWORD||LA126_0==TABLE_KEYWORD||LA126_0==BY_KEYWORD||LA126_0==COMMIT_KEYWORD||LA126_0==DELETE_KEYWORD||LA126_0==INTO_KEYWORD||(LA126_0>=BULK_KEYWORD && LA126_0<=COLLECT_KEYWORD)||(LA126_0>=VALUES_KEYWORD && LA126_0<=BETWEEN_KEYWORD)||(LA126_0>=INSERT_KEYWORD && LA126_0<=MERGE_KEYWORD)||(LA126_0>=RETURNING_KEYWORD && LA126_0<=SAVEPOINT_KEYWORD)||LA126_0==SET_KEYWORD||(LA126_0>=SQLCODE_KEYWORD && LA126_0<=EXISTS_KEYWORD)||LA126_0==ROW_KEYWORD||LA126_0==RESULT_KEYWORD||LA126_0==JOIN_KEYWORD||LA126_0==THE_REST||LA126_0==200||LA126_0==202||(LA126_0>=204 && LA126_0<=218)) ) {
                    int LA126_2 = input.LA(2);

                    if ( (synpred240_PL_SQL()) ) {
                        alt126=1;
                    }


                }


                switch (alt126) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_update_statement7054);
            	    sql_not_parsed376=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed376.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, update_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:1: goto_statement : GOTO_KEYWORD identifier ;
    public final PL_SQLParser.goto_statement_return goto_statement() throws RecognitionException {
        PL_SQLParser.goto_statement_return retval = new PL_SQLParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        Object root_0 = null;

        Token GOTO_KEYWORD377=null;
        PL_SQLParser.identifier_return identifier378 = null;


        Object GOTO_KEYWORD377_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:16: ( GOTO_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:574:18: GOTO_KEYWORD identifier
            {
            root_0 = (Object)adaptor.nil();

            GOTO_KEYWORD377=(Token)match(input,GOTO_KEYWORD,FOLLOW_GOTO_KEYWORD_in_goto_statement7065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOTO_KEYWORD377_tree = (Object)adaptor.create(GOTO_KEYWORD377);
            adaptor.addChild(root_0, GOTO_KEYWORD377_tree);
            }
            pushFollow(FOLLOW_identifier_in_goto_statement7067);
            identifier378=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier378.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:1: return_statement : RETURN_KEYWORD ( expression )? ;
    public final PL_SQLParser.return_statement_return return_statement() throws RecognitionException {
        PL_SQLParser.return_statement_return retval = new PL_SQLParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        Object root_0 = null;

        Token RETURN_KEYWORD379=null;
        PL_SQLParser.expression_return expression380 = null;


        Object RETURN_KEYWORD379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:18: ( RETURN_KEYWORD ( expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:20: RETURN_KEYWORD ( expression )?
            {
            root_0 = (Object)adaptor.nil();

            RETURN_KEYWORD379=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_return_statement7074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD379_tree = (Object)adaptor.create(RETURN_KEYWORD379);
            adaptor.addChild(root_0, RETURN_KEYWORD379_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:35: ( expression )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==NUMBER_UNSIGNED||LA127_0==STRING||(LA127_0>=IDENTIFIER && LA127_0<=EXT_IDENTIFIER)||LA127_0==NOT_OPERATOR||LA127_0==NULL_KEYWORD||(LA127_0>=TRUE_KEYWORD && LA127_0<=FALSE_KEYWORD)||LA127_0==INTERVAL_KEYWORD||LA127_0==REPLACE_KEYWORD||LA127_0==IN_KEYWORD||LA127_0==CASE_KEYWORD||(LA127_0>=SQLCODE_KEYWORD && LA127_0<=SQLERRM_KEYWORD)||LA127_0==RESULT_KEYWORD||LA127_0==200||(LA127_0>=204 && LA127_0<=205)) ) {
                int LA127_2 = input.LA(2);

                if ( (synpred241_PL_SQL()) ) {
                    alt127=1;
                }
            }
            switch (alt127) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7076);
                    expression380=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression380.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:1: if_statement : IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD ;
    public final PL_SQLParser.if_statement_return if_statement() throws RecognitionException {
        PL_SQLParser.if_statement_return retval = new PL_SQLParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        Object root_0 = null;

        Token IF_KEYWORD381=null;
        Token THEN_KEYWORD383=null;
        Token ELSIF_KEYWORD385=null;
        Token THEN_KEYWORD387=null;
        Token ELSE_KEYWORD389=null;
        Token END_KEYWORD391=null;
        Token IF_KEYWORD392=null;
        PL_SQLParser.expression_return expression382 = null;

        PL_SQLParser.executable_section_return executable_section384 = null;

        PL_SQLParser.expression_return expression386 = null;

        PL_SQLParser.executable_section_return executable_section388 = null;

        PL_SQLParser.executable_section_return executable_section390 = null;


        Object IF_KEYWORD381_tree=null;
        Object THEN_KEYWORD383_tree=null;
        Object ELSIF_KEYWORD385_tree=null;
        Object THEN_KEYWORD387_tree=null;
        Object ELSE_KEYWORD389_tree=null;
        Object END_KEYWORD391_tree=null;
        Object IF_KEYWORD392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:14: ( IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:16: IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            IF_KEYWORD381=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF_KEYWORD381_tree = (Object)adaptor.create(IF_KEYWORD381);
            adaptor.addChild(root_0, IF_KEYWORD381_tree);
            }
            pushFollow(FOLLOW_expression_in_if_statement7086);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
            THEN_KEYWORD383=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD383_tree = (Object)adaptor.create(THEN_KEYWORD383);
            adaptor.addChild(root_0, THEN_KEYWORD383_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:51: ( executable_section )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==NUMBER_UNSIGNED||LA128_0==STRING||(LA128_0>=IDENTIFIER && LA128_0<=EXT_IDENTIFIER)||LA128_0==NOT_OPERATOR||LA128_0==BEGIN_KEYWORD||LA128_0==DECLARE_KEYWORD||LA128_0==NULL_KEYWORD||(LA128_0>=TRUE_KEYWORD && LA128_0<=FALSE_KEYWORD)||LA128_0==INTERVAL_KEYWORD||LA128_0==REPLACE_KEYWORD||(LA128_0>=RETURN_KEYWORD && LA128_0<=IN_KEYWORD)||LA128_0==IF_KEYWORD||(LA128_0>=GOTO_KEYWORD && LA128_0<=FOR_KEYWORD)||LA128_0==SELECT_KEYWORD||(LA128_0>=RAISE_KEYWORD && LA128_0<=PRAGMA_KEYWORD)||(LA128_0>=CASE_KEYWORD && LA128_0<=CLOSE_KEYWORD)||LA128_0==COMMIT_KEYWORD||LA128_0==CONTINUE_KEYWORD||(LA128_0>=DELETE_KEYWORD && LA128_0<=EXECUTE_KEYWORD)||LA128_0==EXIT_KEYWORD||LA128_0==FETCH_KEYWORD||LA128_0==FORALL_KEYWORD||(LA128_0>=INSERT_KEYWORD && LA128_0<=OPEN_KEYWORD)||(LA128_0>=ROLLBACK_KEYWORD && LA128_0<=SAVEPOINT_KEYWORD)||LA128_0==SET_KEYWORD||(LA128_0>=SQLCODE_KEYWORD && LA128_0<=UPDATE_KEYWORD)||LA128_0==RESULT_KEYWORD||LA128_0==198||LA128_0==200||(LA128_0>=204 && LA128_0<=205)) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:576:52: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_if_statement7091);
            	    executable_section384=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section384.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:577:16: ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==ELSIF_KEYWORD) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:577:17: ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+
            	    {
            	    ELSIF_KEYWORD385=(Token)match(input,ELSIF_KEYWORD,FOLLOW_ELSIF_KEYWORD_in_if_statement7111); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ELSIF_KEYWORD385_tree = (Object)adaptor.create(ELSIF_KEYWORD385);
            	    adaptor.addChild(root_0, ELSIF_KEYWORD385_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_if_statement7113);
            	    expression386=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression386.getTree());
            	    THEN_KEYWORD387=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7115); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD387_tree = (Object)adaptor.create(THEN_KEYWORD387);
            	    adaptor.addChild(root_0, THEN_KEYWORD387_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:577:55: ( executable_section )+
            	    int cnt129=0;
            	    loop129:
            	    do {
            	        int alt129=2;
            	        int LA129_0 = input.LA(1);

            	        if ( (LA129_0==NUMBER_UNSIGNED||LA129_0==STRING||(LA129_0>=IDENTIFIER && LA129_0<=EXT_IDENTIFIER)||LA129_0==NOT_OPERATOR||LA129_0==BEGIN_KEYWORD||LA129_0==DECLARE_KEYWORD||LA129_0==NULL_KEYWORD||(LA129_0>=TRUE_KEYWORD && LA129_0<=FALSE_KEYWORD)||LA129_0==INTERVAL_KEYWORD||LA129_0==REPLACE_KEYWORD||(LA129_0>=RETURN_KEYWORD && LA129_0<=IN_KEYWORD)||LA129_0==IF_KEYWORD||(LA129_0>=GOTO_KEYWORD && LA129_0<=FOR_KEYWORD)||LA129_0==SELECT_KEYWORD||(LA129_0>=RAISE_KEYWORD && LA129_0<=PRAGMA_KEYWORD)||(LA129_0>=CASE_KEYWORD && LA129_0<=CLOSE_KEYWORD)||LA129_0==COMMIT_KEYWORD||LA129_0==CONTINUE_KEYWORD||(LA129_0>=DELETE_KEYWORD && LA129_0<=EXECUTE_KEYWORD)||LA129_0==EXIT_KEYWORD||LA129_0==FETCH_KEYWORD||LA129_0==FORALL_KEYWORD||(LA129_0>=INSERT_KEYWORD && LA129_0<=OPEN_KEYWORD)||(LA129_0>=ROLLBACK_KEYWORD && LA129_0<=SAVEPOINT_KEYWORD)||LA129_0==SET_KEYWORD||(LA129_0>=SQLCODE_KEYWORD && LA129_0<=UPDATE_KEYWORD)||LA129_0==RESULT_KEYWORD||LA129_0==198||LA129_0==200||(LA129_0>=204 && LA129_0<=205)) ) {
            	            alt129=1;
            	        }


            	        switch (alt129) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:577:56: executable_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_section_in_if_statement7118);
            	    	    executable_section388=executable_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section388.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt129 >= 1 ) break loop129;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(129, input);
            	                throw eee;
            	        }
            	        cnt129++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:16: ( ELSE_KEYWORD ( executable_section )+ )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==ELSE_KEYWORD) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:17: ELSE_KEYWORD ( executable_section )+
                    {
                    ELSE_KEYWORD389=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_if_statement7140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD389_tree = (Object)adaptor.create(ELSE_KEYWORD389);
                    adaptor.addChild(root_0, ELSE_KEYWORD389_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:30: ( executable_section )+
                    int cnt131=0;
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==NUMBER_UNSIGNED||LA131_0==STRING||(LA131_0>=IDENTIFIER && LA131_0<=EXT_IDENTIFIER)||LA131_0==NOT_OPERATOR||LA131_0==BEGIN_KEYWORD||LA131_0==DECLARE_KEYWORD||LA131_0==NULL_KEYWORD||(LA131_0>=TRUE_KEYWORD && LA131_0<=FALSE_KEYWORD)||LA131_0==INTERVAL_KEYWORD||LA131_0==REPLACE_KEYWORD||(LA131_0>=RETURN_KEYWORD && LA131_0<=IN_KEYWORD)||LA131_0==IF_KEYWORD||(LA131_0>=GOTO_KEYWORD && LA131_0<=FOR_KEYWORD)||LA131_0==SELECT_KEYWORD||(LA131_0>=RAISE_KEYWORD && LA131_0<=PRAGMA_KEYWORD)||(LA131_0>=CASE_KEYWORD && LA131_0<=CLOSE_KEYWORD)||LA131_0==COMMIT_KEYWORD||LA131_0==CONTINUE_KEYWORD||(LA131_0>=DELETE_KEYWORD && LA131_0<=EXECUTE_KEYWORD)||LA131_0==EXIT_KEYWORD||LA131_0==FETCH_KEYWORD||LA131_0==FORALL_KEYWORD||(LA131_0>=INSERT_KEYWORD && LA131_0<=OPEN_KEYWORD)||(LA131_0>=ROLLBACK_KEYWORD && LA131_0<=SAVEPOINT_KEYWORD)||LA131_0==SET_KEYWORD||(LA131_0>=SQLCODE_KEYWORD && LA131_0<=UPDATE_KEYWORD)||LA131_0==RESULT_KEYWORD||LA131_0==198||LA131_0==200||(LA131_0>=204 && LA131_0<=205)) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:578:31: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_if_statement7143);
                    	    executable_section390=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section390.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt131 >= 1 ) break loop131;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(131, input);
                                throw eee;
                        }
                        cnt131++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD391=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_if_statement7164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD391_tree = (Object)adaptor.create(END_KEYWORD391);
            adaptor.addChild(root_0, END_KEYWORD391_tree);
            }
            IF_KEYWORD392=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF_KEYWORD392_tree = (Object)adaptor.create(IF_KEYWORD392);
            adaptor.addChild(root_0, IF_KEYWORD392_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:1: loop_statement : LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? ;
    public final PL_SQLParser.loop_statement_return loop_statement() throws RecognitionException {
        PL_SQLParser.loop_statement_return retval = new PL_SQLParser.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LOOP_KEYWORD393=null;
        Token END_KEYWORD395=null;
        Token LOOP_KEYWORD396=null;
        PL_SQLParser.executable_section_return executable_section394 = null;

        PL_SQLParser.identifier_return identifier397 = null;


        Object LOOP_KEYWORD393_tree=null;
        Object END_KEYWORD395_tree=null;
        Object LOOP_KEYWORD396_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:16: ( LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:18: LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )?
            {
            root_0 = (Object)adaptor.nil();

            LOOP_KEYWORD393=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOOP_KEYWORD393_tree = (Object)adaptor.create(LOOP_KEYWORD393);
            adaptor.addChild(root_0, LOOP_KEYWORD393_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:31: ( executable_section )+
            int cnt133=0;
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==NUMBER_UNSIGNED||LA133_0==STRING||(LA133_0>=IDENTIFIER && LA133_0<=EXT_IDENTIFIER)||LA133_0==NOT_OPERATOR||LA133_0==BEGIN_KEYWORD||LA133_0==DECLARE_KEYWORD||LA133_0==NULL_KEYWORD||(LA133_0>=TRUE_KEYWORD && LA133_0<=FALSE_KEYWORD)||LA133_0==INTERVAL_KEYWORD||LA133_0==REPLACE_KEYWORD||(LA133_0>=RETURN_KEYWORD && LA133_0<=IN_KEYWORD)||LA133_0==IF_KEYWORD||(LA133_0>=GOTO_KEYWORD && LA133_0<=FOR_KEYWORD)||LA133_0==SELECT_KEYWORD||(LA133_0>=RAISE_KEYWORD && LA133_0<=PRAGMA_KEYWORD)||(LA133_0>=CASE_KEYWORD && LA133_0<=CLOSE_KEYWORD)||LA133_0==COMMIT_KEYWORD||LA133_0==CONTINUE_KEYWORD||(LA133_0>=DELETE_KEYWORD && LA133_0<=EXECUTE_KEYWORD)||LA133_0==EXIT_KEYWORD||LA133_0==FETCH_KEYWORD||LA133_0==FORALL_KEYWORD||(LA133_0>=INSERT_KEYWORD && LA133_0<=OPEN_KEYWORD)||(LA133_0>=ROLLBACK_KEYWORD && LA133_0<=SAVEPOINT_KEYWORD)||LA133_0==SET_KEYWORD||(LA133_0>=SQLCODE_KEYWORD && LA133_0<=UPDATE_KEYWORD)||LA133_0==RESULT_KEYWORD||LA133_0==198||LA133_0==200||(LA133_0>=204 && LA133_0<=205)) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:32: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_loop_statement7176);
            	    executable_section394=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section394.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt133 >= 1 ) break loop133;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(133, input);
                        throw eee;
                }
                cnt133++;
            } while (true);

            END_KEYWORD395=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_loop_statement7180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD395_tree = (Object)adaptor.create(END_KEYWORD395);
            adaptor.addChild(root_0, END_KEYWORD395_tree);
            }
            LOOP_KEYWORD396=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOOP_KEYWORD396_tree = (Object)adaptor.create(LOOP_KEYWORD396);
            adaptor.addChild(root_0, LOOP_KEYWORD396_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:78: ( identifier )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==IDENTIFIER||LA134_0==INTERVAL_KEYWORD||LA134_0==RESULT_KEYWORD) ) {
                int LA134_1 = input.LA(2);

                if ( (synpred248_PL_SQL()) ) {
                    alt134=1;
                }
            }
            switch (alt134) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_loop_statement7184);
                    identifier397=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier397.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:1: while_loop_statement : WHILE_KEYWORD expression loop_statement ;
    public final PL_SQLParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        PL_SQLParser.while_loop_statement_return retval = new PL_SQLParser.while_loop_statement_return();
        retval.start = input.LT(1);
        int while_loop_statement_StartIndex = input.index();
        Object root_0 = null;

        Token WHILE_KEYWORD398=null;
        PL_SQLParser.expression_return expression399 = null;

        PL_SQLParser.loop_statement_return loop_statement400 = null;


        Object WHILE_KEYWORD398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:22: ( WHILE_KEYWORD expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:581:24: WHILE_KEYWORD expression loop_statement
            {
            root_0 = (Object)adaptor.nil();

            WHILE_KEYWORD398=(Token)match(input,WHILE_KEYWORD,FOLLOW_WHILE_KEYWORD_in_while_loop_statement7192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE_KEYWORD398_tree = (Object)adaptor.create(WHILE_KEYWORD398);
            adaptor.addChild(root_0, WHILE_KEYWORD398_tree);
            }
            pushFollow(FOLLOW_expression_in_while_loop_statement7194);
            expression399=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression399.getTree());
            pushFollow(FOLLOW_loop_statement_in_while_loop_statement7196);
            loop_statement400=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement400.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, while_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class for_loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:582:1: for_loop_statement : FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) ;
    public final PL_SQLParser.for_loop_statement_return for_loop_statement() throws RecognitionException {
        PL_SQLParser.for_loop_statement_return retval = new PL_SQLParser.for_loop_statement_return();
        retval.start = input.LT(1);
        int for_loop_statement_StartIndex = input.index();
        Object root_0 = null;

        Token FOR_KEYWORD401=null;
        Token IN_KEYWORD403=null;
        Token REVERSE_KEYWORD404=null;
        PL_SQLParser.identifier_return identifier402 = null;

        PL_SQLParser.expression_return expression405 = null;

        PL_SQLParser.for_loop_statement_part_return for_loop_statement_part406 = null;

        PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1407 = null;

        PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2408 = null;


        Object FOR_KEYWORD401_tree=null;
        Object IN_KEYWORD403_tree=null;
        Object REVERSE_KEYWORD404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:582:20: ( FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:582:22: FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            {
            root_0 = (Object)adaptor.nil();

            FOR_KEYWORD401=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_for_loop_statement7203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD401_tree = (Object)adaptor.create(FOR_KEYWORD401);
            adaptor.addChild(root_0, FOR_KEYWORD401_tree);
            }
            pushFollow(FOLLOW_identifier_in_for_loop_statement7205);
            identifier402=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier402.getTree());
            IN_KEYWORD403=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_for_loop_statement7207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD403_tree = (Object)adaptor.create(IN_KEYWORD403);
            adaptor.addChild(root_0, IN_KEYWORD403_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:582:56: ( REVERSE_KEYWORD )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==REVERSE_KEYWORD) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REVERSE_KEYWORD
                    {
                    REVERSE_KEYWORD404=(Token)match(input,REVERSE_KEYWORD,FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_KEYWORD404_tree = (Object)adaptor.create(REVERSE_KEYWORD404);
                    adaptor.addChild(root_0, REVERSE_KEYWORD404_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:22: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==200) ) {
                int LA137_1 = input.LA(2);

                if ( (synpred251_PL_SQL()) ) {
                    alt137=1;
                }
                else if ( (true) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA137_0==NUMBER_UNSIGNED||LA137_0==STRING||(LA137_0>=IDENTIFIER && LA137_0<=EXT_IDENTIFIER)||LA137_0==NOT_OPERATOR||LA137_0==NULL_KEYWORD||(LA137_0>=TRUE_KEYWORD && LA137_0<=FALSE_KEYWORD)||LA137_0==INTERVAL_KEYWORD||LA137_0==REPLACE_KEYWORD||LA137_0==IN_KEYWORD||LA137_0==CASE_KEYWORD||(LA137_0>=SQLCODE_KEYWORD && LA137_0<=SQLERRM_KEYWORD)||LA137_0==RESULT_KEYWORD||(LA137_0>=204 && LA137_0<=205)) ) {
                alt137=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
                    {
                    pushFollow(FOLLOW_expression_in_for_loop_statement7236);
                    expression405=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression405.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==219) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==LOOP_KEYWORD) ) {
                        alt136=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);

                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:36: for_loop_statement_part
                            {
                            pushFollow(FOLLOW_for_loop_statement_part_in_for_loop_statement7239);
                            for_loop_statement_part406=for_loop_statement_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement_part406.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:62: cursor_for_loop_statement1
                            {
                            pushFollow(FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7243);
                            cursor_for_loop_statement1407=cursor_for_loop_statement1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement1407.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:584:24: cursor_for_loop_statement2
                    {
                    pushFollow(FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7272);
                    cursor_for_loop_statement2408=cursor_for_loop_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement2408.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, for_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement"

    public static class for_loop_statement_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:1: for_loop_statement_part : '..' expression loop_statement ;
    public final PL_SQLParser.for_loop_statement_part_return for_loop_statement_part() throws RecognitionException {
        PL_SQLParser.for_loop_statement_part_return retval = new PL_SQLParser.for_loop_statement_part_return();
        retval.start = input.LT(1);
        int for_loop_statement_part_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal409=null;
        PL_SQLParser.expression_return expression410 = null;

        PL_SQLParser.loop_statement_return loop_statement411 = null;


        Object string_literal409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:25: ( '..' expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:28: '..' expression loop_statement
            {
            root_0 = (Object)adaptor.nil();

            string_literal409=(Token)match(input,219,FOLLOW_219_in_for_loop_statement_part7281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal409_tree = (Object)adaptor.create(string_literal409);
            adaptor.addChild(root_0, string_literal409_tree);
            }
            pushFollow(FOLLOW_expression_in_for_loop_statement_part7283);
            expression410=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression410.getTree());
            pushFollow(FOLLOW_loop_statement_in_for_loop_statement_part7285);
            loop_statement411=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement411.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, for_loop_statement_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement_part"

    public static class cursor_for_loop_statement1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement1"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:1: cursor_for_loop_statement1 : loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement1_return retval = new PL_SQLParser.cursor_for_loop_statement1_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement1_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.loop_statement_return loop_statement412 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:28: ( loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:30: loop_statement
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement17292);
            loop_statement412=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement412.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, cursor_for_loop_statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement1"

    public static class cursor_for_loop_statement2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:1: cursor_for_loop_statement2 : '(' select_statement ')' loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement2_return retval = new PL_SQLParser.cursor_for_loop_statement2_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement2_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal413=null;
        Token char_literal415=null;
        PL_SQLParser.select_statement_return select_statement414 = null;

        PL_SQLParser.loop_statement_return loop_statement416 = null;


        Object char_literal413_tree=null;
        Object char_literal415_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:28: ( '(' select_statement ')' loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:587:30: '(' select_statement ')' loop_statement
            {
            root_0 = (Object)adaptor.nil();

            char_literal413=(Token)match(input,200,FOLLOW_200_in_cursor_for_loop_statement27299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal413_tree = (Object)adaptor.create(char_literal413);
            adaptor.addChild(root_0, char_literal413_tree);
            }
            pushFollow(FOLLOW_select_statement_in_cursor_for_loop_statement27301);
            select_statement414=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement414.getTree());
            char_literal415=(Token)match(input,201,FOLLOW_201_in_cursor_for_loop_statement27303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal415_tree = (Object)adaptor.create(char_literal415);
            adaptor.addChild(root_0, char_literal415_tree);
            }
            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement27305);
            loop_statement416=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement416.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, cursor_for_loop_statement2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement2"

    public static class raise_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:1: raise_statement : RAISE_KEYWORD ( universal_identifier )? ;
    public final PL_SQLParser.raise_statement_return raise_statement() throws RecognitionException {
        PL_SQLParser.raise_statement_return retval = new PL_SQLParser.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        Object root_0 = null;

        Token RAISE_KEYWORD417=null;
        PL_SQLParser.universal_identifier_return universal_identifier418 = null;


        Object RAISE_KEYWORD417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:17: ( RAISE_KEYWORD ( universal_identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:19: RAISE_KEYWORD ( universal_identifier )?
            {
            root_0 = (Object)adaptor.nil();

            RAISE_KEYWORD417=(Token)match(input,RAISE_KEYWORD,FOLLOW_RAISE_KEYWORD_in_raise_statement7312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE_KEYWORD417_tree = (Object)adaptor.create(RAISE_KEYWORD417);
            adaptor.addChild(root_0, RAISE_KEYWORD417_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:33: ( universal_identifier )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( ((LA138_0>=IDENTIFIER && LA138_0<=EXT_IDENTIFIER)||LA138_0==INTERVAL_KEYWORD||LA138_0==RESULT_KEYWORD) ) {
                int LA138_2 = input.LA(2);

                if ( (synpred252_PL_SQL()) ) {
                    alt138=1;
                }
            }
            switch (alt138) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_raise_statement7314);
                    universal_identifier418=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier418.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:1: case_statement_expression : ( simple_case_statement_expression | searched_case_statement_expression );
    public final PL_SQLParser.case_statement_expression_return case_statement_expression() throws RecognitionException {
        PL_SQLParser.case_statement_expression_return retval = new PL_SQLParser.case_statement_expression_return();
        retval.start = input.LT(1);
        int case_statement_expression_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression419 = null;

        PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression420 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:27: ( simple_case_statement_expression | searched_case_statement_expression )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==CASE_KEYWORD) ) {
                int LA139_1 = input.LA(2);

                if ( (synpred253_PL_SQL()) ) {
                    alt139=1;
                }
                else if ( (true) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:29: simple_case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_expression_in_case_statement_expression7322);
                    simple_case_statement_expression419=simple_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement_expression419.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:64: searched_case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_expression_in_case_statement_expression7326);
                    searched_case_statement_expression420=searched_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement_expression420.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement_expression"

    public static class simple_case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:1: simple_case_statement_expression : CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) ;
    public final PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression() throws RecognitionException {
        PL_SQLParser.simple_case_statement_expression_return retval = new PL_SQLParser.simple_case_statement_expression_return();
        retval.start = input.LT(1);
        int simple_case_statement_expression_StartIndex = input.index();
        Object root_0 = null;

        Token CASE_KEYWORD421=null;
        Token WHEN_KEYWORD423=null;
        Token THEN_KEYWORD425=null;
        Token ELSE_KEYWORD427=null;
        Token END_KEYWORD429=null;
        Token CASE_KEYWORD430=null;
        PL_SQLParser.expression_return expression422 = null;

        PL_SQLParser.expression_return expression424 = null;

        PL_SQLParser.executable_case_section_return executable_case_section426 = null;

        PL_SQLParser.executable_case_section_return executable_case_section428 = null;

        PL_SQLParser.identifier_return identifier431 = null;


        Object CASE_KEYWORD421_tree=null;
        Object WHEN_KEYWORD423_tree=null;
        Object THEN_KEYWORD425_tree=null;
        Object ELSE_KEYWORD427_tree=null;
        Object END_KEYWORD429_tree=null;
        Object CASE_KEYWORD430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:34: ( CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:36: CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            root_0 = (Object)adaptor.nil();

            CASE_KEYWORD421=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE_KEYWORD421_tree = (Object)adaptor.create(CASE_KEYWORD421);
            adaptor.addChild(root_0, CASE_KEYWORD421_tree);
            }
            pushFollow(FOLLOW_expression_in_simple_case_statement_expression7335);
            expression422=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression422.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt141=0;
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==WHEN_KEYWORD) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD423=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7363); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD423_tree = (Object)adaptor.create(WHEN_KEYWORD423);
            	    adaptor.addChild(root_0, WHEN_KEYWORD423_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_simple_case_statement_expression7365);
            	    expression424=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression424.getTree());
            	    THEN_KEYWORD425=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7367); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD425_tree = (Object)adaptor.create(THEN_KEYWORD425);
            	    adaptor.addChild(root_0, THEN_KEYWORD425_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:63: ( executable_case_section )+
            	    int cnt140=0;
            	    loop140:
            	    do {
            	        int alt140=2;
            	        int LA140_0 = input.LA(1);

            	        if ( (LA140_0==NUMBER_UNSIGNED||LA140_0==STRING||(LA140_0>=IDENTIFIER && LA140_0<=EXT_IDENTIFIER)||LA140_0==NOT_OPERATOR||LA140_0==BEGIN_KEYWORD||LA140_0==DECLARE_KEYWORD||LA140_0==NULL_KEYWORD||(LA140_0>=TRUE_KEYWORD && LA140_0<=FALSE_KEYWORD)||LA140_0==INTERVAL_KEYWORD||LA140_0==REPLACE_KEYWORD||(LA140_0>=RETURN_KEYWORD && LA140_0<=IN_KEYWORD)||LA140_0==IF_KEYWORD||(LA140_0>=GOTO_KEYWORD && LA140_0<=FOR_KEYWORD)||LA140_0==SELECT_KEYWORD||(LA140_0>=RAISE_KEYWORD && LA140_0<=PRAGMA_KEYWORD)||(LA140_0>=CASE_KEYWORD && LA140_0<=CLOSE_KEYWORD)||LA140_0==COMMIT_KEYWORD||LA140_0==CONTINUE_KEYWORD||(LA140_0>=DELETE_KEYWORD && LA140_0<=EXECUTE_KEYWORD)||LA140_0==EXIT_KEYWORD||LA140_0==FETCH_KEYWORD||LA140_0==FORALL_KEYWORD||(LA140_0>=INSERT_KEYWORD && LA140_0<=OPEN_KEYWORD)||(LA140_0>=ROLLBACK_KEYWORD && LA140_0<=SAVEPOINT_KEYWORD)||LA140_0==SET_KEYWORD||(LA140_0>=SQLCODE_KEYWORD && LA140_0<=UPDATE_KEYWORD)||LA140_0==RESULT_KEYWORD||LA140_0==198||LA140_0==200||(LA140_0>=204 && LA140_0<=205)) ) {
            	            alt140=1;
            	        }


            	        switch (alt140) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7370);
            	    	    executable_case_section426=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section426.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt140 >= 1 ) break loop140;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(140, input);
            	                throw eee;
            	        }
            	        cnt140++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ELSE_KEYWORD) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD427=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD427_tree = (Object)adaptor.create(ELSE_KEYWORD427);
                    adaptor.addChild(root_0, ELSE_KEYWORD427_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:39: ( executable_case_section )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==NUMBER_UNSIGNED||LA142_0==STRING||(LA142_0>=IDENTIFIER && LA142_0<=EXT_IDENTIFIER)||LA142_0==NOT_OPERATOR||LA142_0==BEGIN_KEYWORD||LA142_0==DECLARE_KEYWORD||LA142_0==NULL_KEYWORD||(LA142_0>=TRUE_KEYWORD && LA142_0<=FALSE_KEYWORD)||LA142_0==INTERVAL_KEYWORD||LA142_0==REPLACE_KEYWORD||(LA142_0>=RETURN_KEYWORD && LA142_0<=IN_KEYWORD)||LA142_0==IF_KEYWORD||(LA142_0>=GOTO_KEYWORD && LA142_0<=FOR_KEYWORD)||LA142_0==SELECT_KEYWORD||(LA142_0>=RAISE_KEYWORD && LA142_0<=PRAGMA_KEYWORD)||(LA142_0>=CASE_KEYWORD && LA142_0<=CLOSE_KEYWORD)||LA142_0==COMMIT_KEYWORD||LA142_0==CONTINUE_KEYWORD||(LA142_0>=DELETE_KEYWORD && LA142_0<=EXECUTE_KEYWORD)||LA142_0==EXIT_KEYWORD||LA142_0==FETCH_KEYWORD||LA142_0==FORALL_KEYWORD||(LA142_0>=INSERT_KEYWORD && LA142_0<=OPEN_KEYWORD)||(LA142_0>=ROLLBACK_KEYWORD && LA142_0<=SAVEPOINT_KEYWORD)||LA142_0==SET_KEYWORD||(LA142_0>=SQLCODE_KEYWORD && LA142_0<=UPDATE_KEYWORD)||LA142_0==RESULT_KEYWORD||LA142_0==198||LA142_0==200||(LA142_0>=204 && LA142_0<=205)) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7404);
                    	    executable_case_section428=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section428.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD429=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_simple_case_statement_expression7435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD429_tree = (Object)adaptor.create(END_KEYWORD429);
            adaptor.addChild(root_0, END_KEYWORD429_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:38: ( CASE_KEYWORD )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==CASE_KEYWORD) ) {
                int LA144_2 = input.LA(2);

                if ( (synpred258_PL_SQL()) ) {
                    alt144=1;
                }
            }
            switch (alt144) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD430=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE_KEYWORD430_tree = (Object)adaptor.create(CASE_KEYWORD430);
                    adaptor.addChild(root_0, CASE_KEYWORD430_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:52: ( identifier )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==IDENTIFIER||LA145_0==INTERVAL_KEYWORD||LA145_0==RESULT_KEYWORD) ) {
                int LA145_1 = input.LA(2);

                if ( (synpred259_PL_SQL()) ) {
                    alt145=1;
                }
            }
            switch (alt145) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_simple_case_statement_expression7440);
                    identifier431=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier431.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, simple_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement_expression"

    public static class searched_case_statement_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:1: searched_case_statement_expression : CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) ;
    public final PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression() throws RecognitionException {
        PL_SQLParser.searched_case_statement_expression_return retval = new PL_SQLParser.searched_case_statement_expression_return();
        retval.start = input.LT(1);
        int searched_case_statement_expression_StartIndex = input.index();
        Object root_0 = null;

        Token CASE_KEYWORD432=null;
        Token WHEN_KEYWORD433=null;
        Token THEN_KEYWORD435=null;
        Token ELSE_KEYWORD437=null;
        Token END_KEYWORD439=null;
        Token CASE_KEYWORD440=null;
        PL_SQLParser.expression_return expression434 = null;

        PL_SQLParser.executable_case_section_return executable_case_section436 = null;

        PL_SQLParser.executable_case_section_return executable_case_section438 = null;

        PL_SQLParser.identifier_return identifier441 = null;


        Object CASE_KEYWORD432_tree=null;
        Object WHEN_KEYWORD433_tree=null;
        Object THEN_KEYWORD435_tree=null;
        Object ELSE_KEYWORD437_tree=null;
        Object END_KEYWORD439_tree=null;
        Object CASE_KEYWORD440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:36: ( CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:38: CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            root_0 = (Object)adaptor.nil();

            CASE_KEYWORD432=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE_KEYWORD432_tree = (Object)adaptor.create(CASE_KEYWORD432);
            adaptor.addChild(root_0, CASE_KEYWORD432_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt147=0;
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==WHEN_KEYWORD) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD433=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7476); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD433_tree = (Object)adaptor.create(WHEN_KEYWORD433);
            	    adaptor.addChild(root_0, WHEN_KEYWORD433_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_searched_case_statement_expression7478);
            	    expression434=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression434.getTree());
            	    THEN_KEYWORD435=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7480); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD435_tree = (Object)adaptor.create(THEN_KEYWORD435);
            	    adaptor.addChild(root_0, THEN_KEYWORD435_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:63: ( executable_case_section )+
            	    int cnt146=0;
            	    loop146:
            	    do {
            	        int alt146=2;
            	        int LA146_0 = input.LA(1);

            	        if ( (LA146_0==NUMBER_UNSIGNED||LA146_0==STRING||(LA146_0>=IDENTIFIER && LA146_0<=EXT_IDENTIFIER)||LA146_0==NOT_OPERATOR||LA146_0==BEGIN_KEYWORD||LA146_0==DECLARE_KEYWORD||LA146_0==NULL_KEYWORD||(LA146_0>=TRUE_KEYWORD && LA146_0<=FALSE_KEYWORD)||LA146_0==INTERVAL_KEYWORD||LA146_0==REPLACE_KEYWORD||(LA146_0>=RETURN_KEYWORD && LA146_0<=IN_KEYWORD)||LA146_0==IF_KEYWORD||(LA146_0>=GOTO_KEYWORD && LA146_0<=FOR_KEYWORD)||LA146_0==SELECT_KEYWORD||(LA146_0>=RAISE_KEYWORD && LA146_0<=PRAGMA_KEYWORD)||(LA146_0>=CASE_KEYWORD && LA146_0<=CLOSE_KEYWORD)||LA146_0==COMMIT_KEYWORD||LA146_0==CONTINUE_KEYWORD||(LA146_0>=DELETE_KEYWORD && LA146_0<=EXECUTE_KEYWORD)||LA146_0==EXIT_KEYWORD||LA146_0==FETCH_KEYWORD||LA146_0==FORALL_KEYWORD||(LA146_0>=INSERT_KEYWORD && LA146_0<=OPEN_KEYWORD)||(LA146_0>=ROLLBACK_KEYWORD && LA146_0<=SAVEPOINT_KEYWORD)||LA146_0==SET_KEYWORD||(LA146_0>=SQLCODE_KEYWORD && LA146_0<=UPDATE_KEYWORD)||LA146_0==RESULT_KEYWORD||LA146_0==198||LA146_0==200||(LA146_0>=204 && LA146_0<=205)) ) {
            	            alt146=1;
            	        }


            	        switch (alt146) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7483);
            	    	    executable_case_section436=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section436.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt146 >= 1 ) break loop146;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(146, input);
            	                throw eee;
            	        }
            	        cnt146++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ELSE_KEYWORD) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD437=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELSE_KEYWORD437_tree = (Object)adaptor.create(ELSE_KEYWORD437);
                    adaptor.addChild(root_0, ELSE_KEYWORD437_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:39: ( executable_case_section )+
                    int cnt148=0;
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==NUMBER_UNSIGNED||LA148_0==STRING||(LA148_0>=IDENTIFIER && LA148_0<=EXT_IDENTIFIER)||LA148_0==NOT_OPERATOR||LA148_0==BEGIN_KEYWORD||LA148_0==DECLARE_KEYWORD||LA148_0==NULL_KEYWORD||(LA148_0>=TRUE_KEYWORD && LA148_0<=FALSE_KEYWORD)||LA148_0==INTERVAL_KEYWORD||LA148_0==REPLACE_KEYWORD||(LA148_0>=RETURN_KEYWORD && LA148_0<=IN_KEYWORD)||LA148_0==IF_KEYWORD||(LA148_0>=GOTO_KEYWORD && LA148_0<=FOR_KEYWORD)||LA148_0==SELECT_KEYWORD||(LA148_0>=RAISE_KEYWORD && LA148_0<=PRAGMA_KEYWORD)||(LA148_0>=CASE_KEYWORD && LA148_0<=CLOSE_KEYWORD)||LA148_0==COMMIT_KEYWORD||LA148_0==CONTINUE_KEYWORD||(LA148_0>=DELETE_KEYWORD && LA148_0<=EXECUTE_KEYWORD)||LA148_0==EXIT_KEYWORD||LA148_0==FETCH_KEYWORD||LA148_0==FORALL_KEYWORD||(LA148_0>=INSERT_KEYWORD && LA148_0<=OPEN_KEYWORD)||(LA148_0>=ROLLBACK_KEYWORD && LA148_0<=SAVEPOINT_KEYWORD)||LA148_0==SET_KEYWORD||(LA148_0>=SQLCODE_KEYWORD && LA148_0<=UPDATE_KEYWORD)||LA148_0==RESULT_KEYWORD||LA148_0==198||LA148_0==200||(LA148_0>=204 && LA148_0<=205)) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7517);
                    	    executable_case_section438=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_case_section438.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt148 >= 1 ) break loop148;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(148, input);
                                throw eee;
                        }
                        cnt148++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD439=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_searched_case_statement_expression7548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD439_tree = (Object)adaptor.create(END_KEYWORD439);
            adaptor.addChild(root_0, END_KEYWORD439_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:38: ( CASE_KEYWORD )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==CASE_KEYWORD) ) {
                int LA150_2 = input.LA(2);

                if ( (synpred264_PL_SQL()) ) {
                    alt150=1;
                }
            }
            switch (alt150) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD440=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE_KEYWORD440_tree = (Object)adaptor.create(CASE_KEYWORD440);
                    adaptor.addChild(root_0, CASE_KEYWORD440_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: ( identifier )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==IDENTIFIER||LA151_0==INTERVAL_KEYWORD||LA151_0==RESULT_KEYWORD) ) {
                int LA151_2 = input.LA(2);

                if ( (synpred265_PL_SQL()) ) {
                    alt151=1;
                }
            }
            switch (alt151) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_searched_case_statement_expression7553);
                    identifier441=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier441.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, searched_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement_expression"

    public static class close_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:1: close_statement : CLOSE_KEYWORD universal_identifier ;
    public final PL_SQLParser.close_statement_return close_statement() throws RecognitionException {
        PL_SQLParser.close_statement_return retval = new PL_SQLParser.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        Object root_0 = null;

        Token CLOSE_KEYWORD442=null;
        PL_SQLParser.universal_identifier_return universal_identifier443 = null;


        Object CLOSE_KEYWORD442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:17: ( CLOSE_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:19: CLOSE_KEYWORD universal_identifier
            {
            root_0 = (Object)adaptor.nil();

            CLOSE_KEYWORD442=(Token)match(input,CLOSE_KEYWORD,FOLLOW_CLOSE_KEYWORD_in_close_statement7562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_KEYWORD442_tree = (Object)adaptor.create(CLOSE_KEYWORD442);
            adaptor.addChild(root_0, CLOSE_KEYWORD442_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_close_statement7564);
            universal_identifier443=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier443.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:1: continue_statement : CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.continue_statement_return continue_statement() throws RecognitionException {
        PL_SQLParser.continue_statement_return retval = new PL_SQLParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.index();
        Object root_0 = null;

        Token CONTINUE_KEYWORD444=null;
        Token WHEN_KEYWORD446=null;
        PL_SQLParser.identifier_return identifier445 = null;

        PL_SQLParser.expression_return expression447 = null;


        Object CONTINUE_KEYWORD444_tree=null;
        Object WHEN_KEYWORD446_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:20: ( CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:22: CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (Object)adaptor.nil();

            CONTINUE_KEYWORD444=(Token)match(input,CONTINUE_KEYWORD,FOLLOW_CONTINUE_KEYWORD_in_continue_statement7571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE_KEYWORD444_tree = (Object)adaptor.create(CONTINUE_KEYWORD444);
            adaptor.addChild(root_0, CONTINUE_KEYWORD444_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:39: ( identifier )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==IDENTIFIER||LA152_0==INTERVAL_KEYWORD||LA152_0==RESULT_KEYWORD) ) {
                int LA152_2 = input.LA(2);

                if ( (synpred266_PL_SQL()) ) {
                    alt152=1;
                }
            }
            switch (alt152) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_continue_statement7573);
                    identifier445=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier445.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:51: ( WHEN_KEYWORD expression )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==WHEN_KEYWORD) ) {
                int LA153_2 = input.LA(2);

                if ( (synpred267_PL_SQL()) ) {
                    alt153=1;
                }
            }
            switch (alt153) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:52: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD446=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_continue_statement7577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD446_tree = (Object)adaptor.create(WHEN_KEYWORD446);
                    adaptor.addChild(root_0, WHEN_KEYWORD446_tree);
                    }
                    pushFollow(FOLLOW_expression_in_continue_statement7579);
                    expression447=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, continue_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class execute_immediate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_immediate_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:1: execute_immediate_statement : EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? ;
    public final PL_SQLParser.execute_immediate_statement_return execute_immediate_statement() throws RecognitionException {
        PL_SQLParser.execute_immediate_statement_return retval = new PL_SQLParser.execute_immediate_statement_return();
        retval.start = input.LT(1);
        int execute_immediate_statement_StartIndex = input.index();
        Object root_0 = null;

        Token EXECUTE_KEYWORD448=null;
        Token IMMEDIATE_KEYWORD449=null;
        Token set451=null;
        PL_SQLParser.expression_return expression450 = null;

        PL_SQLParser.into_clause_return into_clause452 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause453 = null;

        PL_SQLParser.using_clause_return using_clause454 = null;


        Object EXECUTE_KEYWORD448_tree=null;
        Object IMMEDIATE_KEYWORD449_tree=null;
        Object set451_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:29: ( EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:31: EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )?
            {
            root_0 = (Object)adaptor.nil();

            EXECUTE_KEYWORD448=(Token)match(input,EXECUTE_KEYWORD,FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement7588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECUTE_KEYWORD448_tree = (Object)adaptor.create(EXECUTE_KEYWORD448);
            adaptor.addChild(root_0, EXECUTE_KEYWORD448_tree);
            }
            IMMEDIATE_KEYWORD449=(Token)match(input,IMMEDIATE_KEYWORD,FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement7590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMMEDIATE_KEYWORD449_tree = (Object)adaptor.create(IMMEDIATE_KEYWORD449);
            adaptor.addChild(root_0, IMMEDIATE_KEYWORD449_tree);
            }
            pushFollow(FOLLOW_expression_in_execute_immediate_statement7592);
            expression450=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:31: ( RETURN_KEYWORD | RETURNING_KEYWORD )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==RETURN_KEYWORD) ) {
                int LA154_1 = input.LA(2);

                if ( (true) ) {
                    alt154=1;
                }
            }
            else if ( (LA154_0==RETURNING_KEYWORD) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set451=(Token)input.LT(1);
                    if ( input.LA(1)==RETURN_KEYWORD||input.LA(1)==RETURNING_KEYWORD ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set451));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:31: ( into_clause | bulk_collect_into_clause )?
            int alt155=3;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==INTO_KEYWORD) ) {
                alt155=1;
            }
            else if ( (LA155_0==BULK_KEYWORD) ) {
                alt155=2;
            }
            switch (alt155) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:32: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate_statement7664);
                    into_clause452=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause452.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:46: bulk_collect_into_clause
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement7668);
                    bulk_collect_into_clause453=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause453.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:31: ( using_clause )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==USING_KEYWORD) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate_statement7702);
                    using_clause454=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause454.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, execute_immediate_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "execute_immediate_statement"

    public static class into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:1: into_clause : INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.into_clause_return into_clause() throws RecognitionException {
        PL_SQLParser.into_clause_return retval = new PL_SQLParser.into_clause_return();
        retval.start = input.LT(1);
        int into_clause_StartIndex = input.index();
        Object root_0 = null;

        Token INTO_KEYWORD455=null;
        Token char_literal457=null;
        PL_SQLParser.universal_identifier_return universal_identifier456 = null;

        PL_SQLParser.universal_identifier_return universal_identifier458 = null;


        Object INTO_KEYWORD455_tree=null;
        Object char_literal457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:13: ( INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:15: INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (Object)adaptor.nil();

            INTO_KEYWORD455=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_into_clause7711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD455_tree = (Object)adaptor.create(INTO_KEYWORD455);
            adaptor.addChild(root_0, INTO_KEYWORD455_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_into_clause7713);
            universal_identifier456=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier456.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:49: ( ',' universal_identifier )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==COMMA) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:50: ',' universal_identifier
            	    {
            	    char_literal457=(Token)match(input,COMMA,FOLLOW_COMMA_in_into_clause7716); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal457_tree = (Object)adaptor.create(char_literal457);
            	    adaptor.addChild(root_0, char_literal457_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_into_clause7718);
            	    universal_identifier458=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier458.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "into_clause"

    public static class bulk_collect_into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_collect_into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:1: bulk_collect_into_clause : BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause() throws RecognitionException {
        PL_SQLParser.bulk_collect_into_clause_return retval = new PL_SQLParser.bulk_collect_into_clause_return();
        retval.start = input.LT(1);
        int bulk_collect_into_clause_StartIndex = input.index();
        Object root_0 = null;

        Token BULK_KEYWORD459=null;
        Token COLLECT_KEYWORD460=null;
        Token INTO_KEYWORD461=null;
        Token char_literal463=null;
        PL_SQLParser.universal_identifier_return universal_identifier462 = null;

        PL_SQLParser.universal_identifier_return universal_identifier464 = null;


        Object BULK_KEYWORD459_tree=null;
        Object COLLECT_KEYWORD460_tree=null;
        Object INTO_KEYWORD461_tree=null;
        Object char_literal463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:26: ( BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:28: BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (Object)adaptor.nil();

            BULK_KEYWORD459=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause7727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BULK_KEYWORD459_tree = (Object)adaptor.create(BULK_KEYWORD459);
            adaptor.addChild(root_0, BULK_KEYWORD459_tree);
            }
            COLLECT_KEYWORD460=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause7729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLLECT_KEYWORD460_tree = (Object)adaptor.create(COLLECT_KEYWORD460);
            adaptor.addChild(root_0, COLLECT_KEYWORD460_tree);
            }
            INTO_KEYWORD461=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause7731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD461_tree = (Object)adaptor.create(INTO_KEYWORD461);
            adaptor.addChild(root_0, INTO_KEYWORD461_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause7761);
            universal_identifier462=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier462.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:49: ( ',' universal_identifier )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:50: ',' universal_identifier
            	    {
            	    char_literal463=(Token)match(input,COMMA,FOLLOW_COMMA_in_bulk_collect_into_clause7764); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal463_tree = (Object)adaptor.create(char_literal463);
            	    adaptor.addChild(root_0, char_literal463_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause7766);
            	    universal_identifier464=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier464.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, bulk_collect_into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bulk_collect_into_clause"

    public static class using_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:1: using_clause : USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* ;
    public final PL_SQLParser.using_clause_return using_clause() throws RecognitionException {
        PL_SQLParser.using_clause_return retval = new PL_SQLParser.using_clause_return();
        retval.start = input.LT(1);
        int using_clause_StartIndex = input.index();
        Object root_0 = null;

        Token USING_KEYWORD465=null;
        Token IN_KEYWORD466=null;
        Token OUT_KEYWORD467=null;
        Token IN_KEYWORD468=null;
        Token OUT_KEYWORD469=null;
        Token char_literal471=null;
        Token IN_KEYWORD472=null;
        Token OUT_KEYWORD473=null;
        Token IN_KEYWORD474=null;
        Token OUT_KEYWORD475=null;
        PL_SQLParser.expression_return expression470 = null;

        PL_SQLParser.expression_return expression476 = null;


        Object USING_KEYWORD465_tree=null;
        Object IN_KEYWORD466_tree=null;
        Object OUT_KEYWORD467_tree=null;
        Object IN_KEYWORD468_tree=null;
        Object OUT_KEYWORD469_tree=null;
        Object char_literal471_tree=null;
        Object IN_KEYWORD472_tree=null;
        Object OUT_KEYWORD473_tree=null;
        Object IN_KEYWORD474_tree=null;
        Object OUT_KEYWORD475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:14: ( USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:16: USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            {
            root_0 = (Object)adaptor.nil();

            USING_KEYWORD465=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_using_clause7775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_KEYWORD465_tree = (Object)adaptor.create(USING_KEYWORD465);
            adaptor.addChild(root_0, USING_KEYWORD465_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            int alt159=4;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==IN_KEYWORD) ) {
                int LA159_2 = input.LA(2);

                if ( (synpred275_PL_SQL()) ) {
                    alt159=1;
                }
                else if ( (synpred277_PL_SQL()) ) {
                    alt159=3;
                }
            }
            else if ( (LA159_0==OUT_KEYWORD) ) {
                alt159=2;
            }
            switch (alt159) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: IN_KEYWORD
                    {
                    IN_KEYWORD466=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD466_tree = (Object)adaptor.create(IN_KEYWORD466);
                    adaptor.addChild(root_0, IN_KEYWORD466_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:44: OUT_KEYWORD
                    {
                    OUT_KEYWORD467=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD467_tree = (Object)adaptor.create(OUT_KEYWORD467);
                    adaptor.addChild(root_0, OUT_KEYWORD467_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:58: ( IN_KEYWORD OUT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:58: ( IN_KEYWORD OUT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:59: IN_KEYWORD OUT_KEYWORD
                    {
                    IN_KEYWORD468=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD468_tree = (Object)adaptor.create(IN_KEYWORD468);
                    adaptor.addChild(root_0, IN_KEYWORD468_tree);
                    }
                    OUT_KEYWORD469=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD469_tree = (Object)adaptor.create(OUT_KEYWORD469);
                    adaptor.addChild(root_0, OUT_KEYWORD469_tree);
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_using_clause7794);
            expression470=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression470.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:16: ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:17: ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression
            	    {
            	    char_literal471=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause7812); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal471_tree = (Object)adaptor.create(char_literal471);
            	    adaptor.addChild(root_0, char_literal471_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            	    int alt160=4;
            	    int LA160_0 = input.LA(1);

            	    if ( (LA160_0==OUT_KEYWORD) ) {
            	        alt160=2;
            	    }
            	    else if ( (LA160_0==IN_KEYWORD) ) {
            	        int LA160_3 = input.LA(2);

            	        if ( (synpred278_PL_SQL()) ) {
            	            alt160=1;
            	        }
            	        else if ( (synpred280_PL_SQL()) ) {
            	            alt160=3;
            	        }
            	    }
            	    switch (alt160) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:22: IN_KEYWORD
            	            {
            	            IN_KEYWORD472=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7815); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD472_tree = (Object)adaptor.create(IN_KEYWORD472);
            	            adaptor.addChild(root_0, IN_KEYWORD472_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:35: OUT_KEYWORD
            	            {
            	            OUT_KEYWORD473=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7819); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD473_tree = (Object)adaptor.create(OUT_KEYWORD473);
            	            adaptor.addChild(root_0, OUT_KEYWORD473_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:49: ( IN_KEYWORD OUT_KEYWORD )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:49: ( IN_KEYWORD OUT_KEYWORD )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:50: IN_KEYWORD OUT_KEYWORD
            	            {
            	            IN_KEYWORD474=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause7824); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD474_tree = (Object)adaptor.create(IN_KEYWORD474);
            	            adaptor.addChild(root_0, IN_KEYWORD474_tree);
            	            }
            	            OUT_KEYWORD475=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause7826); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD475_tree = (Object)adaptor.create(OUT_KEYWORD475);
            	            adaptor.addChild(root_0, OUT_KEYWORD475_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expression_in_using_clause7831);
            	    expression476=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression476.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, using_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class exit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:1: exit_statement : EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.exit_statement_return exit_statement() throws RecognitionException {
        PL_SQLParser.exit_statement_return retval = new PL_SQLParser.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        Object root_0 = null;

        Token EXIT_KEYWORD477=null;
        Token WHEN_KEYWORD479=null;
        PL_SQLParser.identifier_return identifier478 = null;

        PL_SQLParser.expression_return expression480 = null;


        Object EXIT_KEYWORD477_tree=null;
        Object WHEN_KEYWORD479_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:16: ( EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:18: EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (Object)adaptor.nil();

            EXIT_KEYWORD477=(Token)match(input,EXIT_KEYWORD,FOLLOW_EXIT_KEYWORD_in_exit_statement7840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT_KEYWORD477_tree = (Object)adaptor.create(EXIT_KEYWORD477);
            adaptor.addChild(root_0, EXIT_KEYWORD477_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:31: ( identifier )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==IDENTIFIER||LA162_0==INTERVAL_KEYWORD||LA162_0==RESULT_KEYWORD) ) {
                int LA162_1 = input.LA(2);

                if ( (synpred282_PL_SQL()) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_exit_statement7842);
                    identifier478=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier478.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:43: ( WHEN_KEYWORD expression )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==WHEN_KEYWORD) ) {
                int LA163_2 = input.LA(2);

                if ( (synpred283_PL_SQL()) ) {
                    alt163=1;
                }
            }
            switch (alt163) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:44: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD479=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exit_statement7846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD479_tree = (Object)adaptor.create(WHEN_KEYWORD479);
                    adaptor.addChild(root_0, WHEN_KEYWORD479_tree);
                    }
                    pushFollow(FOLLOW_expression_in_exit_statement7848);
                    expression480=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression480.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:1: fetch_statement : FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) ;
    public final PL_SQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
        PL_SQLParser.fetch_statement_return retval = new PL_SQLParser.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        Object root_0 = null;

        Token FETCH_KEYWORD481=null;
        Token LIMIT_KEYWORD484=null;
        PL_SQLParser.expression_return expression482 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause483 = null;

        PL_SQLParser.expression_return expression485 = null;

        PL_SQLParser.into_clause_return into_clause486 = null;


        Object FETCH_KEYWORD481_tree=null;
        Object LIMIT_KEYWORD484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:17: ( FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:19: FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            {
            root_0 = (Object)adaptor.nil();

            FETCH_KEYWORD481=(Token)match(input,FETCH_KEYWORD,FOLLOW_FETCH_KEYWORD_in_fetch_statement7857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FETCH_KEYWORD481_tree = (Object)adaptor.create(FETCH_KEYWORD481);
            adaptor.addChild(root_0, FETCH_KEYWORD481_tree);
            }
            pushFollow(FOLLOW_expression_in_fetch_statement7859);
            expression482=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression482.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:19: ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==BULK_KEYWORD) ) {
                alt165=1;
            }
            else if ( (LA165_0==INTO_KEYWORD) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:21: bulk_collect_into_clause ( LIMIT_KEYWORD expression )?
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_fetch_statement7882);
                    bulk_collect_into_clause483=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause483.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:46: ( LIMIT_KEYWORD expression )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==LIMIT_KEYWORD) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:47: LIMIT_KEYWORD expression
                            {
                            LIMIT_KEYWORD484=(Token)match(input,LIMIT_KEYWORD,FOLLOW_LIMIT_KEYWORD_in_fetch_statement7885); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LIMIT_KEYWORD484_tree = (Object)adaptor.create(LIMIT_KEYWORD484);
                            adaptor.addChild(root_0, LIMIT_KEYWORD484_tree);
                            }
                            pushFollow(FOLLOW_expression_in_fetch_statement7887);
                            expression485=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression485.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:78: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_fetch_statement7895);
                    into_clause486=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause486.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class forall_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:1: forall_statement : FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements ;
    public final PL_SQLParser.forall_statement_return forall_statement() throws RecognitionException {
        PL_SQLParser.forall_statement_return retval = new PL_SQLParser.forall_statement_return();
        retval.start = input.LT(1);
        int forall_statement_StartIndex = input.index();
        Object root_0 = null;

        Token FORALL_KEYWORD487=null;
        Token IN_KEYWORD489=null;
        Token SAVE_KEYWORD491=null;
        Token EXCEPTIONS_KEYWORD492=null;
        PL_SQLParser.identifier_return identifier488 = null;

        PL_SQLParser.bounds_clause_return bounds_clause490 = null;

        PL_SQLParser.sql_statements_return sql_statements493 = null;


        Object FORALL_KEYWORD487_tree=null;
        Object IN_KEYWORD489_tree=null;
        Object SAVE_KEYWORD491_tree=null;
        Object EXCEPTIONS_KEYWORD492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:18: ( FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:20: FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements
            {
            root_0 = (Object)adaptor.nil();

            FORALL_KEYWORD487=(Token)match(input,FORALL_KEYWORD,FOLLOW_FORALL_KEYWORD_in_forall_statement7903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORALL_KEYWORD487_tree = (Object)adaptor.create(FORALL_KEYWORD487);
            adaptor.addChild(root_0, FORALL_KEYWORD487_tree);
            }
            pushFollow(FOLLOW_identifier_in_forall_statement7905);
            identifier488=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier488.getTree());
            IN_KEYWORD489=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_forall_statement7907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD489_tree = (Object)adaptor.create(IN_KEYWORD489);
            adaptor.addChild(root_0, IN_KEYWORD489_tree);
            }
            pushFollow(FOLLOW_bounds_clause_in_forall_statement7909);
            bounds_clause490=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bounds_clause490.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:20: ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==SAVE_KEYWORD) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:21: SAVE_KEYWORD EXCEPTIONS_KEYWORD
                    {
                    SAVE_KEYWORD491=(Token)match(input,SAVE_KEYWORD,FOLLOW_SAVE_KEYWORD_in_forall_statement7931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAVE_KEYWORD491_tree = (Object)adaptor.create(SAVE_KEYWORD491);
                    adaptor.addChild(root_0, SAVE_KEYWORD491_tree);
                    }
                    EXCEPTIONS_KEYWORD492=(Token)match(input,EXCEPTIONS_KEYWORD,FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement7933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTIONS_KEYWORD492_tree = (Object)adaptor.create(EXCEPTIONS_KEYWORD492);
                    adaptor.addChild(root_0, EXCEPTIONS_KEYWORD492_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_statements_in_forall_statement7937);
            sql_statements493=sql_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements493.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, forall_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forall_statement"

    public static class bounds_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bounds_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:1: bounds_clause : ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) );
    public final PL_SQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
        PL_SQLParser.bounds_clause_return retval = new PL_SQLParser.bounds_clause_return();
        retval.start = input.LT(1);
        int bounds_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal495=null;
        Token INDICES_KEYWORD497=null;
        Token OF_KEYWORD498=null;
        Token BETWEEN_KEYWORD500=null;
        Token AND_OPERATOR502=null;
        Token VALUES_KEYWORD504=null;
        Token OF_KEYWORD505=null;
        PL_SQLParser.expression_return expression494 = null;

        PL_SQLParser.expression_return expression496 = null;

        PL_SQLParser.universal_identifier_return universal_identifier499 = null;

        PL_SQLParser.expression_return expression501 = null;

        PL_SQLParser.expression_return expression503 = null;

        PL_SQLParser.universal_identifier_return universal_identifier506 = null;


        Object string_literal495_tree=null;
        Object INDICES_KEYWORD497_tree=null;
        Object OF_KEYWORD498_tree=null;
        Object BETWEEN_KEYWORD500_tree=null;
        Object AND_OPERATOR502_tree=null;
        Object VALUES_KEYWORD504_tree=null;
        Object OF_KEYWORD505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:15: ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) )
            int alt168=3;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NOT_OPERATOR:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case 200:
            case 204:
            case 205:
                {
                alt168=1;
                }
                break;
            case INDICES_KEYWORD:
                {
                alt168=2;
                }
                break;
            case VALUES_KEYWORD:
                {
                alt168=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:17: ( expression '..' expression )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:17: ( expression '..' expression )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:18: expression '..' expression
                    {
                    pushFollow(FOLLOW_expression_in_bounds_clause7945);
                    expression494=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression494.getTree());
                    string_literal495=(Token)match(input,219,FOLLOW_219_in_bounds_clause7947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal495_tree = (Object)adaptor.create(string_literal495);
                    adaptor.addChild(root_0, string_literal495_tree);
                    }
                    pushFollow(FOLLOW_expression_in_bounds_clause7949);
                    expression496=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression496.getTree());

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:18: INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    {
                    INDICES_KEYWORD497=(Token)match(input,INDICES_KEYWORD,FOLLOW_INDICES_KEYWORD_in_bounds_clause7971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDICES_KEYWORD497_tree = (Object)adaptor.create(INDICES_KEYWORD497);
                    adaptor.addChild(root_0, INDICES_KEYWORD497_tree);
                    }
                    OF_KEYWORD498=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause7973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD498_tree = (Object)adaptor.create(OF_KEYWORD498);
                    adaptor.addChild(root_0, OF_KEYWORD498_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause7975);
                    universal_identifier499=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier499.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:17: ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==BETWEEN_KEYWORD) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:18: BETWEEN_KEYWORD expression AND_OPERATOR expression
                            {
                            BETWEEN_KEYWORD500=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_bounds_clause7995); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BETWEEN_KEYWORD500_tree = (Object)adaptor.create(BETWEEN_KEYWORD500);
                            adaptor.addChild(root_0, BETWEEN_KEYWORD500_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause7997);
                            expression501=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                            AND_OPERATOR502=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_bounds_clause7999); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_OPERATOR502_tree = (Object)adaptor.create(AND_OPERATOR502);
                            adaptor.addChild(root_0, AND_OPERATOR502_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8001);
                            expression503=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression503.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:18: VALUES_KEYWORD OF_KEYWORD universal_identifier
                    {
                    VALUES_KEYWORD504=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_bounds_clause8026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD504_tree = (Object)adaptor.create(VALUES_KEYWORD504);
                    adaptor.addChild(root_0, VALUES_KEYWORD504_tree);
                    }
                    OF_KEYWORD505=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD505_tree = (Object)adaptor.create(OF_KEYWORD505);
                    adaptor.addChild(root_0, OF_KEYWORD505_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8030);
                    universal_identifier506=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier506.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, bounds_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"

    public static class pragma_inline_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_inline_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:1: pragma_inline_statement : PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' ;
    public final PL_SQLParser.pragma_inline_statement_return pragma_inline_statement() throws RecognitionException {
        PL_SQLParser.pragma_inline_statement_return retval = new PL_SQLParser.pragma_inline_statement_return();
        retval.start = input.LT(1);
        int pragma_inline_statement_StartIndex = input.index();
        Object root_0 = null;

        Token PRAGMA_KEYWORD507=null;
        Token INLINE_KEYWORD508=null;
        Token char_literal509=null;
        Token STRING510=null;
        Token char_literal511=null;
        Token STRING512=null;
        Token char_literal513=null;

        Object PRAGMA_KEYWORD507_tree=null;
        Object INLINE_KEYWORD508_tree=null;
        Object char_literal509_tree=null;
        Object STRING510_tree=null;
        Object char_literal511_tree=null;
        Object STRING512_tree=null;
        Object char_literal513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:25: ( PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:27: PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')'
            {
            root_0 = (Object)adaptor.nil();

            PRAGMA_KEYWORD507=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD507_tree = (Object)adaptor.create(PRAGMA_KEYWORD507);
            adaptor.addChild(root_0, PRAGMA_KEYWORD507_tree);
            }
            INLINE_KEYWORD508=(Token)match(input,INLINE_KEYWORD,FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INLINE_KEYWORD508_tree = (Object)adaptor.create(INLINE_KEYWORD508);
            adaptor.addChild(root_0, INLINE_KEYWORD508_tree);
            }
            char_literal509=(Token)match(input,200,FOLLOW_200_in_pragma_inline_statement8069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal509_tree = (Object)adaptor.create(char_literal509);
            adaptor.addChild(root_0, char_literal509_tree);
            }
            STRING510=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING510_tree = (Object)adaptor.create(STRING510);
            adaptor.addChild(root_0, STRING510_tree);
            }
            char_literal511=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_inline_statement8073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal511_tree = (Object)adaptor.create(char_literal511);
            adaptor.addChild(root_0, char_literal511_tree);
            }
            STRING512=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8075); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING512_tree = (Object)adaptor.create(STRING512);
            adaptor.addChild(root_0, STRING512_tree);
            }
            char_literal513=(Token)match(input,201,FOLLOW_201_in_pragma_inline_statement8077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal513_tree = (Object)adaptor.create(char_literal513);
            adaptor.addChild(root_0, char_literal513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, pragma_inline_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_inline_statement"

    public static class open_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:1: open_statement : OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? ;
    public final PL_SQLParser.open_statement_return open_statement() throws RecognitionException {
        PL_SQLParser.open_statement_return retval = new PL_SQLParser.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        Object root_0 = null;

        Token OPEN_KEYWORD514=null;
        Token FOR_KEYWORD517=null;
        Token STRING519=null;
        PL_SQLParser.universal_identifier_return universal_identifier515 = null;

        PL_SQLParser.open_params_return open_params516 = null;

        PL_SQLParser.select_statement_return select_statement518 = null;

        PL_SQLParser.universal_identifier_return universal_identifier520 = null;

        PL_SQLParser.using_clause_return using_clause521 = null;


        Object OPEN_KEYWORD514_tree=null;
        Object FOR_KEYWORD517_tree=null;
        Object STRING519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:16: ( OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:18: OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            {
            root_0 = (Object)adaptor.nil();

            OPEN_KEYWORD514=(Token)match(input,OPEN_KEYWORD,FOLLOW_OPEN_KEYWORD_in_open_statement8084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_KEYWORD514_tree = (Object)adaptor.create(OPEN_KEYWORD514);
            adaptor.addChild(root_0, OPEN_KEYWORD514_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_open_statement8086);
            universal_identifier515=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier515.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:52: ( open_params )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==200) ) {
                int LA169_1 = input.LA(2);

                if ( (synpred290_PL_SQL()) ) {
                    alt169=1;
                }
            }
            switch (alt169) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: open_params
                    {
                    pushFollow(FOLLOW_open_params_in_open_statement8088);
                    open_params516=open_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_params516.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==FOR_KEYWORD) ) {
                int LA172_1 = input.LA(2);

                if ( (synpred294_PL_SQL()) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
                    {
                    FOR_KEYWORD517=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_open_statement8109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD517_tree = (Object)adaptor.create(FOR_KEYWORD517);
                    adaptor.addChild(root_0, FOR_KEYWORD517_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:31: ( select_statement | STRING | universal_identifier )
                    int alt170=3;
                    switch ( input.LA(1) ) {
                    case SELECT_KEYWORD:
                        {
                        alt170=1;
                        }
                        break;
                    case STRING:
                        {
                        alt170=2;
                        }
                        break;
                    case IDENTIFIER:
                    case EXT_IDENTIFIER:
                    case INTERVAL_KEYWORD:
                    case RESULT_KEYWORD:
                        {
                        alt170=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;
                    }

                    switch (alt170) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:32: select_statement
                            {
                            pushFollow(FOLLOW_select_statement_in_open_statement8112);
                            select_statement518=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement518.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:51: STRING
                            {
                            STRING519=(Token)match(input,STRING,FOLLOW_STRING_in_open_statement8116); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STRING519_tree = (Object)adaptor.create(STRING519);
                            adaptor.addChild(root_0, STRING519_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:60: universal_identifier
                            {
                            pushFollow(FOLLOW_universal_identifier_in_open_statement8120);
                            universal_identifier520=universal_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier520.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:82: ( using_clause )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==USING_KEYWORD) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_open_statement8123);
                            using_clause521=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause521.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class open_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_params"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:1: open_params : '(' expression ( ',' expression )* ')' ;
    public final PL_SQLParser.open_params_return open_params() throws RecognitionException {
        PL_SQLParser.open_params_return retval = new PL_SQLParser.open_params_return();
        retval.start = input.LT(1);
        int open_params_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal522=null;
        Token char_literal524=null;
        Token char_literal526=null;
        PL_SQLParser.expression_return expression523 = null;

        PL_SQLParser.expression_return expression525 = null;


        Object char_literal522_tree=null;
        Object char_literal524_tree=null;
        Object char_literal526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:13: ( '(' expression ( ',' expression )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:15: '(' expression ( ',' expression )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal522=(Token)match(input,200,FOLLOW_200_in_open_params8133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal522_tree = (Object)adaptor.create(char_literal522);
            adaptor.addChild(root_0, char_literal522_tree);
            }
            pushFollow(FOLLOW_expression_in_open_params8135);
            expression523=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression523.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:30: ( ',' expression )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==COMMA) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:31: ',' expression
            	    {
            	    char_literal524=(Token)match(input,COMMA,FOLLOW_COMMA_in_open_params8138); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal524_tree = (Object)adaptor.create(char_literal524);
            	    adaptor.addChild(root_0, char_literal524_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_open_params8140);
            	    expression525=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression525.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            char_literal526=(Token)match(input,201,FOLLOW_201_in_open_params8144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal526_tree = (Object)adaptor.create(char_literal526);
            adaptor.addChild(root_0, char_literal526_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, open_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_params"

    public static class sqlcode_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcode_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:1: sqlcode_function : SQLCODE_KEYWORD ;
    public final PL_SQLParser.sqlcode_function_return sqlcode_function() throws RecognitionException {
        PL_SQLParser.sqlcode_function_return retval = new PL_SQLParser.sqlcode_function_return();
        retval.start = input.LT(1);
        int sqlcode_function_StartIndex = input.index();
        Object root_0 = null;

        Token SQLCODE_KEYWORD527=null;

        Object SQLCODE_KEYWORD527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:18: ( SQLCODE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:20: SQLCODE_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            SQLCODE_KEYWORD527=(Token)match(input,SQLCODE_KEYWORD,FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLCODE_KEYWORD527_tree = (Object)adaptor.create(SQLCODE_KEYWORD527);
            adaptor.addChild(root_0, SQLCODE_KEYWORD527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, sqlcode_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlcode_function"

    public static class sqlerrm_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerrm_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:1: sqlerrm_function : SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.sqlerrm_function_return sqlerrm_function() throws RecognitionException {
        PL_SQLParser.sqlerrm_function_return retval = new PL_SQLParser.sqlerrm_function_return();
        retval.start = input.LT(1);
        int sqlerrm_function_StartIndex = input.index();
        Object root_0 = null;

        Token SQLERRM_KEYWORD528=null;
        Token char_literal529=null;
        Token set530=null;
        Token NUMBER_UNSIGNED531=null;
        Token char_literal532=null;

        Object SQLERRM_KEYWORD528_tree=null;
        Object char_literal529_tree=null;
        Object set530_tree=null;
        Object NUMBER_UNSIGNED531_tree=null;
        Object char_literal532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:18: ( SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:20: SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (Object)adaptor.nil();

            SQLERRM_KEYWORD528=(Token)match(input,SQLERRM_KEYWORD,FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLERRM_KEYWORD528_tree = (Object)adaptor.create(SQLERRM_KEYWORD528);
            adaptor.addChild(root_0, SQLERRM_KEYWORD528_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:36: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==200) ) {
                int LA175_2 = input.LA(2);

                if ( (synpred298_PL_SQL()) ) {
                    alt175=1;
                }
            }
            switch (alt175) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal529=(Token)match(input,200,FOLLOW_200_in_sqlerrm_function8161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal529_tree = (Object)adaptor.create(char_literal529);
                    adaptor.addChild(root_0, char_literal529_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:41: ( '+' | '-' )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( ((LA174_0>=204 && LA174_0<=205)) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set530=(Token)input.LT(1);
                            if ( (input.LA(1)>=204 && input.LA(1)<=205) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set530));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER_UNSIGNED531=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED531_tree = (Object)adaptor.create(NUMBER_UNSIGNED531);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED531_tree);
                    }
                    char_literal532=(Token)match(input,201,FOLLOW_201_in_sqlerrm_function8172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal532_tree = (Object)adaptor.create(char_literal532);
                    adaptor.addChild(root_0, char_literal532_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, sqlerrm_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlerrm_function"

    public static class anonymous_block_declare_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block_declare_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:1: anonymous_block_declare_section : DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* ;
    public final PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section() throws RecognitionException {
        PL_SQLParser.anonymous_block_declare_section_return retval = new PL_SQLParser.anonymous_block_declare_section_return();
        retval.start = input.LT(1);
        int anonymous_block_declare_section_StartIndex = input.index();
        Object root_0 = null;

        Token DECLARE_KEYWORD533=null;
        PL_SQLParser.variable_declaration_return variable_declaration534 = null;

        PL_SQLParser.function_declaration_return function_declaration535 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration536 = null;


        Object DECLARE_KEYWORD533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:33: ( DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:625:35: DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )*
            {
            root_0 = (Object)adaptor.nil();

            DECLARE_KEYWORD533=(Token)match(input,DECLARE_KEYWORD,FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE_KEYWORD533_tree = (Object)adaptor.create(DECLARE_KEYWORD533);
            adaptor.addChild(root_0, DECLARE_KEYWORD533_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:35: ( variable_declaration )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==IDENTIFIER||LA176_0==TYPE_KEYWORD||LA176_0==INTERVAL_KEYWORD||LA176_0==SUBTYPE_KEYWORD||LA176_0==PRAGMA_KEYWORD||LA176_0==CURSOR_KEYWORD||LA176_0==RESULT_KEYWORD) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:36: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_anonymous_block_declare_section8219);
            	    variable_declaration534=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration534.getTree());

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:35: ( function_declaration | procedure_declaration )*
            loop177:
            do {
                int alt177=3;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==FUNCTION_KEYWORD) ) {
                    alt177=1;
                }
                else if ( (LA177_0==PROCEDURE_KEYWORD) ) {
                    alt177=2;
                }


                switch (alt177) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:36: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_anonymous_block_declare_section8259);
            	    function_declaration535=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration535.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:59: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_anonymous_block_declare_section8263);
            	    procedure_declaration536=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration536.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, anonymous_block_declare_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block_declare_section"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:1: variable_declaration : ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR ;
    public final PL_SQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
        PL_SQLParser.variable_declaration_return retval = new PL_SQLParser.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token CONSTANT_KEYWORD541=null;
        Token EXCEPTION_KEYWORD547=null;
        Token PRAGMA_KEYWORD548=null;
        Token AUTONOMOUS_TRANSACTION_KEYWORD549=null;
        Token SERIALLY_REUSABLE_KEYWORD550=null;
        Token EXCEPTION_INIT_KEYWORD551=null;
        Token char_literal552=null;
        Token char_literal554=null;
        Token char_literal556=null;
        Token RESTRICT_REFERENCES_KEYWORD557=null;
        Token char_literal558=null;
        Token char_literal560=null;
        Token char_literal562=null;
        Token SEPARATOR564=null;
        PL_SQLParser.identifier_return identifier537 = null;

        PL_SQLParser.data_type_return data_type538 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part539 = null;

        PL_SQLParser.identifier_return identifier540 = null;

        PL_SQLParser.data_type_return data_type542 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part543 = null;

        PL_SQLParser.subtype_datatype_return subtype_datatype544 = null;

        PL_SQLParser.record_collection_datatype_return record_collection_datatype545 = null;

        PL_SQLParser.identifier_return identifier546 = null;

        PL_SQLParser.expression_return expression553 = null;

        PL_SQLParser.expression_return expression555 = null;

        PL_SQLParser.expression_return expression559 = null;

        PL_SQLParser.expression_return expression561 = null;

        PL_SQLParser.cursor_datatype_return cursor_datatype563 = null;


        Object CONSTANT_KEYWORD541_tree=null;
        Object EXCEPTION_KEYWORD547_tree=null;
        Object PRAGMA_KEYWORD548_tree=null;
        Object AUTONOMOUS_TRANSACTION_KEYWORD549_tree=null;
        Object SERIALLY_REUSABLE_KEYWORD550_tree=null;
        Object EXCEPTION_INIT_KEYWORD551_tree=null;
        Object char_literal552_tree=null;
        Object char_literal554_tree=null;
        Object char_literal556_tree=null;
        Object RESTRICT_REFERENCES_KEYWORD557_tree=null;
        Object char_literal558_tree=null;
        Object char_literal560_tree=null;
        Object char_literal562_tree=null;
        Object SEPARATOR564_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:22: ( ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype )
            int alt181=7;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                int LA181_1 = input.LA(2);

                if ( (synpred303_PL_SQL()) ) {
                    alt181=1;
                }
                else if ( (synpred304_PL_SQL()) ) {
                    alt181=2;
                }
                else if ( (synpred307_PL_SQL()) ) {
                    alt181=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }
                }
                break;
            case SUBTYPE_KEYWORD:
                {
                alt181=3;
                }
                break;
            case TYPE_KEYWORD:
                {
                alt181=4;
                }
                break;
            case CURSOR_KEYWORD:
                {
                alt181=7;
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt181=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:25: ( identifier data_type ( variable_declaration_part )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:25: ( identifier data_type ( variable_declaration_part )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:26: identifier data_type ( variable_declaration_part )?
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8274);
                    identifier537=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier537.getTree());
                    pushFollow(FOLLOW_data_type_in_variable_declaration8276);
                    data_type538=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type538.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:24: ( variable_declaration_part )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==NOT_OPEARTOR||LA178_0==DEFAULT_KEYWORD||LA178_0==220) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                            {
                            pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8302);
                            variable_declaration_part539=variable_declaration_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part539.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8320);
                    identifier540=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier540.getTree());
                    CONSTANT_KEYWORD541=(Token)match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT_KEYWORD541_tree = (Object)adaptor.create(CONSTANT_KEYWORD541);
                    adaptor.addChild(root_0, CONSTANT_KEYWORD541_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_variable_declaration8324);
                    data_type542=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type542.getTree());
                    pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8350);
                    variable_declaration_part543=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part543.getTree());

                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:11: subtype_datatype
                    {
                    pushFollow(FOLLOW_subtype_datatype_in_variable_declaration8363);
                    subtype_datatype544=subtype_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_datatype544.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:11: record_collection_datatype
                    {
                    pushFollow(FOLLOW_record_collection_datatype_in_variable_declaration8375);
                    record_collection_datatype545=record_collection_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_collection_datatype545.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:11: ( identifier EXCEPTION_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:11: ( identifier EXCEPTION_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:12: identifier EXCEPTION_KEYWORD
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8388);
                    identifier546=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier546.getTree());
                    EXCEPTION_KEYWORD547=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTION_KEYWORD547_tree = (Object)adaptor.create(EXCEPTION_KEYWORD547);
                    adaptor.addChild(root_0, EXCEPTION_KEYWORD547_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:10: PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    {
                    PRAGMA_KEYWORD548=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRAGMA_KEYWORD548_tree = (Object)adaptor.create(PRAGMA_KEYWORD548);
                    adaptor.addChild(root_0, PRAGMA_KEYWORD548_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:25: ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    int alt180=4;
                    switch ( input.LA(1) ) {
                    case AUTONOMOUS_TRANSACTION_KEYWORD:
                        {
                        alt180=1;
                        }
                        break;
                    case SERIALLY_REUSABLE_KEYWORD:
                        {
                        alt180=2;
                        }
                        break;
                    case EXCEPTION_INIT_KEYWORD:
                        {
                        alt180=3;
                        }
                        break;
                    case RESTRICT_REFERENCES_KEYWORD:
                        {
                        alt180=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 180, 0, input);

                        throw nvae;
                    }

                    switch (alt180) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:26: AUTONOMOUS_TRANSACTION_KEYWORD
                            {
                            AUTONOMOUS_TRANSACTION_KEYWORD549=(Token)match(input,AUTONOMOUS_TRANSACTION_KEYWORD,FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8416); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AUTONOMOUS_TRANSACTION_KEYWORD549_tree = (Object)adaptor.create(AUTONOMOUS_TRANSACTION_KEYWORD549);
                            adaptor.addChild(root_0, AUTONOMOUS_TRANSACTION_KEYWORD549_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:59: SERIALLY_REUSABLE_KEYWORD
                            {
                            SERIALLY_REUSABLE_KEYWORD550=(Token)match(input,SERIALLY_REUSABLE_KEYWORD,FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8420); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SERIALLY_REUSABLE_KEYWORD550_tree = (Object)adaptor.create(SERIALLY_REUSABLE_KEYWORD550);
                            adaptor.addChild(root_0, SERIALLY_REUSABLE_KEYWORD550_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:8: EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')'
                            {
                            EXCEPTION_INIT_KEYWORD551=(Token)match(input,EXCEPTION_INIT_KEYWORD,FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8431); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXCEPTION_INIT_KEYWORD551_tree = (Object)adaptor.create(EXCEPTION_INIT_KEYWORD551);
                            adaptor.addChild(root_0, EXCEPTION_INIT_KEYWORD551_tree);
                            }
                            char_literal552=(Token)match(input,200,FOLLOW_200_in_variable_declaration8433); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal552_tree = (Object)adaptor.create(char_literal552);
                            adaptor.addChild(root_0, char_literal552_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8435);
                            expression553=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression553.getTree());
                            char_literal554=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8437); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal554_tree = (Object)adaptor.create(char_literal554);
                            adaptor.addChild(root_0, char_literal554_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8439);
                            expression555=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression555.getTree());
                            char_literal556=(Token)match(input,201,FOLLOW_201_in_variable_declaration8441); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal556_tree = (Object)adaptor.create(char_literal556);
                            adaptor.addChild(root_0, char_literal556_tree);
                            }

                            }


                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:8: RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
                            {
                            RESTRICT_REFERENCES_KEYWORD557=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8453); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RESTRICT_REFERENCES_KEYWORD557_tree = (Object)adaptor.create(RESTRICT_REFERENCES_KEYWORD557);
                            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD557_tree);
                            }
                            char_literal558=(Token)match(input,200,FOLLOW_200_in_variable_declaration8455); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal558_tree = (Object)adaptor.create(char_literal558);
                            adaptor.addChild(root_0, char_literal558_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8457);
                            expression559=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression559.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:51: ( ',' expression )+
                            int cnt179=0;
                            loop179:
                            do {
                                int alt179=2;
                                int LA179_0 = input.LA(1);

                                if ( (LA179_0==COMMA) ) {
                                    alt179=1;
                                }


                                switch (alt179) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:52: ',' expression
                            	    {
                            	    char_literal560=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8460); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal560_tree = (Object)adaptor.create(char_literal560);
                            	    adaptor.addChild(root_0, char_literal560_tree);
                            	    }
                            	    pushFollow(FOLLOW_expression_in_variable_declaration8462);
                            	    expression561=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression561.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt179 >= 1 ) break loop179;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(179, input);
                                        throw eee;
                                }
                                cnt179++;
                            } while (true);

                            char_literal562=(Token)match(input,201,FOLLOW_201_in_variable_declaration8466); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal562_tree = (Object)adaptor.create(char_literal562);
                            adaptor.addChild(root_0, char_literal562_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:11: cursor_datatype
                    {
                    pushFollow(FOLLOW_cursor_datatype_in_variable_declaration8483);
                    cursor_datatype563=cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_datatype563.getTree());

                    }
                    break;

            }

            SEPARATOR564=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_variable_declaration8494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR564_tree = (Object)adaptor.create(SEPARATOR564);
            adaptor.addChild(root_0, SEPARATOR564_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class variable_declaration_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:1: variable_declaration_part : ( NOT_OPEARTOR NULL_KEYWORD )? variable_def_part expression ;
    public final PL_SQLParser.variable_declaration_part_return variable_declaration_part() throws RecognitionException {
        PL_SQLParser.variable_declaration_part_return retval = new PL_SQLParser.variable_declaration_part_return();
        retval.start = input.LT(1);
        int variable_declaration_part_StartIndex = input.index();
        Object root_0 = null;

        Token NOT_OPEARTOR565=null;
        Token NULL_KEYWORD566=null;
        PL_SQLParser.variable_def_part_return variable_def_part567 = null;

        PL_SQLParser.expression_return expression568 = null;


        Object NOT_OPEARTOR565_tree=null;
        Object NULL_KEYWORD566_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:27: ( ( NOT_OPEARTOR NULL_KEYWORD )? variable_def_part expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:29: ( NOT_OPEARTOR NULL_KEYWORD )? variable_def_part expression
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:29: ( NOT_OPEARTOR NULL_KEYWORD )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NOT_OPEARTOR) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:30: NOT_OPEARTOR NULL_KEYWORD
                    {
                    NOT_OPEARTOR565=(Token)match(input,NOT_OPEARTOR,FOLLOW_NOT_OPEARTOR_in_variable_declaration_part8502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPEARTOR565_tree = (Object)adaptor.create(NOT_OPEARTOR565);
                    adaptor.addChild(root_0, NOT_OPEARTOR565_tree);
                    }
                    NULL_KEYWORD566=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_variable_declaration_part8504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD566_tree = (Object)adaptor.create(NULL_KEYWORD566);
                    adaptor.addChild(root_0, NULL_KEYWORD566_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_variable_def_part_in_variable_declaration_part8508);
            variable_def_part567=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part567.getTree());
            pushFollow(FOLLOW_expression_in_variable_declaration_part8510);
            expression568=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, variable_declaration_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_part"

    public static class variable_def_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_def_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:1: variable_def_part : ( ':=' | DEFAULT_KEYWORD );
    public final PL_SQLParser.variable_def_part_return variable_def_part() throws RecognitionException {
        PL_SQLParser.variable_def_part_return retval = new PL_SQLParser.variable_def_part_return();
        retval.start = input.LT(1);
        int variable_def_part_StartIndex = input.index();
        Object root_0 = null;

        Token set569=null;

        Object set569_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:19: ( ':=' | DEFAULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set569=(Token)input.LT(1);
            if ( input.LA(1)==DEFAULT_KEYWORD||input.LA(1)==220 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set569));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, variable_def_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_def_part"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:1: data_type : ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );
    public final PL_SQLParser.data_type_return data_type() throws RecognitionException {
        PL_SQLParser.data_type_return retval = new PL_SQLParser.data_type_return();
        retval.start = input.LT(1);
        int data_type_StartIndex = input.index();
        Object root_0 = null;

        Token SOME_TYPES570=null;
        Token SCALE_TYPES571=null;
        Token SIZE_TYPES572=null;
        Token RAW_TYPE574=null;
        Token REF_KEYWORD578=null;
        PL_SQLParser.char_types_return char_types573 = null;

        PL_SQLParser.timestamp_type_return timestamp_type575 = null;

        PL_SQLParser.interval_year_type_return interval_year_type576 = null;

        PL_SQLParser.interval_day_type_return interval_day_type577 = null;

        PL_SQLParser.universal_identifier_return universal_identifier579 = null;

        PL_SQLParser.special_datatype_return special_datatype580 = null;


        Object SOME_TYPES570_tree=null;
        Object SCALE_TYPES571_tree=null;
        Object SIZE_TYPES572_tree=null;
        Object RAW_TYPE574_tree=null;
        Object REF_KEYWORD578_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:11: ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype )
            int alt184=10;
            alt184 = dfa184.predict(input);
            switch (alt184) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:13: SOME_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SOME_TYPES570=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_data_type8528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES570_tree = (Object)adaptor.create(SOME_TYPES570);
                    adaptor.addChild(root_0, SOME_TYPES570_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:26: SCALE_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SCALE_TYPES571=(Token)match(input,SCALE_TYPES,FOLLOW_SCALE_TYPES_in_data_type8532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SCALE_TYPES571_tree = (Object)adaptor.create(SCALE_TYPES571);
                    adaptor.addChild(root_0, SCALE_TYPES571_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:40: SIZE_TYPES
                    {
                    root_0 = (Object)adaptor.nil();

                    SIZE_TYPES572=(Token)match(input,SIZE_TYPES,FOLLOW_SIZE_TYPES_in_data_type8536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SIZE_TYPES572_tree = (Object)adaptor.create(SIZE_TYPES572);
                    adaptor.addChild(root_0, SIZE_TYPES572_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:53: char_types
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_types_in_data_type8540);
                    char_types573=char_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_types573.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:66: RAW_TYPE
                    {
                    root_0 = (Object)adaptor.nil();

                    RAW_TYPE574=(Token)match(input,RAW_TYPE,FOLLOW_RAW_TYPE_in_data_type8544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RAW_TYPE574_tree = (Object)adaptor.create(RAW_TYPE574);
                    adaptor.addChild(root_0, RAW_TYPE574_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:13: timestamp_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timestamp_type_in_data_type8560);
                    timestamp_type575=timestamp_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_type575.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:30: interval_year_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interval_year_type_in_data_type8564);
                    interval_year_type576=interval_year_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_year_type576.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:51: interval_day_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interval_day_type_in_data_type8568);
                    interval_day_type577=interval_day_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_day_type577.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:13: ( ( REF_KEYWORD )? universal_identifier )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:13: ( ( REF_KEYWORD )? universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:14: ( REF_KEYWORD )? universal_identifier
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:14: ( REF_KEYWORD )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==REF_KEYWORD) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                            {
                            REF_KEYWORD578=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_data_type8586); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            REF_KEYWORD578_tree = (Object)adaptor.create(REF_KEYWORD578);
                            adaptor.addChild(root_0, REF_KEYWORD578_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_universal_identifier_in_data_type8589);
                    universal_identifier579=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier579.getTree());

                    }


                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:50: special_datatype
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_special_datatype_in_data_type8593);
                    special_datatype580=special_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, special_datatype580.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, data_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class char_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:1: char_types : ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? ;
    public final PL_SQLParser.char_types_return char_types() throws RecognitionException {
        PL_SQLParser.char_types_return retval = new PL_SQLParser.char_types_return();
        retval.start = input.LT(1);
        int char_types_StartIndex = input.index();
        Object root_0 = null;

        Token set581=null;
        Token char_literal582=null;
        Token char_literal583=null;
        Token NUMBER_UNSIGNED584=null;
        Token set585=null;
        Token char_literal586=null;

        Object set581_tree=null;
        Object char_literal582_tree=null;
        Object char_literal583_tree=null;
        Object NUMBER_UNSIGNED584_tree=null;
        Object set585_tree=null;
        Object char_literal586_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:12: ( ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:14: ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            {
            root_0 = (Object)adaptor.nil();

            set581=(Token)input.LT(1);
            if ( (input.LA(1)>=CHAR_TYPES && input.LA(1)<=CHAR_TYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set581));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:39: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==200) ) {
                int LA187_2 = input.LA(2);

                if ( (synpred329_PL_SQL()) ) {
                    alt187=1;
                }
            }
            switch (alt187) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
                    {
                    char_literal582=(Token)match(input,200,FOLLOW_200_in_char_types8609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal582_tree = (Object)adaptor.create(char_literal582);
                    adaptor.addChild(root_0, char_literal582_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:44: ( '+' )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==204) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal583=(Token)match(input,204,FOLLOW_204_in_char_types8611); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal583_tree = (Object)adaptor.create(char_literal583);
                            adaptor.addChild(root_0, char_literal583_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED584=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_char_types8614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED584_tree = (Object)adaptor.create(NUMBER_UNSIGNED584);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED584_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:65: ( CHAR_TYPE | BYTE_TYPE )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( ((LA186_0>=CHAR_TYPE && LA186_0<=BYTE_TYPE)) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set585=(Token)input.LT(1);
                            if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set585));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    char_literal586=(Token)match(input,201,FOLLOW_201_in_char_types8625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal586_tree = (Object)adaptor.create(char_literal586);
                    adaptor.addChild(root_0, char_literal586_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, char_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_types"

    public static class timestamp_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:1: timestamp_type : ( TIMESTAMP_TYPE | ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD ) );
    public final PL_SQLParser.timestamp_type_return timestamp_type() throws RecognitionException {
        PL_SQLParser.timestamp_type_return retval = new PL_SQLParser.timestamp_type_return();
        retval.start = input.LT(1);
        int timestamp_type_StartIndex = input.index();
        Object root_0 = null;

        Token TIMESTAMP_TYPE587=null;
        Token TIMESTAMP_TYPE588=null;
        Token WITH_KEYWORD589=null;
        Token LOCAL_KEYWORD590=null;
        Token TIME_KEYWORD591=null;
        Token ZONE_KEYWORD592=null;

        Object TIMESTAMP_TYPE587_tree=null;
        Object TIMESTAMP_TYPE588_tree=null;
        Object WITH_KEYWORD589_tree=null;
        Object LOCAL_KEYWORD590_tree=null;
        Object TIME_KEYWORD591_tree=null;
        Object ZONE_KEYWORD592_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:16: ( TIMESTAMP_TYPE | ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD ) )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==TIMESTAMP_TYPE) ) {
                int LA189_1 = input.LA(2);

                if ( (synpred330_PL_SQL()) ) {
                    alt189=1;
                }
                else if ( (true) ) {
                    alt189=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:18: TIMESTAMP_TYPE
                    {
                    root_0 = (Object)adaptor.nil();

                    TIMESTAMP_TYPE587=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMESTAMP_TYPE587_tree = (Object)adaptor.create(TIMESTAMP_TYPE587);
                    adaptor.addChild(root_0, TIMESTAMP_TYPE587_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:5: ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:5: ( TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:7: TIMESTAMP_TYPE WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD
                    {
                    TIMESTAMP_TYPE588=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMESTAMP_TYPE588_tree = (Object)adaptor.create(TIMESTAMP_TYPE588);
                    adaptor.addChild(root_0, TIMESTAMP_TYPE588_tree);
                    }
                    WITH_KEYWORD589=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_timestamp_type8647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD589_tree = (Object)adaptor.create(WITH_KEYWORD589);
                    adaptor.addChild(root_0, WITH_KEYWORD589_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:35: ( LOCAL_KEYWORD )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==LOCAL_KEYWORD) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: LOCAL_KEYWORD
                            {
                            LOCAL_KEYWORD590=(Token)match(input,LOCAL_KEYWORD,FOLLOW_LOCAL_KEYWORD_in_timestamp_type8649); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LOCAL_KEYWORD590_tree = (Object)adaptor.create(LOCAL_KEYWORD590);
                            adaptor.addChild(root_0, LOCAL_KEYWORD590_tree);
                            }

                            }
                            break;

                    }

                    TIME_KEYWORD591=(Token)match(input,TIME_KEYWORD,FOLLOW_TIME_KEYWORD_in_timestamp_type8652); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_KEYWORD591_tree = (Object)adaptor.create(TIME_KEYWORD591);
                    adaptor.addChild(root_0, TIME_KEYWORD591_tree);
                    }
                    ZONE_KEYWORD592=(Token)match(input,ZONE_KEYWORD,FOLLOW_ZONE_KEYWORD_in_timestamp_type8654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ZONE_KEYWORD592_tree = (Object)adaptor.create(ZONE_KEYWORD592);
                    adaptor.addChild(root_0, ZONE_KEYWORD592_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, timestamp_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_type"

    public static class interval_year_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:1: interval_year_type : INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD ;
    public final PL_SQLParser.interval_year_type_return interval_year_type() throws RecognitionException {
        PL_SQLParser.interval_year_type_return retval = new PL_SQLParser.interval_year_type_return();
        retval.start = input.LT(1);
        int interval_year_type_StartIndex = input.index();
        Object root_0 = null;

        Token INTERVAL_KEYWORD593=null;
        Token YEAR_TYPE594=null;
        Token TO_KEYWORD595=null;
        Token MONTH_KEYWORD596=null;

        Object INTERVAL_KEYWORD593_tree=null;
        Object YEAR_TYPE594_tree=null;
        Object TO_KEYWORD595_tree=null;
        Object MONTH_KEYWORD596_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:20: ( INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:22: INTERVAL_KEYWORD YEAR_TYPE TO_KEYWORD MONTH_KEYWORD
            {
            root_0 = (Object)adaptor.nil();

            INTERVAL_KEYWORD593=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_year_type8662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD593_tree = (Object)adaptor.create(INTERVAL_KEYWORD593);
            adaptor.addChild(root_0, INTERVAL_KEYWORD593_tree);
            }
            YEAR_TYPE594=(Token)match(input,YEAR_TYPE,FOLLOW_YEAR_TYPE_in_interval_year_type8664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YEAR_TYPE594_tree = (Object)adaptor.create(YEAR_TYPE594);
            adaptor.addChild(root_0, YEAR_TYPE594_tree);
            }
            TO_KEYWORD595=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_year_type8666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD595_tree = (Object)adaptor.create(TO_KEYWORD595);
            adaptor.addChild(root_0, TO_KEYWORD595_tree);
            }
            MONTH_KEYWORD596=(Token)match(input,MONTH_KEYWORD,FOLLOW_MONTH_KEYWORD_in_interval_year_type8668); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MONTH_KEYWORD596_tree = (Object)adaptor.create(MONTH_KEYWORD596);
            adaptor.addChild(root_0, MONTH_KEYWORD596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, interval_year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_year_type"

    public static class interval_day_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:1: interval_day_type : INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE ;
    public final PL_SQLParser.interval_day_type_return interval_day_type() throws RecognitionException {
        PL_SQLParser.interval_day_type_return retval = new PL_SQLParser.interval_day_type_return();
        retval.start = input.LT(1);
        int interval_day_type_StartIndex = input.index();
        Object root_0 = null;

        Token INTERVAL_KEYWORD597=null;
        Token DAY_TYPE598=null;
        Token TO_KEYWORD599=null;
        Token SECOND_TYPE600=null;

        Object INTERVAL_KEYWORD597_tree=null;
        Object DAY_TYPE598_tree=null;
        Object TO_KEYWORD599_tree=null;
        Object SECOND_TYPE600_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:19: ( INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:21: INTERVAL_KEYWORD DAY_TYPE TO_KEYWORD SECOND_TYPE
            {
            root_0 = (Object)adaptor.nil();

            INTERVAL_KEYWORD597=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_day_type8675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD597_tree = (Object)adaptor.create(INTERVAL_KEYWORD597);
            adaptor.addChild(root_0, INTERVAL_KEYWORD597_tree);
            }
            DAY_TYPE598=(Token)match(input,DAY_TYPE,FOLLOW_DAY_TYPE_in_interval_day_type8677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DAY_TYPE598_tree = (Object)adaptor.create(DAY_TYPE598);
            adaptor.addChild(root_0, DAY_TYPE598_tree);
            }
            TO_KEYWORD599=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_day_type8679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD599_tree = (Object)adaptor.create(TO_KEYWORD599);
            adaptor.addChild(root_0, TO_KEYWORD599_tree);
            }
            SECOND_TYPE600=(Token)match(input,SECOND_TYPE,FOLLOW_SECOND_TYPE_in_interval_day_type8681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SECOND_TYPE600_tree = (Object)adaptor.create(SECOND_TYPE600);
            adaptor.addChild(root_0, SECOND_TYPE600_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, interval_day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_day_type"

    public static class subtype_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:1: subtype_datatype : SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? ;
    public final PL_SQLParser.subtype_datatype_return subtype_datatype() throws RecognitionException {
        PL_SQLParser.subtype_datatype_return retval = new PL_SQLParser.subtype_datatype_return();
        retval.start = input.LT(1);
        int subtype_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token SUBTYPE_KEYWORD601=null;
        Token IS_KEYWORD603=null;
        Token NOT_OPEARTOR605=null;
        Token NULL_KEYWORD606=null;
        PL_SQLParser.identifier_return identifier602 = null;

        PL_SQLParser.data_type_return data_type604 = null;


        Object SUBTYPE_KEYWORD601_tree=null;
        Object IS_KEYWORD603_tree=null;
        Object NOT_OPEARTOR605_tree=null;
        Object NULL_KEYWORD606_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:18: ( SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:20: SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            SUBTYPE_KEYWORD601=(Token)match(input,SUBTYPE_KEYWORD,FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype8688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBTYPE_KEYWORD601_tree = (Object)adaptor.create(SUBTYPE_KEYWORD601);
            adaptor.addChild(root_0, SUBTYPE_KEYWORD601_tree);
            }
            pushFollow(FOLLOW_identifier_in_subtype_datatype8690);
            identifier602=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier602.getTree());
            IS_KEYWORD603=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_subtype_datatype8692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD603_tree = (Object)adaptor.create(IS_KEYWORD603);
            adaptor.addChild(root_0, IS_KEYWORD603_tree);
            }
            pushFollow(FOLLOW_data_type_in_subtype_datatype8694);
            data_type604=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type604.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:68: ( NOT_OPEARTOR NULL_KEYWORD )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==NOT_OPEARTOR) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:69: NOT_OPEARTOR NULL_KEYWORD
                    {
                    NOT_OPEARTOR605=(Token)match(input,NOT_OPEARTOR,FOLLOW_NOT_OPEARTOR_in_subtype_datatype8697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPEARTOR605_tree = (Object)adaptor.create(NOT_OPEARTOR605);
                    adaptor.addChild(root_0, NOT_OPEARTOR605_tree);
                    }
                    NULL_KEYWORD606=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_subtype_datatype8699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD606_tree = (Object)adaptor.create(NULL_KEYWORD606);
                    adaptor.addChild(root_0, NULL_KEYWORD606_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, subtype_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_datatype"

    public static class record_collection_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_collection_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:1: record_collection_datatype : TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) ;
    public final PL_SQLParser.record_collection_datatype_return record_collection_datatype() throws RecognitionException {
        PL_SQLParser.record_collection_datatype_return retval = new PL_SQLParser.record_collection_datatype_return();
        retval.start = input.LT(1);
        int record_collection_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token TYPE_KEYWORD607=null;
        Token IS_KEYWORD609=null;
        PL_SQLParser.identifier_return identifier608 = null;

        PL_SQLParser.record_datatype_return record_datatype610 = null;

        PL_SQLParser.collection_table_datatype_return collection_table_datatype611 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype612 = null;

        PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype613 = null;


        Object TYPE_KEYWORD607_tree=null;
        Object IS_KEYWORD609_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:28: ( TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:30: TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            {
            root_0 = (Object)adaptor.nil();

            TYPE_KEYWORD607=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_record_collection_datatype8709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD607_tree = (Object)adaptor.create(TYPE_KEYWORD607);
            adaptor.addChild(root_0, TYPE_KEYWORD607_tree);
            }
            pushFollow(FOLLOW_identifier_in_record_collection_datatype8711);
            identifier608=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier608.getTree());
            IS_KEYWORD609=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_record_collection_datatype8713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD609_tree = (Object)adaptor.create(IS_KEYWORD609);
            adaptor.addChild(root_0, IS_KEYWORD609_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:29: ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            int alt191=4;
            switch ( input.LA(1) ) {
            case RECORD_KEYWORD:
                {
                alt191=1;
                }
                break;
            case TABLE_KEYWORD:
                {
                alt191=2;
                }
                break;
            case VARRAY_KEYWORD:
            case VARYING_KEYWORD:
                {
                alt191=3;
                }
                break;
            case REF_KEYWORD:
                {
                alt191=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:30: record_datatype
                    {
                    pushFollow(FOLLOW_record_datatype_in_record_collection_datatype8745);
                    record_datatype610=record_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_datatype610.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:48: collection_table_datatype
                    {
                    pushFollow(FOLLOW_collection_table_datatype_in_record_collection_datatype8749);
                    collection_table_datatype611=collection_table_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_table_datatype611.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:76: collection_varray_datatype
                    {
                    pushFollow(FOLLOW_collection_varray_datatype_in_record_collection_datatype8753);
                    collection_varray_datatype612=collection_varray_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype612.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:29: ref_cursor_datatype
                    {
                    pushFollow(FOLLOW_ref_cursor_datatype_in_record_collection_datatype8785);
                    ref_cursor_datatype613=ref_cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_cursor_datatype613.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, record_collection_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_collection_datatype"

    public static class record_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:1: record_datatype : RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' ;
    public final PL_SQLParser.record_datatype_return record_datatype() throws RecognitionException {
        PL_SQLParser.record_datatype_return retval = new PL_SQLParser.record_datatype_return();
        retval.start = input.LT(1);
        int record_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token RECORD_KEYWORD614=null;
        Token char_literal615=null;
        Token char_literal617=null;
        Token char_literal619=null;
        PL_SQLParser.record_field_declaration_return record_field_declaration616 = null;

        PL_SQLParser.record_field_declaration_return record_field_declaration618 = null;


        Object RECORD_KEYWORD614_tree=null;
        Object char_literal615_tree=null;
        Object char_literal617_tree=null;
        Object char_literal619_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:17: ( RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:19: RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')'
            {
            root_0 = (Object)adaptor.nil();

            RECORD_KEYWORD614=(Token)match(input,RECORD_KEYWORD,FOLLOW_RECORD_KEYWORD_in_record_datatype8793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECORD_KEYWORD614_tree = (Object)adaptor.create(RECORD_KEYWORD614);
            adaptor.addChild(root_0, RECORD_KEYWORD614_tree);
            }
            char_literal615=(Token)match(input,200,FOLLOW_200_in_record_datatype8795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal615_tree = (Object)adaptor.create(char_literal615);
            adaptor.addChild(root_0, char_literal615_tree);
            }
            pushFollow(FOLLOW_record_field_declaration_in_record_datatype8797);
            record_field_declaration616=record_field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration616.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:63: ( ',' record_field_declaration )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:64: ',' record_field_declaration
            	    {
            	    char_literal617=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_datatype8800); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal617_tree = (Object)adaptor.create(char_literal617);
            	    adaptor.addChild(root_0, char_literal617_tree);
            	    }
            	    pushFollow(FOLLOW_record_field_declaration_in_record_datatype8802);
            	    record_field_declaration618=record_field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration618.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);

            char_literal619=(Token)match(input,201,FOLLOW_201_in_record_datatype8806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal619_tree = (Object)adaptor.create(char_literal619);
            adaptor.addChild(root_0, char_literal619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, record_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_datatype"

    public static class record_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_field_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:1: record_field_declaration : identifier data_type ( variable_declaration_part )? ;
    public final PL_SQLParser.record_field_declaration_return record_field_declaration() throws RecognitionException {
        PL_SQLParser.record_field_declaration_return retval = new PL_SQLParser.record_field_declaration_return();
        retval.start = input.LT(1);
        int record_field_declaration_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.identifier_return identifier620 = null;

        PL_SQLParser.data_type_return data_type621 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part622 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:26: ( identifier data_type ( variable_declaration_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:28: identifier data_type ( variable_declaration_part )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_field_declaration8814);
            identifier620=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier620.getTree());
            pushFollow(FOLLOW_data_type_in_record_field_declaration8816);
            data_type621=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type621.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:49: ( variable_declaration_part )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==NOT_OPEARTOR||LA193_0==DEFAULT_KEYWORD||LA193_0==220) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                    {
                    pushFollow(FOLLOW_variable_declaration_part_in_record_field_declaration8818);
                    variable_declaration_part622=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part622.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, record_field_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_field_declaration"

    public static class collection_table_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_table_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:1: collection_table_datatype : TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? ;
    public final PL_SQLParser.collection_table_datatype_return collection_table_datatype() throws RecognitionException {
        PL_SQLParser.collection_table_datatype_return retval = new PL_SQLParser.collection_table_datatype_return();
        retval.start = input.LT(1);
        int collection_table_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token TABLE_KEYWORD623=null;
        Token OF_KEYWORD624=null;
        Token NOT_OPEARTOR626=null;
        Token NULL_KEYWORD627=null;
        Token INDEX_KEYWORD628=null;
        Token BY_KEYWORD629=null;
        PL_SQLParser.data_type_return data_type625 = null;

        PL_SQLParser.data_type_return data_type630 = null;


        Object TABLE_KEYWORD623_tree=null;
        Object OF_KEYWORD624_tree=null;
        Object NOT_OPEARTOR626_tree=null;
        Object NULL_KEYWORD627_tree=null;
        Object INDEX_KEYWORD628_tree=null;
        Object BY_KEYWORD629_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:27: ( TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:29: TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )?
            {
            root_0 = (Object)adaptor.nil();

            TABLE_KEYWORD623=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_collection_table_datatype8826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD623_tree = (Object)adaptor.create(TABLE_KEYWORD623);
            adaptor.addChild(root_0, TABLE_KEYWORD623_tree);
            }
            OF_KEYWORD624=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_table_datatype8828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD624_tree = (Object)adaptor.create(OF_KEYWORD624);
            adaptor.addChild(root_0, OF_KEYWORD624_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_table_datatype8830);
            data_type625=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type625.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:64: ( NOT_OPEARTOR NULL_KEYWORD )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==NOT_OPEARTOR) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:65: NOT_OPEARTOR NULL_KEYWORD
                    {
                    NOT_OPEARTOR626=(Token)match(input,NOT_OPEARTOR,FOLLOW_NOT_OPEARTOR_in_collection_table_datatype8833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPEARTOR626_tree = (Object)adaptor.create(NOT_OPEARTOR626);
                    adaptor.addChild(root_0, NOT_OPEARTOR626_tree);
                    }
                    NULL_KEYWORD627=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_table_datatype8835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD627_tree = (Object)adaptor.create(NULL_KEYWORD627);
                    adaptor.addChild(root_0, NULL_KEYWORD627_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:23: ( INDEX_KEYWORD BY_KEYWORD data_type )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==INDEX_KEYWORD) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:24: INDEX_KEYWORD BY_KEYWORD data_type
                    {
                    INDEX_KEYWORD628=(Token)match(input,INDEX_KEYWORD,FOLLOW_INDEX_KEYWORD_in_collection_table_datatype8862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_KEYWORD628_tree = (Object)adaptor.create(INDEX_KEYWORD628);
                    adaptor.addChild(root_0, INDEX_KEYWORD628_tree);
                    }
                    BY_KEYWORD629=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_collection_table_datatype8864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD629_tree = (Object)adaptor.create(BY_KEYWORD629);
                    adaptor.addChild(root_0, BY_KEYWORD629_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_collection_table_datatype8866);
                    data_type630=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type630.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, collection_table_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_table_datatype"

    public static class collection_varray_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_varray_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:1: collection_varray_datatype : ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? ;
    public final PL_SQLParser.collection_varray_datatype_return collection_varray_datatype() throws RecognitionException {
        PL_SQLParser.collection_varray_datatype_return retval = new PL_SQLParser.collection_varray_datatype_return();
        retval.start = input.LT(1);
        int collection_varray_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token VARRAY_KEYWORD631=null;
        Token VARYING_KEYWORD632=null;
        Token ARRAY_KEYWORD633=null;
        Token char_literal634=null;
        Token char_literal635=null;
        Token NUMBER_UNSIGNED636=null;
        Token char_literal637=null;
        Token OF_KEYWORD638=null;
        Token NOT_OPEARTOR640=null;
        Token NULL_KEYWORD641=null;
        PL_SQLParser.data_type_return data_type639 = null;


        Object VARRAY_KEYWORD631_tree=null;
        Object VARYING_KEYWORD632_tree=null;
        Object ARRAY_KEYWORD633_tree=null;
        Object char_literal634_tree=null;
        Object char_literal635_tree=null;
        Object NUMBER_UNSIGNED636_tree=null;
        Object char_literal637_tree=null;
        Object OF_KEYWORD638_tree=null;
        Object NOT_OPEARTOR640_tree=null;
        Object NULL_KEYWORD641_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:28: ( ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPEARTOR NULL_KEYWORD )?
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) )
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==VARRAY_KEYWORD) ) {
                alt196=1;
            }
            else if ( (LA196_0==VARYING_KEYWORD) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:31: VARRAY_KEYWORD
                    {
                    VARRAY_KEYWORD631=(Token)match(input,VARRAY_KEYWORD,FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype8876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARRAY_KEYWORD631_tree = (Object)adaptor.create(VARRAY_KEYWORD631);
                    adaptor.addChild(root_0, VARRAY_KEYWORD631_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:49: VARYING_KEYWORD ARRAY_KEYWORD
                    {
                    VARYING_KEYWORD632=(Token)match(input,VARYING_KEYWORD,FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype8881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARYING_KEYWORD632_tree = (Object)adaptor.create(VARYING_KEYWORD632);
                    adaptor.addChild(root_0, VARYING_KEYWORD632_tree);
                    }
                    ARRAY_KEYWORD633=(Token)match(input,ARRAY_KEYWORD,FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype8883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY_KEYWORD633_tree = (Object)adaptor.create(ARRAY_KEYWORD633);
                    adaptor.addChild(root_0, ARRAY_KEYWORD633_tree);
                    }

                    }


                    }
                    break;

            }

            char_literal634=(Token)match(input,200,FOLLOW_200_in_collection_varray_datatype8916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal634_tree = (Object)adaptor.create(char_literal634);
            adaptor.addChild(root_0, char_literal634_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:34: ( '+' )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==204) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                    {
                    char_literal635=(Token)match(input,204,FOLLOW_204_in_collection_varray_datatype8918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal635_tree = (Object)adaptor.create(char_literal635);
                    adaptor.addChild(root_0, char_literal635_tree);
                    }

                    }
                    break;

            }

            NUMBER_UNSIGNED636=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype8921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_UNSIGNED636_tree = (Object)adaptor.create(NUMBER_UNSIGNED636);
            adaptor.addChild(root_0, NUMBER_UNSIGNED636_tree);
            }
            char_literal637=(Token)match(input,201,FOLLOW_201_in_collection_varray_datatype8923); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal637_tree = (Object)adaptor.create(char_literal637);
            adaptor.addChild(root_0, char_literal637_tree);
            }
            OF_KEYWORD638=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_varray_datatype8925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD638_tree = (Object)adaptor.create(OF_KEYWORD638);
            adaptor.addChild(root_0, OF_KEYWORD638_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_varray_datatype8927);
            data_type639=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type639.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:80: ( NOT_OPEARTOR NULL_KEYWORD )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==NOT_OPEARTOR) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:662:81: NOT_OPEARTOR NULL_KEYWORD
                    {
                    NOT_OPEARTOR640=(Token)match(input,NOT_OPEARTOR,FOLLOW_NOT_OPEARTOR_in_collection_varray_datatype8930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPEARTOR640_tree = (Object)adaptor.create(NOT_OPEARTOR640);
                    adaptor.addChild(root_0, NOT_OPEARTOR640_tree);
                    }
                    NULL_KEYWORD641=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_varray_datatype8932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD641_tree = (Object)adaptor.create(NULL_KEYWORD641);
                    adaptor.addChild(root_0, NULL_KEYWORD641_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, collection_varray_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_varray_datatype"

    public static class ref_cursor_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:1: ref_cursor_datatype : REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? ;
    public final PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype() throws RecognitionException {
        PL_SQLParser.ref_cursor_datatype_return retval = new PL_SQLParser.ref_cursor_datatype_return();
        retval.start = input.LT(1);
        int ref_cursor_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token REF_KEYWORD642=null;
        Token CURSOR_KEYWORD643=null;
        Token RETURN_KEYWORD644=null;
        PL_SQLParser.data_type_return data_type645 = null;


        Object REF_KEYWORD642_tree=null;
        Object CURSOR_KEYWORD643_tree=null;
        Object RETURN_KEYWORD644_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:21: ( REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:23: REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )?
            {
            root_0 = (Object)adaptor.nil();

            REF_KEYWORD642=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_ref_cursor_datatype8941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REF_KEYWORD642_tree = (Object)adaptor.create(REF_KEYWORD642);
            adaptor.addChild(root_0, REF_KEYWORD642_tree);
            }
            CURSOR_KEYWORD643=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype8943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD643_tree = (Object)adaptor.create(CURSOR_KEYWORD643);
            adaptor.addChild(root_0, CURSOR_KEYWORD643_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:50: ( RETURN_KEYWORD data_type )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==RETURN_KEYWORD) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:51: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD644=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype8946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD644_tree = (Object)adaptor.create(RETURN_KEYWORD644);
                    adaptor.addChild(root_0, RETURN_KEYWORD644_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_ref_cursor_datatype8948);
                    data_type645=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type645.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, ref_cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_cursor_datatype"

    public static class cursor_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:1: cursor_datatype : CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? ;
    public final PL_SQLParser.cursor_datatype_return cursor_datatype() throws RecognitionException {
        PL_SQLParser.cursor_datatype_return retval = new PL_SQLParser.cursor_datatype_return();
        retval.start = input.LT(1);
        int cursor_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token CURSOR_KEYWORD646=null;
        Token RETURN_KEYWORD649=null;
        Token IS_KEYWORD651=null;
        PL_SQLParser.identifier_return identifier647 = null;

        PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration648 = null;

        PL_SQLParser.data_type_return data_type650 = null;

        PL_SQLParser.select_statement_return select_statement652 = null;


        Object CURSOR_KEYWORD646_tree=null;
        Object RETURN_KEYWORD649_tree=null;
        Object IS_KEYWORD651_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:17: ( CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:19: CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )?
            {
            root_0 = (Object)adaptor.nil();

            CURSOR_KEYWORD646=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_cursor_datatype8957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD646_tree = (Object)adaptor.create(CURSOR_KEYWORD646);
            adaptor.addChild(root_0, CURSOR_KEYWORD646_tree);
            }
            pushFollow(FOLLOW_identifier_in_cursor_datatype8959);
            identifier647=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier647.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:45: ( cursor_parameter_declaration )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==200) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: cursor_parameter_declaration
                    {
                    pushFollow(FOLLOW_cursor_parameter_declaration_in_cursor_datatype8961);
                    cursor_parameter_declaration648=cursor_parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter_declaration648.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:19: ( RETURN_KEYWORD data_type )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==RETURN_KEYWORD) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:20: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD649=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_cursor_datatype8983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD649_tree = (Object)adaptor.create(RETURN_KEYWORD649);
                    adaptor.addChild(root_0, RETURN_KEYWORD649_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_cursor_datatype8985);
                    data_type650=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type650.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:47: ( IS_KEYWORD select_statement )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==IS_KEYWORD) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:48: IS_KEYWORD select_statement
                    {
                    IS_KEYWORD651=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_cursor_datatype8990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD651_tree = (Object)adaptor.create(IS_KEYWORD651);
                    adaptor.addChild(root_0, IS_KEYWORD651_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_datatype8992);
                    select_statement652=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement652.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_datatype"

    public static class cursor_parameter_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:1: cursor_parameter_declaration : '(' cursor_parameter ( ',' cursor_parameter )* ')' ;
    public final PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration() throws RecognitionException {
        PL_SQLParser.cursor_parameter_declaration_return retval = new PL_SQLParser.cursor_parameter_declaration_return();
        retval.start = input.LT(1);
        int cursor_parameter_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal653=null;
        Token char_literal655=null;
        Token char_literal657=null;
        PL_SQLParser.cursor_parameter_return cursor_parameter654 = null;

        PL_SQLParser.cursor_parameter_return cursor_parameter656 = null;


        Object char_literal653_tree=null;
        Object char_literal655_tree=null;
        Object char_literal657_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:30: ( '(' cursor_parameter ( ',' cursor_parameter )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:32: '(' cursor_parameter ( ',' cursor_parameter )* ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal653=(Token)match(input,200,FOLLOW_200_in_cursor_parameter_declaration9001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal653_tree = (Object)adaptor.create(char_literal653);
            adaptor.addChild(root_0, char_literal653_tree);
            }
            pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9003);
            cursor_parameter654=cursor_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter654.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:53: ( ',' cursor_parameter )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:54: ',' cursor_parameter
            	    {
            	    char_literal655=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_parameter_declaration9006); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal655_tree = (Object)adaptor.create(char_literal655);
            	    adaptor.addChild(root_0, char_literal655_tree);
            	    }
            	    pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9008);
            	    cursor_parameter656=cursor_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter656.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);

            char_literal657=(Token)match(input,201,FOLLOW_201_in_cursor_parameter_declaration9012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal657_tree = (Object)adaptor.create(char_literal657);
            adaptor.addChild(root_0, char_literal657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, cursor_parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter_declaration"

    public static class cursor_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:1: cursor_parameter : identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? ;
    public final PL_SQLParser.cursor_parameter_return cursor_parameter() throws RecognitionException {
        PL_SQLParser.cursor_parameter_return retval = new PL_SQLParser.cursor_parameter_return();
        retval.start = input.LT(1);
        int cursor_parameter_StartIndex = input.index();
        Object root_0 = null;

        Token IN_KEYWORD659=null;
        PL_SQLParser.identifier_return identifier658 = null;

        PL_SQLParser.data_type_return data_type660 = null;

        PL_SQLParser.variable_def_part_return variable_def_part661 = null;

        PL_SQLParser.expression_return expression662 = null;


        Object IN_KEYWORD659_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:18: ( identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:20: identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_parameter9020);
            identifier658=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier658.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:31: ( IN_KEYWORD )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IN_KEYWORD) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
                    {
                    IN_KEYWORD659=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_cursor_parameter9022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD659_tree = (Object)adaptor.create(IN_KEYWORD659);
                    adaptor.addChild(root_0, IN_KEYWORD659_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_cursor_parameter9025);
            data_type660=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type660.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:53: ( variable_def_part expression )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==DEFAULT_KEYWORD||LA205_0==220) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:54: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_cursor_parameter9028);
                    variable_def_part661=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part661.getTree());
                    pushFollow(FOLLOW_expression_in_cursor_parameter9030);
                    expression662=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression662.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, cursor_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter"

    public static class special_datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:1: special_datatype : ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) ;
    public final PL_SQLParser.special_datatype_return special_datatype() throws RecognitionException {
        PL_SQLParser.special_datatype_return retval = new PL_SQLParser.special_datatype_return();
        retval.start = input.LT(1);
        int special_datatype_StartIndex = input.index();
        Object root_0 = null;

        Token EXT_IDENTIFIER664=null;
        Token set665=null;
        PL_SQLParser.identifier_return identifier663 = null;


        Object EXT_IDENTIFIER664_tree=null;
        Object set665_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:18: ( ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:20: ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:20: ( identifier | EXT_IDENTIFIER )
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==IDENTIFIER||LA206_0==INTERVAL_KEYWORD||LA206_0==RESULT_KEYWORD) ) {
                alt206=1;
            }
            else if ( (LA206_0==EXT_IDENTIFIER) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:21: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_special_datatype9041);
                    identifier663=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier663.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:34: EXT_IDENTIFIER
                    {
                    EXT_IDENTIFIER664=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_special_datatype9045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER664_tree = (Object)adaptor.create(EXT_IDENTIFIER664);
                    adaptor.addChild(root_0, EXT_IDENTIFIER664_tree);
                    }

                    }
                    break;

            }

            set665=(Token)input.LT(1);
            if ( (input.LA(1)>=ROWTYPE_KEYWORD && input.LA(1)<=LIKE_TYPE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set665));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, special_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_datatype"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:1: expression : universal_expression ;
    public final PL_SQLParser.expression_return expression() throws RecognitionException {
        PL_SQLParser.expression_return retval = new PL_SQLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        PL_SQLParser.universal_expression_return universal_expression666 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:12: ( universal_expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:14: universal_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_universal_expression_in_expression9064);
            universal_expression666=universal_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression666.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class in_notin_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_notin_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:1: in_notin_expression : ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) ;
    public final PL_SQLParser.in_notin_expression_return in_notin_expression() throws RecognitionException {
        PL_SQLParser.in_notin_expression_return retval = new PL_SQLParser.in_notin_expression_return();
        retval.start = input.LT(1);
        int in_notin_expression_StartIndex = input.index();
        Object root_0 = null;

        Token NOT_OPERATOR667=null;
        Token IN_KEYWORD668=null;
        Token char_literal670=null;
        Token char_literal672=null;
        PL_SQLParser.universal_expression_return universal_expression669 = null;

        PL_SQLParser.select_statement_return select_statement671 = null;


        Object NOT_OPERATOR667_tree=null;
        Object IN_KEYWORD668_tree=null;
        Object char_literal670_tree=null;
        Object char_literal672_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:21: ( ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:23: ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) )
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:23: ( ( NOT_OPERATOR )? IN_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:24: ( NOT_OPERATOR )? IN_KEYWORD
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:24: ( NOT_OPERATOR )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==NOT_OPERATOR) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR667=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_in_notin_expression9072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR667_tree = (Object)adaptor.create(NOT_OPERATOR667);
                    adaptor.addChild(root_0, NOT_OPERATOR667_tree);
                    }

                    }
                    break;

            }

            IN_KEYWORD668=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_in_notin_expression9075); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD668_tree = (Object)adaptor.create(IN_KEYWORD668);
            adaptor.addChild(root_0, IN_KEYWORD668_tree);
            }

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:23: ( universal_expression | ( '(' select_statement ')' ) )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==NUMBER_UNSIGNED||LA208_0==STRING||(LA208_0>=IDENTIFIER && LA208_0<=EXT_IDENTIFIER)||LA208_0==NOT_OPERATOR||LA208_0==NULL_KEYWORD||(LA208_0>=TRUE_KEYWORD && LA208_0<=FALSE_KEYWORD)||LA208_0==INTERVAL_KEYWORD||LA208_0==REPLACE_KEYWORD||LA208_0==IN_KEYWORD||LA208_0==CASE_KEYWORD||(LA208_0>=SQLCODE_KEYWORD && LA208_0<=SQLERRM_KEYWORD)||LA208_0==RESULT_KEYWORD||(LA208_0>=204 && LA208_0<=205)) ) {
                alt208=1;
            }
            else if ( (LA208_0==200) ) {
                int LA208_2 = input.LA(2);

                if ( (synpred353_PL_SQL()) ) {
                    alt208=1;
                }
                else if ( (true) ) {
                    alt208=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:25: universal_expression
                    {
                    pushFollow(FOLLOW_universal_expression_in_in_notin_expression9103);
                    universal_expression669=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression669.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:48: ( '(' select_statement ')' )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:48: ( '(' select_statement ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:50: '(' select_statement ')'
                    {
                    char_literal670=(Token)match(input,200,FOLLOW_200_in_in_notin_expression9109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal670_tree = (Object)adaptor.create(char_literal670);
                    adaptor.addChild(root_0, char_literal670_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_in_notin_expression9111);
                    select_statement671=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement671.getTree());
                    char_literal672=(Token)match(input,201,FOLLOW_201_in_in_notin_expression9113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal672_tree = (Object)adaptor.create(char_literal672);
                    adaptor.addChild(root_0, char_literal672_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, in_notin_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_notin_expression"

    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );
    public final PL_SQLParser.operator_return operator() throws RecognitionException {
        PL_SQLParser.operator_return retval = new PL_SQLParser.operator_return();
        retval.start = input.LT(1);
        int operator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal673=null;
        Token char_literal674=null;
        Token char_literal675=null;
        Token char_literal676=null;
        Token string_literal677=null;
        Token string_literal678=null;
        Token string_literal679=null;
        Token char_literal680=null;
        Token string_literal681=null;
        Token char_literal682=null;
        Token char_literal683=null;
        Token string_literal684=null;
        Token string_literal685=null;
        Token char_literal686=null;
        Token string_literal687=null;
        Token string_literal688=null;
        Token string_literal689=null;
        Token AND_OPERATOR690=null;
        Token OR_OPERATOR691=null;
        Token LIKE_KEYWORD692=null;
        Token NOT_OPERATOR693=null;
        Token BETWEEN_KEYWORD694=null;

        Object char_literal673_tree=null;
        Object char_literal674_tree=null;
        Object char_literal675_tree=null;
        Object char_literal676_tree=null;
        Object string_literal677_tree=null;
        Object string_literal678_tree=null;
        Object string_literal679_tree=null;
        Object char_literal680_tree=null;
        Object string_literal681_tree=null;
        Object char_literal682_tree=null;
        Object char_literal683_tree=null;
        Object string_literal684_tree=null;
        Object string_literal685_tree=null;
        Object char_literal686_tree=null;
        Object string_literal687_tree=null;
        Object string_literal688_tree=null;
        Object string_literal689_tree=null;
        Object AND_OPERATOR690_tree=null;
        Object OR_OPERATOR691_tree=null;
        Object LIKE_KEYWORD692_tree=null;
        Object NOT_OPERATOR693_tree=null;
        Object BETWEEN_KEYWORD694_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:10: ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) )
            int alt210=21;
            alt210 = dfa210.predict(input);
            switch (alt210) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:12: '+'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal673=(Token)match(input,204,FOLLOW_204_in_operator9122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal673_tree = (Object)adaptor.create(char_literal673);
                    adaptor.addChild(root_0, char_literal673_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:18: '-'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal674=(Token)match(input,205,FOLLOW_205_in_operator9126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal674_tree = (Object)adaptor.create(char_literal674);
                    adaptor.addChild(root_0, char_literal674_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:24: '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal675=(Token)match(input,206,FOLLOW_206_in_operator9130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal675_tree = (Object)adaptor.create(char_literal675);
                    adaptor.addChild(root_0, char_literal675_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:30: '/'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal676=(Token)match(input,202,FOLLOW_202_in_operator9134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal676_tree = (Object)adaptor.create(char_literal676);
                    adaptor.addChild(root_0, char_literal676_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:36: '**'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal677=(Token)match(input,207,FOLLOW_207_in_operator9138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal677_tree = (Object)adaptor.create(string_literal677);
                    adaptor.addChild(root_0, string_literal677_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:43: '||'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal678=(Token)match(input,208,FOLLOW_208_in_operator9142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal678_tree = (Object)adaptor.create(string_literal678);
                    adaptor.addChild(root_0, string_literal678_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:50: ':='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal679=(Token)match(input,220,FOLLOW_220_in_operator9146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal679_tree = (Object)adaptor.create(string_literal679);
                    adaptor.addChild(root_0, string_literal679_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:676:57: '.'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal680=(Token)match(input,221,FOLLOW_221_in_operator9150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal680_tree = (Object)adaptor.create(char_literal680);
                    adaptor.addChild(root_0, char_literal680_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:12: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal681=(Token)match(input,213,FOLLOW_213_in_operator9165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal681_tree = (Object)adaptor.create(string_literal681);
                    adaptor.addChild(root_0, string_literal681_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:19: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal682=(Token)match(input,214,FOLLOW_214_in_operator9169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal682_tree = (Object)adaptor.create(char_literal682);
                    adaptor.addChild(root_0, char_literal682_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:25: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal683=(Token)match(input,215,FOLLOW_215_in_operator9173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal683_tree = (Object)adaptor.create(char_literal683);
                    adaptor.addChild(root_0, char_literal683_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:31: '<='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal684=(Token)match(input,216,FOLLOW_216_in_operator9177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal684_tree = (Object)adaptor.create(string_literal684);
                    adaptor.addChild(root_0, string_literal684_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:38: '>='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal685=(Token)match(input,217,FOLLOW_217_in_operator9181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal685_tree = (Object)adaptor.create(string_literal685);
                    adaptor.addChild(root_0, string_literal685_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:45: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal686=(Token)match(input,209,FOLLOW_209_in_operator9185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal686_tree = (Object)adaptor.create(char_literal686);
                    adaptor.addChild(root_0, char_literal686_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:51: '<>'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal687=(Token)match(input,210,FOLLOW_210_in_operator9189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal687_tree = (Object)adaptor.create(string_literal687);
                    adaptor.addChild(root_0, string_literal687_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:58: '!='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal688=(Token)match(input,211,FOLLOW_211_in_operator9193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal688_tree = (Object)adaptor.create(string_literal688);
                    adaptor.addChild(root_0, string_literal688_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:65: '~='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal689=(Token)match(input,212,FOLLOW_212_in_operator9197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal689_tree = (Object)adaptor.create(string_literal689);
                    adaptor.addChild(root_0, string_literal689_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:12: AND_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_OPERATOR690=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_operator9212); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR690_tree = (Object)adaptor.create(AND_OPERATOR690);
                    adaptor.addChild(root_0, AND_OPERATOR690_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:27: OR_OPERATOR
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_OPERATOR691=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_operator9216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR691_tree = (Object)adaptor.create(OR_OPERATOR691);
                    adaptor.addChild(root_0, OR_OPERATOR691_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:12: LIKE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    LIKE_KEYWORD692=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_operator9231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD692_tree = (Object)adaptor.create(LIKE_KEYWORD692);
                    adaptor.addChild(root_0, LIKE_KEYWORD692_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:28: ( NOT_OPERATOR )? BETWEEN_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:28: ( NOT_OPERATOR )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==NOT_OPERATOR) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:29: NOT_OPERATOR
                            {
                            NOT_OPERATOR693=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_operator9237); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR693_tree = (Object)adaptor.create(NOT_OPERATOR693);
                            adaptor.addChild(root_0, NOT_OPERATOR693_tree);
                            }

                            }
                            break;

                    }

                    BETWEEN_KEYWORD694=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_operator9241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD694_tree = (Object)adaptor.create(BETWEEN_KEYWORD694);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD694_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator"

    public static class unary_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:1: unary_op : ( NOT_OPERATOR | '+' | '-' );
    public final PL_SQLParser.unary_op_return unary_op() throws RecognitionException {
        PL_SQLParser.unary_op_return retval = new PL_SQLParser.unary_op_return();
        retval.start = input.LT(1);
        int unary_op_StartIndex = input.index();
        Object root_0 = null;

        Token set695=null;

        Object set695_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:10: ( NOT_OPERATOR | '+' | '-' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (Object)adaptor.nil();

            set695=(Token)input.LT(1);
            if ( input.LA(1)==NOT_OPERATOR||(input.LA(1)>=204 && input.LA(1)<=205) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set695));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, unary_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class postfix_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:1: postfix_op : ( IS_KEYWORD NULL_KEYWORD | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | '(+)' );
    public final PL_SQLParser.postfix_op_return postfix_op() throws RecognitionException {
        PL_SQLParser.postfix_op_return retval = new PL_SQLParser.postfix_op_return();
        retval.start = input.LT(1);
        int postfix_op_StartIndex = input.index();
        Object root_0 = null;

        Token IS_KEYWORD696=null;
        Token NULL_KEYWORD697=null;
        Token IS_KEYWORD698=null;
        Token NOT_OPERATOR699=null;
        Token NULL_KEYWORD700=null;
        Token string_literal701=null;

        Object IS_KEYWORD696_tree=null;
        Object NULL_KEYWORD697_tree=null;
        Object IS_KEYWORD698_tree=null;
        Object NOT_OPERATOR699_tree=null;
        Object NULL_KEYWORD700_tree=null;
        Object string_literal701_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:12: ( IS_KEYWORD NULL_KEYWORD | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | '(+)' )
            int alt211=3;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==IS_KEYWORD) ) {
                int LA211_1 = input.LA(2);

                if ( (synpred377_PL_SQL()) ) {
                    alt211=1;
                }
                else if ( (synpred378_PL_SQL()) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA211_0==218) ) {
                alt211=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:14: IS_KEYWORD NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IS_KEYWORD696=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_postfix_op9264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD696_tree = (Object)adaptor.create(IS_KEYWORD696);
                    adaptor.addChild(root_0, IS_KEYWORD696_tree);
                    }
                    NULL_KEYWORD697=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_postfix_op9266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD697_tree = (Object)adaptor.create(NULL_KEYWORD697);
                    adaptor.addChild(root_0, NULL_KEYWORD697_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:40: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    IS_KEYWORD698=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_postfix_op9270); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD698_tree = (Object)adaptor.create(IS_KEYWORD698);
                    adaptor.addChild(root_0, IS_KEYWORD698_tree);
                    }
                    NOT_OPERATOR699=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_postfix_op9272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR699_tree = (Object)adaptor.create(NOT_OPERATOR699);
                    adaptor.addChild(root_0, NOT_OPERATOR699_tree);
                    }
                    NULL_KEYWORD700=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_postfix_op9274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD700_tree = (Object)adaptor.create(NULL_KEYWORD700);
                    adaptor.addChild(root_0, NULL_KEYWORD700_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:79: '(+)'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal701=(Token)match(input,218,FOLLOW_218_in_postfix_op9278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal701_tree = (Object)adaptor.create(string_literal701);
                    adaptor.addChild(root_0, string_literal701_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, postfix_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_op"

    public static class universal_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:1: universal_expression : ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* ;
    public final PL_SQLParser.universal_expression_return universal_expression() throws RecognitionException {
        PL_SQLParser.universal_expression_return retval = new PL_SQLParser.universal_expression_return();
        retval.start = input.LT(1);
        int universal_expression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal707=null;
        Token char_literal709=null;
        PL_SQLParser.unary_op_return unary_op702 = null;

        PL_SQLParser.universal_factor_return universal_factor703 = null;

        PL_SQLParser.postfix_op_return postfix_op704 = null;

        PL_SQLParser.operator_return operator705 = null;

        PL_SQLParser.universal_expression_return universal_expression706 = null;

        PL_SQLParser.select_statement_return select_statement708 = null;


        Object char_literal707_tree=null;
        Object char_literal709_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:22: ( ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:24: ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            {
            root_0 = (Object)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:24: ( unary_op )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==NOT_OPERATOR) ) {
                int LA212_1 = input.LA(2);

                if ( (synpred379_PL_SQL()) ) {
                    alt212=1;
                }
            }
            else if ( ((LA212_0>=204 && LA212_0<=205)) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: unary_op
                    {
                    pushFollow(FOLLOW_unary_op_in_universal_expression9286);
                    unary_op702=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op702.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_factor_in_universal_expression9289);
            universal_factor703=universal_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_factor703.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:51: ( postfix_op )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==IS_KEYWORD||LA213_0==218) ) {
                int LA213_2 = input.LA(2);

                if ( (synpred380_PL_SQL()) ) {
                    alt213=1;
                }
            }
            switch (alt213) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: postfix_op
                    {
                    pushFollow(FOLLOW_postfix_op_in_universal_expression9291);
                    postfix_op704=postfix_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_op704.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( ((LA215_0>=AND_OPERATOR && LA215_0<=OR_OPERATOR)||LA215_0==NOT_OPERATOR||LA215_0==LIKE_KEYWORD||LA215_0==BETWEEN_KEYWORD||LA215_0==202||(LA215_0>=204 && LA215_0<=217)||(LA215_0>=220 && LA215_0<=221)) ) {
                    int LA215_2 = input.LA(2);

                    if ( (synpred382_PL_SQL()) ) {
                        alt215=1;
                    }


                }


                switch (alt215) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:64: operator ( universal_expression | ( '(' select_statement ')' ) )
            	    {
            	    pushFollow(FOLLOW_operator_in_universal_expression9295);
            	    operator705=operator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator705.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:73: ( universal_expression | ( '(' select_statement ')' ) )
            	    int alt214=2;
            	    int LA214_0 = input.LA(1);

            	    if ( (LA214_0==NUMBER_UNSIGNED||LA214_0==STRING||(LA214_0>=IDENTIFIER && LA214_0<=EXT_IDENTIFIER)||LA214_0==NOT_OPERATOR||LA214_0==NULL_KEYWORD||(LA214_0>=TRUE_KEYWORD && LA214_0<=FALSE_KEYWORD)||LA214_0==INTERVAL_KEYWORD||LA214_0==REPLACE_KEYWORD||LA214_0==IN_KEYWORD||LA214_0==CASE_KEYWORD||(LA214_0>=SQLCODE_KEYWORD && LA214_0<=SQLERRM_KEYWORD)||LA214_0==RESULT_KEYWORD||(LA214_0>=204 && LA214_0<=205)) ) {
            	        alt214=1;
            	    }
            	    else if ( (LA214_0==200) ) {
            	        int LA214_2 = input.LA(2);

            	        if ( (synpred381_PL_SQL()) ) {
            	            alt214=1;
            	        }
            	        else if ( (true) ) {
            	            alt214=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 214, 2, input);

            	            throw nvae;
            	        }
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 214, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt214) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:74: universal_expression
            	            {
            	            pushFollow(FOLLOW_universal_expression_in_universal_expression9298);
            	            universal_expression706=universal_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression706.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:97: ( '(' select_statement ')' )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:97: ( '(' select_statement ')' )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:98: '(' select_statement ')'
            	            {
            	            char_literal707=(Token)match(input,200,FOLLOW_200_in_universal_expression9303); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal707_tree = (Object)adaptor.create(char_literal707);
            	            adaptor.addChild(root_0, char_literal707_tree);
            	            }
            	            pushFollow(FOLLOW_select_statement_in_universal_expression9305);
            	            select_statement708=select_statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement708.getTree());
            	            char_literal709=(Token)match(input,201,FOLLOW_201_in_universal_expression9307); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal709_tree = (Object)adaptor.create(char_literal709);
            	            adaptor.addChild(root_0, char_literal709_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, universal_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_expression"

    public static class universal_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );
    public final PL_SQLParser.universal_factor_return universal_factor() throws RecognitionException {
        PL_SQLParser.universal_factor_return retval = new PL_SQLParser.universal_factor_return();
        retval.start = input.LT(1);
        int universal_factor_StartIndex = input.index();
        Object root_0 = null;

        Token TRUE_KEYWORD710=null;
        Token FALSE_KEYWORD711=null;
        Token NUMBER_UNSIGNED712=null;
        Token STRING714=null;
        Token NULL_KEYWORD715=null;
        Token char_literal720=null;
        Token char_literal722=null;
        Token char_literal724=null;
        PL_SQLParser.in_notin_expression_return in_notin_expression713 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression716 = null;

        PL_SQLParser.sub_identifier_return sub_identifier717 = null;

        PL_SQLParser.call_statement_param_return call_statement_param718 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression719 = null;

        PL_SQLParser.universal_expression_return universal_expression721 = null;

        PL_SQLParser.universal_expression_return universal_expression723 = null;


        Object TRUE_KEYWORD710_tree=null;
        Object FALSE_KEYWORD711_tree=null;
        Object NUMBER_UNSIGNED712_tree=null;
        Object STRING714_tree=null;
        Object NULL_KEYWORD715_tree=null;
        Object char_literal720_tree=null;
        Object char_literal722_tree=null;
        Object char_literal724_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:18: ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) )
            int alt219=9;
            alt219 = dfa219.predict(input);
            switch (alt219) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:20: TRUE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    TRUE_KEYWORD710=(Token)match(input,TRUE_KEYWORD,FOLLOW_TRUE_KEYWORD_in_universal_factor9319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE_KEYWORD710_tree = (Object)adaptor.create(TRUE_KEYWORD710);
                    adaptor.addChild(root_0, TRUE_KEYWORD710_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:35: FALSE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    FALSE_KEYWORD711=(Token)match(input,FALSE_KEYWORD,FOLLOW_FALSE_KEYWORD_in_universal_factor9323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE_KEYWORD711_tree = (Object)adaptor.create(FALSE_KEYWORD711);
                    adaptor.addChild(root_0, FALSE_KEYWORD711_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:51: NUMBER_UNSIGNED
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER_UNSIGNED712=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_universal_factor9327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED712_tree = (Object)adaptor.create(NUMBER_UNSIGNED712);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED712_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:684:20: in_notin_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9350);
                    in_notin_expression713=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression713.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:20: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING714=(Token)match(input,STRING,FOLLOW_STRING_in_universal_factor9373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING714_tree = (Object)adaptor.create(STRING714);
                    adaptor.addChild(root_0, STRING714_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:29: NULL_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL_KEYWORD715=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_universal_factor9377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD715_tree = (Object)adaptor.create(NULL_KEYWORD715);
                    adaptor.addChild(root_0, NULL_KEYWORD715_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:44: case_statement_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_universal_factor9381);
                    case_statement_expression716=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression716.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:20: sub_identifier ( call_statement_param ( in_notin_expression )? )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_in_universal_factor9404);
                    sub_identifier717=sub_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier717.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:35: ( call_statement_param ( in_notin_expression )? )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==200) ) {
                        int LA217_1 = input.LA(2);

                        if ( (synpred391_PL_SQL()) ) {
                            alt217=1;
                        }
                    }
                    switch (alt217) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:36: call_statement_param ( in_notin_expression )?
                            {
                            pushFollow(FOLLOW_call_statement_param_in_universal_factor9407);
                            call_statement_param718=call_statement_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement_param718.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:57: ( in_notin_expression )?
                            int alt216=2;
                            int LA216_0 = input.LA(1);

                            if ( (LA216_0==NOT_OPERATOR||LA216_0==IN_KEYWORD) ) {
                                int LA216_2 = input.LA(2);

                                if ( (synpred390_PL_SQL()) ) {
                                    alt216=1;
                                }
                            }
                            switch (alt216) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:58: in_notin_expression
                                    {
                                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9410);
                                    in_notin_expression719=in_notin_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression719.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:21: '(' universal_expression ( ',' universal_expression )* ')'
                    {
                    char_literal720=(Token)match(input,200,FOLLOW_200_in_universal_factor9438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal720_tree = (Object)adaptor.create(char_literal720);
                    adaptor.addChild(root_0, char_literal720_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_universal_factor9440);
                    universal_expression721=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression721.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:46: ( ',' universal_expression )*
                    loop218:
                    do {
                        int alt218=2;
                        int LA218_0 = input.LA(1);

                        if ( (LA218_0==COMMA) ) {
                            alt218=1;
                        }


                        switch (alt218) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:47: ',' universal_expression
                    	    {
                    	    char_literal722=(Token)match(input,COMMA,FOLLOW_COMMA_in_universal_factor9443); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal722_tree = (Object)adaptor.create(char_literal722);
                    	    adaptor.addChild(root_0, char_literal722_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_universal_factor9445);
                    	    universal_expression723=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression723.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop218;
                        }
                    } while (true);

                    char_literal724=(Token)match(input,201,FOLLOW_201_in_universal_factor9450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal724_tree = (Object)adaptor.create(char_literal724);
                    adaptor.addChild(root_0, char_literal724_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, universal_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_factor"

    public static class sub_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:1: sub_identifier : ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function );
    public final PL_SQLParser.sub_identifier_return sub_identifier() throws RecognitionException {
        PL_SQLParser.sub_identifier_return retval = new PL_SQLParser.sub_identifier_return();
        retval.start = input.LT(1);
        int sub_identifier_StartIndex = input.index();
        Object root_0 = null;

        Token REPLACE_KEYWORD726=null;
        PL_SQLParser.sub_identifier_factor_return sub_identifier_factor725 = null;

        PL_SQLParser.sqlcode_function_return sqlcode_function727 = null;

        PL_SQLParser.sqlerrm_function_return sqlerrm_function728 = null;


        Object REPLACE_KEYWORD726_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:16: ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function )
            int alt220=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt220=1;
                }
                break;
            case REPLACE_KEYWORD:
                {
                alt220=2;
                }
                break;
            case SQLCODE_KEYWORD:
                {
                alt220=3;
                }
                break;
            case SQLERRM_KEYWORD:
                {
                alt220=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:18: sub_identifier_factor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_factor_in_sub_identifier9458);
                    sub_identifier_factor725=sub_identifier_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier_factor725.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:42: REPLACE_KEYWORD
                    {
                    root_0 = (Object)adaptor.nil();

                    REPLACE_KEYWORD726=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sub_identifier9462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD726_tree = (Object)adaptor.create(REPLACE_KEYWORD726);
                    adaptor.addChild(root_0, REPLACE_KEYWORD726_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:60: sqlcode_function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sqlcode_function_in_sub_identifier9466);
                    sqlcode_function727=sqlcode_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcode_function727.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:79: sqlerrm_function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sqlerrm_function_in_sub_identifier9470);
                    sqlerrm_function728=sqlerrm_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlerrm_function728.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, sub_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier"

    public static class sub_identifier_factor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:1: sub_identifier_factor : universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? ;
    public final PL_SQLParser.sub_identifier_factor_return sub_identifier_factor() throws RecognitionException {
        PL_SQLParser.sub_identifier_factor_return retval = new PL_SQLParser.sub_identifier_factor_return();
        retval.start = input.LT(1);
        int sub_identifier_factor_StartIndex = input.index();
        Object root_0 = null;

        Token NOTFOUND_KEYWORD730=null;
        Token FOUND_KEYWORD731=null;
        Token ISOPEN_KEYWORD732=null;
        Token ROWCOUNT_KEYWORD733=null;
        PL_SQLParser.universal_identifier_return universal_identifier729 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression734 = null;


        Object NOTFOUND_KEYWORD730_tree=null;
        Object FOUND_KEYWORD731_tree=null;
        Object ISOPEN_KEYWORD732_tree=null;
        Object ROWCOUNT_KEYWORD733_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:23: ( universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:25: universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_universal_identifier_in_sub_identifier_factor9477);
            universal_identifier729=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier729.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            int alt221=6;
            switch ( input.LA(1) ) {
                case FOUND_KEYWORD:
                    {
                    alt221=2;
                    }
                    break;
                case ISOPEN_KEYWORD:
                    {
                    alt221=3;
                    }
                    break;
                case NOTFOUND_KEYWORD:
                    {
                    alt221=1;
                    }
                    break;
                case NOT_OPERATOR:
                case IN_KEYWORD:
                    {
                    int LA221_5 = input.LA(2);

                    if ( (synpred401_PL_SQL()) ) {
                        alt221=5;
                    }
                    }
                    break;
                case ROWCOUNT_KEYWORD:
                    {
                    alt221=4;
                    }
                    break;
            }

            switch (alt221) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:47: NOTFOUND_KEYWORD
                    {
                    NOTFOUND_KEYWORD730=(Token)match(input,NOTFOUND_KEYWORD,FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTFOUND_KEYWORD730_tree = (Object)adaptor.create(NOTFOUND_KEYWORD730);
                    adaptor.addChild(root_0, NOTFOUND_KEYWORD730_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:66: FOUND_KEYWORD
                    {
                    FOUND_KEYWORD731=(Token)match(input,FOUND_KEYWORD,FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOUND_KEYWORD731_tree = (Object)adaptor.create(FOUND_KEYWORD731);
                    adaptor.addChild(root_0, FOUND_KEYWORD731_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:25: ISOPEN_KEYWORD
                    {
                    ISOPEN_KEYWORD732=(Token)match(input,ISOPEN_KEYWORD,FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISOPEN_KEYWORD732_tree = (Object)adaptor.create(ISOPEN_KEYWORD732);
                    adaptor.addChild(root_0, ISOPEN_KEYWORD732_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:42: ROWCOUNT_KEYWORD
                    {
                    ROWCOUNT_KEYWORD733=(Token)match(input,ROWCOUNT_KEYWORD,FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWCOUNT_KEYWORD733_tree = (Object)adaptor.create(ROWCOUNT_KEYWORD733);
                    adaptor.addChild(root_0, ROWCOUNT_KEYWORD733_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:61: in_notin_expression
                    {
                    pushFollow(FOLLOW_in_notin_expression_in_sub_identifier_factor9520);
                    in_notin_expression734=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression734.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, sub_identifier_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier_factor"

    public static class call_statement_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_statement_param"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:1: call_statement_param : ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) );
    public final PL_SQLParser.call_statement_param_return call_statement_param() throws RecognitionException {
        PL_SQLParser.call_statement_param_return retval = new PL_SQLParser.call_statement_param_return();
        retval.start = input.LT(1);
        int call_statement_param_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal735=null;
        Token char_literal737=null;
        Token char_literal739=null;
        Token char_literal740=null;
        Token string_literal742=null;
        Token char_literal744=null;
        Token string_literal746=null;
        Token char_literal748=null;
        PL_SQLParser.universal_expression_return universal_expression736 = null;

        PL_SQLParser.universal_expression_return universal_expression738 = null;

        PL_SQLParser.identifier_return identifier741 = null;

        PL_SQLParser.universal_expression_return universal_expression743 = null;

        PL_SQLParser.identifier_return identifier745 = null;

        PL_SQLParser.universal_expression_return universal_expression747 = null;


        Object char_literal735_tree=null;
        Object char_literal737_tree=null;
        Object char_literal739_tree=null;
        Object char_literal740_tree=null;
        Object string_literal742_tree=null;
        Object char_literal744_tree=null;
        Object string_literal746_tree=null;
        Object char_literal748_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:22: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==200) ) {
                int LA225_1 = input.LA(2);

                if ( (synpred404_PL_SQL()) ) {
                    alt225=1;
                }
                else if ( (true) ) {
                    alt225=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 225, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
                    {
                    char_literal735=(Token)match(input,200,FOLLOW_200_in_call_statement_param9530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal735_tree = (Object)adaptor.create(char_literal735);
                    adaptor.addChild(root_0, char_literal735_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:29: ( universal_expression ( ',' universal_expression )* )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==NUMBER_UNSIGNED||LA223_0==STRING||(LA223_0>=IDENTIFIER && LA223_0<=EXT_IDENTIFIER)||LA223_0==NOT_OPERATOR||LA223_0==NULL_KEYWORD||(LA223_0>=TRUE_KEYWORD && LA223_0<=FALSE_KEYWORD)||LA223_0==INTERVAL_KEYWORD||LA223_0==REPLACE_KEYWORD||LA223_0==IN_KEYWORD||LA223_0==CASE_KEYWORD||(LA223_0>=SQLCODE_KEYWORD && LA223_0<=SQLERRM_KEYWORD)||LA223_0==RESULT_KEYWORD||LA223_0==200||(LA223_0>=204 && LA223_0<=205)) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:30: universal_expression ( ',' universal_expression )*
                            {
                            pushFollow(FOLLOW_universal_expression_in_call_statement_param9533);
                            universal_expression736=universal_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression736.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:51: ( ',' universal_expression )*
                            loop222:
                            do {
                                int alt222=2;
                                int LA222_0 = input.LA(1);

                                if ( (LA222_0==COMMA) ) {
                                    alt222=1;
                                }


                                switch (alt222) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:52: ',' universal_expression
                            	    {
                            	    char_literal737=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param9536); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal737_tree = (Object)adaptor.create(char_literal737);
                            	    adaptor.addChild(root_0, char_literal737_tree);
                            	    }
                            	    pushFollow(FOLLOW_universal_expression_in_call_statement_param9538);
                            	    universal_expression738=universal_expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression738.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop222;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal739=(Token)match(input,201,FOLLOW_201_in_call_statement_param9545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal739_tree = (Object)adaptor.create(char_literal739);
                    adaptor.addChild(root_0, char_literal739_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    {
                    root_0 = (Object)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:25: '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')'
                    {
                    char_literal740=(Token)match(input,200,FOLLOW_200_in_call_statement_param9574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal740_tree = (Object)adaptor.create(char_literal740);
                    adaptor.addChild(root_0, char_literal740_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_call_statement_param9576);
                    identifier741=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier741.getTree());
                    string_literal742=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param9578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal742_tree = (Object)adaptor.create(string_literal742);
                    adaptor.addChild(root_0, string_literal742_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_call_statement_param9580);
                    universal_expression743=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression743.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:66: ( ',' identifier '=>' universal_expression )*
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);

                        if ( (LA224_0==COMMA) ) {
                            alt224=1;
                        }


                        switch (alt224) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:67: ',' identifier '=>' universal_expression
                    	    {
                    	    char_literal744=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param9583); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal744_tree = (Object)adaptor.create(char_literal744);
                    	    adaptor.addChild(root_0, char_literal744_tree);
                    	    }
                    	    pushFollow(FOLLOW_identifier_in_call_statement_param9585);
                    	    identifier745=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier745.getTree());
                    	    string_literal746=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param9587); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal746_tree = (Object)adaptor.create(string_literal746);
                    	    adaptor.addChild(root_0, string_literal746_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_call_statement_param9589);
                    	    universal_expression747=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression747.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop224;
                        }
                    } while (true);

                    char_literal748=(Token)match(input,201,FOLLOW_201_in_call_statement_param9594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal748_tree = (Object)adaptor.create(char_literal748);
                    adaptor.addChild(root_0, char_literal748_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, call_statement_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_statement_param"

    public static class exception_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:1: exception_section : EXCEPTION_KEYWORD ( exception_handler )+ ;
    public final PL_SQLParser.exception_section_return exception_section() throws RecognitionException {
        PL_SQLParser.exception_section_return retval = new PL_SQLParser.exception_section_return();
        retval.start = input.LT(1);
        int exception_section_StartIndex = input.index();
        Object root_0 = null;

        Token EXCEPTION_KEYWORD749=null;
        PL_SQLParser.exception_handler_return exception_handler750 = null;


        Object EXCEPTION_KEYWORD749_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:19: ( EXCEPTION_KEYWORD ( exception_handler )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:21: EXCEPTION_KEYWORD ( exception_handler )+
            {
            root_0 = (Object)adaptor.nil();

            EXCEPTION_KEYWORD749=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_exception_section9603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPTION_KEYWORD749_tree = (Object)adaptor.create(EXCEPTION_KEYWORD749);
            adaptor.addChild(root_0, EXCEPTION_KEYWORD749_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:39: ( exception_handler )+
            int cnt226=0;
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==WHEN_KEYWORD) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:40: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_section9606);
            	    exception_handler750=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler750.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt226 >= 1 ) break loop226;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(226, input);
                        throw eee;
                }
                cnt226++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, exception_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_section"

    public static class exception_handler_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:1: exception_handler : WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ ;
    public final PL_SQLParser.exception_handler_return exception_handler() throws RecognitionException {
        PL_SQLParser.exception_handler_return retval = new PL_SQLParser.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        Object root_0 = null;

        Token WHEN_KEYWORD751=null;
        Token OR_OPERATOR753=null;
        Token THEN_KEYWORD755=null;
        PL_SQLParser.universal_identifier_return universal_identifier752 = null;

        PL_SQLParser.universal_identifier_return universal_identifier754 = null;

        PL_SQLParser.executable_section_return executable_section756 = null;


        Object WHEN_KEYWORD751_tree=null;
        Object OR_OPERATOR753_tree=null;
        Object THEN_KEYWORD755_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:19: ( WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:21: WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+
            {
            root_0 = (Object)adaptor.nil();

            WHEN_KEYWORD751=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exception_handler9615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN_KEYWORD751_tree = (Object)adaptor.create(WHEN_KEYWORD751);
            adaptor.addChild(root_0, WHEN_KEYWORD751_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_exception_handler9617);
            universal_identifier752=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier752.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:55: ( OR_OPERATOR universal_identifier )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==OR_OPERATOR) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:56: OR_OPERATOR universal_identifier
            	    {
            	    OR_OPERATOR753=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_exception_handler9620); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR_OPERATOR753_tree = (Object)adaptor.create(OR_OPERATOR753);
            	    adaptor.addChild(root_0, OR_OPERATOR753_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_exception_handler9622);
            	    universal_identifier754=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier754.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);

            THEN_KEYWORD755=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_exception_handler9646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD755_tree = (Object)adaptor.create(THEN_KEYWORD755);
            adaptor.addChild(root_0, THEN_KEYWORD755_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:34: ( executable_section )+
            int cnt228=0;
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==NUMBER_UNSIGNED||LA228_0==STRING||(LA228_0>=IDENTIFIER && LA228_0<=EXT_IDENTIFIER)||LA228_0==NOT_OPERATOR||LA228_0==BEGIN_KEYWORD||LA228_0==DECLARE_KEYWORD||LA228_0==NULL_KEYWORD||(LA228_0>=TRUE_KEYWORD && LA228_0<=FALSE_KEYWORD)||LA228_0==INTERVAL_KEYWORD||LA228_0==REPLACE_KEYWORD||(LA228_0>=RETURN_KEYWORD && LA228_0<=IN_KEYWORD)||LA228_0==IF_KEYWORD||(LA228_0>=GOTO_KEYWORD && LA228_0<=FOR_KEYWORD)||LA228_0==SELECT_KEYWORD||(LA228_0>=RAISE_KEYWORD && LA228_0<=PRAGMA_KEYWORD)||(LA228_0>=CASE_KEYWORD && LA228_0<=CLOSE_KEYWORD)||LA228_0==COMMIT_KEYWORD||LA228_0==CONTINUE_KEYWORD||(LA228_0>=DELETE_KEYWORD && LA228_0<=EXECUTE_KEYWORD)||LA228_0==EXIT_KEYWORD||LA228_0==FETCH_KEYWORD||LA228_0==FORALL_KEYWORD||(LA228_0>=INSERT_KEYWORD && LA228_0<=OPEN_KEYWORD)||(LA228_0>=ROLLBACK_KEYWORD && LA228_0<=SAVEPOINT_KEYWORD)||LA228_0==SET_KEYWORD||(LA228_0>=SQLCODE_KEYWORD && LA228_0<=UPDATE_KEYWORD)||LA228_0==RESULT_KEYWORD||LA228_0==198||LA228_0==200||(LA228_0>=204 && LA228_0<=205)) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:35: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_exception_handler9649);
            	    executable_section756=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section756.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt228 >= 1 ) break loop228;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(228, input);
                        throw eee;
                }
                cnt228++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    // $ANTLR start synpred5_PL_SQL
    public final void synpred5_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:67: ( package_spec )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:67: package_spec
        {
        pushFollow(FOLLOW_package_spec_in_synpred5_PL_SQL4500);
        package_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_PL_SQL

    // $ANTLR start synpred6_PL_SQL
    public final void synpred6_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:82: ( package_body )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:443:82: package_body
        {
        pushFollow(FOLLOW_package_body_in_synpred6_PL_SQL4504);
        package_body();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_PL_SQL

    // $ANTLR start synpred8_PL_SQL
    public final void synpred8_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:42: ( type_spec_declaration )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:444:42: type_spec_declaration
        {
        pushFollow(FOLLOW_type_spec_declaration_in_synpred8_PL_SQL4531);
        type_spec_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_PL_SQL

    // $ANTLR start synpred69_PL_SQL
    public final void synpred69_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:37: ( dml_event_clause_factor )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:487:37: dml_event_clause_factor
        {
        pushFollow(FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5305);
        dml_event_clause_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_PL_SQL

    // $ANTLR start synpred73_PL_SQL
    public final void synpred73_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:43: ( referencing_clause )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:489:43: referencing_clause
        {
        pushFollow(FOLLOW_referencing_clause_in_synpred73_PL_SQL5360);
        referencing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_PL_SQL

    // $ANTLR start synpred89_PL_SQL
    public final void synpred89_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:19: ( object_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:19: object_type
        {
        pushFollow(FOLLOW_object_type_in_synpred89_PL_SQL5566);
        object_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_PL_SQL

    // $ANTLR start synpred90_PL_SQL
    public final void synpred90_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:33: ( varray_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:499:33: varray_type
        {
        pushFollow(FOLLOW_varray_type_in_synpred90_PL_SQL5570);
        varray_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_PL_SQL

    // $ANTLR start synpred94_PL_SQL
    public final void synpred94_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:17: ( ( NOT_OPERATOR )? FINAL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:17: ( NOT_OPERATOR )? FINAL_KEYWORD
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:502:17: ( NOT_OPERATOR )?
        int alt246=2;
        int LA246_0 = input.LA(1);

        if ( (LA246_0==NOT_OPERATOR) ) {
            alt246=1;
        }
        switch (alt246) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                {
                match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL5630); if (state.failed) return ;

                }
                break;

        }

        match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL5633); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_PL_SQL

    // $ANTLR start synpred101_PL_SQL
    public final void synpred101_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:16: ( inheritance_clauses )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:16: inheritance_clauses
        {
        pushFollow(FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5677);
        inheritance_clauses();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_PL_SQL

    // $ANTLR start synpred104_PL_SQL
    public final void synpred104_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:101: ( ',' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:101: ','
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred104_PL_SQL5693); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_PL_SQL

    // $ANTLR start synpred105_PL_SQL
    public final void synpred105_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:38: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
        int alt250=3;
        switch ( input.LA(1) ) {
        case MEMBER_KEYWORD:
        case STATIC_KEYWORD:
            {
            alt250=1;
            }
            break;
        case FINAL_KEYWORD:
        case INSTANTIABLE_KEYWORD:
        case CONSTRUCTOR_KEYWORD:
            {
            alt250=2;
            }
            break;
        case MAP_KEYWORD:
        case ORDER_KEYWORD:
            {
            alt250=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 250, 0, input);

            throw nvae;
        }

        switch (alt250) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:39: subprogram_spec
                {
                pushFollow(FOLLOW_subprogram_spec_in_synpred105_PL_SQL5682);
                subprogram_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:57: constructor_spec
                {
                pushFollow(FOLLOW_constructor_spec_in_synpred105_PL_SQL5686);
                constructor_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:76: map_order_function_spec
                {
                pushFollow(FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5690);
                map_order_function_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:504:101: ( ',' )?
        int alt251=2;
        int LA251_0 = input.LA(1);

        if ( (LA251_0==COMMA) ) {
            alt251=1;
        }
        switch (alt251) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred105_PL_SQL5693); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_PL_SQL

    // $ANTLR start synpred136_PL_SQL
    public final void synpred136_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:21: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:529:21: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred136_PL_SQL6182);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_PL_SQL

    // $ANTLR start synpred188_PL_SQL
    public final void synpred188_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:36: ( sql_operator )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:36: sql_operator
        {
        pushFollow(FOLLOW_sql_operator_in_synpred188_PL_SQL6568);
        sql_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_PL_SQL

    // $ANTLR start synpred190_PL_SQL
    public final void synpred190_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:66: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:66: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred190_PL_SQL6576); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_PL_SQL

    // $ANTLR start synpred191_PL_SQL
    public final void synpred191_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:79: ( NOT_OPERATOR IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:547:79: NOT_OPERATOR IN_KEYWORD
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred191_PL_SQL6580); if (state.failed) return ;
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL6582); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_PL_SQL

    // $ANTLR start synpred200_PL_SQL
    public final void synpred200_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:16: ( SET_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:550:16: SET_KEYWORD
        {
        match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_synpred200_PL_SQL6663); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_PL_SQL

    // $ANTLR start synpred206_PL_SQL
    public final void synpred206_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:551:33: ( REPLACE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:551:33: REPLACE_KEYWORD
        {
        match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_synpred206_PL_SQL6702); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_PL_SQL

    // $ANTLR start synpred207_PL_SQL
    public final void synpred207_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:16: ( NUMBER_UNSIGNED )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:16: NUMBER_UNSIGNED
        {
        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred207_PL_SQL6721); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_PL_SQL

    // $ANTLR start synpred209_PL_SQL
    public final void synpred209_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:50: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:50: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred209_PL_SQL6729);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_PL_SQL

    // $ANTLR start synpred210_PL_SQL
    public final void synpred210_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:73: ( case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:552:73: case_statement_expression
        {
        pushFollow(FOLLOW_case_statement_expression_in_synpred210_PL_SQL6733);
        case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_PL_SQL

    // $ANTLR start synpred211_PL_SQL
    public final void synpred211_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:16: ( STRING )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:16: STRING
        {
        match(input,STRING,FOLLOW_STRING_in_synpred211_PL_SQL6752); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_PL_SQL

    // $ANTLR start synpred212_PL_SQL
    public final void synpred212_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:25: ( COMMA )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:25: COMMA
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred212_PL_SQL6756); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_PL_SQL

    // $ANTLR start synpred215_PL_SQL
    public final void synpred215_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:62: ( NOT_OPERATOR )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:553:62: NOT_OPERATOR
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred215_PL_SQL6768); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_PL_SQL

    // $ANTLR start synpred216_PL_SQL
    public final void synpred216_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:16: ( IS_KEYWORD NOT_OPERATOR NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred216_PL_SQL6787); if (state.failed) return ;
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL6789); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred216_PL_SQL6791); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_PL_SQL

    // $ANTLR start synpred217_PL_SQL
    public final void synpred217_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:55: ( IS_KEYWORD NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:55: IS_KEYWORD NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL6795); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL6797); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_PL_SQL

    // $ANTLR start synpred218_PL_SQL
    public final void synpred218_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:81: ( NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:554:81: NULL_KEYWORD
        {
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL6801); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_PL_SQL

    // $ANTLR start synpred220_PL_SQL
    public final void synpred220_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:555:16: ( sql_statements )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:555:16: sql_statements
        {
        pushFollow(FOLLOW_sql_statements_in_synpred220_PL_SQL6825);
        sql_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_PL_SQL

    // $ANTLR start synpred221_PL_SQL
    public final void synpred221_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:16: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:556:16: expression
        {
        pushFollow(FOLLOW_expression_in_synpred221_PL_SQL6845);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_PL_SQL

    // $ANTLR start synpred225_PL_SQL
    public final void synpred225_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: ( ( sql_not_parsed | ON_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: ( sql_not_parsed | ON_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:36: ( sql_not_parsed | ON_KEYWORD )
        int alt257=2;
        int LA257_0 = input.LA(1);

        if ( ((LA257_0>=NUMBER_UNSIGNED && LA257_0<=OR_OPERATOR)||(LA257_0>=STRING && LA257_0<=SOME_TYPES)||(LA257_0>=KEYWORD && LA257_0<=ALIAS)||LA257_0==NOT_OPERATOR||LA257_0==COMMA||LA257_0==NULL_KEYWORD||(LA257_0>=TRUE_KEYWORD && LA257_0<=FALSE_KEYWORD)||LA257_0==WITH_KEYWORD||LA257_0==INTERVAL_KEYWORD||LA257_0==IS_KEYWORD||LA257_0==REPLACE_KEYWORD||LA257_0==AS_KEYWORD||LA257_0==IN_KEYWORD||(LA257_0>=SELECT_KEYWORD && LA257_0<=COUNT_KEYWORD)||LA257_0==LIKE_KEYWORD||LA257_0==CASE_KEYWORD||LA257_0==TABLE_KEYWORD||LA257_0==BY_KEYWORD||LA257_0==COMMIT_KEYWORD||LA257_0==DELETE_KEYWORD||LA257_0==INTO_KEYWORD||(LA257_0>=BULK_KEYWORD && LA257_0<=COLLECT_KEYWORD)||(LA257_0>=VALUES_KEYWORD && LA257_0<=BETWEEN_KEYWORD)||(LA257_0>=INSERT_KEYWORD && LA257_0<=MERGE_KEYWORD)||(LA257_0>=RETURNING_KEYWORD && LA257_0<=SAVEPOINT_KEYWORD)||LA257_0==SET_KEYWORD||(LA257_0>=SQLCODE_KEYWORD && LA257_0<=EXISTS_KEYWORD)||LA257_0==ROW_KEYWORD||LA257_0==RESULT_KEYWORD||LA257_0==JOIN_KEYWORD||LA257_0==THE_REST||LA257_0==200||LA257_0==202||(LA257_0>=204 && LA257_0<=218)) ) {
            alt257=1;
        }
        else if ( (LA257_0==ON_KEYWORD) ) {
            alt257=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 257, 0, input);

            throw nvae;
        }
        switch (alt257) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:37: sql_not_parsed
                {
                pushFollow(FOLLOW_sql_not_parsed_in_synpred225_PL_SQL6876);
                sql_not_parsed();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:54: ON_KEYWORD
                {
                match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred225_PL_SQL6880); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred225_PL_SQL

    // $ANTLR start synpred226_PL_SQL
    public final void synpred226_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:68: ( ( FOR_KEYWORD UPDATE_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:560:69: FOR_KEYWORD UPDATE_KEYWORD
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred226_PL_SQL6886); if (state.failed) return ;
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred226_PL_SQL6888); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred226_PL_SQL

    // $ANTLR start synpred227_PL_SQL
    public final void synpred227_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:35: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:561:35: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred227_PL_SQL6900);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_PL_SQL

    // $ANTLR start synpred228_PL_SQL
    public final void synpred228_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:562:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred228_PL_SQL6911);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_PL_SQL

    // $ANTLR start synpred229_PL_SQL
    public final void synpred229_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:563:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred229_PL_SQL6923);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_PL_SQL

    // $ANTLR start synpred230_PL_SQL
    public final void synpred230_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:52: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:564:52: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred230_PL_SQL6937);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_PL_SQL

    // $ANTLR start synpred231_PL_SQL
    public final void synpred231_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:34: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:34: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred231_PL_SQL6949);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_PL_SQL

    // $ANTLR start synpred232_PL_SQL
    public final void synpred232_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:51: ( ON_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:565:51: ON_KEYWORD
        {
        match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred232_PL_SQL6953); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_PL_SQL

    // $ANTLR start synpred233_PL_SQL
    public final void synpred233_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:19: ( USING_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:19: USING_KEYWORD
        {
        match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_synpred233_PL_SQL6975); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_PL_SQL

    // $ANTLR start synpred234_PL_SQL
    public final void synpred234_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:35: ( WHEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:35: WHEN_KEYWORD
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred234_PL_SQL6979); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_PL_SQL

    // $ANTLR start synpred235_PL_SQL
    public final void synpred235_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:50: ( THEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:50: THEN_KEYWORD
        {
        match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_synpred235_PL_SQL6983); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_PL_SQL

    // $ANTLR start synpred236_PL_SQL
    public final void synpred236_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:65: ( INSERT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:566:65: INSERT_KEYWORD
        {
        match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_synpred236_PL_SQL6987); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_PL_SQL

    // $ANTLR start synpred237_PL_SQL
    public final void synpred237_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:19: ( UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:567:19: UPDATE_KEYWORD
        {
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred237_PL_SQL7009); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_PL_SQL

    // $ANTLR start synpred238_PL_SQL
    public final void synpred238_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:39: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:568:39: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred238_PL_SQL7020);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_PL_SQL

    // $ANTLR start synpred239_PL_SQL
    public final void synpred239_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:62: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:570:62: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred239_PL_SQL7042);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_PL_SQL

    // $ANTLR start synpred240_PL_SQL
    public final void synpred240_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:571:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7054);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_PL_SQL

    // $ANTLR start synpred241_PL_SQL
    public final void synpred241_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:35: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:575:35: expression
        {
        pushFollow(FOLLOW_expression_in_synpred241_PL_SQL7076);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_PL_SQL

    // $ANTLR start synpred248_PL_SQL
    public final void synpred248_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:78: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:580:78: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred248_PL_SQL7184);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_PL_SQL

    // $ANTLR start synpred251_PL_SQL
    public final void synpred251_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:23: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
        {
        pushFollow(FOLLOW_expression_in_synpred251_PL_SQL7236);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
        int alt260=2;
        int LA260_0 = input.LA(1);

        if ( (LA260_0==219) ) {
            alt260=1;
        }
        else if ( (LA260_0==LOOP_KEYWORD) ) {
            alt260=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 260, 0, input);

            throw nvae;
        }
        switch (alt260) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:36: for_loop_statement_part
                {
                pushFollow(FOLLOW_for_loop_statement_part_in_synpred251_PL_SQL7239);
                for_loop_statement_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:583:62: cursor_for_loop_statement1
                {
                pushFollow(FOLLOW_cursor_for_loop_statement1_in_synpred251_PL_SQL7243);
                cursor_for_loop_statement1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred251_PL_SQL

    // $ANTLR start synpred252_PL_SQL
    public final void synpred252_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:33: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:588:33: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred252_PL_SQL7314);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_PL_SQL

    // $ANTLR start synpred253_PL_SQL
    public final void synpred253_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:29: ( simple_case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:29: simple_case_statement_expression
        {
        pushFollow(FOLLOW_simple_case_statement_expression_in_synpred253_PL_SQL7322);
        simple_case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_PL_SQL

    // $ANTLR start synpred258_PL_SQL
    public final void synpred258_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred258_PL_SQL7437); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_PL_SQL

    // $ANTLR start synpred259_PL_SQL
    public final void synpred259_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred259_PL_SQL7440);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_PL_SQL

    // $ANTLR start synpred264_PL_SQL
    public final void synpred264_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred264_PL_SQL7550); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_PL_SQL

    // $ANTLR start synpred265_PL_SQL
    public final void synpred265_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred265_PL_SQL7553);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_PL_SQL

    // $ANTLR start synpred266_PL_SQL
    public final void synpred266_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:39: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:39: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred266_PL_SQL7573);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_PL_SQL

    // $ANTLR start synpred267_PL_SQL
    public final void synpred267_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:52: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:52: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred267_PL_SQL7577); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred267_PL_SQL7579);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_PL_SQL

    // $ANTLR start synpred275_PL_SQL
    public final void synpred275_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:31: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred275_PL_SQL7778); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_PL_SQL

    // $ANTLR start synpred277_PL_SQL
    public final void synpred277_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:58: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:58: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:58: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:59: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred277_PL_SQL7787); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred277_PL_SQL7789); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred277_PL_SQL

    // $ANTLR start synpred278_PL_SQL
    public final void synpred278_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:22: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:22: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred278_PL_SQL7815); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_PL_SQL

    // $ANTLR start synpred280_PL_SQL
    public final void synpred280_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:49: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:49: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:49: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:50: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred280_PL_SQL7824); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred280_PL_SQL7826); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred280_PL_SQL

    // $ANTLR start synpred282_PL_SQL
    public final void synpred282_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:31: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:31: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred282_PL_SQL7842);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_PL_SQL

    // $ANTLR start synpred283_PL_SQL
    public final void synpred283_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:44: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:44: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred283_PL_SQL7846); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred283_PL_SQL7848);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_PL_SQL

    // $ANTLR start synpred290_PL_SQL
    public final void synpred290_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:52: ( open_params )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:52: open_params
        {
        pushFollow(FOLLOW_open_params_in_synpred290_PL_SQL8088);
        open_params();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_PL_SQL

    // $ANTLR start synpred294_PL_SQL
    public final void synpred294_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:19: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred294_PL_SQL8109); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:31: ( select_statement | STRING | universal_identifier )
        int alt268=3;
        switch ( input.LA(1) ) {
        case SELECT_KEYWORD:
            {
            alt268=1;
            }
            break;
        case STRING:
            {
            alt268=2;
            }
            break;
        case IDENTIFIER:
        case EXT_IDENTIFIER:
        case INTERVAL_KEYWORD:
        case RESULT_KEYWORD:
            {
            alt268=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 268, 0, input);

            throw nvae;
        }

        switch (alt268) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:32: select_statement
                {
                pushFollow(FOLLOW_select_statement_in_synpred294_PL_SQL8112);
                select_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:51: STRING
                {
                match(input,STRING,FOLLOW_STRING_in_synpred294_PL_SQL8116); if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:60: universal_identifier
                {
                pushFollow(FOLLOW_universal_identifier_in_synpred294_PL_SQL8120);
                universal_identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:82: ( using_clause )?
        int alt269=2;
        int LA269_0 = input.LA(1);

        if ( (LA269_0==USING_KEYWORD) ) {
            alt269=1;
        }
        switch (alt269) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred294_PL_SQL8123);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred294_PL_SQL

    // $ANTLR start synpred298_PL_SQL
    public final void synpred298_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:37: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
        {
        match(input,200,FOLLOW_200_in_synpred298_PL_SQL8161); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:41: ( '+' | '-' )?
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( ((LA270_0>=204 && LA270_0<=205)) ) {
            alt270=1;
        }
        switch (alt270) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=204 && input.LA(1)<=205) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred298_PL_SQL8170); if (state.failed) return ;
        match(input,201,FOLLOW_201_in_synpred298_PL_SQL8172); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_PL_SQL

    // $ANTLR start synpred303_PL_SQL
    public final void synpred303_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:25: ( ( identifier data_type ( variable_declaration_part )? ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:25: ( identifier data_type ( variable_declaration_part )? )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:25: ( identifier data_type ( variable_declaration_part )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:26: identifier data_type ( variable_declaration_part )?
        {
        pushFollow(FOLLOW_identifier_in_synpred303_PL_SQL8274);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred303_PL_SQL8276);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:24: ( variable_declaration_part )?
        int alt271=2;
        int LA271_0 = input.LA(1);

        if ( (LA271_0==NOT_OPEARTOR||LA271_0==DEFAULT_KEYWORD||LA271_0==220) ) {
            alt271=1;
        }
        switch (alt271) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                {
                pushFollow(FOLLOW_variable_declaration_part_in_synpred303_PL_SQL8302);
                variable_declaration_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred303_PL_SQL

    // $ANTLR start synpred304_PL_SQL
    public final void synpred304_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:9: ( ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
        {
        pushFollow(FOLLOW_identifier_in_synpred304_PL_SQL8320);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_synpred304_PL_SQL8322); if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred304_PL_SQL8324);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variable_declaration_part_in_synpred304_PL_SQL8350);
        variable_declaration_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred304_PL_SQL

    // $ANTLR start synpred307_PL_SQL
    public final void synpred307_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:11: ( ( identifier EXCEPTION_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:11: ( identifier EXCEPTION_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:11: ( identifier EXCEPTION_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:12: identifier EXCEPTION_KEYWORD
        {
        pushFollow(FOLLOW_identifier_in_synpred307_PL_SQL8388);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_synpred307_PL_SQL8390); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred307_PL_SQL

    // $ANTLR start synpred321_PL_SQL
    public final void synpred321_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:30: ( interval_year_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:30: interval_year_type
        {
        pushFollow(FOLLOW_interval_year_type_in_synpred321_PL_SQL8564);
        interval_year_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_PL_SQL

    // $ANTLR start synpred322_PL_SQL
    public final void synpred322_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:51: ( interval_day_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:51: interval_day_type
        {
        pushFollow(FOLLOW_interval_day_type_in_synpred322_PL_SQL8568);
        interval_day_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_PL_SQL

    // $ANTLR start synpred324_PL_SQL
    public final void synpred324_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:13: ( ( ( REF_KEYWORD )? universal_identifier ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:13: ( ( REF_KEYWORD )? universal_identifier )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:13: ( ( REF_KEYWORD )? universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:14: ( REF_KEYWORD )? universal_identifier
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:14: ( REF_KEYWORD )?
        int alt274=2;
        int LA274_0 = input.LA(1);

        if ( (LA274_0==REF_KEYWORD) ) {
            alt274=1;
        }
        switch (alt274) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                {
                match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_synpred324_PL_SQL8586); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_universal_identifier_in_synpred324_PL_SQL8589);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred324_PL_SQL

    // $ANTLR start synpred329_PL_SQL
    public final void synpred329_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:40: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
        {
        match(input,200,FOLLOW_200_in_synpred329_PL_SQL8609); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:44: ( '+' )?
        int alt275=2;
        int LA275_0 = input.LA(1);

        if ( (LA275_0==204) ) {
            alt275=1;
        }
        switch (alt275) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,204,FOLLOW_204_in_synpred329_PL_SQL8611); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred329_PL_SQL8614); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:65: ( CHAR_TYPE | BYTE_TYPE )?
        int alt276=2;
        int LA276_0 = input.LA(1);

        if ( ((LA276_0>=CHAR_TYPE && LA276_0<=BYTE_TYPE)) ) {
            alt276=1;
        }
        switch (alt276) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,201,FOLLOW_201_in_synpred329_PL_SQL8625); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred329_PL_SQL

    // $ANTLR start synpred330_PL_SQL
    public final void synpred330_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:18: ( TIMESTAMP_TYPE )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:18: TIMESTAMP_TYPE
        {
        match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_synpred330_PL_SQL8634); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_PL_SQL

    // $ANTLR start synpred353_PL_SQL
    public final void synpred353_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:25: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:25: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred353_PL_SQL9103);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_PL_SQL

    // $ANTLR start synpred377_PL_SQL
    public final void synpred377_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:14: ( IS_KEYWORD NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:14: IS_KEYWORD NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred377_PL_SQL9264); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred377_PL_SQL9266); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_PL_SQL

    // $ANTLR start synpred378_PL_SQL
    public final void synpred378_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:40: ( IS_KEYWORD NOT_OPERATOR NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:681:40: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred378_PL_SQL9270); if (state.failed) return ;
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred378_PL_SQL9272); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred378_PL_SQL9274); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_PL_SQL

    // $ANTLR start synpred379_PL_SQL
    public final void synpred379_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:24: ( unary_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:24: unary_op
        {
        pushFollow(FOLLOW_unary_op_in_synpred379_PL_SQL9286);
        unary_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_PL_SQL

    // $ANTLR start synpred380_PL_SQL
    public final void synpred380_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:51: ( postfix_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:51: postfix_op
        {
        pushFollow(FOLLOW_postfix_op_in_synpred380_PL_SQL9291);
        postfix_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_PL_SQL

    // $ANTLR start synpred381_PL_SQL
    public final void synpred381_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:74: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:74: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred381_PL_SQL9298);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_PL_SQL

    // $ANTLR start synpred382_PL_SQL
    public final void synpred382_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:64: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:64: operator ( universal_expression | ( '(' select_statement ')' ) )
        {
        pushFollow(FOLLOW_operator_in_synpred382_PL_SQL9295);
        operator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:73: ( universal_expression | ( '(' select_statement ')' ) )
        int alt277=2;
        int LA277_0 = input.LA(1);

        if ( (LA277_0==NUMBER_UNSIGNED||LA277_0==STRING||(LA277_0>=IDENTIFIER && LA277_0<=EXT_IDENTIFIER)||LA277_0==NOT_OPERATOR||LA277_0==NULL_KEYWORD||(LA277_0>=TRUE_KEYWORD && LA277_0<=FALSE_KEYWORD)||LA277_0==INTERVAL_KEYWORD||LA277_0==REPLACE_KEYWORD||LA277_0==IN_KEYWORD||LA277_0==CASE_KEYWORD||(LA277_0>=SQLCODE_KEYWORD && LA277_0<=SQLERRM_KEYWORD)||LA277_0==RESULT_KEYWORD||(LA277_0>=204 && LA277_0<=205)) ) {
            alt277=1;
        }
        else if ( (LA277_0==200) ) {
            int LA277_2 = input.LA(2);

            if ( (synpred381_PL_SQL()) ) {
                alt277=1;
            }
            else if ( (true) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 277, 0, input);

            throw nvae;
        }
        switch (alt277) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:74: universal_expression
                {
                pushFollow(FOLLOW_universal_expression_in_synpred382_PL_SQL9298);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:97: ( '(' select_statement ')' )
                {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:97: ( '(' select_statement ')' )
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:98: '(' select_statement ')'
                {
                match(input,200,FOLLOW_200_in_synpred382_PL_SQL9303); if (state.failed) return ;
                pushFollow(FOLLOW_select_statement_in_synpred382_PL_SQL9305);
                select_statement();

                state._fsp--;
                if (state.failed) return ;
                match(input,201,FOLLOW_201_in_synpred382_PL_SQL9307); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred382_PL_SQL

    // $ANTLR start synpred390_PL_SQL
    public final void synpred390_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:58: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:58: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred390_PL_SQL9410);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_PL_SQL

    // $ANTLR start synpred391_PL_SQL
    public final void synpred391_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:36: ( call_statement_param ( in_notin_expression )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:36: call_statement_param ( in_notin_expression )?
        {
        pushFollow(FOLLOW_call_statement_param_in_synpred391_PL_SQL9407);
        call_statement_param();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:57: ( in_notin_expression )?
        int alt278=2;
        int LA278_0 = input.LA(1);

        if ( (LA278_0==NOT_OPERATOR||LA278_0==IN_KEYWORD) ) {
            alt278=1;
        }
        switch (alt278) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:58: in_notin_expression
                {
                pushFollow(FOLLOW_in_notin_expression_in_synpred391_PL_SQL9410);
                in_notin_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred391_PL_SQL

    // $ANTLR start synpred401_PL_SQL
    public final void synpred401_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:61: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:61: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred401_PL_SQL9520);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_PL_SQL

    // $ANTLR start synpred404_PL_SQL
    public final void synpred404_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:24: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
        {
        match(input,200,FOLLOW_200_in_synpred404_PL_SQL9530); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:29: ( universal_expression ( ',' universal_expression )* )?
        int alt283=2;
        int LA283_0 = input.LA(1);

        if ( (LA283_0==NUMBER_UNSIGNED||LA283_0==STRING||(LA283_0>=IDENTIFIER && LA283_0<=EXT_IDENTIFIER)||LA283_0==NOT_OPERATOR||LA283_0==NULL_KEYWORD||(LA283_0>=TRUE_KEYWORD && LA283_0<=FALSE_KEYWORD)||LA283_0==INTERVAL_KEYWORD||LA283_0==REPLACE_KEYWORD||LA283_0==IN_KEYWORD||LA283_0==CASE_KEYWORD||(LA283_0>=SQLCODE_KEYWORD && LA283_0<=SQLERRM_KEYWORD)||LA283_0==RESULT_KEYWORD||LA283_0==200||(LA283_0>=204 && LA283_0<=205)) ) {
            alt283=1;
        }
        switch (alt283) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:30: universal_expression ( ',' universal_expression )*
                {
                pushFollow(FOLLOW_universal_expression_in_synpred404_PL_SQL9533);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:51: ( ',' universal_expression )*
                loop282:
                do {
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==COMMA) ) {
                        alt282=1;
                    }


                    switch (alt282) {
                	case 1 :
                	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:52: ',' universal_expression
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred404_PL_SQL9536); if (state.failed) return ;
                	    pushFollow(FOLLOW_universal_expression_in_synpred404_PL_SQL9538);
                	    universal_expression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop282;
                    }
                } while (true);


                }
                break;

        }

        match(input,201,FOLLOW_201_in_synpred404_PL_SQL9545); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred404_PL_SQL

    // Delegated rules

    public final boolean synpred241_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA219 dfa219 = new DFA219(this);
    static final String DFA2_eotS =
        "\12\uffff";
    static final String DFA2_eofS =
        "\12\uffff";
    static final String DFA2_minS =
        "\1\100\1\0\4\uffff\1\0\3\uffff";
    static final String DFA2_maxS =
        "\1\u00a3\1\0\4\uffff\1\0\3\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\6\1\7\1\5\1\1\1\uffff\1\3\1\4\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\0\4\uffff\1\1\3\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\1\20\uffff\1\5\14\uffff\1\11\62\uffff\1\6\21\uffff\1\4",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "443:19: ( function_declaration | procedure_declaration | package_spec | package_body | trigger_declaration | type_spec_declaration | type_body_declaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_PL_SQL()) ) {s = 7;}

                        else if ( (synpred6_PL_SQL()) ) {s = 8;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA113_eotS =
        "\22\uffff";
    static final String DFA113_eofS =
        "\22\uffff";
    static final String DFA113_minS =
        "\1\4\21\uffff";
    static final String DFA113_maxS =
        "\1\u00cd\21\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21";
    static final String DFA113_specialS =
        "\22\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\1\3\uffff\1\1\14\uffff\2\1\12\uffff\1\1\32\uffff\1\1\4\uffff"+
            "\2\1\6\uffff\1\1\6\uffff\1\1\2\uffff\1\7\1\1\12\uffff\1\10\2"+
            "\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\4\uffff\1\11\1\20\1\uffff"+
            "\1\1\1\12\7\uffff\1\6\1\uffff\1\13\1\uffff\1\6\1\14\1\uffff"+
            "\1\15\4\uffff\1\16\1\uffff\1\17\6\uffff\3\6\1\21\4\uffff\2\6"+
            "\1\uffff\1\6\6\uffff\2\1\1\6\33\uffff\1\1\12\uffff\1\1\3\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "535:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );";
        }
    }
    static final String DFA114_eotS =
        "\13\uffff";
    static final String DFA114_eofS =
        "\13\uffff";
    static final String DFA114_minS =
        "\1\147\12\uffff";
    static final String DFA114_maxS =
        "\1\u00a1\12\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA114_specialS =
        "\13\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\1\20\uffff\1\2\3\uffff\1\3\20\uffff\1\5\1\6\1\7\5\uffff"+
            "\1\10\1\11\1\uffff\1\12\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "541:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );";
        }
    }
    static final String DFA116_eotS =
        "\66\uffff";
    static final String DFA116_eofS =
        "\66\uffff";
    static final String DFA116_minS =
        "\1\4\1\0\10\uffff\1\0\5\uffff\1\0\3\uffff\1\0\1\uffff\1\0\3\uffff"+
        "\1\0\1\uffff\1\0\2\uffff\1\0\1\uffff\1\0\2\uffff\1\0\5\uffff\1\0"+
        "\4\uffff\1\0\4\uffff\1\0\1\uffff";
    static final String DFA116_maxS =
        "\1\u00da\1\0\10\uffff\1\0\5\uffff\1\0\3\uffff\1\0\1\uffff\1\0\3"+
        "\uffff\1\0\1\uffff\1\0\2\uffff\1\0\1\uffff\1\0\2\uffff\1\0\5\uffff"+
        "\1\0\4\uffff\1\0\4\uffff\1\0\1\uffff";
    static final String DFA116_acceptS =
        "\2\uffff\1\3\1\44\1\2\1\34\1\16\1\43\1\13\1\3\1\uffff\1\6\1\36"+
        "\1\22\1\44\1\42\1\uffff\1\5\1\20\1\14\1\uffff\1\30\1\uffff\1\37"+
        "\1\40\1\35\1\uffff\1\33\1\uffff\1\31\1\4\1\uffff\1\17\1\uffff\1"+
        "\25\1\23\1\uffff\1\41\1\15\1\7\1\12\1\1\1\uffff\1\26\1\45\1\11\1"+
        "\27\1\uffff\1\46\1\21\1\10\1\24\1\uffff\1\32";
    static final String DFA116_specialS =
        "\1\uffff\1\0\10\uffff\1\1\5\uffff\1\2\3\uffff\1\3\1\uffff\1\4\3"+
        "\uffff\1\5\1\uffff\1\6\2\uffff\1\7\1\uffff\1\10\2\uffff\1\11\5\uffff"+
        "\1\12\4\uffff\1\13\4\uffff\1\14\1\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\52\1\5\1\31\1\uffff\1\64\1\50\12\uffff\1\4\2\24\1\51\11"+
            "\uffff\1\12\20\uffff\1\32\11\uffff\1\44\4\uffff\2\16\1\uffff"+
            "\1\61\4\uffff\1\24\3\uffff\1\26\2\uffff\1\41\1\uffff\1\47\1"+
            "\uffff\1\20\22\uffff\1\7\1\56\2\uffff\1\17\3\uffff\1\34\1\uffff"+
            "\1\15\2\uffff\1\22\3\uffff\1\7\3\uffff\1\7\3\uffff\1\36\1\uffff"+
            "\1\10\1\23\6\uffff\1\62\1\55\1\uffff\3\7\4\uffff\1\46\2\7\1"+
            "\uffff\1\37\6\uffff\2\16\1\7\1\63\13\uffff\1\6\16\uffff\1\24"+
            "\2\uffff\1\43\4\uffff\1\54\2\uffff\1\57\1\uffff\1\11\1\uffff"+
            "\2\1\15\11",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "547:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_PL_SQL()) ) {s = 2;}

                        else if ( (synpred221_PL_SQL()) ) {s = 3;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA116_10 = input.LA(1);

                         
                        int index116_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_PL_SQL()) ) {s = 11;}

                        else if ( (synpred215_PL_SQL()) ) {s = 12;}

                        else if ( (synpred221_PL_SQL()) ) {s = 3;}

                         
                        input.seek(index116_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA116_16 = input.LA(1);

                         
                        int index116_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_PL_SQL()) ) {s = 17;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA116_20 = input.LA(1);

                         
                        int index116_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_PL_SQL()) ) {s = 21;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA116_22 = input.LA(1);

                         
                        int index116_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_PL_SQL()) ) {s = 23;}

                        else if ( (synpred217_PL_SQL()) ) {s = 24;}

                         
                        input.seek(index116_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA116_26 = input.LA(1);

                         
                        int index116_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_PL_SQL()) ) {s = 9;}

                        else if ( (synpred212_PL_SQL()) ) {s = 27;}

                         
                        input.seek(index116_26);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA116_28 = input.LA(1);

                         
                        int index116_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_PL_SQL()) ) {s = 29;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_28);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA116_31 = input.LA(1);

                         
                        int index116_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_PL_SQL()) ) {s = 32;}

                        else if ( (synpred220_PL_SQL()) ) {s = 7;}

                         
                        input.seek(index116_31);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA116_33 = input.LA(1);

                         
                        int index116_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred206_PL_SQL()) ) {s = 34;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_33);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA116_36 = input.LA(1);

                         
                        int index116_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_PL_SQL()) ) {s = 37;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_36);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA116_42 = input.LA(1);

                         
                        int index116_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_PL_SQL()) ) {s = 43;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA116_47 = input.LA(1);

                         
                        int index116_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_PL_SQL()) ) {s = 14;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index116_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA116_52 = input.LA(1);

                         
                        int index116_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_PL_SQL()) ) {s = 53;}

                        else if ( (synpred221_PL_SQL()) ) {s = 14;}

                         
                        input.seek(index116_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\21\uffff";
    static final String DFA123_eofS =
        "\21\uffff";
    static final String DFA123_minS =
        "\1\4\1\0\3\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff";
    static final String DFA123_maxS =
        "\1\u00da\1\0\3\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff";
    static final String DFA123_acceptS =
        "\2\uffff\1\1\1\7\1\10\1\uffff\1\2\1\uffff\1\10\1\uffff\1\3\1\uffff"+
        "\1\6\1\uffff\1\4\1\uffff\1\5";
    static final String DFA123_specialS =
        "\1\uffff\1\0\3\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1"+
        "\uffff\1\5\1\uffff\1\6\1\uffff}>";
    static final String[] DFA123_transitionS = {
            "\3\7\1\uffff\2\7\12\uffff\4\7\11\uffff\1\7\20\uffff\1\7\3\uffff"+
            "\3\10\1\uffff\1\15\1\17\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"+
            "\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\1\10\1\7\12\uffff\2"+
            "\10\1\uffff\4\10\1\uffff\2\7\2\uffff\1\7\2\10\1\uffff\1\7\1"+
            "\10\1\7\2\uffff\1\7\3\uffff\1\7\1\uffff\1\10\1\uffff\1\7\1\10"+
            "\1\uffff\1\10\1\7\1\11\2\7\1\10\1\uffff\1\10\3\uffff\2\7\1\uffff"+
            "\1\13\2\7\1\10\3\uffff\3\7\1\uffff\1\7\6\uffff\2\7\1\1\1\7\4"+
            "\uffff\1\5\6\uffff\1\7\16\uffff\1\7\2\uffff\1\7\1\uffff\1\10"+
            "\2\uffff\1\7\1\10\1\uffff\1\7\1\10\1\7\1\uffff\17\7",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()+ loopback of 565:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_PL_SQL()) ) {s = 2;}

                        else if ( (synpred237_PL_SQL()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_PL_SQL()) ) {s = 6;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_7 = input.LA(1);

                         
                        int index123_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index123_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_9 = input.LA(1);

                         
                        int index123_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_PL_SQL()) ) {s = 10;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index123_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_11 = input.LA(1);

                         
                        int index123_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_PL_SQL()) ) {s = 2;}

                        else if ( (synpred236_PL_SQL()) ) {s = 12;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index123_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_13 = input.LA(1);

                         
                        int index123_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 14;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index123_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA123_15 = input.LA(1);

                         
                        int index123_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_PL_SQL()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index123_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\16\uffff";
    static final String DFA184_eofS =
        "\16\uffff";
    static final String DFA184_minS =
        "\1\11\1\0\5\uffff\1\0\6\uffff";
    static final String DFA184_maxS =
        "\1\u00bd\1\0\5\uffff\1\0\6\uffff";
    static final String DFA184_acceptS =
        "\2\uffff\1\11\1\12\1\6\1\5\1\3\1\uffff\1\7\1\10\1\2\1\1\1\4\1\11";
    static final String DFA184_specialS =
        "\1\uffff\1\0\5\uffff\1\1\6\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\13\1\12\1\6\2\14\1\uffff\1\5\1\4\4\uffff\2\1\62\uffff\1"+
            "\7\57\uffff\1\15\103\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "644:1: data_type : ( SOME_TYPES | SCALE_TYPES | SIZE_TYPES | char_types | RAW_TYPE | timestamp_type | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_1 = input.LA(1);

                         
                        int index184_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA184_7 = input.LA(1);

                         
                        int index184_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_PL_SQL()) ) {s = 8;}

                        else if ( (synpred322_PL_SQL()) ) {s = 9;}

                        else if ( (synpred324_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA210_eotS =
        "\26\uffff";
    static final String DFA210_eofS =
        "\26\uffff";
    static final String DFA210_minS =
        "\1\5\25\uffff";
    static final String DFA210_maxS =
        "\1\u00dd\25\uffff";
    static final String DFA210_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String DFA210_specialS =
        "\26\uffff}>";
    static final String[] DFA210_transitionS = {
            "\1\22\1\23\32\uffff\1\25\111\uffff\1\24\37\uffff\1\25\76\uffff"+
            "\1\4\1\uffff\1\1\1\2\1\3\1\5\1\6\1\16\1\17\1\20\1\21\1\11\1"+
            "\12\1\13\1\14\1\15\2\uffff\1\7\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
    static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
    static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
    static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
    static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
    static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
    static final short[][] DFA210_transition;

    static {
        int numStates = DFA210_transitionS.length;
        DFA210_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
        }
    }

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;
        }
        public String getDescription() {
            return "676:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );";
        }
    }
    static final String DFA219_eotS =
        "\12\uffff";
    static final String DFA219_eofS =
        "\12\uffff";
    static final String DFA219_minS =
        "\1\4\11\uffff";
    static final String DFA219_maxS =
        "\1\u00c8\11\uffff";
    static final String DFA219_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA219_specialS =
        "\12\uffff}>";
    static final String[] DFA219_transitionS = {
            "\1\3\3\uffff\1\5\14\uffff\2\10\12\uffff\1\4\32\uffff\1\6\4"+
            "\uffff\1\1\1\2\6\uffff\1\10\6\uffff\1\10\3\uffff\1\4\32\uffff"+
            "\1\7\57\uffff\2\10\34\uffff\1\10\12\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
    static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
    static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
    static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
    static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
    static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
    static final short[][] DFA219_transition;

    static {
        int numStates = DFA219_transitionS.length;
        DFA219_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
        }
    }

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = DFA219_eot;
            this.eof = DFA219_eof;
            this.min = DFA219_min;
            this.max = DFA219_max;
            this.accept = DFA219_accept;
            this.special = DFA219_special;
            this.transition = DFA219_transition;
        }
        public String getDescription() {
            return "683:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );";
        }
    }
 

    public static final BitSet FOLLOW_source_element_in_grammar_def4434 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_grammar_def4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_source_element4447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_replace_part_in_source_element4470 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020001L,0x0000000800020000L});
    public static final BitSet FOLLOW_function_declaration_in_source_element4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_source_element4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_spec_in_source_element4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_source_element4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trigger_declaration_in_source_element4527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_declaration_in_source_element4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_body_declaration_in_source_element4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_universal_identifier4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_universal_identifier4563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_label4570 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_label4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_label4574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_KEYWORD_in_create_replace_part4581 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_create_replace_part4584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_create_replace_part4586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_as_is_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_parameter_declaration4630 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4632 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4634 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4637 = new BitSet(new long[]{0x2004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000200L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4640 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4642 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration4671 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4673 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4675 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4678 = new BitSet(new long[]{0x2004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000200L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4681 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4683 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_parameter_declaration4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_function_spec4696 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_function_name_in_function_spec4714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameter_declaration_in_function_spec4716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_function_spec4735 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_function_spec4737 = new BitSet(new long[]{0x0000000000000002L,0x000000003C800000L});
    public static final BitSet FOLLOW_invoker_clause_in_function_spec4739 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_function_spec_add2_in_function_spec4743 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_universal_identifier_in_function_name4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_function_name4756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_KEYWORD_in_invoker_clause4763 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_set_in_invoker_clause4765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_spec_add20 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration4797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec4806 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec4808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_parameter_declaration_in_procedure_spec4810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_invoker_clause_in_procedure_spec4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_procedure_name4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_procedure_name4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration4849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_procedure_declaration4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_function_procedure_body4858 = new BitSet(new long[]{0x0040000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_variable_declaration_in_function_procedure_body4861 = new BitSet(new long[]{0x0040000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_function_procedure_body4866 = new BitSet(new long[]{0x0040000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_function_procedure_body4870 = new BitSet(new long[]{0x0040000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_function_procedure_body4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_spec4882 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_package_spec_name_in_package_spec4884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L});
    public static final BitSet FOLLOW_invoker_clause_in_package_spec4886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_package_spec4889 = new BitSet(new long[]{0x0080000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_spec4907 = new BitSet(new long[]{0x0080000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_function_spec_in_package_spec4913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_spec_in_package_spec4917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec4920 = new BitSet(new long[]{0x0080000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_spec4941 = new BitSet(new long[]{0x0000000000600002L,0x0200000000000200L,0x2000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec4943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec4946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_package_spec4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec_name4957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_spec_name4961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_body4968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_package_body4970 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_package_body_name_in_package_body4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_package_body4974 = new BitSet(new long[]{0x00C0000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_body4992 = new BitSet(new long[]{0x00C0000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_package_body4996 = new BitSet(new long[]{0x00C0000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_package_body5000 = new BitSet(new long[]{0x00C0000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_package_body5020 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_package_body5023 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_body5044 = new BitSet(new long[]{0x0000000000600002L,0x0200000000000200L,0x2000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body5046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_body5049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_package_body5052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body_name5060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_body_name5064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5071 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_declaration5073 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_trigger_type_in_trigger_declaration5075 = new BitSet(new long[]{0x1540000200600110L,0xBF01B0BCC01B1207L,0x200380038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_follows_part_in_trigger_declaration5077 = new BitSet(new long[]{0x1540000200600110L,0xBF01B0BCC01B1207L,0x200300038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_trigger_part_in_trigger_declaration5080 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_anonymous_block_in_trigger_declaration5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_trigger_name5111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_trigger_name5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_KEYWORD_in_follows_part5122 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_follows_part5124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_trigger_part5131 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_trigger_part5141 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_trigger_part5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_KEYWORD_in_trigger_type5153 = new BitSet(new long[]{0x0000000000200000L,0x1000000000000200L,0x2000000200002000L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_KEYWORD_in_trigger_type5182 = new BitSet(new long[]{0x0000000000200000L,0x1000000000000200L,0x2000000200002000L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTEAD_KEYWORD_in_trigger_type5211 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_trigger_type5213 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200002000L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_trigger_type5235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5242 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200002000L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger5244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_non_dml_trigger5255 = new BitSet(new long[]{0x0000000000200040L,0x0000000000000200L,0x2000008000000000L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_non_dml_trigger5257 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000008000000000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_non_dml_trigger5262 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_non_dml_trigger5264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_dml_event_clause5273 = new BitSet(new long[]{0x0000000000000040L,0x1004000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_dml_event_clause5277 = new BitSet(new long[]{0x0000000000000040L,0x1004000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5303 = new BitSet(new long[]{0x0000000000000040L,0x1004000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5305 = new BitSet(new long[]{0x0000000000000040L,0x1004000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_dml_event_clause5330 = new BitSet(new long[]{0x0000000000000000L,0x1004000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5333 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000008200002000L});
    public static final BitSet FOLLOW_dml_event_clause_part_in_dml_event_clause5358 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_referencing_clause_in_dml_event_clause5360 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_dml_event_clause5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EACH_KEYWORD_in_dml_event_clause5386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_dml_event_clause5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5397 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_factor5400 = new BitSet(new long[]{0x0004000000600002L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_clause_factor5402 = new BitSet(new long[]{0x0000000000600002L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_dml_event_clause_part5412 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000010000000000L});
    public static final BitSet FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5416 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5418 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_dml_event_clause_part5420 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_part5422 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_part5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_set_in_referencing_clause5438 = new BitSet(new long[]{0x0000000000200000L,0x0000000000040200L,0x20000C0000000000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_referencing_clause5471 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x20000C0000000000L});
    public static final BitSet FOLLOW_OLD_KEYWORD_in_referencing_clause5475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_NEW_KEYWORD_in_referencing_clause5479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_identifier_in_referencing_clause5483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_spec_declaration5494 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_type_spec_name_in_type_spec_declaration5496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0024000000000000L});
    public static final BitSet FOLLOW_type_oid_part_in_type_spec_declaration5498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0024000000000000L});
    public static final BitSet FOLLOW_invoker_clause_in_type_spec_declaration5501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000842000L,0x0024000000000000L});
    public static final BitSet FOLLOW_type_spec_types_in_type_spec_declaration5504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_spec_declaration5530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_type_spec_declaration5533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_spec_name5541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_spec_name5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OID_KEYWORD_in_type_oid_part5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_type_oid_part5554 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_type_oid_part5556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_type_oid_part5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_type_spec_types5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_type_spec_types5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_in_type_spec_types5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_object_type5583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_OBJECT_KEYWORD_in_object_type5585 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x00C0000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNDER_KEYWORD_in_object_type5591 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_object_type5593 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x00C0000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_object_type_part_in_object_type5611 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_object_type5633 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_object_type_part5650 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_object_type_part5653 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_object_type_part5655 = new BitSet(new long[]{0x0004000200200000L,0x0000000000000200L,0xEFC0000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5657 = new BitSet(new long[]{0x0000000200200000L,0x0000000000000200L,0xEFC0000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_element_spec_in_object_type_part5663 = new BitSet(new long[]{0x0004000200000000L,0x0000000000000000L,0xCFC0000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5665 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0xCFC0000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_object_type_part5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_element_spec5677 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0xCFC0000000000000L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec5682 = new BitSet(new long[]{0x0004000200000002L,0x0000200000000000L,0xCFC0000000000000L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec5686 = new BitSet(new long[]{0x0004000200000002L,0x0000200000000000L,0xCFC0000000000000L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec5690 = new BitSet(new long[]{0x0004000200000002L,0x0000200000000000L,0xCFC0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_element_spec5693 = new BitSet(new long[]{0x0000000200000002L,0x0000200000000000L,0xCFC0000000000000L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_pragma_clause5725 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_pragma_clause5727 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause5730 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_pragma_clause5732 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_pragma_clause5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec5751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec5753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_spec5760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec5763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec5766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_spec5768 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec5789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_spec5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_constructor_spec_part5799 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x3000000000000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part5802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part5804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_constructor_spec_part5806 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part5808 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_constructor_spec_part5837 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec_part5839 = new BitSet(new long[]{0x0004000000200000L,0x0000000000000200L,0x2000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part5841 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_constructor_spec_part5846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_constructor_spec_part5872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part5874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_constructor_spec_part5876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_RESULT_KEYWORD_in_constructor_spec_part5878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_spec5885 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_inheritance_clauses5906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x01C0000000000000L});
    public static final BitSet FOLLOW_set_in_inheritance_clauses5909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_varray_type5926 = new BitSet(new long[]{0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_varray_type5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_nested_table_type5935 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_nested_table_type5937 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_nested_table_type5939 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_nested_table_type5941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_body_declaration5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_type_body_declaration5950 = new BitSet(new long[]{0x0000000000E00000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_type_body_name_in_type_body_declaration5952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_as_is_part_in_type_body_declaration5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L,0xCEC0000000000000L});
    public static final BitSet FOLLOW_subprogram_declaration_in_type_body_declaration5982 = new BitSet(new long[]{0x0084000000000000L,0x0000000040020000L,0xCEC0000000000000L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_declaration5986 = new BitSet(new long[]{0x0084000000000000L,0x0000000040020000L,0xCEC0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_type_body_declaration5989 = new BitSet(new long[]{0x0080000000000000L,0x0000000040020000L,0xCEC0000000000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_type_body_declaration5995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_body_declaration6021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_type_body_declaration6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_body_name6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_body_name6036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_declaration6043 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L,0x0EC0000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_subprogram_declaration6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_subprogram_declaration6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprogram_declaration6086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_declaration6094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6102 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_declaration6130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_declaration6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_function_procedure_body_in_constructor_declaration6135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration6142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_function_declaration_in_map_order_func_declaration6152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_block6160 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_block6164 = new BitSet(new long[]{0x13C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_exception_section_in_block6169 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_block6180 = new BitSet(new long[]{0x0000000000600002L,0x0200000000000200L,0x2000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_universal_identifier_in_block6182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_SEPARATOR_in_block6185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_block6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_declare_section_in_anonymous_block6204 = new BitSet(new long[]{0x0040000000200000L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_anonymous_block6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_executable_section6214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_section6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_executable_case_section6227 = new BitSet(new long[]{0x1000000200600110L,0xB701B0BC80190206L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_statements_in_executable_case_section6231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SEPARATOR_in_executable_case_section6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_case_section6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement6247 = new BitSet(new long[]{0x1000000200600110L,0xB701B0BC80190206L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_statements_in_statement6251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SEPARATOR_in_statement6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statements6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statements6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statements6268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statements6285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_loop_statement_in_statements6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_statements6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statements6310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statements6314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statements6318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_statements6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statements6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_statement_in_statements6343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statements6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_statements6364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statements6368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_inline_statement_in_statements6372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_statements6389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_sql_statements6396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_sql_statements6400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_sql_statements6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_sql_statements6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_sql_statements6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_sql_statements6433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_sql_statements6437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_sql_statements6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_sql_statements6462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_statement_in_sql_statements6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sql_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_sql_not_parsed6560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEYWORD_in_sql_not_parsed6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_sql_not_parsed6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_sql_not_parsed6572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed6576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed6580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed6582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_sql_not_parsed6601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_sql_not_parsed6605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed6609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_sql_not_parsed6613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_sql_not_parsed6632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed6640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_sql_not_parsed6644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_sql_not_parsed6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_sql_not_parsed6667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_sql_not_parsed6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_sql_not_parsed6675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_KEYWORD_in_sql_not_parsed6679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed6698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed6702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_KEYWORD_in_sql_not_parsed6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sql_not_parsed6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_sql_not_parsed6733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_sql_not_parsed6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_not_parsed6756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_sql_not_parsed6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_sql_not_parsed6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed6787 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed6789 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed6795 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed6801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_sql_not_parsed6805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_sql_not_parsed6825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_sql_not_parsed6845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THE_REST_in_sql_not_parsed6849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_sql_not_parsed6854 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF721L});
    public static final BitSet FOLLOW_sql_not_parsed_in_sql_not_parsed6857 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF721L});
    public static final BitSet FOLLOW_201_in_sql_not_parsed6861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_KEYWORD_in_select_statement6872 = new BitSet(new long[]{0x1004000200F00370L,0x131289A000152216L,0x200040878170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_select_statement6876 = new BitSet(new long[]{0x1004000200F00372L,0x131289A000152216L,0x200040878170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_select_statement6880 = new BitSet(new long[]{0x1004000200F00372L,0x131289A000152216L,0x200040878170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_select_statement6886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_select_statement6888 = new BitSet(new long[]{0x1004000200F00372L,0x131289A000152216L,0x200040878170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_COMMIT_KEYWORD_in_commit_statement6898 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_commit_statement6900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_delete_statement6908 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_delete_statement6911 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_insert_statement6920 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_insert_statement6923 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_LOCK_KEYWORD_in_lock_table_statement6932 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_lock_table_statement6934 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_lock_table_statement6937 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_MERGE_KEYWORD_in_merge_statement6946 = new BitSet(new long[]{0x1C04000200F00370L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_merge_statement6949 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_merge_statement6953 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_merge_statement6975 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_merge_statement6979 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_merge_statement6983 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_merge_statement6987 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_merge_statement7009 = new BitSet(new long[]{0x1C04000200F00372L,0x1312898000152216L,0x200040878170EC0FL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7018 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_rollback_statement7020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7028 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_savepoint_statement7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_set_transaction_statement7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7039 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_set_transaction_statement7042 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_update_statement7051 = new BitSet(new long[]{0x1004000200F00370L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_sql_not_parsed_in_update_statement7054 = new BitSet(new long[]{0x1004000200F00372L,0x1312898000152216L,0x200040078170EC0DL,0x0000000007FFF521L});
    public static final BitSet FOLLOW_GOTO_KEYWORD_in_goto_statement7065 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_return_statement7074 = new BitSet(new long[]{0x1000000200600112L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_return_statement7076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7084 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_if_statement7086 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7088 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7091 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BFC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_ELSIF_KEYWORD_in_if_statement7111 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_if_statement7113 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7115 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7118 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BFC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_if_statement7140 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7143 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_END_KEYWORD_in_if_statement7164 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7173 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_loop_statement7176 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_END_KEYWORD_in_loop_statement7180 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7182 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_loop_statement7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_KEYWORD_in_while_loop_statement7192 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_while_loop_statement7194 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_loop_statement_in_while_loop_statement7196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_for_loop_statement7203 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_for_loop_statement7205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_for_loop_statement7207 = new BitSet(new long[]{0x1000000200600110L,0x0200804000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7209 = new BitSet(new long[]{0x1000000200600110L,0x0200804000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_for_loop_statement7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_for_loop_statement_part7281 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement_part7283 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_loop_statement_in_for_loop_statement_part7285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement17292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_cursor_for_loop_statement27299 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_for_loop_statement27301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_cursor_for_loop_statement27303 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement27305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_KEYWORD_in_raise_statement7312 = new BitSet(new long[]{0x0000000000600002L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_raise_statement7314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_case_statement_expression7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_expression_in_case_statement_expression7326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7333 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7335 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7363 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7365 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7367 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7370 = new BitSet(new long[]{0x15C0000200600110L,0xBF01B0BDC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7401 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7404 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_END_KEYWORD_in_simple_case_statement_expression7435 = new BitSet(new long[]{0x0000000000200002L,0x0000800000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7437 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_simple_case_statement_expression7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7449 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7476 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_searched_case_statement_expression7478 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7480 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7483 = new BitSet(new long[]{0x15C0000200600110L,0xBF01B0BDC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7514 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7517 = new BitSet(new long[]{0x11C0000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_END_KEYWORD_in_searched_case_statement_expression7548 = new BitSet(new long[]{0x0000000000200002L,0x0000800000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7550 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_searched_case_statement_expression7553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_KEYWORD_in_close_statement7562 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_close_statement7564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_KEYWORD_in_continue_statement7571 = new BitSet(new long[]{0x0400000000200002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_continue_statement7573 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_continue_statement7577 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_continue_statement7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement7588 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement7590 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_execute_immediate_statement7592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0000000000100007L});
    public static final BitSet FOLLOW_set_in_execute_immediate_statement7624 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate_statement7664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement7668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate_statement7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_into_clause7711 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause7713 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_COMMA_in_into_clause7716 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause7718 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause7727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause7729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause7731 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause7761 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_COMMA_in_bulk_collect_into_clause7764 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause7766 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_using_clause7775 = new BitSet(new long[]{0x1000000200600110L,0x0200800000310206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7778 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7782 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7789 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_using_clause7794 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause7812 = new BitSet(new long[]{0x1000000200600110L,0x0200800000310206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7815 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7819 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause7824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause7826 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_using_clause7831 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_EXIT_KEYWORD_in_exit_statement7840 = new BitSet(new long[]{0x0400000000200002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_exit_statement7842 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exit_statement7846 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_exit_statement7848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FETCH_KEYWORD_in_fetch_statement7857 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_fetch_statement7859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_fetch_statement7882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LIMIT_KEYWORD_in_fetch_statement7885 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_fetch_statement7887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_clause_in_fetch_statement7895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_KEYWORD_in_forall_statement7903 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_forall_statement7905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_forall_statement7907 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000600L,0x0000000000003100L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement7909 = new BitSet(new long[]{0x0000000000000000L,0x1100008000000000L,0x000000020160E080L});
    public static final BitSet FOLLOW_SAVE_KEYWORD_in_forall_statement7931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement7933 = new BitSet(new long[]{0x0000000000000000L,0x1100008000000000L,0x000000020160E000L});
    public static final BitSet FOLLOW_sql_statements_in_forall_statement7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_219_in_bounds_clause7947 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDICES_KEYWORD_in_bounds_clause7971 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause7973 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause7975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_bounds_clause7995 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_bounds_clause7997 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_bounds_clause7999 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_bounds_clause8026 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8028 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_pragma_inline_statement8069 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8071 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_inline_statement8073 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_pragma_inline_statement8077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_KEYWORD_in_open_statement8084 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8086 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_open_params_in_open_statement8088 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_open_statement8109 = new BitSet(new long[]{0x0000000000600100L,0x0200008000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_select_statement_in_open_statement8112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_open_statement8116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_using_clause_in_open_statement8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_open_params8133 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_open_params8135 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_open_params8138 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_open_params8140 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_open_params8144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_sqlerrm_function8161 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_set_in_sqlerrm_function8163 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_sqlerrm_function8172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8181 = new BitSet(new long[]{0x0000000000200002L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_variable_declaration_in_anonymous_block_declare_section8219 = new BitSet(new long[]{0x0000000000200002L,0x0800200040021201L,0x2000000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_anonymous_block_declare_section8259 = new BitSet(new long[]{0x0000000000000002L,0x0000000040020000L});
    public static final BitSet FOLLOW_procedure_declaration_in_anonymous_block_declare_section8263 = new BitSet(new long[]{0x0000000000000002L,0x0000000040020000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8274 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8276 = new BitSet(new long[]{0x2000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000010000004L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8322 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8324 = new BitSet(new long[]{0x2000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_subtype_datatype_in_variable_declaration8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_record_collection_datatype_in_variable_declaration8375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8388 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8413 = new BitSet(new long[]{0x0000000000000000L,0x0000420000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_variable_declaration8433 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8435 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8437 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_variable_declaration8441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_variable_declaration8455 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8457 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8460 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8462 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_variable_declaration8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_cursor_datatype_in_variable_declaration8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SEPARATOR_in_variable_declaration8494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPEARTOR_in_variable_declaration_part8502 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_variable_declaration_part8504 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_def_part_in_variable_declaration_part8508 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_variable_declaration_part8510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variable_def_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_data_type8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCALE_TYPES_in_data_type8532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_TYPES_in_data_type8536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_types_in_data_type8540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_TYPE_in_data_type8544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_type_in_data_type8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_data_type8564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_data_type8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_data_type8586 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_data_type8589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_datatype_in_data_type8593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_char_types8600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_char_types8609 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_char_types8611 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_char_types8614 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_set_in_char_types8616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_char_types8625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_timestamp_type8647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_LOCAL_KEYWORD_in_timestamp_type8649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_TIME_KEYWORD_in_timestamp_type8652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ZONE_KEYWORD_in_timestamp_type8654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_year_type8662 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_YEAR_TYPE_in_interval_year_type8664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_year_type8666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_MONTH_KEYWORD_in_interval_year_type8668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_day_type8675 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_DAY_TYPE_in_interval_day_type8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_day_type8679 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_SECOND_TYPE_in_interval_day_type8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype8688 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_subtype_datatype8690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_subtype_datatype8692 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_subtype_datatype8694 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NOT_OPEARTOR_in_subtype_datatype8697 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_subtype_datatype8699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_record_collection_datatype8709 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_record_collection_datatype8711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_record_collection_datatype8713 = new BitSet(new long[]{0x0000000000000000L,0x0262000000004000L});
    public static final BitSet FOLLOW_record_datatype_in_record_collection_datatype8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_table_datatype_in_record_collection_datatype8749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_record_collection_datatype8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_cursor_datatype_in_record_collection_datatype8785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_KEYWORD_in_record_datatype8793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_record_datatype8795 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype8797 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_record_datatype8800 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype8802 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_record_datatype8806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_field_declaration8814 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_record_field_declaration8816 = new BitSet(new long[]{0x2000000000000082L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_record_field_declaration8818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_collection_table_datatype8826 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_table_datatype8828 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype8830 = new BitSet(new long[]{0x0000000000000082L,0x0008000000000000L});
    public static final BitSet FOLLOW_NOT_OPEARTOR_in_collection_table_datatype8833 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_table_datatype8835 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_INDEX_KEYWORD_in_collection_table_datatype8862 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_collection_table_datatype8864 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype8866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype8876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype8881 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype8883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_200_in_collection_varray_datatype8916 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_collection_varray_datatype8918 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype8921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_collection_varray_datatype8923 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_varray_datatype8925 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_collection_varray_datatype8927 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NOT_OPEARTOR_in_collection_varray_datatype8930 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_varray_datatype8932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_ref_cursor_datatype8941 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype8943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype8946 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_ref_cursor_datatype8948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_cursor_datatype8957 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_cursor_datatype8959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000082000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_cursor_parameter_declaration_in_cursor_datatype8961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000082000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_cursor_datatype8983 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_datatype8985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_cursor_datatype8990 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_datatype8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_cursor_parameter_declaration9001 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9003 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_cursor_parameter_declaration9006 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9008 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_cursor_parameter_declaration9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_parameter9020 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_cursor_parameter9022 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_parameter9025 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_def_part_in_cursor_parameter9028 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_cursor_parameter9030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_special_datatype9041 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_special_datatype9045 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_set_in_special_datatype9048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_expression9064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_in_notin_expression9072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_in_notin_expression9075 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_in_notin_expression9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_in_notin_expression9109 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_in_notin_expression9111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_in_notin_expression9113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_operator9122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_operator9126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_operator9130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_operator9134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_operator9138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_operator9142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_operator9146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_operator9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_operator9165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_operator9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_operator9173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_operator9177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_operator9181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_operator9185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_operator9189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_operator9193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_operator9197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_operator9212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_operator9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_operator9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_operator9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_operator9241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_postfix_op9264 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_postfix_op9266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_postfix_op9270 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_postfix_op9272 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_postfix_op9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_postfix_op9278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_universal_expression9286 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_factor_in_universal_expression9289 = new BitSet(new long[]{0x0000000200000062L,0x0000080000002000L,0x0000000000000800L,0x0000000037FFF400L});
    public static final BitSet FOLLOW_postfix_op_in_universal_expression9291 = new BitSet(new long[]{0x0000000200000062L,0x0000080000000000L,0x0000000000000800L,0x0000000033FFF400L});
    public static final BitSet FOLLOW_operator_in_universal_expression9295 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_universal_expression9298 = new BitSet(new long[]{0x0000000200000062L,0x0000080000000000L,0x0000000000000800L,0x0000000033FFF400L});
    public static final BitSet FOLLOW_200_in_universal_expression9303 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_universal_expression9305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_universal_expression9307 = new BitSet(new long[]{0x0000000200000062L,0x0000080000000000L,0x0000000000000800L,0x0000000033FFF400L});
    public static final BitSet FOLLOW_TRUE_KEYWORD_in_universal_factor9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_KEYWORD_in_universal_factor9323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_universal_factor9327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_universal_factor9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_universal_factor9377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_universal_factor9381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_in_universal_factor9404 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_call_statement_param_in_universal_factor9407 = new BitSet(new long[]{0x0000000200000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_universal_factor9438 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9440 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_universal_factor9443 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9445 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_universal_factor9450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_factor_in_sub_identifier9458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sub_identifier9462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcode_function_in_sub_identifier9466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlerrm_function_in_sub_identifier9470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sub_identifier_factor9477 = new BitSet(new long[]{0x0000000200000002L,0x0000000000100000L,0x000000003C000000L});
    public static final BitSet FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_sub_identifier_factor9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_call_statement_param9530 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003300L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9533 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param9536 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9538 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_call_statement_param9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_call_statement_param9574 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param9576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param9578 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9580 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param9583 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param9585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param9587 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param9589 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_call_statement_param9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_exception_section9603 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_section9606 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exception_handler9615 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler9617 = new BitSet(new long[]{0x0800000000000040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_exception_handler9620 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler9622 = new BitSet(new long[]{0x0800000000000040L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_exception_handler9646 = new BitSet(new long[]{0x1140000200600110L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_executable_section_in_exception_handler9649 = new BitSet(new long[]{0x1140000200600112L,0xBF01B0BCC01B1207L,0x200000038161E050L,0x0000000000003140L});
    public static final BitSet FOLLOW_package_spec_in_synpred5_PL_SQL4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_synpred6_PL_SQL4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_declaration_in_synpred8_PL_SQL4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_synpred69_PL_SQL5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_clause_in_synpred73_PL_SQL5360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_synpred89_PL_SQL5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_synpred90_PL_SQL5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL5630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred104_PL_SQL5693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_synpred105_PL_SQL5682 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_constructor_spec_in_synpred105_PL_SQL5686 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5690 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_PL_SQL5693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred136_PL_SQL6182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_synpred188_PL_SQL6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred190_PL_SQL6576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred191_PL_SQL6580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL6582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_synpred200_PL_SQL6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_synpred206_PL_SQL6702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred207_PL_SQL6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred209_PL_SQL6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_synpred210_PL_SQL6733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred211_PL_SQL6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred212_PL_SQL6756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred215_PL_SQL6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred216_PL_SQL6787 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL6789 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred216_PL_SQL6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL6795 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL6801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_synpred220_PL_SQL6825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred221_PL_SQL6845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred225_PL_SQL6876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred225_PL_SQL6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred226_PL_SQL6886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred226_PL_SQL6888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred227_PL_SQL6900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred228_PL_SQL6911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred229_PL_SQL6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred230_PL_SQL6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred231_PL_SQL6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred232_PL_SQL6953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_synpred233_PL_SQL6975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred234_PL_SQL6979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_synpred235_PL_SQL6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_synpred236_PL_SQL6987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred237_PL_SQL7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred238_PL_SQL7020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred239_PL_SQL7042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred241_PL_SQL7076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred248_PL_SQL7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred251_PL_SQL7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_synpred251_PL_SQL7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_synpred251_PL_SQL7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred252_PL_SQL7314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_synpred253_PL_SQL7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred258_PL_SQL7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred259_PL_SQL7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred264_PL_SQL7550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred265_PL_SQL7553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred266_PL_SQL7573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred267_PL_SQL7577 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_synpred267_PL_SQL7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred275_PL_SQL7778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred277_PL_SQL7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred277_PL_SQL7789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred278_PL_SQL7815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred280_PL_SQL7824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred280_PL_SQL7826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred282_PL_SQL7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred283_PL_SQL7846 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_expression_in_synpred283_PL_SQL7848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_params_in_synpred290_PL_SQL8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred294_PL_SQL8109 = new BitSet(new long[]{0x0000000000600100L,0x0200008000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred294_PL_SQL8112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred294_PL_SQL8116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred294_PL_SQL8120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_using_clause_in_synpred294_PL_SQL8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred298_PL_SQL8161 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_set_in_synpred298_PL_SQL8163 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred298_PL_SQL8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_synpred298_PL_SQL8172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred303_PL_SQL8274 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_synpred303_PL_SQL8276 = new BitSet(new long[]{0x2000000000000082L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred303_PL_SQL8302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred304_PL_SQL8320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_synpred304_PL_SQL8322 = new BitSet(new long[]{0x000000000061BE00L,0x0200000000300200L,0x2000000000000000L});
    public static final BitSet FOLLOW_data_type_in_synpred304_PL_SQL8324 = new BitSet(new long[]{0x2000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred304_PL_SQL8350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred307_PL_SQL8388 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_synpred307_PL_SQL8390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_synpred321_PL_SQL8564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_synpred322_PL_SQL8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_synpred324_PL_SQL8586 = new BitSet(new long[]{0x0000000000600000L,0x0200000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred324_PL_SQL8589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred329_PL_SQL8609 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_synpred329_PL_SQL8611 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred329_PL_SQL8614 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_set_in_synpred329_PL_SQL8616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_synpred329_PL_SQL8625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_synpred330_PL_SQL8634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred353_PL_SQL9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred377_PL_SQL9264 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred377_PL_SQL9266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred378_PL_SQL9270 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred378_PL_SQL9272 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred378_PL_SQL9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_synpred379_PL_SQL9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_op_in_synpred380_PL_SQL9291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred381_PL_SQL9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred382_PL_SQL9295 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_synpred382_PL_SQL9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred382_PL_SQL9303 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred382_PL_SQL9305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_synpred382_PL_SQL9307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred390_PL_SQL9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_statement_param_in_synpred391_PL_SQL9407 = new BitSet(new long[]{0x0000000200000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred391_PL_SQL9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred401_PL_SQL9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_synpred404_PL_SQL9530 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003300L});
    public static final BitSet FOLLOW_universal_expression_in_synpred404_PL_SQL9533 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_synpred404_PL_SQL9536 = new BitSet(new long[]{0x1000000200600110L,0x0200800000110206L,0x2000000180000000L,0x0000000000003100L});
    public static final BitSet FOLLOW_universal_expression_in_synpred404_PL_SQL9538 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_synpred404_PL_SQL9545 = new BitSet(new long[]{0x0000000000000002L});

}