// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g 2010-04-22 15:29:12
package org.netbeans.modules.languages.pl_sql.antlr;

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class PL_SQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER_UNSIGNED", "AND_OPERATOR", "OR_OPERATOR", "NOT_OPEARTOR", "BLOCK_COMMENT", "LINE_COMMENT", "WHITESPACE", "STRING", "SOME_TYPES", "SCALE_TYPES", "SIZE_TYPES", "CHAR_TYPES", "CHAR_TYPE", "BYTE_TYPE", "RAW_TYPE", "TIMESTAMP_TYPE", "YEAR_TYPE", "DAY_TYPE", "SECOND_TYPE", "KEYWORD", "IDENTIFIER", "EXT_IDENTIFIER", "ALIAS", "SEPARATOR", "COMMA", "PARAM_VALUE", "BEGIN_KEYWORD", "END_KEYWORD", "DECLARE_KEYWORD", "EXCEPTION_KEYWORD", "WHEN_KEYWORD", "THEN_KEYWORD", "NULL_KEYWORD", "DEFAULT_KEYWORD", "ROWTYPE_KEYWORD", "LIKE_TYPE_KEYWORD", "TYPE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "CONSTANT_KEYWORD", "WITH_KEYWORD", "LOCAL_KEYWORD", "TIME_KEYWORD", "ZONE_KEYWORD", "INTERVAL_KEYWORD", "TO_KEYWORD", "MONTH_KEYWORD", "SUBTYPE_KEYWORD", "IS_KEYWORD", "RECORD_KEYWORD", "CREATE_KEYWORD", "REPLACE_KEYWORD", "FUNCTION_KEYWORD", "AS_KEYWORD", "RETURN_KEYWORD", "IN_KEYWORD", "OUT_KEYWORD", "NOCOPY_KEYWORD", "AUTHID_KEYWORD", "CURRENT_USER_KEYWORD", "DEFINER_KEYWORD", "DETERMINISTIC_KEYWORD", "PARALLEL_ENABLED_KEYWORD", "PIPELINED_KEYWORD", "RESULT_CACHE_KEYWORD", "PROCEDURE_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "ELSIF_KEYWORD", "GOTO_KEYWORD", "LOOP_KEYWORD", "WHILE_KEYWORD", "FOR_KEYWORD", "REVERSE_KEYWORD", "SELECT_KEYWORD", "COUNT_KEYWORD", "EXCEPTION_INIT_KEYWORD", "LIKE_KEYWORD", "RAISE_KEYWORD", "PRAGMA_KEYWORD", "AUTONOMOUS_TRANSACTION_KEYWORD", "CASE_KEYWORD", "CLOSE_KEYWORD", "TABLE_KEYWORD", "OF_KEYWORD", "INDEX_KEYWORD", "BY_KEYWORD", "VARRAY_KEYWORD", "VARYING_KEYWORD", "ARRAY_KEYWORD", "COMMIT_KEYWORD", "REF_KEYWORD", "CONTINUE_KEYWORD", "CURSOR_KEYWORD", "DELETE_KEYWORD", "EXECUTE_KEYWORD", "IMMEDIATE_KEYWORD", "EXIT_KEYWORD", "INTO_KEYWORD", "USING_KEYWORD", "BULK_KEYWORD", "COLLECT_KEYWORD", "FETCH_KEYWORD", "LIMIT_KEYWORD", "FORALL_KEYWORD", "SAVE_KEYWORD", "EXCEPTIONS_KEYWORD", "INDICES_KEYWORD", "VALUES_KEYWORD", "BETWEEN_KEYWORD", "INLINE_KEYWORD", "INSERT_KEYWORD", "LOCK_KEYWORD", "MERGE_KEYWORD", "OPEN_KEYWORD", "PACKAGE_KEYWORD", "BODY_KEYWORD", "RESTRICT_REFERENCES_KEYWORD", "RETURNING_KEYWORD", "ROLLBACK_KEYWORD", "SAVEPOINT_KEYWORD", "SERIALLY_REUSABLE_KEYWORD", "SET_KEYWORD", "TRANSACTION_KEYWORD", "NOTFOUND_KEYWORD", "FOUND_KEYWORD", "ISOPEN_KEYWORD", "ROWCOUNT_KEYWORD", "SQLCODE_KEYWORD", "SQLERRM_KEYWORD", "UPDATE_KEYWORD", "EXISTS_KEYWORD", "TRIGGER_KEYWORD", "BEFORE_KEYWORD", "AFTER_KEYWORD", "INSTEAD_KEYWORD", "ON_KEYWORD", "NESTED_KEYWORD", "REFERENCING_KEYWORD", "OLD_KEYWORD", "NEW_KEYWORD", "PARENT_KEYWORD", "EACH_KEYWORD", "ROW_KEYWORD", "FOLLOWS_KEYWORD", "ENABLE_KEYWORD", "DISABLE_KEYWORD", "OID_KEYWORD", "OBJECT_KEYWORD", "UNDER_KEYWORD", "FINAL_KEYWORD", "INSTANTIABLE_KEYWORD", "OVERRIDING_KEYWORD", "MEMBER_KEYWORD", "STATIC_KEYWORD", "CONSTRUCTOR_KEYWORD", "SELF_KEYWORD", "RESULT_KEYWORD", "MAP_KEYWORD", "ORDER_KEYWORD", "JOIN_KEYWORD", "IM_BEGIN_END", "IM_IF", "IM_LOOP", "IM_CASE", "IM_PCK_SPC", "IM_PCK_BODY", "O", "R", "A", "N", "D", "T", "NOT_OPERATOR", "DIGITS", "EXP_DIGITS", "U", "L", "P", "S", "I", "E", "G", "V", "Y", "M", "B", "F", "W", "C", "H", "X", "Z", "K", "Q", "J", "CHARS", "DIGIT", "QUOTATION_MARK", "THE_REST", "'<<'", "'>>'", "'('", "')'", "'/'", "'\\''", "'+'", "'-'", "'*'", "'**'", "'||'", "'='", "'<>'", "'!='", "'~='", "'^='", "'>'", "'<'", "'<='", "'>='", "'(+)'", "'..'", "':='", "'.'"
    };
    public static final int VARRAY_KEYWORD=91;
    public static final int TRIGGER_KEYWORD=136;
    public static final int RESULT_KEYWORD=161;
    public static final int EXIT_KEYWORD=101;
    public static final int V=187;
    public static final int DISABLE_KEYWORD=150;
    public static final int RESTRICT_REFERENCES_KEYWORD=121;
    public static final int ALIAS=26;
    public static final int WHILE_KEYWORD=75;
    public static final int AUTONOMOUS_TRANSACTION_KEYWORD=84;
    public static final int U=180;
    public static final int BEGIN_KEYWORD=30;
    public static final int ELSE_KEYWORD=71;
    public static final int SOME_TYPES=12;
    public static final int COLLECT_KEYWORD=105;
    public static final int T__214=214;
    public static final int INTERVAL_KEYWORD=48;
    public static final int CONSTANT_KEYWORD=43;
    public static final int VALUES_KEYWORD=112;
    public static final int PRAGMA_KEYWORD=83;
    public static final int R=172;
    public static final int MEMBER_KEYWORD=157;
    public static final int ZONE_KEYWORD=47;
    public static final int CHARS=200;
    public static final int CREATE_KEYWORD=54;
    public static final int Q=198;
    public static final int ROLLBACK_KEYWORD=123;
    public static final int CLOSE_KEYWORD=86;
    public static final int T__220=220;
    public static final int TRUE_KEYWORD=41;
    public static final int DEFINER_KEYWORD=64;
    public static final int CONTINUE_KEYWORD=96;
    public static final int CURRENT_USER_KEYWORD=63;
    public static final int LOOP_KEYWORD=74;
    public static final int EXECUTE_KEYWORD=99;
    public static final int W=192;
    public static final int T__218=218;
    public static final int DELETE_KEYWORD=98;
    public static final int INDEX_KEYWORD=89;
    public static final int STRING=11;
    public static final int RESULT_CACHE_KEYWORD=68;
    public static final int BEFORE_KEYWORD=137;
    public static final int IM_LOOP=167;
    public static final int EACH_KEYWORD=146;
    public static final int IM_IF=166;
    public static final int FOLLOWS_KEYWORD=148;
    public static final int X=195;
    public static final int T__215=215;
    public static final int UNDER_KEYWORD=153;
    public static final int UPDATE_KEYWORD=134;
    public static final int AND_OPERATOR=5;
    public static final int IM_CASE=168;
    public static final int CHAR_TYPE=16;
    public static final int OPEN_KEYWORD=118;
    public static final int J=199;
    public static final int OR_OPERATOR=6;
    public static final int T__219=219;
    public static final int OID_KEYWORD=151;
    public static final int USING_KEYWORD=103;
    public static final int O=171;
    public static final int PARAM_VALUE=29;
    public static final int CURSOR_KEYWORD=97;
    public static final int ARRAY_KEYWORD=93;
    public static final int P=182;
    public static final int REFERENCING_KEYWORD=142;
    public static final int ISOPEN_KEYWORD=130;
    public static final int OF_KEYWORD=88;
    public static final int IM_BEGIN_END=165;
    public static final int S=183;
    public static final int SELF_KEYWORD=160;
    public static final int DECLARE_KEYWORD=32;
    public static final int OVERRIDING_KEYWORD=156;
    public static final int VARYING_KEYWORD=92;
    public static final int THE_REST=203;
    public static final int BETWEEN_KEYWORD=113;
    public static final int M=189;
    public static final int EXCEPTION_INIT_KEYWORD=80;
    public static final int T=176;
    public static final int T__210=210;
    public static final int FALSE_KEYWORD=42;
    public static final int NOT_OPERATOR=177;
    public static final int REF_KEYWORD=95;
    public static final int EXP_DIGITS=179;
    public static final int IM_PCK_BODY=170;
    public static final int SIZE_TYPES=14;
    public static final int SQLCODE_KEYWORD=132;
    public static final int DETERMINISTIC_KEYWORD=65;
    public static final int KEYWORD=23;
    public static final int EXCEPTION_KEYWORD=33;
    public static final int T__216=216;
    public static final int SCALE_TYPES=13;
    public static final int T__224=224;
    public static final int INSERT_KEYWORD=115;
    public static final int MONTH_KEYWORD=50;
    public static final int FORALL_KEYWORD=108;
    public static final int N=174;
    public static final int SQLERRM_KEYWORD=133;
    public static final int CASE_KEYWORD=85;
    public static final int PACKAGE_KEYWORD=119;
    public static final int INLINE_KEYWORD=114;
    public static final int AS_KEYWORD=57;
    public static final int DAY_TYPE=21;
    public static final int T__217=217;
    public static final int ROWCOUNT_KEYWORD=131;
    public static final int JOIN_KEYWORD=164;
    public static final int ELSIF_KEYWORD=72;
    public static final int COUNT_KEYWORD=79;
    public static final int PARENT_KEYWORD=145;
    public static final int FINAL_KEYWORD=154;
    public static final int SUBTYPE_KEYWORD=51;
    public static final int COMMA=28;
    public static final int FETCH_KEYWORD=106;
    public static final int FUNCTION_KEYWORD=56;
    public static final int STATIC_KEYWORD=158;
    public static final int EXISTS_KEYWORD=135;
    public static final int TABLE_KEYWORD=87;
    public static final int COMMIT_KEYWORD=94;
    public static final int T__208=208;
    public static final int NESTED_KEYWORD=141;
    public static final int IS_KEYWORD=52;
    public static final int BULK_KEYWORD=104;
    public static final int D=175;
    public static final int T__211=211;
    public static final int PROCEDURE_KEYWORD=69;
    public static final int IF_KEYWORD=70;
    public static final int YEAR_TYPE=20;
    public static final int LIKE_TYPE_KEYWORD=39;
    public static final int RAISE_KEYWORD=82;
    public static final int TIME_KEYWORD=46;
    public static final int CHAR_TYPES=15;
    public static final int ORDER_KEYWORD=163;
    public static final int CONSTRUCTOR_KEYWORD=159;
    public static final int SAVEPOINT_KEYWORD=124;
    public static final int ROWTYPE_KEYWORD=38;
    public static final int T__209=209;
    public static final int RETURN_KEYWORD=58;
    public static final int PIPELINED_KEYWORD=67;
    public static final int MAP_KEYWORD=162;
    public static final int TIMESTAMP_TYPE=19;
    public static final int NOT_OPEARTOR=7;
    public static final int NOTFOUND_KEYWORD=128;
    public static final int T__205=205;
    public static final int AUTHID_KEYWORD=62;
    public static final int A=173;
    public static final int IN_KEYWORD=59;
    public static final int WITH_KEYWORD=44;
    public static final int LINE_COMMENT=9;
    public static final int INSTEAD_KEYWORD=139;
    public static final int PARALLEL_ENABLED_KEYWORD=66;
    public static final int ENABLE_KEYWORD=149;
    public static final int BYTE_TYPE=17;
    public static final int WHEN_KEYWORD=34;
    public static final int T__207=207;
    public static final int C=193;
    public static final int T__212=212;
    public static final int T__206=206;
    public static final int L=181;
    public static final int LOCAL_KEYWORD=45;
    public static final int SECOND_TYPE=22;
    public static final int ROW_KEYWORD=147;
    public static final int END_KEYWORD=31;
    public static final int LIMIT_KEYWORD=107;
    public static final int SET_KEYWORD=126;
    public static final int AFTER_KEYWORD=138;
    public static final int SERIALLY_REUSABLE_KEYWORD=125;
    public static final int IDENTIFIER=24;
    public static final int TYPE_KEYWORD=40;
    public static final int T__204=204;
    public static final int LOCK_KEYWORD=116;
    public static final int BODY_KEYWORD=120;
    public static final int ON_KEYWORD=140;
    public static final int FOUND_KEYWORD=129;
    public static final int MERGE_KEYWORD=117;
    public static final int I=184;
    public static final int T__227=227;
    public static final int OBJECT_KEYWORD=152;
    public static final int F=191;
    public static final int TRANSACTION_KEYWORD=127;
    public static final int INSTANTIABLE_KEYWORD=155;
    public static final int SAVE_KEYWORD=109;
    public static final int RAW_TYPE=18;
    public static final int EXCEPTIONS_KEYWORD=110;
    public static final int QUOTATION_MARK=202;
    public static final int T__222=222;
    public static final int LIKE_KEYWORD=81;
    public static final int RETURNING_KEYWORD=122;
    public static final int K=197;
    public static final int NEW_KEYWORD=144;
    public static final int RECORD_KEYWORD=53;
    public static final int B=190;
    public static final int OUT_KEYWORD=60;
    public static final int NULL_KEYWORD=36;
    public static final int INTO_KEYWORD=102;
    public static final int DIGIT=201;
    public static final int T__226=226;
    public static final int DEFAULT_KEYWORD=37;
    public static final int T__225=225;
    public static final int OLD_KEYWORD=143;
    public static final int DIGITS=178;
    public static final int H=194;
    public static final int T__223=223;
    public static final int IMMEDIATE_KEYWORD=100;
    public static final int NUMBER_UNSIGNED=4;
    public static final int G=186;
    public static final int BLOCK_COMMENT=8;
    public static final int IM_PCK_SPC=169;
    public static final int FOR_KEYWORD=76;
    public static final int EXT_IDENTIFIER=25;
    public static final int TO_KEYWORD=49;
    public static final int WHITESPACE=10;
    public static final int Z=196;
    public static final int THEN_KEYWORD=35;
    public static final int REVERSE_KEYWORD=77;
    public static final int BY_KEYWORD=90;
    public static final int SEPARATOR=27;
    public static final int EOF=-1;
    public static final int SELECT_KEYWORD=78;
    public static final int REPLACE_KEYWORD=55;
    public static final int GOTO_KEYWORD=73;
    public static final int INDICES_KEYWORD=111;
    public static final int NOCOPY_KEYWORD=61;
    public static final int T__213=213;
    public static final int Y=188;
    public static final int T__221=221;
    public static final int E=185;

    // delegates
    // delegators


        public PL_SQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PL_SQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[567+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PL_SQLParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g"; }



    public class SyntaxError {

        public RecognitionException exception;
        public String message;
        public int line;
        public int start, end;
    }
    	public List<SyntaxError> syntaxErrors = new ArrayList<SyntaxError>();

    	@Override
    	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    		String message = super.getErrorMessage(e, tokenNames);
    		SyntaxError syntaxError = new SyntaxError();
    		syntaxError.exception = e;
    		syntaxError.message = message;
    		syntaxError.line = e.line;
    		CommonToken token =  (CommonToken) e.token;
    		syntaxError.start = token.getStartIndex();
                    syntaxError.end = token.getStopIndex() + 1;
    		syntaxErrors.add(syntaxError);
    		return message;
    	}

    	@Override
    	public void emitErrorMessage(String msg) {
    	}
    	
    /*protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException
    {
    throw new MismatchedTokenException(ttype, input);
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input,
    RecognitionException e,
    BitSet follow)
    throws RecognitionException
    {
    throw e;
    }
    }
    // Alter code generation so catch-clauses get replace with
    // this action.
    @rulecatch {
    catch (RecognitionException e) {
    throw e;
    }*/


    public static class grammar_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grammar_def"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:585:1: grammar_def : source_element EOF ;
    public final PL_SQLParser.grammar_def_return grammar_def() throws RecognitionException {
        PL_SQLParser.grammar_def_return retval = new PL_SQLParser.grammar_def_return();
        retval.start = input.LT(1);
        int grammar_def_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EOF2=null;
        PL_SQLParser.source_element_return source_element1 = null;


        CommonTree EOF2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:2: ( source_element EOF )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:586:4: source_element EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_source_element_in_grammar_def4668);
            source_element1=source_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, source_element1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_grammar_def4671); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, grammar_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grammar_def"

    public static class source_element_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "source_element"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:1: source_element : ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) );
    public final PL_SQLParser.source_element_return source_element() throws RecognitionException {
        PL_SQLParser.source_element_return retval = new PL_SQLParser.source_element_return();
        retval.start = input.LT(1);
        int source_element_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_return anonymous_block3 = null;

        PL_SQLParser.create_replace_part_return create_replace_part4 = null;

        PL_SQLParser.function_declaration_return function_declaration5 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration6 = null;

        PL_SQLParser.package_declaration_return package_declaration7 = null;

        PL_SQLParser.trigger_declaration_return trigger_declaration8 = null;

        PL_SQLParser.type_declaration_return type_declaration9 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:16: ( anonymous_block | ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BEGIN_KEYWORD||LA3_0==DECLARE_KEYWORD) ) {
                alt3=1;
            }
            else if ( (LA3_0==TYPE_KEYWORD||LA3_0==CREATE_KEYWORD||LA3_0==FUNCTION_KEYWORD||LA3_0==PROCEDURE_KEYWORD||LA3_0==PACKAGE_KEYWORD||LA3_0==TRIGGER_KEYWORD) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:589:18: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_source_element4681);
                    anonymous_block3=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block3.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:18: ( ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:19: ( create_replace_part )? ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:590:19: ( create_replace_part )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==CREATE_KEYWORD) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: create_replace_part
                            {
                            pushFollow(FOLLOW_create_replace_part_in_source_element4704);
                            create_replace_part4=create_replace_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, create_replace_part4.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:19: ( function_declaration | procedure_declaration | package_declaration | trigger_declaration | type_declaration )
                    int alt2=5;
                    switch ( input.LA(1) ) {
                    case FUNCTION_KEYWORD:
                        {
                        alt2=1;
                        }
                        break;
                    case PROCEDURE_KEYWORD:
                        {
                        alt2=2;
                        }
                        break;
                    case PACKAGE_KEYWORD:
                        {
                        alt2=3;
                        }
                        break;
                    case TRIGGER_KEYWORD:
                        {
                        alt2=4;
                        }
                        break;
                    case TYPE_KEYWORD:
                        {
                        alt2=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 0, input);

                        throw nvae;
                    }

                    switch (alt2) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:20: function_declaration
                            {
                            pushFollow(FOLLOW_function_declaration_in_source_element4726);
                            function_declaration5=function_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration5.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:43: procedure_declaration
                            {
                            pushFollow(FOLLOW_procedure_declaration_in_source_element4730);
                            procedure_declaration6=procedure_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration6.getTree());

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:591:67: package_declaration
                            {
                            pushFollow(FOLLOW_package_declaration_in_source_element4734);
                            package_declaration7=package_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_declaration7.getTree());

                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:20: trigger_declaration
                            {
                            pushFollow(FOLLOW_trigger_declaration_in_source_element4757);
                            trigger_declaration8=trigger_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_declaration8.getTree());

                            }
                            break;
                        case 5 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:592:42: type_declaration
                            {
                            pushFollow(FOLLOW_type_declaration_in_source_element4761);
                            type_declaration9=type_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration9.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, source_element_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "source_element"

    public static class identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:1: identifier : ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD );
    public final PL_SQLParser.identifier_return identifier() throws RecognitionException {
        PL_SQLParser.identifier_return retval = new PL_SQLParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:593:12: ( IDENTIFIER | RESULT_KEYWORD | INTERVAL_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==INTERVAL_KEYWORD||input.LA(1)==RESULT_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class universal_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:1: universal_identifier : ( identifier | EXT_IDENTIFIER );
    public final PL_SQLParser.universal_identifier_return universal_identifier() throws RecognitionException {
        PL_SQLParser.universal_identifier_return retval = new PL_SQLParser.universal_identifier_return();
        retval.start = input.LT(1);
        int universal_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER12=null;
        PL_SQLParser.identifier_return identifier11 = null;


        CommonTree EXT_IDENTIFIER12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:22: ( identifier | EXT_IDENTIFIER )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IDENTIFIER||LA4_0==INTERVAL_KEYWORD||LA4_0==RESULT_KEYWORD) ) {
                alt4=1;
            }
            else if ( (LA4_0==EXT_IDENTIFIER) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:24: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_universal_identifier4786);
                    identifier11=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier11.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:594:37: EXT_IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXT_IDENTIFIER12=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_universal_identifier4790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER12_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER12);
                    adaptor.addChild(root_0, EXT_IDENTIFIER12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, universal_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_identifier"

    public static class label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:1: label : '<<' identifier '>>' ;
    public final PL_SQLParser.label_return label() throws RecognitionException {
        PL_SQLParser.label_return retval = new PL_SQLParser.label_return();
        retval.start = input.LT(1);
        int label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal13=null;
        Token string_literal15=null;
        PL_SQLParser.identifier_return identifier14 = null;


        CommonTree string_literal13_tree=null;
        CommonTree string_literal15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:7: ( '<<' identifier '>>' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:595:9: '<<' identifier '>>'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal13=(Token)match(input,204,FOLLOW_204_in_label4797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal13_tree = (CommonTree)adaptor.create(string_literal13);
            adaptor.addChild(root_0, string_literal13_tree);
            }
            pushFollow(FOLLOW_identifier_in_label4799);
            identifier14=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier14.getTree());
            string_literal15=(Token)match(input,205,FOLLOW_205_in_label4801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (CommonTree)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class create_replace_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_replace_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:1: create_replace_part : CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? ;
    public final PL_SQLParser.create_replace_part_return create_replace_part() throws RecognitionException {
        PL_SQLParser.create_replace_part_return retval = new PL_SQLParser.create_replace_part_return();
        retval.start = input.LT(1);
        int create_replace_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CREATE_KEYWORD16=null;
        Token OR_OPERATOR17=null;
        Token REPLACE_KEYWORD18=null;

        CommonTree CREATE_KEYWORD16_tree=null;
        CommonTree OR_OPERATOR17_tree=null;
        CommonTree REPLACE_KEYWORD18_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:21: ( CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:23: CREATE_KEYWORD ( OR_OPERATOR REPLACE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CREATE_KEYWORD16=(Token)match(input,CREATE_KEYWORD,FOLLOW_CREATE_KEYWORD_in_create_replace_part4808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE_KEYWORD16_tree = (CommonTree)adaptor.create(CREATE_KEYWORD16);
            adaptor.addChild(root_0, CREATE_KEYWORD16_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:38: ( OR_OPERATOR REPLACE_KEYWORD )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==OR_OPERATOR) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:596:39: OR_OPERATOR REPLACE_KEYWORD
                    {
                    OR_OPERATOR17=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_create_replace_part4811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR17_tree = (CommonTree)adaptor.create(OR_OPERATOR17);
                    adaptor.addChild(root_0, OR_OPERATOR17_tree);
                    }
                    REPLACE_KEYWORD18=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_create_replace_part4813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD18_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD18);
                    adaptor.addChild(root_0, REPLACE_KEYWORD18_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, create_replace_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_replace_part"

    public static class as_is_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as_is_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:1: as_is_part : ( IS_KEYWORD | AS_KEYWORD );
    public final PL_SQLParser.as_is_part_return as_is_part() throws RecognitionException {
        PL_SQLParser.as_is_part_return retval = new PL_SQLParser.as_is_part_return();
        retval.start = input.LT(1);
        int as_is_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set19=null;

        CommonTree set19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:597:12: ( IS_KEYWORD | AS_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set19=(Token)input.LT(1);
            if ( input.LA(1)==IS_KEYWORD||input.LA(1)==AS_KEYWORD ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set19));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, as_is_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "as_is_part"

    public static class parameter_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:1: parameter_type : ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) );
    public final PL_SQLParser.parameter_type_return parameter_type() throws RecognitionException {
        PL_SQLParser.parameter_type_return retval = new PL_SQLParser.parameter_type_return();
        retval.start = input.LT(1);
        int parameter_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD20=null;
        Token OUT_KEYWORD21=null;
        Token NOCOPY_KEYWORD22=null;
        Token OUT_KEYWORD23=null;
        Token NOCOPY_KEYWORD24=null;

        CommonTree IN_KEYWORD20_tree=null;
        CommonTree OUT_KEYWORD21_tree=null;
        CommonTree NOCOPY_KEYWORD22_tree=null;
        CommonTree OUT_KEYWORD23_tree=null;
        CommonTree NOCOPY_KEYWORD24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:16: ( IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )? | ( OUT_KEYWORD ( NOCOPY_KEYWORD )? ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IN_KEYWORD) ) {
                alt9=1;
            }
            else if ( (LA9_0==OUT_KEYWORD) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:18: IN_KEYWORD ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD20=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_parameter_type4833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD20_tree = (CommonTree)adaptor.create(IN_KEYWORD20);
                    adaptor.addChild(root_0, IN_KEYWORD20_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:29: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==OUT_KEYWORD) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:30: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                            {
                            OUT_KEYWORD21=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4836); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUT_KEYWORD21_tree = (CommonTree)adaptor.create(OUT_KEYWORD21);
                            adaptor.addChild(root_0, OUT_KEYWORD21_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:42: ( NOCOPY_KEYWORD )?
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==NOCOPY_KEYWORD) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                                    {
                                    NOCOPY_KEYWORD22=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4838); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOCOPY_KEYWORD22_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD22);
                                    adaptor.addChild(root_0, NOCOPY_KEYWORD22_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:62: ( OUT_KEYWORD ( NOCOPY_KEYWORD )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:63: OUT_KEYWORD ( NOCOPY_KEYWORD )?
                    {
                    OUT_KEYWORD23=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_parameter_type4846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD23_tree = (CommonTree)adaptor.create(OUT_KEYWORD23);
                    adaptor.addChild(root_0, OUT_KEYWORD23_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:598:75: ( NOCOPY_KEYWORD )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==NOCOPY_KEYWORD) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOCOPY_KEYWORD
                            {
                            NOCOPY_KEYWORD24=(Token)match(input,NOCOPY_KEYWORD,FOLLOW_NOCOPY_KEYWORD_in_parameter_type4848); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOCOPY_KEYWORD24_tree = (CommonTree)adaptor.create(NOCOPY_KEYWORD24);
                            adaptor.addChild(root_0, NOCOPY_KEYWORD24_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, parameter_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_type"

    public static class parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:1: parameter_declaration : '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' ;
    public final PL_SQLParser.parameter_declaration_return parameter_declaration() throws RecognitionException {
        PL_SQLParser.parameter_declaration_return retval = new PL_SQLParser.parameter_declaration_return();
        retval.start = input.LT(1);
        int parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal25=null;
        Token char_literal31=null;
        Token char_literal37=null;
        PL_SQLParser.identifier_return identifier26 = null;

        PL_SQLParser.parameter_type_return parameter_type27 = null;

        PL_SQLParser.data_type_return data_type28 = null;

        PL_SQLParser.variable_def_part_return variable_def_part29 = null;

        PL_SQLParser.expression_return expression30 = null;

        PL_SQLParser.identifier_return identifier32 = null;

        PL_SQLParser.parameter_type_return parameter_type33 = null;

        PL_SQLParser.data_type_return data_type34 = null;

        PL_SQLParser.variable_def_part_return variable_def_part35 = null;

        PL_SQLParser.expression_return expression36 = null;


        CommonTree char_literal25_tree=null;
        CommonTree char_literal31_tree=null;
        CommonTree char_literal37_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:23: ( '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:25: '(' identifier ( parameter_type )? data_type ( variable_def_part expression )? ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal25=(Token)match(input,206,FOLLOW_206_in_parameter_declaration4857); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            pushFollow(FOLLOW_identifier_in_parameter_declaration4859);
            identifier26=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier26.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:40: ( parameter_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=IN_KEYWORD && LA10_0<=OUT_KEYWORD)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
                    {
                    pushFollow(FOLLOW_parameter_type_in_parameter_declaration4861);
                    parameter_type27=parameter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type27.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_parameter_declaration4864);
            data_type28=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type28.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:66: ( variable_def_part expression )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT_KEYWORD||LA11_0==226) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:599:67: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4867);
                    variable_def_part29=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part29.getTree());
                    pushFollow(FOLLOW_expression_in_parameter_declaration4869);
                    expression30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression30.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:25: ( ',' identifier ( parameter_type )? data_type ( variable_def_part expression )? )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:26: ',' identifier ( parameter_type )? data_type ( variable_def_part expression )?
            	    {
            	    char_literal31=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration4898); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal31_tree = (CommonTree)adaptor.create(char_literal31);
            	    adaptor.addChild(root_0, char_literal31_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_parameter_declaration4900);
            	    identifier32=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier32.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:41: ( parameter_type )?
            	    int alt12=2;
            	    int LA12_0 = input.LA(1);

            	    if ( ((LA12_0>=IN_KEYWORD && LA12_0<=OUT_KEYWORD)) ) {
            	        alt12=1;
            	    }
            	    switch (alt12) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_type
            	            {
            	            pushFollow(FOLLOW_parameter_type_in_parameter_declaration4902);
            	            parameter_type33=parameter_type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_type33.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_data_type_in_parameter_declaration4905);
            	    data_type34=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type34.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:67: ( variable_def_part expression )?
            	    int alt13=2;
            	    int LA13_0 = input.LA(1);

            	    if ( (LA13_0==DEFAULT_KEYWORD||LA13_0==226) ) {
            	        alt13=1;
            	    }
            	    switch (alt13) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:600:68: variable_def_part expression
            	            {
            	            pushFollow(FOLLOW_variable_def_part_in_parameter_declaration4908);
            	            variable_def_part35=variable_def_part();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part35.getTree());
            	            pushFollow(FOLLOW_expression_in_parameter_declaration4910);
            	            expression36=expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression36.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            char_literal37=(Token)match(input,207,FOLLOW_207_in_parameter_declaration4916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
            adaptor.addChild(root_0, char_literal37_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_declaration"

    public static class function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:1: function_spec : FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* ;
    public final PL_SQLParser.function_spec_return function_spec() throws RecognitionException {
        PL_SQLParser.function_spec_return retval = new PL_SQLParser.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FUNCTION_KEYWORD38=null;
        Token RETURN_KEYWORD41=null;
        PL_SQLParser.function_name_return function_name39 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration40 = null;

        PL_SQLParser.data_type_return data_type42 = null;

        PL_SQLParser.invoker_clause_return invoker_clause43 = null;

        PL_SQLParser.function_spec_add2_return function_spec_add244 = null;


        CommonTree FUNCTION_KEYWORD38_tree=null;
        CommonTree RETURN_KEYWORD41_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:15: ( FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:601:17: FUNCTION_KEYWORD function_name ( parameter_declaration )? RETURN_KEYWORD data_type ( invoker_clause )? ( function_spec_add2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            FUNCTION_KEYWORD38=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_function_spec4923); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD38_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD38);
            adaptor.addChild(root_0, FUNCTION_KEYWORD38_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4941);
            function_name39=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name39.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:602:31: ( parameter_declaration )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==206) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_function_spec4943);
                    parameter_declaration40=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration40.getTree());

                    }
                    break;

            }

            RETURN_KEYWORD41=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_function_spec4962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD41_tree = (CommonTree)adaptor.create(RETURN_KEYWORD41);
            adaptor.addChild(root_0, RETURN_KEYWORD41_tree);
            }
            pushFollow(FOLLOW_data_type_in_function_spec4964);
            data_type42=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type42.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:42: ( invoker_clause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==AUTHID_KEYWORD) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_function_spec4966);
                    invoker_clause43=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause43.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:58: ( function_spec_add2 )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( ((LA17_0>=DETERMINISTIC_KEYWORD && LA17_0<=RESULT_CACHE_KEYWORD)) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:603:59: function_spec_add2
            	    {
            	    pushFollow(FOLLOW_function_spec_add2_in_function_spec4970);
            	    function_spec_add244=function_spec_add2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec_add244.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class function_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:1: function_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.function_name_return function_name() throws RecognitionException {
        PL_SQLParser.function_name_return retval = new PL_SQLParser.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS46=null;
        PL_SQLParser.universal_identifier_return universal_identifier45 = null;


        CommonTree ALIAS46_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:15: ( universal_identifier | ALIAS )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=IDENTIFIER && LA18_0<=EXT_IDENTIFIER)||LA18_0==INTERVAL_KEYWORD||LA18_0==RESULT_KEYWORD) ) {
                alt18=1;
            }
            else if ( (LA18_0==ALIAS) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:17: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_function_name4979);
                    universal_identifier45=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier45.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:604:40: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS46=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_function_name4983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS46_tree = (CommonTree)adaptor.create(ALIAS46);
                    adaptor.addChild(root_0, ALIAS46_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class invoker_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invoker_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:1: invoker_clause : AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) ;
    public final PL_SQLParser.invoker_clause_return invoker_clause() throws RecognitionException {
        PL_SQLParser.invoker_clause_return retval = new PL_SQLParser.invoker_clause_return();
        retval.start = input.LT(1);
        int invoker_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AUTHID_KEYWORD47=null;
        Token set48=null;

        CommonTree AUTHID_KEYWORD47_tree=null;
        CommonTree set48_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:16: ( AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:605:18: AUTHID_KEYWORD ( CURRENT_USER_KEYWORD | DEFINER_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            AUTHID_KEYWORD47=(Token)match(input,AUTHID_KEYWORD,FOLLOW_AUTHID_KEYWORD_in_invoker_clause4990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUTHID_KEYWORD47_tree = (CommonTree)adaptor.create(AUTHID_KEYWORD47);
            adaptor.addChild(root_0, AUTHID_KEYWORD47_tree);
            }
            set48=(Token)input.LT(1);
            if ( (input.LA(1)>=CURRENT_USER_KEYWORD && input.LA(1)<=DEFINER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set48));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, invoker_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invoker_clause"

    public static class function_spec_add2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec_add2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:1: function_spec_add2 : ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD );
    public final PL_SQLParser.function_spec_add2_return function_spec_add2() throws RecognitionException {
        PL_SQLParser.function_spec_add2_return retval = new PL_SQLParser.function_spec_add2_return();
        retval.start = input.LT(1);
        int function_spec_add2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set49=null;

        CommonTree set49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:606:20: ( DETERMINISTIC_KEYWORD | PARALLEL_ENABLED_KEYWORD | PIPELINED_KEYWORD | RESULT_CACHE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set49=(Token)input.LT(1);
            if ( (input.LA(1)>=DETERMINISTIC_KEYWORD && input.LA(1)<=RESULT_CACHE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set49));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, function_spec_add2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec_add2"

    public static class function_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:1: function_declaration : function_spec function_procedure_body ;
    public final PL_SQLParser.function_declaration_return function_declaration() throws RecognitionException {
        PL_SQLParser.function_declaration_return retval = new PL_SQLParser.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.function_spec_return function_spec50 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body51 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:22: ( function_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:607:24: function_spec function_procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_function_spec_in_function_declaration5024);
            function_spec50=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec50.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_function_declaration5026);
            function_procedure_body51=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body51.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:1: procedure_spec : PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? ;
    public final PL_SQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
        PL_SQLParser.procedure_spec_return retval = new PL_SQLParser.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PROCEDURE_KEYWORD52=null;
        PL_SQLParser.procedure_name_return procedure_name53 = null;

        PL_SQLParser.parameter_declaration_return parameter_declaration54 = null;

        PL_SQLParser.invoker_clause_return invoker_clause55 = null;


        CommonTree PROCEDURE_KEYWORD52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:16: ( PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:18: PROCEDURE_KEYWORD procedure_name ( parameter_declaration )? ( invoker_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            PROCEDURE_KEYWORD52=(Token)match(input,PROCEDURE_KEYWORD,FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE_KEYWORD52_tree = (CommonTree)adaptor.create(PROCEDURE_KEYWORD52);
            adaptor.addChild(root_0, PROCEDURE_KEYWORD52_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec5035);
            procedure_name53=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name53.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:608:51: ( parameter_declaration )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==206) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: parameter_declaration
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_procedure_spec5037);
                    parameter_declaration54=parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_declaration54.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:609:18: ( invoker_clause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AUTHID_KEYWORD) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_procedure_spec5057);
                    invoker_clause55=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause55.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class procedure_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:1: procedure_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.procedure_name_return procedure_name() throws RecognitionException {
        PL_SQLParser.procedure_name_return retval = new PL_SQLParser.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS57=null;
        PL_SQLParser.universal_identifier_return universal_identifier56 = null;


        CommonTree ALIAS57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:16: ( universal_identifier | ALIAS )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( ((LA21_0>=IDENTIFIER && LA21_0<=EXT_IDENTIFIER)||LA21_0==INTERVAL_KEYWORD||LA21_0==RESULT_KEYWORD) ) {
                alt21=1;
            }
            else if ( (LA21_0==ALIAS) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_procedure_name5065);
                    universal_identifier56=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier56.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:610:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS57=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_procedure_name5069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS57_tree = (CommonTree)adaptor.create(ALIAS57);
                    adaptor.addChild(root_0, ALIAS57_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:1: procedure_declaration : procedure_spec function_procedure_body ;
    public final PL_SQLParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        PL_SQLParser.procedure_declaration_return retval = new PL_SQLParser.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.procedure_spec_return procedure_spec58 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body59 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:23: ( procedure_spec function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:611:25: procedure_spec function_procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_procedure_spec_in_procedure_declaration5076);
            procedure_spec58=procedure_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec58.getTree());
            pushFollow(FOLLOW_function_procedure_body_in_procedure_declaration5078);
            function_procedure_body59=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body59.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class function_procedure_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_procedure_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:1: function_procedure_body : as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block ;
    public final PL_SQLParser.function_procedure_body_return function_procedure_body() throws RecognitionException {
        PL_SQLParser.function_procedure_body_return retval = new PL_SQLParser.function_procedure_body_return();
        retval.start = input.LT(1);
        int function_procedure_body_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part60 = null;

        PL_SQLParser.variable_declaration_return variable_declaration61 = null;

        PL_SQLParser.function_declaration_return function_declaration62 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration63 = null;

        PL_SQLParser.block_return block64 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:25: ( as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:27: as_is_part ( variable_declaration )* ( function_declaration | procedure_declaration )* block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_function_procedure_body5085);
            as_is_part60=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part60.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:38: ( variable_declaration )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==IDENTIFIER||LA22_0==TYPE_KEYWORD||LA22_0==INTERVAL_KEYWORD||LA22_0==SUBTYPE_KEYWORD||LA22_0==PRAGMA_KEYWORD||LA22_0==CURSOR_KEYWORD||LA22_0==RESULT_KEYWORD) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:39: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_function_procedure_body5088);
            	    variable_declaration61=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration61.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:62: ( function_declaration | procedure_declaration )*
            loop23:
            do {
                int alt23=3;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==FUNCTION_KEYWORD) ) {
                    alt23=1;
                }
                else if ( (LA23_0==PROCEDURE_KEYWORD) ) {
                    alt23=2;
                }


                switch (alt23) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:63: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_function_procedure_body5093);
            	    function_declaration62=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration62.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:612:86: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_function_procedure_body5097);
            	    procedure_declaration63=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration63.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_block_in_function_procedure_body5101);
            block64=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block64.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, function_procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_procedure_body"

    public static class package_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:1: package_declaration : ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) );
    public final PL_SQLParser.package_declaration_return package_declaration() throws RecognitionException {
        PL_SQLParser.package_declaration_return retval = new PL_SQLParser.package_declaration_return();
        retval.start = input.LT(1);
        int package_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE_KEYWORD65=null;
        Token PACKAGE_KEYWORD67=null;
        PL_SQLParser.package_spec_return package_spec66 = null;

        PL_SQLParser.package_body_return package_body68 = null;


        CommonTree PACKAGE_KEYWORD65_tree=null;
        CommonTree PACKAGE_KEYWORD67_tree=null;
        RewriteRuleTokenStream stream_PACKAGE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token PACKAGE_KEYWORD");
        RewriteRuleSubtreeStream stream_package_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_spec");
        RewriteRuleSubtreeStream stream_package_body=new RewriteRuleSubtreeStream(adaptor,"rule package_body");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:21: ( ( PACKAGE_KEYWORD package_spec ) -> ^( IM_PCK_SPC package_spec ) | ( PACKAGE_KEYWORD package_body ) -> ^( IM_PCK_BODY package_body ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==PACKAGE_KEYWORD) ) {
                int LA24_1 = input.LA(2);

                if ( (synpred35_PL_SQL()) ) {
                    alt24=1;
                }
                else if ( (true) ) {
                    alt24=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:23: ( PACKAGE_KEYWORD package_spec )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:23: ( PACKAGE_KEYWORD package_spec )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:24: PACKAGE_KEYWORD package_spec
                    {
                    PACKAGE_KEYWORD65=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD65);

                    pushFollow(FOLLOW_package_spec_in_package_declaration5111);
                    package_spec66=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_spec.add(package_spec66.getTree());

                    }



                    // AST REWRITE
                    // elements: package_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 613:54: -> ^( IM_PCK_SPC package_spec )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:57: ^( IM_PCK_SPC package_spec )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_SPC, "IM_PCK_SPC"), root_1);

                        adaptor.addChild(root_1, stream_package_spec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:5: ( PACKAGE_KEYWORD package_body )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:5: ( PACKAGE_KEYWORD package_body )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:6: PACKAGE_KEYWORD package_body
                    {
                    PACKAGE_KEYWORD67=(Token)match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_package_declaration5127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PACKAGE_KEYWORD.add(PACKAGE_KEYWORD67);

                    pushFollow(FOLLOW_package_body_in_package_declaration5129);
                    package_body68=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_body.add(package_body68.getTree());

                    }



                    // AST REWRITE
                    // elements: package_body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 614:36: -> ^( IM_PCK_BODY package_body )
                    {
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:614:39: ^( IM_PCK_BODY package_body )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_PCK_BODY, "IM_PCK_BODY"), root_1);

                        adaptor.addChild(root_1, stream_package_body.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, package_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_declaration"

    public static class package_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:1: package_spec : package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) SEPARATOR ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_spec_return package_spec() throws RecognitionException {
        PL_SQLParser.package_spec_return retval = new PL_SQLParser.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR75=null;
        Token END_KEYWORD76=null;
        Token SEPARATOR78=null;
        Token char_literal79=null;
        PL_SQLParser.package_spec_name_return package_spec_name69 = null;

        PL_SQLParser.invoker_clause_return invoker_clause70 = null;

        PL_SQLParser.as_is_part_return as_is_part71 = null;

        PL_SQLParser.variable_declaration_return variable_declaration72 = null;

        PL_SQLParser.function_spec_return function_spec73 = null;

        PL_SQLParser.procedure_spec_return procedure_spec74 = null;

        PL_SQLParser.universal_identifier_return universal_identifier77 = null;


        CommonTree SEPARATOR75_tree=null;
        CommonTree END_KEYWORD76_tree=null;
        CommonTree SEPARATOR78_tree=null;
        CommonTree char_literal79_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:14: ( package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) SEPARATOR ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:16: package_spec_name ( invoker_clause )? as_is_part ( variable_declaration | ( ( function_spec | procedure_spec ) SEPARATOR ) )* END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_package_spec_name_in_package_spec5145);
            package_spec_name69=package_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec_name69.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:615:34: ( invoker_clause )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AUTHID_KEYWORD) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_package_spec5147);
                    invoker_clause70=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause70.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_as_is_part_in_package_spec5150);
            as_is_part71=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part71.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:16: ( variable_declaration | ( ( function_spec | procedure_spec ) SEPARATOR ) )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==IDENTIFIER||LA27_0==TYPE_KEYWORD||LA27_0==INTERVAL_KEYWORD||LA27_0==SUBTYPE_KEYWORD||LA27_0==PRAGMA_KEYWORD||LA27_0==CURSOR_KEYWORD||LA27_0==RESULT_KEYWORD) ) {
                    alt27=1;
                }
                else if ( (LA27_0==FUNCTION_KEYWORD||LA27_0==PROCEDURE_KEYWORD) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_spec5168);
            	    variable_declaration72=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration72.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:40: ( ( function_spec | procedure_spec ) SEPARATOR )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:40: ( ( function_spec | procedure_spec ) SEPARATOR )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:41: ( function_spec | procedure_spec ) SEPARATOR
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:41: ( function_spec | procedure_spec )
            	    int alt26=2;
            	    int LA26_0 = input.LA(1);

            	    if ( (LA26_0==FUNCTION_KEYWORD) ) {
            	        alt26=1;
            	    }
            	    else if ( (LA26_0==PROCEDURE_KEYWORD) ) {
            	        alt26=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 26, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt26) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:42: function_spec
            	            {
            	            pushFollow(FOLLOW_function_spec_in_package_spec5174);
            	            function_spec73=function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec73.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:616:58: procedure_spec
            	            {
            	            pushFollow(FOLLOW_procedure_spec_in_package_spec5178);
            	            procedure_spec74=procedure_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec74.getTree());

            	            }
            	            break;

            	    }

            	    SEPARATOR75=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5181); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEPARATOR75_tree = (CommonTree)adaptor.create(SEPARATOR75);
            	    adaptor.addChild(root_0, SEPARATOR75_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            END_KEYWORD76=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_spec5202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD76_tree = (CommonTree)adaptor.create(END_KEYWORD76);
            adaptor.addChild(root_0, END_KEYWORD76_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:28: ( universal_identifier )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=IDENTIFIER && LA28_0<=EXT_IDENTIFIER)||LA28_0==INTERVAL_KEYWORD||LA28_0==RESULT_KEYWORD) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_spec5204);
                    universal_identifier77=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier77.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:50: ( SEPARATOR )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==SEPARATOR) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR78=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_spec5207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR78_tree = (CommonTree)adaptor.create(SEPARATOR78);
                    adaptor.addChild(root_0, SEPARATOR78_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:617:61: ( '/' )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==208) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal79=(Token)match(input,208,FOLLOW_208_in_package_spec5210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal79_tree = (CommonTree)adaptor.create(char_literal79);
                    adaptor.addChild(root_0, char_literal79_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:1: package_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_spec_name_return package_spec_name() throws RecognitionException {
        PL_SQLParser.package_spec_name_return retval = new PL_SQLParser.package_spec_name_return();
        retval.start = input.LT(1);
        int package_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS81=null;
        PL_SQLParser.universal_identifier_return universal_identifier80 = null;


        CommonTree ALIAS81_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:19: ( universal_identifier | ALIAS )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=IDENTIFIER && LA31_0<=EXT_IDENTIFIER)||LA31_0==INTERVAL_KEYWORD||LA31_0==RESULT_KEYWORD) ) {
                alt31=1;
            }
            else if ( (LA31_0==ALIAS) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_spec_name5218);
                    universal_identifier80=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier80.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:618:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS81=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_spec_name5222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS81_tree = (CommonTree)adaptor.create(ALIAS81);
                    adaptor.addChild(root_0, ALIAS81_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, package_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec_name"

    public static class package_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:1: package_body : BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.package_body_return package_body() throws RecognitionException {
        PL_SQLParser.package_body_return retval = new PL_SQLParser.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD82=null;
        Token BEGIN_KEYWORD88=null;
        Token END_KEYWORD90=null;
        Token SEPARATOR92=null;
        Token char_literal93=null;
        PL_SQLParser.package_body_name_return package_body_name83 = null;

        PL_SQLParser.as_is_part_return as_is_part84 = null;

        PL_SQLParser.variable_declaration_return variable_declaration85 = null;

        PL_SQLParser.function_declaration_return function_declaration86 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration87 = null;

        PL_SQLParser.executable_section_return executable_section89 = null;

        PL_SQLParser.universal_identifier_return universal_identifier91 = null;


        CommonTree BODY_KEYWORD82_tree=null;
        CommonTree BEGIN_KEYWORD88_tree=null;
        CommonTree END_KEYWORD90_tree=null;
        CommonTree SEPARATOR92_tree=null;
        CommonTree char_literal93_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:14: ( BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:619:16: BODY_KEYWORD package_body_name as_is_part ( variable_declaration | function_declaration | procedure_declaration )* ( BEGIN_KEYWORD ( executable_section )+ )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD82=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_package_body5229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD82_tree = (CommonTree)adaptor.create(BODY_KEYWORD82);
            adaptor.addChild(root_0, BODY_KEYWORD82_tree);
            }
            pushFollow(FOLLOW_package_body_name_in_package_body5231);
            package_body_name83=package_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body_name83.getTree());
            pushFollow(FOLLOW_as_is_part_in_package_body5233);
            as_is_part84=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part84.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:16: ( variable_declaration | function_declaration | procedure_declaration )*
            loop32:
            do {
                int alt32=4;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case TYPE_KEYWORD:
                case INTERVAL_KEYWORD:
                case SUBTYPE_KEYWORD:
                case PRAGMA_KEYWORD:
                case CURSOR_KEYWORD:
                case RESULT_KEYWORD:
                    {
                    alt32=1;
                    }
                    break;
                case FUNCTION_KEYWORD:
                    {
                    alt32=2;
                    }
                    break;
                case PROCEDURE_KEYWORD:
                    {
                    alt32=3;
                    }
                    break;

                }

                switch (alt32) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:17: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_package_body5251);
            	    variable_declaration85=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration85.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:40: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_package_body5255);
            	    function_declaration86=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration86.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:620:63: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_package_body5259);
            	    procedure_declaration87=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration87.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:16: ( BEGIN_KEYWORD ( executable_section )+ )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BEGIN_KEYWORD) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:17: BEGIN_KEYWORD ( executable_section )+
                    {
                    BEGIN_KEYWORD88=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_package_body5279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEGIN_KEYWORD88_tree = (CommonTree)adaptor.create(BEGIN_KEYWORD88);
                    adaptor.addChild(root_0, BEGIN_KEYWORD88_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:31: ( executable_section )+
                    int cnt33=0;
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==NUMBER_UNSIGNED||LA33_0==STRING||(LA33_0>=IDENTIFIER && LA33_0<=EXT_IDENTIFIER)||LA33_0==BEGIN_KEYWORD||LA33_0==DECLARE_KEYWORD||LA33_0==NULL_KEYWORD||(LA33_0>=TRUE_KEYWORD && LA33_0<=FALSE_KEYWORD)||LA33_0==INTERVAL_KEYWORD||LA33_0==REPLACE_KEYWORD||(LA33_0>=RETURN_KEYWORD && LA33_0<=IN_KEYWORD)||LA33_0==IF_KEYWORD||(LA33_0>=GOTO_KEYWORD && LA33_0<=FOR_KEYWORD)||LA33_0==SELECT_KEYWORD||(LA33_0>=RAISE_KEYWORD && LA33_0<=PRAGMA_KEYWORD)||(LA33_0>=CASE_KEYWORD && LA33_0<=CLOSE_KEYWORD)||LA33_0==COMMIT_KEYWORD||LA33_0==CONTINUE_KEYWORD||(LA33_0>=DELETE_KEYWORD && LA33_0<=EXECUTE_KEYWORD)||LA33_0==EXIT_KEYWORD||LA33_0==FETCH_KEYWORD||LA33_0==FORALL_KEYWORD||(LA33_0>=INSERT_KEYWORD && LA33_0<=OPEN_KEYWORD)||(LA33_0>=ROLLBACK_KEYWORD && LA33_0<=SAVEPOINT_KEYWORD)||LA33_0==SET_KEYWORD||(LA33_0>=SQLCODE_KEYWORD && LA33_0<=UPDATE_KEYWORD)||LA33_0==RESULT_KEYWORD||LA33_0==NOT_OPERATOR||LA33_0==204||LA33_0==206||(LA33_0>=210 && LA33_0<=211)) ) {
                            alt33=1;
                        }


                        switch (alt33) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:621:32: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_package_body5282);
                    	    executable_section89=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section89.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt33 >= 1 ) break loop33;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(33, input);
                                throw eee;
                        }
                        cnt33++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD90=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_package_body5303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD90_tree = (CommonTree)adaptor.create(END_KEYWORD90);
            adaptor.addChild(root_0, END_KEYWORD90_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:28: ( universal_identifier )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( ((LA35_0>=IDENTIFIER && LA35_0<=EXT_IDENTIFIER)||LA35_0==INTERVAL_KEYWORD||LA35_0==RESULT_KEYWORD) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_package_body5305);
                    universal_identifier91=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier91.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:50: ( SEPARATOR )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==SEPARATOR) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR92=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_package_body5308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR92_tree = (CommonTree)adaptor.create(SEPARATOR92);
                    adaptor.addChild(root_0, SEPARATOR92_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:622:61: ( '/' )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==208) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal93=(Token)match(input,208,FOLLOW_208_in_package_body5311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal93_tree = (CommonTree)adaptor.create(char_literal93);
                    adaptor.addChild(root_0, char_literal93_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:1: package_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.package_body_name_return package_body_name() throws RecognitionException {
        PL_SQLParser.package_body_name_return retval = new PL_SQLParser.package_body_name_return();
        retval.start = input.LT(1);
        int package_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS95=null;
        PL_SQLParser.universal_identifier_return universal_identifier94 = null;


        CommonTree ALIAS95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:19: ( universal_identifier | ALIAS )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0>=IDENTIFIER && LA38_0<=EXT_IDENTIFIER)||LA38_0==INTERVAL_KEYWORD||LA38_0==RESULT_KEYWORD) ) {
                alt38=1;
            }
            else if ( (LA38_0==ALIAS) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:21: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_package_body_name5319);
                    universal_identifier94=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier94.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:623:44: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS95=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_package_body_name5323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS95_tree = (CommonTree)adaptor.create(ALIAS95);
                    adaptor.addChild(root_0, ALIAS95_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, package_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body_name"

    public static class trigger_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:1: trigger_declaration : TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block ;
    public final PL_SQLParser.trigger_declaration_return trigger_declaration() throws RecognitionException {
        PL_SQLParser.trigger_declaration_return retval = new PL_SQLParser.trigger_declaration_return();
        retval.start = input.LT(1);
        int trigger_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRIGGER_KEYWORD96=null;
        PL_SQLParser.trigger_name_return trigger_name97 = null;

        PL_SQLParser.trigger_type_return trigger_type98 = null;

        PL_SQLParser.follows_part_return follows_part99 = null;

        PL_SQLParser.trigger_part_return trigger_part100 = null;

        PL_SQLParser.anonymous_block_return anonymous_block101 = null;


        CommonTree TRIGGER_KEYWORD96_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:21: ( TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:23: TRIGGER_KEYWORD trigger_name trigger_type ( follows_part )? trigger_part anonymous_block
            {
            root_0 = (CommonTree)adaptor.nil();

            TRIGGER_KEYWORD96=(Token)match(input,TRIGGER_KEYWORD,FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRIGGER_KEYWORD96_tree = (CommonTree)adaptor.create(TRIGGER_KEYWORD96);
            adaptor.addChild(root_0, TRIGGER_KEYWORD96_tree);
            }
            pushFollow(FOLLOW_trigger_name_in_trigger_declaration5332);
            trigger_name97=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_name97.getTree());
            pushFollow(FOLLOW_trigger_type_in_trigger_declaration5334);
            trigger_type98=trigger_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_type98.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:624:65: ( follows_part )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==FOLLOWS_KEYWORD) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: follows_part
                    {
                    pushFollow(FOLLOW_follows_part_in_trigger_declaration5336);
                    follows_part99=follows_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_part99.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_trigger_part_in_trigger_declaration5339);
            trigger_part100=trigger_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trigger_part100.getTree());
            pushFollow(FOLLOW_anonymous_block_in_trigger_declaration5363);
            anonymous_block101=anonymous_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block101.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, trigger_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_declaration"

    public static class trigger_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:1: trigger_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.trigger_name_return trigger_name() throws RecognitionException {
        PL_SQLParser.trigger_name_return retval = new PL_SQLParser.trigger_name_return();
        retval.start = input.LT(1);
        int trigger_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS103=null;
        PL_SQLParser.universal_identifier_return universal_identifier102 = null;


        CommonTree ALIAS103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:14: ( universal_identifier | ALIAS )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=IDENTIFIER && LA40_0<=EXT_IDENTIFIER)||LA40_0==INTERVAL_KEYWORD||LA40_0==RESULT_KEYWORD) ) {
                alt40=1;
            }
            else if ( (LA40_0==ALIAS) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:16: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_trigger_name5370);
                    universal_identifier102=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier102.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:626:39: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS103=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_trigger_name5374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS103_tree = (CommonTree)adaptor.create(ALIAS103);
                    adaptor.addChild(root_0, ALIAS103_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, trigger_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_name"

    public static class follows_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "follows_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:1: follows_part : FOLLOWS_KEYWORD universal_identifier ;
    public final PL_SQLParser.follows_part_return follows_part() throws RecognitionException {
        PL_SQLParser.follows_part_return retval = new PL_SQLParser.follows_part_return();
        retval.start = input.LT(1);
        int follows_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOLLOWS_KEYWORD104=null;
        PL_SQLParser.universal_identifier_return universal_identifier105 = null;


        CommonTree FOLLOWS_KEYWORD104_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:14: ( FOLLOWS_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:627:16: FOLLOWS_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            FOLLOWS_KEYWORD104=(Token)match(input,FOLLOWS_KEYWORD,FOLLOW_FOLLOWS_KEYWORD_in_follows_part5381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOLLOWS_KEYWORD104_tree = (CommonTree)adaptor.create(FOLLOWS_KEYWORD104);
            adaptor.addChild(root_0, FOLLOWS_KEYWORD104_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_follows_part5383);
            universal_identifier105=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, follows_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "follows_part"

    public static class trigger_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:1: trigger_part : ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? ;
    public final PL_SQLParser.trigger_part_return trigger_part() throws RecognitionException {
        PL_SQLParser.trigger_part_return retval = new PL_SQLParser.trigger_part_return();
        retval.start = input.LT(1);
        int trigger_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set106=null;
        Token WHEN_KEYWORD107=null;
        PL_SQLParser.universal_expression_return universal_expression108 = null;


        CommonTree set106_tree=null;
        CommonTree WHEN_KEYWORD107_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:14: ( ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )? ( WHEN_KEYWORD universal_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:16: ( ENABLE_KEYWORD | DISABLE_KEYWORD )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=ENABLE_KEYWORD && LA41_0<=DISABLE_KEYWORD)) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set106=(Token)input.LT(1);
                    if ( (input.LA(1)>=ENABLE_KEYWORD && input.LA(1)<=DISABLE_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set106));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:52: ( WHEN_KEYWORD universal_expression )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==WHEN_KEYWORD) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:628:53: WHEN_KEYWORD universal_expression
                    {
                    WHEN_KEYWORD107=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_trigger_part5400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD107_tree = (CommonTree)adaptor.create(WHEN_KEYWORD107);
                    adaptor.addChild(root_0, WHEN_KEYWORD107_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_trigger_part5402);
                    universal_expression108=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression108.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, trigger_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_part"

    public static class trigger_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trigger_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:1: trigger_type : ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger );
    public final PL_SQLParser.trigger_type_return trigger_type() throws RecognitionException {
        PL_SQLParser.trigger_type_return retval = new PL_SQLParser.trigger_type_return();
        retval.start = input.LT(1);
        int trigger_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEFORE_KEYWORD109=null;
        Token AFTER_KEYWORD112=null;
        Token INSTEAD_KEYWORD115=null;
        Token OF_KEYWORD116=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause110 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger111 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause113 = null;

        PL_SQLParser.non_dml_trigger_return non_dml_trigger114 = null;

        PL_SQLParser.dml_event_clause_return dml_event_clause117 = null;

        PL_SQLParser.compound_dml_trigger_return compound_dml_trigger118 = null;


        CommonTree BEFORE_KEYWORD109_tree=null;
        CommonTree AFTER_KEYWORD112_tree=null;
        CommonTree INSTEAD_KEYWORD115_tree=null;
        CommonTree OF_KEYWORD116_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:14: ( ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) ) | ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause ) | compound_dml_trigger )
            int alt45=4;
            switch ( input.LA(1) ) {
            case BEFORE_KEYWORD:
                {
                alt45=1;
                }
                break;
            case AFTER_KEYWORD:
                {
                alt45=2;
                }
                break;
            case INSTEAD_KEYWORD:
                {
                alt45=3;
                }
                break;
            case FOR_KEYWORD:
                {
                alt45=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:16: ( BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:17: BEFORE_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    BEFORE_KEYWORD109=(Token)match(input,BEFORE_KEYWORD,FOLLOW_BEFORE_KEYWORD_in_trigger_type5412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BEFORE_KEYWORD109_tree = (CommonTree)adaptor.create(BEFORE_KEYWORD109);
                    adaptor.addChild(root_0, BEFORE_KEYWORD109_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:32: ( dml_event_clause | non_dml_trigger )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==DELETE_KEYWORD||LA43_0==INSERT_KEYWORD||LA43_0==UPDATE_KEYWORD) ) {
                        alt43=1;
                    }
                    else if ( (LA43_0==IDENTIFIER||LA43_0==INTERVAL_KEYWORD||LA43_0==RESULT_KEYWORD) ) {
                        alt43=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 0, input);

                        throw nvae;
                    }
                    switch (alt43) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:33: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5415);
                            dml_event_clause110=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause110.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:629:52: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5419);
                            non_dml_trigger111=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger111.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:16: ( AFTER_KEYWORD ( dml_event_clause | non_dml_trigger ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:17: AFTER_KEYWORD ( dml_event_clause | non_dml_trigger )
                    {
                    AFTER_KEYWORD112=(Token)match(input,AFTER_KEYWORD,FOLLOW_AFTER_KEYWORD_in_trigger_type5441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AFTER_KEYWORD112_tree = (CommonTree)adaptor.create(AFTER_KEYWORD112);
                    adaptor.addChild(root_0, AFTER_KEYWORD112_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:31: ( dml_event_clause | non_dml_trigger )
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==DELETE_KEYWORD||LA44_0==INSERT_KEYWORD||LA44_0==UPDATE_KEYWORD) ) {
                        alt44=1;
                    }
                    else if ( (LA44_0==IDENTIFIER||LA44_0==INTERVAL_KEYWORD||LA44_0==RESULT_KEYWORD) ) {
                        alt44=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 0, input);

                        throw nvae;
                    }
                    switch (alt44) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:32: dml_event_clause
                            {
                            pushFollow(FOLLOW_dml_event_clause_in_trigger_type5444);
                            dml_event_clause113=dml_event_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause113.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:630:51: non_dml_trigger
                            {
                            pushFollow(FOLLOW_non_dml_trigger_in_trigger_type5448);
                            non_dml_trigger114=non_dml_trigger();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, non_dml_trigger114.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:16: ( INSTEAD_KEYWORD OF_KEYWORD dml_event_clause )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:631:17: INSTEAD_KEYWORD OF_KEYWORD dml_event_clause
                    {
                    INSTEAD_KEYWORD115=(Token)match(input,INSTEAD_KEYWORD,FOLLOW_INSTEAD_KEYWORD_in_trigger_type5470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTEAD_KEYWORD115_tree = (CommonTree)adaptor.create(INSTEAD_KEYWORD115);
                    adaptor.addChild(root_0, INSTEAD_KEYWORD115_tree);
                    }
                    OF_KEYWORD116=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_trigger_type5472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD116_tree = (CommonTree)adaptor.create(OF_KEYWORD116);
                    adaptor.addChild(root_0, OF_KEYWORD116_tree);
                    }
                    pushFollow(FOLLOW_dml_event_clause_in_trigger_type5474);
                    dml_event_clause117=dml_event_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause117.getTree());

                    }


                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:632:16: compound_dml_trigger
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_dml_trigger_in_trigger_type5494);
                    compound_dml_trigger118=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_dml_trigger118.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, trigger_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trigger_type"

    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:1: compound_dml_trigger : FOR_KEYWORD dml_event_clause ( referencing_clause )? ;
    public final PL_SQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        PL_SQLParser.compound_dml_trigger_return retval = new PL_SQLParser.compound_dml_trigger_return();
        retval.start = input.LT(1);
        int compound_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD119=null;
        PL_SQLParser.dml_event_clause_return dml_event_clause120 = null;

        PL_SQLParser.referencing_clause_return referencing_clause121 = null;


        CommonTree FOR_KEYWORD119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:22: ( FOR_KEYWORD dml_event_clause ( referencing_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:24: FOR_KEYWORD dml_event_clause ( referencing_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD119=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD119_tree = (CommonTree)adaptor.create(FOR_KEYWORD119);
            adaptor.addChild(root_0, FOR_KEYWORD119_tree);
            }
            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger5503);
            dml_event_clause120=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause120.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:633:53: ( referencing_clause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==REFERENCING_KEYWORD) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger5505);
                    referencing_clause121=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause121.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, compound_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"

    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dml_trigger"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:1: non_dml_trigger : ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier ;
    public final PL_SQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        PL_SQLParser.non_dml_trigger_return retval = new PL_SQLParser.non_dml_trigger_return();
        retval.start = input.LT(1);
        int non_dml_trigger_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR_OPERATOR123=null;
        Token ON_KEYWORD124=null;
        PL_SQLParser.identifier_return identifier122 = null;

        PL_SQLParser.universal_identifier_return universal_identifier125 = null;


        CommonTree OR_OPERATOR123_tree=null;
        CommonTree ON_KEYWORD124_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:17: ( ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:19: ( identifier ( OR_OPERATOR )? )+ ON_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:19: ( identifier ( OR_OPERATOR )? )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==IDENTIFIER||LA48_0==INTERVAL_KEYWORD||LA48_0==RESULT_KEYWORD) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:20: identifier ( OR_OPERATOR )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_non_dml_trigger5514);
            	    identifier122=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier122.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:634:31: ( OR_OPERATOR )?
            	    int alt47=2;
            	    int LA47_0 = input.LA(1);

            	    if ( (LA47_0==OR_OPERATOR) ) {
            	        alt47=1;
            	    }
            	    switch (alt47) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR123=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_non_dml_trigger5516); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR123_tree = (CommonTree)adaptor.create(OR_OPERATOR123);
            	            adaptor.addChild(root_0, OR_OPERATOR123_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);

            ON_KEYWORD124=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_non_dml_trigger5521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD124_tree = (CommonTree)adaptor.create(ON_KEYWORD124);
            adaptor.addChild(root_0, ON_KEYWORD124_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_non_dml_trigger5523);
            universal_identifier125=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier125.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, non_dml_trigger_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"

    public static class dml_event_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:1: dml_event_clause : ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? ;
    public final PL_SQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
        PL_SQLParser.dml_event_clause_return retval = new PL_SQLParser.dml_event_clause_return();
        retval.start = input.LT(1);
        int dml_event_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD126=null;
        Token DELETE_KEYWORD127=null;
        Token UPDATE_KEYWORD128=null;
        Token OR_OPERATOR130=null;
        Token FOR_KEYWORD134=null;
        Token EACH_KEYWORD135=null;
        Token ROW_KEYWORD136=null;
        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor129 = null;

        PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor131 = null;

        PL_SQLParser.dml_event_clause_part_return dml_event_clause_part132 = null;

        PL_SQLParser.referencing_clause_return referencing_clause133 = null;


        CommonTree INSERT_KEYWORD126_tree=null;
        CommonTree DELETE_KEYWORD127_tree=null;
        CommonTree UPDATE_KEYWORD128_tree=null;
        CommonTree OR_OPERATOR130_tree=null;
        CommonTree FOR_KEYWORD134_tree=null;
        CommonTree EACH_KEYWORD135_tree=null;
        CommonTree ROW_KEYWORD136_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:18: ( ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+ dml_event_clause_part ( referencing_clause )? ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:20: ( ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )? )+
            int cnt53=0;
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==DELETE_KEYWORD||LA53_0==INSERT_KEYWORD||LA53_0==UPDATE_KEYWORD) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) ) ( OR_OPERATOR )? ( dml_event_clause_factor )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:21: ( INSERT_KEYWORD | DELETE_KEYWORD | ( UPDATE_KEYWORD ( dml_event_clause_factor )? ) )
            	    int alt50=3;
            	    switch ( input.LA(1) ) {
            	    case INSERT_KEYWORD:
            	        {
            	        alt50=1;
            	        }
            	        break;
            	    case DELETE_KEYWORD:
            	        {
            	        alt50=2;
            	        }
            	        break;
            	    case UPDATE_KEYWORD:
            	        {
            	        alt50=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 50, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt50) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:22: INSERT_KEYWORD
            	            {
            	            INSERT_KEYWORD126=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_dml_event_clause5532); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INSERT_KEYWORD126_tree = (CommonTree)adaptor.create(INSERT_KEYWORD126);
            	            adaptor.addChild(root_0, INSERT_KEYWORD126_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:635:39: DELETE_KEYWORD
            	            {
            	            DELETE_KEYWORD127=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_dml_event_clause5536); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DELETE_KEYWORD127_tree = (CommonTree)adaptor.create(DELETE_KEYWORD127);
            	            adaptor.addChild(root_0, DELETE_KEYWORD127_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:21: ( UPDATE_KEYWORD ( dml_event_clause_factor )? )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:22: UPDATE_KEYWORD ( dml_event_clause_factor )?
            	            {
            	            UPDATE_KEYWORD128=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5562); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UPDATE_KEYWORD128_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD128);
            	            adaptor.addChild(root_0, UPDATE_KEYWORD128_tree);
            	            }
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:37: ( dml_event_clause_factor )?
            	            int alt49=2;
            	            int LA49_0 = input.LA(1);

            	            if ( (LA49_0==OF_KEYWORD) ) {
            	                int LA49_2 = input.LA(2);

            	                if ( (synpred68_PL_SQL()) ) {
            	                    alt49=1;
            	                }
            	            }
            	            switch (alt49) {
            	                case 1 :
            	                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	                    {
            	                    pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5564);
            	                    dml_event_clause_factor129=dml_event_clause_factor();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor129.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:21: ( OR_OPERATOR )?
            	    int alt51=2;
            	    int LA51_0 = input.LA(1);

            	    if ( (LA51_0==OR_OPERATOR) ) {
            	        alt51=1;
            	    }
            	    switch (alt51) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: OR_OPERATOR
            	            {
            	            OR_OPERATOR130=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_dml_event_clause5589); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR_OPERATOR130_tree = (CommonTree)adaptor.create(OR_OPERATOR130);
            	            adaptor.addChild(root_0, OR_OPERATOR130_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:637:34: ( dml_event_clause_factor )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==OF_KEYWORD) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: dml_event_clause_factor
            	            {
            	            pushFollow(FOLLOW_dml_event_clause_factor_in_dml_event_clause5592);
            	            dml_event_clause_factor131=dml_event_clause_factor();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_factor131.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);

            pushFollow(FOLLOW_dml_event_clause_part_in_dml_event_clause5617);
            dml_event_clause_part132=dml_event_clause_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dml_event_clause_part132.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:43: ( referencing_clause )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==REFERENCING_KEYWORD) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred72_PL_SQL()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_dml_event_clause5619);
                    referencing_clause133=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_clause133.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:21: ( FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==FOR_KEYWORD) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:639:22: FOR_KEYWORD EACH_KEYWORD ROW_KEYWORD
                    {
                    FOR_KEYWORD134=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_dml_event_clause5643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD134_tree = (CommonTree)adaptor.create(FOR_KEYWORD134);
                    adaptor.addChild(root_0, FOR_KEYWORD134_tree);
                    }
                    EACH_KEYWORD135=(Token)match(input,EACH_KEYWORD,FOLLOW_EACH_KEYWORD_in_dml_event_clause5645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EACH_KEYWORD135_tree = (CommonTree)adaptor.create(EACH_KEYWORD135);
                    adaptor.addChild(root_0, EACH_KEYWORD135_tree);
                    }
                    ROW_KEYWORD136=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_dml_event_clause5647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD136_tree = (CommonTree)adaptor.create(ROW_KEYWORD136);
                    adaptor.addChild(root_0, ROW_KEYWORD136_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, dml_event_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"

    public static class dml_event_clause_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:1: dml_event_clause_factor : OF_KEYWORD ( universal_identifier ( COMMA )? )+ ;
    public final PL_SQLParser.dml_event_clause_factor_return dml_event_clause_factor() throws RecognitionException {
        PL_SQLParser.dml_event_clause_factor_return retval = new PL_SQLParser.dml_event_clause_factor_return();
        retval.start = input.LT(1);
        int dml_event_clause_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OF_KEYWORD137=null;
        Token COMMA139=null;
        PL_SQLParser.universal_identifier_return universal_identifier138 = null;


        CommonTree OF_KEYWORD137_tree=null;
        CommonTree COMMA139_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:25: ( OF_KEYWORD ( universal_identifier ( COMMA )? )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:27: OF_KEYWORD ( universal_identifier ( COMMA )? )+
            {
            root_0 = (CommonTree)adaptor.nil();

            OF_KEYWORD137=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD137_tree = (CommonTree)adaptor.create(OF_KEYWORD137);
            adaptor.addChild(root_0, OF_KEYWORD137_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:38: ( universal_identifier ( COMMA )? )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( ((LA57_0>=IDENTIFIER && LA57_0<=EXT_IDENTIFIER)||LA57_0==INTERVAL_KEYWORD||LA57_0==RESULT_KEYWORD) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:39: universal_identifier ( COMMA )?
            	    {
            	    pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_factor5659);
            	    universal_identifier138=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier138.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:640:60: ( COMMA )?
            	    int alt56=2;
            	    int LA56_0 = input.LA(1);

            	    if ( (LA56_0==COMMA) ) {
            	        alt56=1;
            	    }
            	    switch (alt56) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: COMMA
            	            {
            	            COMMA139=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_clause_factor5661); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA139_tree = (CommonTree)adaptor.create(COMMA139);
            	            adaptor.addChild(root_0, COMMA139_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, dml_event_clause_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_factor"

    public static class dml_event_clause_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dml_event_clause_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:1: dml_event_clause_part : ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) ;
    public final PL_SQLParser.dml_event_clause_part_return dml_event_clause_part() throws RecognitionException {
        PL_SQLParser.dml_event_clause_part_return retval = new PL_SQLParser.dml_event_clause_part_return();
        retval.start = input.LT(1);
        int dml_event_clause_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ON_KEYWORD140=null;
        Token NESTED_KEYWORD141=null;
        Token TABLE_KEYWORD142=null;
        Token OF_KEYWORD144=null;
        PL_SQLParser.identifier_return identifier143 = null;

        PL_SQLParser.universal_identifier_return universal_identifier145 = null;


        CommonTree ON_KEYWORD140_tree=null;
        CommonTree NESTED_KEYWORD141_tree=null;
        CommonTree TABLE_KEYWORD142_tree=null;
        CommonTree OF_KEYWORD144_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:23: ( ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:25: ON_KEYWORD ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            {
            root_0 = (CommonTree)adaptor.nil();

            ON_KEYWORD140=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_dml_event_clause_part5671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON_KEYWORD140_tree = (CommonTree)adaptor.create(ON_KEYWORD140);
            adaptor.addChild(root_0, ON_KEYWORD140_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:36: ( ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )? universal_identifier
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:37: ( NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==NESTED_KEYWORD) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:641:38: NESTED_KEYWORD TABLE_KEYWORD identifier OF_KEYWORD
                    {
                    NESTED_KEYWORD141=(Token)match(input,NESTED_KEYWORD,FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_KEYWORD141_tree = (CommonTree)adaptor.create(NESTED_KEYWORD141);
                    adaptor.addChild(root_0, NESTED_KEYWORD141_tree);
                    }
                    TABLE_KEYWORD142=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD142_tree = (CommonTree)adaptor.create(TABLE_KEYWORD142);
                    adaptor.addChild(root_0, TABLE_KEYWORD142_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_dml_event_clause_part5679);
                    identifier143=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier143.getTree());
                    OF_KEYWORD144=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_dml_event_clause_part5681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD144_tree = (CommonTree)adaptor.create(OF_KEYWORD144);
                    adaptor.addChild(root_0, OF_KEYWORD144_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_identifier_in_dml_event_clause_part5685);
            universal_identifier145=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier145.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, dml_event_clause_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause_part"

    public static class referencing_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referencing_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:1: referencing_clause : REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ ;
    public final PL_SQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
        PL_SQLParser.referencing_clause_return retval = new PL_SQLParser.referencing_clause_return();
        retval.start = input.LT(1);
        int referencing_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REFERENCING_KEYWORD146=null;
        Token set147=null;
        Token AS_KEYWORD148=null;
        Token OLD_KEYWORD149=null;
        Token NEW_KEYWORD150=null;
        PL_SQLParser.identifier_return identifier151 = null;


        CommonTree REFERENCING_KEYWORD146_tree=null;
        CommonTree set147_tree=null;
        CommonTree AS_KEYWORD148_tree=null;
        CommonTree OLD_KEYWORD149_tree=null;
        CommonTree NEW_KEYWORD150_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:20: ( REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:22: REFERENCING_KEYWORD ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            REFERENCING_KEYWORD146=(Token)match(input,REFERENCING_KEYWORD,FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCING_KEYWORD146_tree = (CommonTree)adaptor.create(REFERENCING_KEYWORD146);
            adaptor.addChild(root_0, REFERENCING_KEYWORD146_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:42: ( ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier ) )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( ((LA61_0>=OLD_KEYWORD && LA61_0<=PARENT_KEYWORD)) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:642:44: ( OLD_KEYWORD | NEW_KEYWORD | PARENT_KEYWORD ) ( AS_KEYWORD )? ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    {
            	    set147=(Token)input.LT(1);
            	    if ( (input.LA(1)>=OLD_KEYWORD && input.LA(1)<=PARENT_KEYWORD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set147));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:22: ( AS_KEYWORD )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AS_KEYWORD) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: AS_KEYWORD
            	            {
            	            AS_KEYWORD148=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_referencing_clause5730); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AS_KEYWORD148_tree = (CommonTree)adaptor.create(AS_KEYWORD148);
            	            adaptor.addChild(root_0, AS_KEYWORD148_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:34: ( OLD_KEYWORD | NEW_KEYWORD | identifier )
            	    int alt60=3;
            	    switch ( input.LA(1) ) {
            	    case OLD_KEYWORD:
            	        {
            	        alt60=1;
            	        }
            	        break;
            	    case NEW_KEYWORD:
            	        {
            	        alt60=2;
            	        }
            	        break;
            	    case IDENTIFIER:
            	    case INTERVAL_KEYWORD:
            	    case RESULT_KEYWORD:
            	        {
            	        alt60=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 60, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:35: OLD_KEYWORD
            	            {
            	            OLD_KEYWORD149=(Token)match(input,OLD_KEYWORD,FOLLOW_OLD_KEYWORD_in_referencing_clause5734); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OLD_KEYWORD149_tree = (CommonTree)adaptor.create(OLD_KEYWORD149);
            	            adaptor.addChild(root_0, OLD_KEYWORD149_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:49: NEW_KEYWORD
            	            {
            	            NEW_KEYWORD150=(Token)match(input,NEW_KEYWORD,FOLLOW_NEW_KEYWORD_in_referencing_clause5738); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NEW_KEYWORD150_tree = (CommonTree)adaptor.create(NEW_KEYWORD150);
            	            adaptor.addChild(root_0, NEW_KEYWORD150_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:643:63: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_referencing_clause5742);
            	            identifier151=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier151.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, referencing_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"

    public static class type_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:1: type_declaration : ( TYPE_KEYWORD type_spec_declaration | TYPE_KEYWORD type_body_declaration );
    public final PL_SQLParser.type_declaration_return type_declaration() throws RecognitionException {
        PL_SQLParser.type_declaration_return retval = new PL_SQLParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD152=null;
        Token TYPE_KEYWORD154=null;
        PL_SQLParser.type_spec_declaration_return type_spec_declaration153 = null;

        PL_SQLParser.type_body_declaration_return type_body_declaration155 = null;


        CommonTree TYPE_KEYWORD152_tree=null;
        CommonTree TYPE_KEYWORD154_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:18: ( TYPE_KEYWORD type_spec_declaration | TYPE_KEYWORD type_body_declaration )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==TYPE_KEYWORD) ) {
                int LA62_1 = input.LA(2);

                if ( (synpred83_PL_SQL()) ) {
                    alt62=1;
                }
                else if ( (true) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:20: TYPE_KEYWORD type_spec_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TYPE_KEYWORD152=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration5753); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_spec_declaration_in_type_declaration5756);
                    type_spec_declaration153=type_spec_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_declaration153.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:58: TYPE_KEYWORD type_body_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TYPE_KEYWORD154=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_type_declaration5760); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_body_declaration_in_type_declaration5763);
                    type_body_declaration155=type_body_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_declaration155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_spec_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:1: type_spec_declaration : type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_spec_declaration_return type_spec_declaration() throws RecognitionException {
        PL_SQLParser.type_spec_declaration_return retval = new PL_SQLParser.type_spec_declaration_return();
        retval.start = input.LT(1);
        int type_spec_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR160=null;
        Token char_literal161=null;
        PL_SQLParser.type_spec_name_return type_spec_name156 = null;

        PL_SQLParser.type_oid_part_return type_oid_part157 = null;

        PL_SQLParser.invoker_clause_return invoker_clause158 = null;

        PL_SQLParser.type_spec_types_return type_spec_types159 = null;


        CommonTree SEPARATOR160_tree=null;
        CommonTree char_literal161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:23: ( type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:25: type_spec_name ( type_oid_part )? ( invoker_clause )? type_spec_types ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_spec_name_in_type_spec_declaration5770);
            type_spec_name156=type_spec_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_name156.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:40: ( type_oid_part )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==OID_KEYWORD) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: type_oid_part
                    {
                    pushFollow(FOLLOW_type_oid_part_in_type_spec_declaration5772);
                    type_oid_part157=type_oid_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_oid_part157.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:645:55: ( invoker_clause )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==AUTHID_KEYWORD) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: invoker_clause
                    {
                    pushFollow(FOLLOW_invoker_clause_in_type_spec_declaration5775);
                    invoker_clause158=invoker_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invoker_clause158.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_types_in_type_spec_declaration5778);
            type_spec_types159=type_spec_types();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec_types159.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:25: ( SEPARATOR )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==SEPARATOR) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR160=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_spec_declaration5804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR160_tree = (CommonTree)adaptor.create(SEPARATOR160);
                    adaptor.addChild(root_0, SEPARATOR160_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:646:36: ( '/' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==208) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal161=(Token)match(input,208,FOLLOW_208_in_type_spec_declaration5807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal161_tree = (CommonTree)adaptor.create(char_literal161);
                    adaptor.addChild(root_0, char_literal161_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, type_spec_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_declaration"

    public static class type_spec_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:1: type_spec_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_spec_name_return type_spec_name() throws RecognitionException {
        PL_SQLParser.type_spec_name_return retval = new PL_SQLParser.type_spec_name_return();
        retval.start = input.LT(1);
        int type_spec_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS163=null;
        PL_SQLParser.universal_identifier_return universal_identifier162 = null;


        CommonTree ALIAS163_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:16: ( universal_identifier | ALIAS )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=IDENTIFIER && LA67_0<=EXT_IDENTIFIER)||LA67_0==INTERVAL_KEYWORD||LA67_0==RESULT_KEYWORD) ) {
                alt67=1;
            }
            else if ( (LA67_0==ALIAS) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_spec_name5815);
                    universal_identifier162=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier162.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:647:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS163=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_spec_name5819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS163_tree = (CommonTree)adaptor.create(ALIAS163);
                    adaptor.addChild(root_0, ALIAS163_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, type_spec_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_name"

    public static class type_oid_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_oid_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:1: type_oid_part : OID_KEYWORD '\\'' universal_identifier '\\'' ;
    public final PL_SQLParser.type_oid_part_return type_oid_part() throws RecognitionException {
        PL_SQLParser.type_oid_part_return retval = new PL_SQLParser.type_oid_part_return();
        retval.start = input.LT(1);
        int type_oid_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OID_KEYWORD164=null;
        Token char_literal165=null;
        Token char_literal167=null;
        PL_SQLParser.universal_identifier_return universal_identifier166 = null;


        CommonTree OID_KEYWORD164_tree=null;
        CommonTree char_literal165_tree=null;
        CommonTree char_literal167_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:15: ( OID_KEYWORD '\\'' universal_identifier '\\'' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:648:17: OID_KEYWORD '\\'' universal_identifier '\\''
            {
            root_0 = (CommonTree)adaptor.nil();

            OID_KEYWORD164=(Token)match(input,OID_KEYWORD,FOLLOW_OID_KEYWORD_in_type_oid_part5826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OID_KEYWORD164_tree = (CommonTree)adaptor.create(OID_KEYWORD164);
            adaptor.addChild(root_0, OID_KEYWORD164_tree);
            }
            char_literal165=(Token)match(input,209,FOLLOW_209_in_type_oid_part5828); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal165_tree = (CommonTree)adaptor.create(char_literal165);
            adaptor.addChild(root_0, char_literal165_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_type_oid_part5830);
            universal_identifier166=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier166.getTree());
            char_literal167=(Token)match(input,209,FOLLOW_209_in_type_oid_part5832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal167_tree = (CommonTree)adaptor.create(char_literal167);
            adaptor.addChild(root_0, char_literal167_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, type_oid_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_oid_part"

    public static class type_spec_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:1: type_spec_types : ( object_type | varray_type | nested_table_type );
    public final PL_SQLParser.type_spec_types_return type_spec_types() throws RecognitionException {
        PL_SQLParser.type_spec_types_return retval = new PL_SQLParser.type_spec_types_return();
        retval.start = input.LT(1);
        int type_spec_types_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.object_type_return object_type168 = null;

        PL_SQLParser.varray_type_return varray_type169 = null;

        PL_SQLParser.nested_table_type_return nested_table_type170 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:17: ( object_type | varray_type | nested_table_type )
            int alt68=3;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==IS_KEYWORD||LA68_0==AS_KEYWORD) ) {
                int LA68_1 = input.LA(2);

                if ( (synpred89_PL_SQL()) ) {
                    alt68=1;
                }
                else if ( (synpred90_PL_SQL()) ) {
                    alt68=2;
                }
                else if ( (true) ) {
                    alt68=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA68_0==UNDER_KEYWORD) ) {
                alt68=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:19: object_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_object_type_in_type_spec_types5840);
                    object_type168=object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type168.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:33: varray_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_varray_type_in_type_spec_types5844);
                    varray_type169=varray_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_type169.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:47: nested_table_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nested_table_type_in_type_spec_types5848);
                    nested_table_type170=nested_table_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_type170.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, type_spec_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec_types"

    public static class object_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:1: object_type : ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? ;
    public final PL_SQLParser.object_type_return object_type() throws RecognitionException {
        PL_SQLParser.object_type_return retval = new PL_SQLParser.object_type_return();
        retval.start = input.LT(1);
        int object_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OBJECT_KEYWORD172=null;
        Token UNDER_KEYWORD173=null;
        Token NOT_OPERATOR176=null;
        Token FINAL_KEYWORD177=null;
        Token NOT_OPERATOR178=null;
        Token INSTANTIABLE_KEYWORD179=null;
        PL_SQLParser.as_is_part_return as_is_part171 = null;

        PL_SQLParser.universal_identifier_return universal_identifier174 = null;

        PL_SQLParser.object_type_part_return object_type_part175 = null;


        CommonTree OBJECT_KEYWORD172_tree=null;
        CommonTree UNDER_KEYWORD173_tree=null;
        CommonTree NOT_OPERATOR176_tree=null;
        CommonTree FINAL_KEYWORD177_tree=null;
        CommonTree NOT_OPERATOR178_tree=null;
        CommonTree INSTANTIABLE_KEYWORD179_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:13: ( ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) ) ( object_type_part )? ( ( NOT_OPERATOR )? FINAL_KEYWORD )? ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:15: ( ( as_is_part OBJECT_KEYWORD ) | ( UNDER_KEYWORD universal_identifier ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==IS_KEYWORD||LA69_0==AS_KEYWORD) ) {
                alt69=1;
            }
            else if ( (LA69_0==UNDER_KEYWORD) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:16: ( as_is_part OBJECT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:16: ( as_is_part OBJECT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:17: as_is_part OBJECT_KEYWORD
                    {
                    pushFollow(FOLLOW_as_is_part_in_object_type5857);
                    as_is_part171=as_is_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part171.getTree());
                    OBJECT_KEYWORD172=(Token)match(input,OBJECT_KEYWORD,FOLLOW_OBJECT_KEYWORD_in_object_type5859); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OBJECT_KEYWORD172_tree = (CommonTree)adaptor.create(OBJECT_KEYWORD172);
                    adaptor.addChild(root_0, OBJECT_KEYWORD172_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:46: ( UNDER_KEYWORD universal_identifier )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:46: ( UNDER_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:650:47: UNDER_KEYWORD universal_identifier
                    {
                    UNDER_KEYWORD173=(Token)match(input,UNDER_KEYWORD,FOLLOW_UNDER_KEYWORD_in_object_type5865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDER_KEYWORD173_tree = (CommonTree)adaptor.create(UNDER_KEYWORD173);
                    adaptor.addChild(root_0, UNDER_KEYWORD173_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_object_type5867);
                    universal_identifier174=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier174.getTree());

                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:651:15: ( object_type_part )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==206) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: object_type_part
                    {
                    pushFollow(FOLLOW_object_type_part_in_object_type5885);
                    object_type_part175=object_type_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_type_part175.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:16: ( ( NOT_OPERATOR )? FINAL_KEYWORD )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==FINAL_KEYWORD) ) {
                alt72=1;
            }
            else if ( (LA72_0==NOT_OPERATOR) ) {
                int LA72_3 = input.LA(2);

                if ( (synpred94_PL_SQL()) ) {
                    alt72=1;
                }
            }
            switch (alt72) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:17: ( NOT_OPERATOR )? FINAL_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:17: ( NOT_OPERATOR )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==NOT_OPERATOR) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR176=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5904); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR176_tree = (CommonTree)adaptor.create(NOT_OPERATOR176);
                            adaptor.addChild(root_0, NOT_OPERATOR176_tree);
                            }

                            }
                            break;

                    }

                    FINAL_KEYWORD177=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_object_type5907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD177_tree = (CommonTree)adaptor.create(FINAL_KEYWORD177);
                    adaptor.addChild(root_0, FINAL_KEYWORD177_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:47: ( ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==INSTANTIABLE_KEYWORD||LA74_0==NOT_OPERATOR) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:48: ( NOT_OPERATOR )? INSTANTIABLE_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:48: ( NOT_OPERATOR )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==NOT_OPERATOR) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR178=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_object_type5912); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR178_tree = (CommonTree)adaptor.create(NOT_OPERATOR178);
                            adaptor.addChild(root_0, NOT_OPERATOR178_tree);
                            }

                            }
                            break;

                    }

                    INSTANTIABLE_KEYWORD179=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD179_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD179);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD179_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, object_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type"

    public static class object_type_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_type_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:1: object_type_part : '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' ;
    public final PL_SQLParser.object_type_part_return object_type_part() throws RecognitionException {
        PL_SQLParser.object_type_part_return retval = new PL_SQLParser.object_type_part_return();
        retval.start = input.LT(1);
        int object_type_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal180=null;
        Token char_literal183=null;
        Token char_literal185=null;
        Token char_literal186=null;
        PL_SQLParser.identifier_return identifier181 = null;

        PL_SQLParser.data_type_return data_type182 = null;

        PL_SQLParser.element_spec_return element_spec184 = null;


        CommonTree char_literal180_tree=null;
        CommonTree char_literal183_tree=null;
        CommonTree char_literal185_tree=null;
        CommonTree char_literal186_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:18: ( '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:20: '(' ( identifier data_type ( ',' )? )+ ( element_spec ( ',' )? )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal180=(Token)match(input,206,FOLLOW_206_in_object_type_part5924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal180_tree = (CommonTree)adaptor.create(char_literal180);
            adaptor.addChild(root_0, char_literal180_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:24: ( identifier data_type ( ',' )? )+
            int cnt76=0;
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==IDENTIFIER||LA76_0==INTERVAL_KEYWORD||LA76_0==RESULT_KEYWORD) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:25: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_object_type_part5927);
            	    identifier181=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier181.getTree());
            	    pushFollow(FOLLOW_data_type_in_object_type_part5929);
            	    data_type182=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type182.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:46: ( ',' )?
            	    int alt75=2;
            	    int LA75_0 = input.LA(1);

            	    if ( (LA75_0==COMMA) ) {
            	        alt75=1;
            	    }
            	    switch (alt75) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal183=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5931); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal183_tree = (CommonTree)adaptor.create(char_literal183);
            	            adaptor.addChild(root_0, char_literal183_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:53: ( element_spec ( ',' )? )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=FINAL_KEYWORD && LA78_0<=CONSTRUCTOR_KEYWORD)||(LA78_0>=MAP_KEYWORD && LA78_0<=ORDER_KEYWORD)||LA78_0==NOT_OPERATOR) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:54: element_spec ( ',' )?
            	    {
            	    pushFollow(FOLLOW_element_spec_in_object_type_part5937);
            	    element_spec184=element_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec184.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:653:67: ( ',' )?
            	    int alt77=2;
            	    int LA77_0 = input.LA(1);

            	    if ( (LA77_0==COMMA) ) {
            	        alt77=1;
            	    }
            	    switch (alt77) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal185=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_part5939); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal185_tree = (CommonTree)adaptor.create(char_literal185);
            	            adaptor.addChild(root_0, char_literal185_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            char_literal186=(Token)match(input,207,FOLLOW_207_in_object_type_part5944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal186_tree = (CommonTree)adaptor.create(char_literal186);
            adaptor.addChild(root_0, char_literal186_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, object_type_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_type_part"

    public static class element_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:1: element_spec : ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? ;
    public final PL_SQLParser.element_spec_return element_spec() throws RecognitionException {
        PL_SQLParser.element_spec_return retval = new PL_SQLParser.element_spec_return();
        retval.start = input.LT(1);
        int element_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal191=null;
        PL_SQLParser.inheritance_clauses_return inheritance_clauses187 = null;

        PL_SQLParser.subprogram_spec_return subprogram_spec188 = null;

        PL_SQLParser.constructor_spec_return constructor_spec189 = null;

        PL_SQLParser.map_order_function_spec_return map_order_function_spec190 = null;

        PL_SQLParser.pragma_clause_return pragma_clause192 = null;


        CommonTree char_literal191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:14: ( ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:16: ( inheritance_clauses )? ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+ ( pragma_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:16: ( inheritance_clauses )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==OVERRIDING_KEYWORD||LA79_0==NOT_OPERATOR) ) {
                alt79=1;
            }
            else if ( ((LA79_0>=FINAL_KEYWORD && LA79_0<=INSTANTIABLE_KEYWORD)) ) {
                int LA79_2 = input.LA(2);

                if ( (synpred101_PL_SQL()) ) {
                    alt79=1;
                }
            }
            switch (alt79) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: inheritance_clauses
                    {
                    pushFollow(FOLLOW_inheritance_clauses_in_element_spec5951);
                    inheritance_clauses187=inheritance_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inheritance_clauses187.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:37: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>=FINAL_KEYWORD && LA82_0<=INSTANTIABLE_KEYWORD)||(LA82_0>=MEMBER_KEYWORD && LA82_0<=CONSTRUCTOR_KEYWORD)||(LA82_0>=MAP_KEYWORD && LA82_0<=ORDER_KEYWORD)) ) {
                    int LA82_1 = input.LA(2);

                    if ( (synpred105_PL_SQL()) ) {
                        alt82=1;
                    }


                }


                switch (alt82) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
            	    int alt80=3;
            	    switch ( input.LA(1) ) {
            	    case MEMBER_KEYWORD:
            	    case STATIC_KEYWORD:
            	        {
            	        alt80=1;
            	        }
            	        break;
            	    case FINAL_KEYWORD:
            	    case INSTANTIABLE_KEYWORD:
            	    case CONSTRUCTOR_KEYWORD:
            	        {
            	        alt80=2;
            	        }
            	        break;
            	    case MAP_KEYWORD:
            	    case ORDER_KEYWORD:
            	        {
            	        alt80=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 80, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt80) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:39: subprogram_spec
            	            {
            	            pushFollow(FOLLOW_subprogram_spec_in_element_spec5956);
            	            subprogram_spec188=subprogram_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec188.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:57: constructor_spec
            	            {
            	            pushFollow(FOLLOW_constructor_spec_in_element_spec5960);
            	            constructor_spec189=constructor_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec189.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:76: map_order_function_spec
            	            {
            	            pushFollow(FOLLOW_map_order_function_spec_in_element_spec5964);
            	            map_order_function_spec190=map_order_function_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec190.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:101: ( ',' )?
            	    int alt81=2;
            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==COMMA) ) {
            	        int LA81_2 = input.LA(2);

            	        if ( (synpred104_PL_SQL()) ) {
            	            alt81=1;
            	        }
            	    }
            	    switch (alt81) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal191=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec5967); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal191_tree = (CommonTree)adaptor.create(char_literal191);
            	            adaptor.addChild(root_0, char_literal191_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:655:16: ( pragma_clause )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==PRAGMA_KEYWORD) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec5987);
                    pragma_clause192=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_clause192.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, element_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_spec"

    public static class pragma_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:1: pragma_clause : PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ;
    public final PL_SQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
        PL_SQLParser.pragma_clause_return retval = new PL_SQLParser.pragma_clause_return();
        retval.start = input.LT(1);
        int pragma_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD193=null;
        Token RESTRICT_REFERENCES_KEYWORD194=null;
        Token char_literal195=null;
        Token char_literal197=null;
        Token char_literal199=null;
        PL_SQLParser.expression_return expression196 = null;

        PL_SQLParser.expression_return expression198 = null;


        CommonTree PRAGMA_KEYWORD193_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD194_tree=null;
        CommonTree char_literal195_tree=null;
        CommonTree char_literal197_tree=null;
        CommonTree char_literal199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:15: ( PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:17: PRAGMA_KEYWORD RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD193=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD193_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD193);
            adaptor.addChild(root_0, PRAGMA_KEYWORD193_tree);
            }
            RESTRICT_REFERENCES_KEYWORD194=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESTRICT_REFERENCES_KEYWORD194_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD194);
            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD194_tree);
            }
            char_literal195=(Token)match(input,206,FOLLOW_206_in_pragma_clause5999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal195_tree = (CommonTree)adaptor.create(char_literal195);
            adaptor.addChild(root_0, char_literal195_tree);
            }
            pushFollow(FOLLOW_expression_in_pragma_clause6001);
            expression196=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression196.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:75: ( ',' expression )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:656:76: ',' expression
            	    {
            	    char_literal197=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause6004); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal197_tree = (CommonTree)adaptor.create(char_literal197);
            	    adaptor.addChild(root_0, char_literal197_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_pragma_clause6006);
            	    expression198=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression198.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);

            char_literal199=(Token)match(input,207,FOLLOW_207_in_pragma_clause6010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal199_tree = (CommonTree)adaptor.create(char_literal199);
            adaptor.addChild(root_0, char_literal199_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, pragma_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"

    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_function_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:1: map_order_function_spec : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec ;
    public final PL_SQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        PL_SQLParser.map_order_function_spec_return retval = new PL_SQLParser.map_order_function_spec_return();
        retval.start = input.LT(1);
        int map_order_function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set200=null;
        Token MEMBER_KEYWORD201=null;
        PL_SQLParser.function_spec_return function_spec202 = null;


        CommonTree set200_tree=null;
        CommonTree MEMBER_KEYWORD201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:25: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:657:27: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            set200=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set200));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD201=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD201_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD201);
            adaptor.addChild(root_0, MEMBER_KEYWORD201_tree);
            }
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec6027);
            function_spec202=function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec202.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, map_order_function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"

    public static class constructor_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:1: constructor_spec : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? ;
    public final PL_SQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
        PL_SQLParser.constructor_spec_return retval = new PL_SQLParser.constructor_spec_return();
        retval.start = input.LT(1);
        int constructor_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD203=null;
        Token INSTANTIABLE_KEYWORD204=null;
        Token CONSTRUCTOR_KEYWORD205=null;
        Token FUNCTION_KEYWORD206=null;
        PL_SQLParser.data_type_return data_type207 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part208 = null;


        CommonTree FINAL_KEYWORD203_tree=null;
        CommonTree INSTANTIABLE_KEYWORD204_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD205_tree=null;
        CommonTree FUNCTION_KEYWORD206_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:18: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:20: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:20: ( FINAL_KEYWORD )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FINAL_KEYWORD) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD203=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_spec6034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD203_tree = (CommonTree)adaptor.create(FINAL_KEYWORD203);
                    adaptor.addChild(root_0, FINAL_KEYWORD203_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:658:35: ( INSTANTIABLE_KEYWORD )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==INSTANTIABLE_KEYWORD) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD204=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD204_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD204);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD204_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD205=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD205_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD205);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD205_tree);
            }
            FUNCTION_KEYWORD206=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD206_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD206);
            adaptor.addChild(root_0, FUNCTION_KEYWORD206_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_spec6063);
            data_type207=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type207.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:659:30: ( constructor_spec_part )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==206) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_spec6065);
                    constructor_spec_part208=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part208.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, constructor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"

    public static class constructor_spec_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_spec_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:1: constructor_spec_part : '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD ;
    public final PL_SQLParser.constructor_spec_part_return constructor_spec_part() throws RecognitionException {
        PL_SQLParser.constructor_spec_part_return retval = new PL_SQLParser.constructor_spec_part_return();
        retval.start = input.LT(1);
        int constructor_spec_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal209=null;
        Token SELF_KEYWORD210=null;
        Token IN_KEYWORD211=null;
        Token OUT_KEYWORD212=null;
        Token char_literal213=null;
        Token char_literal216=null;
        Token char_literal217=null;
        Token RETURN_KEYWORD218=null;
        Token SELF_KEYWORD219=null;
        Token AS_KEYWORD220=null;
        Token RESULT_KEYWORD221=null;
        PL_SQLParser.identifier_return identifier214 = null;

        PL_SQLParser.data_type_return data_type215 = null;


        CommonTree char_literal209_tree=null;
        CommonTree SELF_KEYWORD210_tree=null;
        CommonTree IN_KEYWORD211_tree=null;
        CommonTree OUT_KEYWORD212_tree=null;
        CommonTree char_literal213_tree=null;
        CommonTree char_literal216_tree=null;
        CommonTree char_literal217_tree=null;
        CommonTree RETURN_KEYWORD218_tree=null;
        CommonTree SELF_KEYWORD219_tree=null;
        CommonTree AS_KEYWORD220_tree=null;
        CommonTree RESULT_KEYWORD221_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:23: ( '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:25: '(' ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )? ( identifier data_type ( ',' )? )+ ')' RETURN_KEYWORD SELF_KEYWORD AS_KEYWORD RESULT_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal209=(Token)match(input,206,FOLLOW_206_in_constructor_spec_part6073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal209_tree = (CommonTree)adaptor.create(char_literal209);
            adaptor.addChild(root_0, char_literal209_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:29: ( SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ',' )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==SELF_KEYWORD) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:660:30: SELF_KEYWORD IN_KEYWORD OUT_KEYWORD ','
                    {
                    SELF_KEYWORD210=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF_KEYWORD210_tree = (CommonTree)adaptor.create(SELF_KEYWORD210);
                    adaptor.addChild(root_0, SELF_KEYWORD210_tree);
                    }
                    IN_KEYWORD211=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_constructor_spec_part6078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD211_tree = (CommonTree)adaptor.create(IN_KEYWORD211);
                    adaptor.addChild(root_0, IN_KEYWORD211_tree);
                    }
                    OUT_KEYWORD212=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_constructor_spec_part6080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD212_tree = (CommonTree)adaptor.create(OUT_KEYWORD212);
                    adaptor.addChild(root_0, OUT_KEYWORD212_tree);
                    }
                    char_literal213=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal213_tree = (CommonTree)adaptor.create(char_literal213);
                    adaptor.addChild(root_0, char_literal213_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:25: ( identifier data_type ( ',' )? )+
            int cnt90=0;
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==IDENTIFIER||LA90_0==INTERVAL_KEYWORD||LA90_0==RESULT_KEYWORD) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:26: identifier data_type ( ',' )?
            	    {
            	    pushFollow(FOLLOW_identifier_in_constructor_spec_part6111);
            	    identifier214=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier214.getTree());
            	    pushFollow(FOLLOW_data_type_in_constructor_spec_part6113);
            	    data_type215=data_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type215.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:661:47: ( ',' )?
            	    int alt89=2;
            	    int LA89_0 = input.LA(1);

            	    if ( (LA89_0==COMMA) ) {
            	        alt89=1;
            	    }
            	    switch (alt89) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal216=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec_part6115); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal216_tree = (CommonTree)adaptor.create(char_literal216);
            	            adaptor.addChild(root_0, char_literal216_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt90 >= 1 ) break loop90;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(90, input);
                        throw eee;
                }
                cnt90++;
            } while (true);

            char_literal217=(Token)match(input,207,FOLLOW_207_in_constructor_spec_part6120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal217_tree = (CommonTree)adaptor.create(char_literal217);
            adaptor.addChild(root_0, char_literal217_tree);
            }
            RETURN_KEYWORD218=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD218_tree = (CommonTree)adaptor.create(RETURN_KEYWORD218);
            adaptor.addChild(root_0, RETURN_KEYWORD218_tree);
            }
            SELF_KEYWORD219=(Token)match(input,SELF_KEYWORD,FOLLOW_SELF_KEYWORD_in_constructor_spec_part6148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELF_KEYWORD219_tree = (CommonTree)adaptor.create(SELF_KEYWORD219);
            adaptor.addChild(root_0, SELF_KEYWORD219_tree);
            }
            AS_KEYWORD220=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_constructor_spec_part6150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS_KEYWORD220_tree = (CommonTree)adaptor.create(AS_KEYWORD220);
            adaptor.addChild(root_0, AS_KEYWORD220_tree);
            }
            RESULT_KEYWORD221=(Token)match(input,RESULT_KEYWORD,FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RESULT_KEYWORD221_tree = (CommonTree)adaptor.create(RESULT_KEYWORD221);
            adaptor.addChild(root_0, RESULT_KEYWORD221_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, constructor_spec_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_spec_part"

    public static class subprogram_spec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_spec"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:1: subprogram_spec : ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) ;
    public final PL_SQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
        PL_SQLParser.subprogram_spec_return retval = new PL_SQLParser.subprogram_spec_return();
        retval.start = input.LT(1);
        int subprogram_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set222=null;
        PL_SQLParser.function_spec_return function_spec223 = null;

        PL_SQLParser.procedure_spec_return procedure_spec224 = null;


        CommonTree set222_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:17: ( ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:19: ( MEMBER_KEYWORD | STATIC_KEYWORD ) ( function_spec | procedure_spec )
            {
            root_0 = (CommonTree)adaptor.nil();

            set222=(Token)input.LT(1);
            if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set222));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:53: ( function_spec | procedure_spec )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==FUNCTION_KEYWORD) ) {
                alt91=1;
            }
            else if ( (LA91_0==PROCEDURE_KEYWORD) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:54: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec6168);
                    function_spec223=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec223.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:663:70: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec6172);
                    procedure_spec224=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec224.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, subprogram_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"

    public static class inheritance_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inheritance_clauses"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:1: inheritance_clauses : ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) ;
    public final PL_SQLParser.inheritance_clauses_return inheritance_clauses() throws RecognitionException {
        PL_SQLParser.inheritance_clauses_return retval = new PL_SQLParser.inheritance_clauses_return();
        retval.start = input.LT(1);
        int inheritance_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR225=null;
        Token set226=null;

        CommonTree NOT_OPERATOR225_tree=null;
        CommonTree set226_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:21: ( ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:23: ( NOT_OPERATOR )? ( FINAL_KEYWORD | INSTANTIABLE_KEYWORD | OVERRIDING_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:664:23: ( NOT_OPERATOR )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==NOT_OPERATOR) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR225=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_inheritance_clauses6180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR225_tree = (CommonTree)adaptor.create(NOT_OPERATOR225);
                    adaptor.addChild(root_0, NOT_OPERATOR225_tree);
                    }

                    }
                    break;

            }

            set226=(Token)input.LT(1);
            if ( (input.LA(1)>=FINAL_KEYWORD && input.LA(1)<=OVERRIDING_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set226));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, inheritance_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inheritance_clauses"

    public static class varray_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:1: varray_type : as_is_part collection_varray_datatype ;
    public final PL_SQLParser.varray_type_return varray_type() throws RecognitionException {
        PL_SQLParser.varray_type_return retval = new PL_SQLParser.varray_type_return();
        retval.start = input.LT(1);
        int varray_type_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.as_is_part_return as_is_part227 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype228 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:13: ( as_is_part collection_varray_datatype )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:665:15: as_is_part collection_varray_datatype
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_varray_type6200);
            as_is_part227=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part227.getTree());
            pushFollow(FOLLOW_collection_varray_datatype_in_varray_type6202);
            collection_varray_datatype228=collection_varray_datatype();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype228.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, varray_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_type"

    public static class nested_table_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:1: nested_table_type : as_is_part TABLE_KEYWORD OF_KEYWORD data_type ;
    public final PL_SQLParser.nested_table_type_return nested_table_type() throws RecognitionException {
        PL_SQLParser.nested_table_type_return retval = new PL_SQLParser.nested_table_type_return();
        retval.start = input.LT(1);
        int nested_table_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD230=null;
        Token OF_KEYWORD231=null;
        PL_SQLParser.as_is_part_return as_is_part229 = null;

        PL_SQLParser.data_type_return data_type232 = null;


        CommonTree TABLE_KEYWORD230_tree=null;
        CommonTree OF_KEYWORD231_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:19: ( as_is_part TABLE_KEYWORD OF_KEYWORD data_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:666:21: as_is_part TABLE_KEYWORD OF_KEYWORD data_type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_as_is_part_in_nested_table_type6209);
            as_is_part229=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part229.getTree());
            TABLE_KEYWORD230=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_nested_table_type6211); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD230_tree = (CommonTree)adaptor.create(TABLE_KEYWORD230);
            adaptor.addChild(root_0, TABLE_KEYWORD230_tree);
            }
            OF_KEYWORD231=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_nested_table_type6213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD231_tree = (CommonTree)adaptor.create(OF_KEYWORD231);
            adaptor.addChild(root_0, OF_KEYWORD231_tree);
            }
            pushFollow(FOLLOW_data_type_in_nested_table_type6215);
            data_type232=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type232.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, nested_table_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_type"

    public static class type_body_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:1: type_body_declaration : BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? ;
    public final PL_SQLParser.type_body_declaration_return type_body_declaration() throws RecognitionException {
        PL_SQLParser.type_body_declaration_return retval = new PL_SQLParser.type_body_declaration_return();
        retval.start = input.LT(1);
        int type_body_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BODY_KEYWORD233=null;
        Token char_literal238=null;
        Token END_KEYWORD239=null;
        Token SEPARATOR240=null;
        Token char_literal241=null;
        PL_SQLParser.type_body_name_return type_body_name234 = null;

        PL_SQLParser.as_is_part_return as_is_part235 = null;

        PL_SQLParser.subprogram_declaration_return subprogram_declaration236 = null;

        PL_SQLParser.map_order_func_declaration_return map_order_func_declaration237 = null;


        CommonTree BODY_KEYWORD233_tree=null;
        CommonTree char_literal238_tree=null;
        CommonTree END_KEYWORD239_tree=null;
        CommonTree SEPARATOR240_tree=null;
        CommonTree char_literal241_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:23: ( BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:667:25: BODY_KEYWORD type_body_name as_is_part ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+ END_KEYWORD ( SEPARATOR )? ( '/' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            BODY_KEYWORD233=(Token)match(input,BODY_KEYWORD,FOLLOW_BODY_KEYWORD_in_type_body_declaration6222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BODY_KEYWORD233_tree = (CommonTree)adaptor.create(BODY_KEYWORD233);
            adaptor.addChild(root_0, BODY_KEYWORD233_tree);
            }
            pushFollow(FOLLOW_type_body_name_in_type_body_declaration6224);
            type_body_name234=type_body_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_name234.getTree());
            pushFollow(FOLLOW_as_is_part_in_type_body_declaration6226);
            as_is_part235=as_is_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as_is_part235.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:25: ( ( subprogram_declaration | map_order_func_declaration ) ( ',' )? )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==FUNCTION_KEYWORD||LA95_0==PROCEDURE_KEYWORD||(LA95_0>=FINAL_KEYWORD && LA95_0<=INSTANTIABLE_KEYWORD)||(LA95_0>=MEMBER_KEYWORD && LA95_0<=CONSTRUCTOR_KEYWORD)||(LA95_0>=MAP_KEYWORD && LA95_0<=ORDER_KEYWORD)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:26: ( subprogram_declaration | map_order_func_declaration ) ( ',' )?
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:26: ( subprogram_declaration | map_order_func_declaration )
            	    int alt93=2;
            	    int LA93_0 = input.LA(1);

            	    if ( (LA93_0==FUNCTION_KEYWORD||LA93_0==PROCEDURE_KEYWORD||(LA93_0>=FINAL_KEYWORD && LA93_0<=INSTANTIABLE_KEYWORD)||(LA93_0>=MEMBER_KEYWORD && LA93_0<=CONSTRUCTOR_KEYWORD)) ) {
            	        alt93=1;
            	    }
            	    else if ( ((LA93_0>=MAP_KEYWORD && LA93_0<=ORDER_KEYWORD)) ) {
            	        alt93=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 93, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt93) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:27: subprogram_declaration
            	            {
            	            pushFollow(FOLLOW_subprogram_declaration_in_type_body_declaration6254);
            	            subprogram_declaration236=subprogram_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_declaration236.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:52: map_order_func_declaration
            	            {
            	            pushFollow(FOLLOW_map_order_func_declaration_in_type_body_declaration6258);
            	            map_order_func_declaration237=map_order_func_declaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration237.getTree());

            	            }
            	            break;

            	    }

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:668:80: ( ',' )?
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==COMMA) ) {
            	        alt94=1;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
            	            {
            	            char_literal238=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body_declaration6261); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal238_tree = (CommonTree)adaptor.create(char_literal238);
            	            adaptor.addChild(root_0, char_literal238_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            END_KEYWORD239=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_type_body_declaration6267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            END_KEYWORD239_tree = (CommonTree)adaptor.create(END_KEYWORD239);
            adaptor.addChild(root_0, END_KEYWORD239_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:25: ( SEPARATOR )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==SEPARATOR) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR240=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_type_body_declaration6293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEPARATOR240_tree = (CommonTree)adaptor.create(SEPARATOR240);
                    adaptor.addChild(root_0, SEPARATOR240_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:669:36: ( '/' )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==208) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal241=(Token)match(input,208,FOLLOW_208_in_type_body_declaration6296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal241_tree = (CommonTree)adaptor.create(char_literal241);
                    adaptor.addChild(root_0, char_literal241_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, type_body_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_declaration"

    public static class type_body_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_name"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:1: type_body_name : ( universal_identifier | ALIAS );
    public final PL_SQLParser.type_body_name_return type_body_name() throws RecognitionException {
        PL_SQLParser.type_body_name_return retval = new PL_SQLParser.type_body_name_return();
        retval.start = input.LT(1);
        int type_body_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS243=null;
        PL_SQLParser.universal_identifier_return universal_identifier242 = null;


        CommonTree ALIAS243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:16: ( universal_identifier | ALIAS )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( ((LA98_0>=IDENTIFIER && LA98_0<=EXT_IDENTIFIER)||LA98_0==INTERVAL_KEYWORD||LA98_0==RESULT_KEYWORD) ) {
                alt98=1;
            }
            else if ( (LA98_0==ALIAS) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:18: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_type_body_name6304);
                    universal_identifier242=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier242.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:670:41: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS243=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_type_body_name6308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS243_tree = (CommonTree)adaptor.create(ALIAS243);
                    adaptor.addChild(root_0, ALIAS243_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, type_body_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_body_name"

    public static class subprogram_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subprogram_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:1: subprogram_declaration : ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) ;
    public final PL_SQLParser.subprogram_declaration_return subprogram_declaration() throws RecognitionException {
        PL_SQLParser.subprogram_declaration_return retval = new PL_SQLParser.subprogram_declaration_return();
        retval.start = input.LT(1);
        int subprogram_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set244=null;
        PL_SQLParser.function_declaration_return function_declaration245 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration246 = null;

        PL_SQLParser.constructor_declaration_return constructor_declaration247 = null;


        CommonTree set244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:24: ( ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )? ( function_declaration | procedure_declaration | constructor_declaration )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:671:26: ( MEMBER_KEYWORD | STATIC_KEYWORD )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( ((LA99_0>=MEMBER_KEYWORD && LA99_0<=STATIC_KEYWORD)) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set244=(Token)input.LT(1);
                    if ( (input.LA(1)>=MEMBER_KEYWORD && input.LA(1)<=STATIC_KEYWORD) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set244));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:26: ( function_declaration | procedure_declaration | constructor_declaration )
            int alt100=3;
            switch ( input.LA(1) ) {
            case FUNCTION_KEYWORD:
                {
                alt100=1;
                }
                break;
            case PROCEDURE_KEYWORD:
                {
                alt100=2;
                }
                break;
            case FINAL_KEYWORD:
            case INSTANTIABLE_KEYWORD:
            case CONSTRUCTOR_KEYWORD:
                {
                alt100=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:27: function_declaration
                    {
                    pushFollow(FOLLOW_function_declaration_in_subprogram_declaration6350);
                    function_declaration245=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration245.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:50: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_subprogram_declaration6354);
                    procedure_declaration246=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration246.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:672:74: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprogram_declaration6358);
                    constructor_declaration247=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration247.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, subprogram_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subprogram_declaration"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:1: constructor_declaration : ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body ;
    public final PL_SQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        PL_SQLParser.constructor_declaration_return retval = new PL_SQLParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL_KEYWORD248=null;
        Token INSTANTIABLE_KEYWORD249=null;
        Token CONSTRUCTOR_KEYWORD250=null;
        Token FUNCTION_KEYWORD251=null;
        PL_SQLParser.data_type_return data_type252 = null;

        PL_SQLParser.constructor_spec_part_return constructor_spec_part253 = null;

        PL_SQLParser.function_procedure_body_return function_procedure_body254 = null;


        CommonTree FINAL_KEYWORD248_tree=null;
        CommonTree INSTANTIABLE_KEYWORD249_tree=null;
        CommonTree CONSTRUCTOR_KEYWORD250_tree=null;
        CommonTree FUNCTION_KEYWORD251_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:25: ( ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:27: ( FINAL_KEYWORD )? ( INSTANTIABLE_KEYWORD )? CONSTRUCTOR_KEYWORD FUNCTION_KEYWORD data_type ( constructor_spec_part )? function_procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:27: ( FINAL_KEYWORD )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==FINAL_KEYWORD) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: FINAL_KEYWORD
                    {
                    FINAL_KEYWORD248=(Token)match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_constructor_declaration6366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL_KEYWORD248_tree = (CommonTree)adaptor.create(FINAL_KEYWORD248);
                    adaptor.addChild(root_0, FINAL_KEYWORD248_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:673:42: ( INSTANTIABLE_KEYWORD )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==INSTANTIABLE_KEYWORD) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: INSTANTIABLE_KEYWORD
                    {
                    INSTANTIABLE_KEYWORD249=(Token)match(input,INSTANTIABLE_KEYWORD,FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANTIABLE_KEYWORD249_tree = (CommonTree)adaptor.create(INSTANTIABLE_KEYWORD249);
                    adaptor.addChild(root_0, INSTANTIABLE_KEYWORD249_tree);
                    }

                    }
                    break;

            }

            CONSTRUCTOR_KEYWORD250=(Token)match(input,CONSTRUCTOR_KEYWORD,FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRUCTOR_KEYWORD250_tree = (CommonTree)adaptor.create(CONSTRUCTOR_KEYWORD250);
            adaptor.addChild(root_0, CONSTRUCTOR_KEYWORD250_tree);
            }
            FUNCTION_KEYWORD251=(Token)match(input,FUNCTION_KEYWORD,FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION_KEYWORD251_tree = (CommonTree)adaptor.create(FUNCTION_KEYWORD251);
            adaptor.addChild(root_0, FUNCTION_KEYWORD251_tree);
            }
            pushFollow(FOLLOW_data_type_in_constructor_declaration6402);
            data_type252=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type252.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:674:37: ( constructor_spec_part )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==206) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: constructor_spec_part
                    {
                    pushFollow(FOLLOW_constructor_spec_part_in_constructor_declaration6404);
                    constructor_spec_part253=constructor_spec_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec_part253.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_procedure_body_in_constructor_declaration6407);
            function_procedure_body254=function_procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_procedure_body254.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, constructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_order_func_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:1: map_order_func_declaration : ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration ;
    public final PL_SQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        PL_SQLParser.map_order_func_declaration_return retval = new PL_SQLParser.map_order_func_declaration_return();
        retval.start = input.LT(1);
        int map_order_func_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set255=null;
        Token MEMBER_KEYWORD256=null;
        PL_SQLParser.function_declaration_return function_declaration257 = null;


        CommonTree set255_tree=null;
        CommonTree MEMBER_KEYWORD256_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:28: ( ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:675:30: ( MAP_KEYWORD | ORDER_KEYWORD ) MEMBER_KEYWORD function_declaration
            {
            root_0 = (CommonTree)adaptor.nil();

            set255=(Token)input.LT(1);
            if ( (input.LA(1)>=MAP_KEYWORD && input.LA(1)<=ORDER_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set255));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            MEMBER_KEYWORD256=(Token)match(input,MEMBER_KEYWORD,FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MEMBER_KEYWORD256_tree = (CommonTree)adaptor.create(MEMBER_KEYWORD256);
            adaptor.addChild(root_0, MEMBER_KEYWORD256_tree);
            }
            pushFollow(FOLLOW_function_declaration_in_map_order_func_declaration6424);
            function_declaration257=function_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration257.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, map_order_func_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:1: block : BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) ;
    public final PL_SQLParser.block_return block() throws RecognitionException {
        PL_SQLParser.block_return retval = new PL_SQLParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BEGIN_KEYWORD258=null;
        Token END_KEYWORD261=null;
        Token SEPARATOR263=null;
        Token char_literal264=null;
        PL_SQLParser.executable_section_return executable_section259 = null;

        PL_SQLParser.exception_section_return exception_section260 = null;

        PL_SQLParser.universal_identifier_return universal_identifier262 = null;


        CommonTree BEGIN_KEYWORD258_tree=null;
        CommonTree END_KEYWORD261_tree=null;
        CommonTree SEPARATOR263_tree=null;
        CommonTree char_literal264_tree=null;
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_BEGIN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token BEGIN_KEYWORD");
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_exception_section=new RewriteRuleSubtreeStream(adaptor,"rule exception_section");
        RewriteRuleSubtreeStream stream_universal_identifier=new RewriteRuleSubtreeStream(adaptor,"rule universal_identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:7: ( BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )? -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:677:9: BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD ( universal_identifier )? ( SEPARATOR )? ( '/' )?
            {
            BEGIN_KEYWORD258=(Token)match(input,BEGIN_KEYWORD,FOLLOW_BEGIN_KEYWORD_in_block6432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BEGIN_KEYWORD.add(BEGIN_KEYWORD258);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:2: ( executable_section )+
            int cnt104=0;
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==NUMBER_UNSIGNED||LA104_0==STRING||(LA104_0>=IDENTIFIER && LA104_0<=EXT_IDENTIFIER)||LA104_0==BEGIN_KEYWORD||LA104_0==DECLARE_KEYWORD||LA104_0==NULL_KEYWORD||(LA104_0>=TRUE_KEYWORD && LA104_0<=FALSE_KEYWORD)||LA104_0==INTERVAL_KEYWORD||LA104_0==REPLACE_KEYWORD||(LA104_0>=RETURN_KEYWORD && LA104_0<=IN_KEYWORD)||LA104_0==IF_KEYWORD||(LA104_0>=GOTO_KEYWORD && LA104_0<=FOR_KEYWORD)||LA104_0==SELECT_KEYWORD||(LA104_0>=RAISE_KEYWORD && LA104_0<=PRAGMA_KEYWORD)||(LA104_0>=CASE_KEYWORD && LA104_0<=CLOSE_KEYWORD)||LA104_0==COMMIT_KEYWORD||LA104_0==CONTINUE_KEYWORD||(LA104_0>=DELETE_KEYWORD && LA104_0<=EXECUTE_KEYWORD)||LA104_0==EXIT_KEYWORD||LA104_0==FETCH_KEYWORD||LA104_0==FORALL_KEYWORD||(LA104_0>=INSERT_KEYWORD && LA104_0<=OPEN_KEYWORD)||(LA104_0>=ROLLBACK_KEYWORD && LA104_0<=SAVEPOINT_KEYWORD)||LA104_0==SET_KEYWORD||(LA104_0>=SQLCODE_KEYWORD && LA104_0<=UPDATE_KEYWORD)||LA104_0==RESULT_KEYWORD||LA104_0==NOT_OPERATOR||LA104_0==204||LA104_0==206||(LA104_0>=210 && LA104_0<=211)) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:3: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_block6436);
            	    executable_section259=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section259.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt104 >= 1 ) break loop104;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(104, input);
                        throw eee;
                }
                cnt104++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:678:25: ( exception_section )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==EXCEPTION_KEYWORD) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: exception_section
                    {
                    pushFollow(FOLLOW_exception_section_in_block6441);
                    exception_section260=exception_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_section.add(exception_section260.getTree());

                    }
                    break;

            }

            END_KEYWORD261=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_block6452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD261);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:21: ( universal_identifier )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( ((LA106_0>=IDENTIFIER && LA106_0<=EXT_IDENTIFIER)||LA106_0==INTERVAL_KEYWORD||LA106_0==RESULT_KEYWORD) ) {
                int LA106_1 = input.LA(2);

                if ( (synpred136_PL_SQL()) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_block6454);
                    universal_identifier262=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_universal_identifier.add(universal_identifier262.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:43: ( SEPARATOR )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==SEPARATOR) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                    {
                    SEPARATOR263=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_block6457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR263);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:680:9: ( '/' )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==208) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '/'
                    {
                    char_literal264=(Token)match(input,208,FOLLOW_208_in_block6468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_208.add(char_literal264);


                    }
                    break;

            }



            // AST REWRITE
            // elements: BEGIN_KEYWORD, exception_section, END_KEYWORD, executable_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 681:9: -> ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:682:9: ^( IM_BEGIN_END BEGIN_KEYWORD ( executable_section )+ ( exception_section )? END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_BEGIN_END, "IM_BEGIN_END"), root_1);

                adaptor.addChild(root_1, stream_BEGIN_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:683:25: ( exception_section )?
                if ( stream_exception_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_exception_section.nextTree());

                }
                stream_exception_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class anonymous_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:1: anonymous_block : ( anonymous_block_declare_section )? block ;
    public final PL_SQLParser.anonymous_block_return anonymous_block() throws RecognitionException {
        PL_SQLParser.anonymous_block_return retval = new PL_SQLParser.anonymous_block_return();
        retval.start = input.LT(1);
        int anonymous_block_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section265 = null;

        PL_SQLParser.block_return block266 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:17: ( ( anonymous_block_declare_section )? block )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:19: ( anonymous_block_declare_section )? block
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:685:19: ( anonymous_block_declare_section )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DECLARE_KEYWORD) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: anonymous_block_declare_section
                    {
                    pushFollow(FOLLOW_anonymous_block_declare_section_in_anonymous_block6520);
                    anonymous_block_declare_section265=anonymous_block_declare_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block_declare_section265.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_block6523);
            block266=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block266.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, anonymous_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block"

    public static class executable_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:1: executable_section : ( statement | anonymous_block );
    public final PL_SQLParser.executable_section_return executable_section() throws RecognitionException {
        PL_SQLParser.executable_section_return retval = new PL_SQLParser.executable_section_return();
        retval.start = input.LT(1);
        int executable_section_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.statement_return statement267 = null;

        PL_SQLParser.anonymous_block_return anonymous_block268 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:20: ( statement | anonymous_block )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NUMBER_UNSIGNED||LA110_0==STRING||(LA110_0>=IDENTIFIER && LA110_0<=EXT_IDENTIFIER)||LA110_0==NULL_KEYWORD||(LA110_0>=TRUE_KEYWORD && LA110_0<=FALSE_KEYWORD)||LA110_0==INTERVAL_KEYWORD||LA110_0==REPLACE_KEYWORD||(LA110_0>=RETURN_KEYWORD && LA110_0<=IN_KEYWORD)||LA110_0==IF_KEYWORD||(LA110_0>=GOTO_KEYWORD && LA110_0<=FOR_KEYWORD)||LA110_0==SELECT_KEYWORD||(LA110_0>=RAISE_KEYWORD && LA110_0<=PRAGMA_KEYWORD)||(LA110_0>=CASE_KEYWORD && LA110_0<=CLOSE_KEYWORD)||LA110_0==COMMIT_KEYWORD||LA110_0==CONTINUE_KEYWORD||(LA110_0>=DELETE_KEYWORD && LA110_0<=EXECUTE_KEYWORD)||LA110_0==EXIT_KEYWORD||LA110_0==FETCH_KEYWORD||LA110_0==FORALL_KEYWORD||(LA110_0>=INSERT_KEYWORD && LA110_0<=OPEN_KEYWORD)||(LA110_0>=ROLLBACK_KEYWORD && LA110_0<=SAVEPOINT_KEYWORD)||LA110_0==SET_KEYWORD||(LA110_0>=SQLCODE_KEYWORD && LA110_0<=UPDATE_KEYWORD)||LA110_0==RESULT_KEYWORD||LA110_0==NOT_OPERATOR||LA110_0==204||LA110_0==206||(LA110_0>=210 && LA110_0<=211)) ) {
                alt110=1;
            }
            else if ( (LA110_0==BEGIN_KEYWORD||LA110_0==DECLARE_KEYWORD) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:22: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_executable_section6530);
                    statement267=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement267.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:686:34: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_section6534);
                    anonymous_block268=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, executable_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_section"

    public static class executable_case_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "executable_case_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:1: executable_case_section : ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block );
    public final PL_SQLParser.executable_case_section_return executable_case_section() throws RecognitionException {
        PL_SQLParser.executable_case_section_return retval = new PL_SQLParser.executable_case_section_return();
        retval.start = input.LT(1);
        int executable_case_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR271=null;
        PL_SQLParser.label_return label269 = null;

        PL_SQLParser.statements_return statements270 = null;

        PL_SQLParser.anonymous_block_return anonymous_block272 = null;


        CommonTree SEPARATOR271_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:25: ( ( ( label )* statements ( SEPARATOR )? ) | anonymous_block )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==NUMBER_UNSIGNED||LA113_0==STRING||(LA113_0>=IDENTIFIER && LA113_0<=EXT_IDENTIFIER)||LA113_0==NULL_KEYWORD||(LA113_0>=TRUE_KEYWORD && LA113_0<=FALSE_KEYWORD)||LA113_0==INTERVAL_KEYWORD||LA113_0==REPLACE_KEYWORD||(LA113_0>=RETURN_KEYWORD && LA113_0<=IN_KEYWORD)||LA113_0==IF_KEYWORD||(LA113_0>=GOTO_KEYWORD && LA113_0<=FOR_KEYWORD)||LA113_0==SELECT_KEYWORD||(LA113_0>=RAISE_KEYWORD && LA113_0<=PRAGMA_KEYWORD)||(LA113_0>=CASE_KEYWORD && LA113_0<=CLOSE_KEYWORD)||LA113_0==COMMIT_KEYWORD||LA113_0==CONTINUE_KEYWORD||(LA113_0>=DELETE_KEYWORD && LA113_0<=EXECUTE_KEYWORD)||LA113_0==EXIT_KEYWORD||LA113_0==FETCH_KEYWORD||LA113_0==FORALL_KEYWORD||(LA113_0>=INSERT_KEYWORD && LA113_0<=OPEN_KEYWORD)||(LA113_0>=ROLLBACK_KEYWORD && LA113_0<=SAVEPOINT_KEYWORD)||LA113_0==SET_KEYWORD||(LA113_0>=SQLCODE_KEYWORD && LA113_0<=UPDATE_KEYWORD)||LA113_0==RESULT_KEYWORD||LA113_0==NOT_OPERATOR||LA113_0==204||LA113_0==206||(LA113_0>=210 && LA113_0<=211)) ) {
                alt113=1;
            }
            else if ( (LA113_0==BEGIN_KEYWORD||LA113_0==DECLARE_KEYWORD) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:27: ( ( label )* statements ( SEPARATOR )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:27: ( ( label )* statements ( SEPARATOR )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:28: ( label )* statements ( SEPARATOR )?
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:28: ( label )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==204) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:29: label
                    	    {
                    	    pushFollow(FOLLOW_label_in_executable_case_section6543);
                    	    label269=label();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label269.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);

                    pushFollow(FOLLOW_statements_in_executable_case_section6547);
                    statements270=statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statements270.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:48: ( SEPARATOR )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==SEPARATOR) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: SEPARATOR
                            {
                            SEPARATOR271=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_executable_case_section6549); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEPARATOR271_tree = (CommonTree)adaptor.create(SEPARATOR271);
                            adaptor.addChild(root_0, SEPARATOR271_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:687:62: anonymous_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_block_in_executable_case_section6555);
                    anonymous_block272=anonymous_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_block272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, executable_case_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "executable_case_section"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:1: statement : ( label )* statements SEPARATOR ;
    public final PL_SQLParser.statement_return statement() throws RecognitionException {
        PL_SQLParser.statement_return retval = new PL_SQLParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEPARATOR275=null;
        PL_SQLParser.label_return label273 = null;

        PL_SQLParser.statements_return statements274 = null;


        CommonTree SEPARATOR275_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:11: ( ( label )* statements SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:13: ( label )* statements SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:13: ( label )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==204) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:688:14: label
            	    {
            	    pushFollow(FOLLOW_label_in_statement6563);
            	    label273=label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, label273.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            pushFollow(FOLLOW_statements_in_statement6567);
            statements274=statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statements274.getTree());
            SEPARATOR275=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_statement6569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR275_tree = (CommonTree)adaptor.create(SEPARATOR275);
            adaptor.addChild(root_0, SEPARATOR275_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );
    public final PL_SQLParser.statements_return statements() throws RecognitionException {
        PL_SQLParser.statements_return retval = new PL_SQLParser.statements_return();
        retval.start = input.LT(1);
        int statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.expression_return expression276 = null;

        PL_SQLParser.goto_statement_return goto_statement277 = null;

        PL_SQLParser.loop_statement_return loop_statement278 = null;

        PL_SQLParser.while_loop_statement_return while_loop_statement279 = null;

        PL_SQLParser.for_loop_statement_return for_loop_statement280 = null;

        PL_SQLParser.sql_statements_return sql_statements281 = null;

        PL_SQLParser.return_statement_return return_statement282 = null;

        PL_SQLParser.if_statement_return if_statement283 = null;

        PL_SQLParser.raise_statement_return raise_statement284 = null;

        PL_SQLParser.close_statement_return close_statement285 = null;

        PL_SQLParser.continue_statement_return continue_statement286 = null;

        PL_SQLParser.execute_immediate_statement_return execute_immediate_statement287 = null;

        PL_SQLParser.exit_statement_return exit_statement288 = null;

        PL_SQLParser.fetch_statement_return fetch_statement289 = null;

        PL_SQLParser.forall_statement_return forall_statement290 = null;

        PL_SQLParser.pragma_inline_statement_return pragma_inline_statement291 = null;

        PL_SQLParser.open_statement_return open_statement292 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:12: ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement )
            int alt115=17;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:14: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statements6576);
                    expression276=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression276.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:27: goto_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statements6580);
                    goto_statement277=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement277.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:689:44: loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statements6584);
                    loop_statement278=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement278.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:14: while_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_loop_statement_in_statements6601);
                    while_loop_statement279=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_loop_statement279.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:37: for_loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_loop_statement_in_statements6605);
                    for_loop_statement280=for_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement280.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:690:58: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_statements6609);
                    sql_statements281=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements281.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:14: return_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statements6626);
                    return_statement282=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement282.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:33: if_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statements6630);
                    if_statement283=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement283.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:48: raise_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statements6634);
                    raise_statement284=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement284.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:691:66: close_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_statements6638);
                    close_statement285=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement285.getTree());

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:14: continue_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_statements6655);
                    continue_statement286=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement286.getTree());

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:35: execute_immediate_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execute_immediate_statement_in_statements6659);
                    execute_immediate_statement287=execute_immediate_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate_statement287.getTree());

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:692:65: exit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statements6663);
                    exit_statement288=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement288.getTree());

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:14: fetch_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_statements6680);
                    fetch_statement289=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement289.getTree());

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:32: forall_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_forall_statement_in_statements6684);
                    forall_statement290=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement290.getTree());

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:693:51: pragma_inline_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pragma_inline_statement_in_statements6688);
                    pragma_inline_statement291=pragma_inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_inline_statement291.getTree());

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:694:14: open_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_statements6705);
                    open_statement292=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement292.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statements"

    public static class sql_statements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statements"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );
    public final PL_SQLParser.sql_statements_return sql_statements() throws RecognitionException {
        PL_SQLParser.sql_statements_return retval = new PL_SQLParser.sql_statements_return();
        retval.start = input.LT(1);
        int sql_statements_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.select_statement_return select_statement293 = null;

        PL_SQLParser.commit_statement_return commit_statement294 = null;

        PL_SQLParser.delete_statement_return delete_statement295 = null;

        PL_SQLParser.update_statement_return update_statement296 = null;

        PL_SQLParser.insert_statement_return insert_statement297 = null;

        PL_SQLParser.lock_table_statement_return lock_table_statement298 = null;

        PL_SQLParser.merge_statement_return merge_statement299 = null;

        PL_SQLParser.rollback_statement_return rollback_statement300 = null;

        PL_SQLParser.savepoint_statement_return savepoint_statement301 = null;

        PL_SQLParser.set_transaction_statement_return set_transaction_statement302 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:16: ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement )
            int alt116=10;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:18: select_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_select_statement_in_sql_statements6712);
                    select_statement293=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement293.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:37: commit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_sql_statements6716);
                    commit_statement294=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement294.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:56: delete_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_delete_statement_in_sql_statements6720);
                    delete_statement295=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement295.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:695:75: update_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_update_statement_in_sql_statements6724);
                    update_statement296=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement296.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:18: insert_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_insert_statement_in_sql_statements6745);
                    insert_statement297=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement297.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:37: lock_table_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_sql_statements6749);
                    lock_table_statement298=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement298.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:696:60: merge_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_merge_statement_in_sql_statements6753);
                    merge_statement299=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement299.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:18: rollback_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_sql_statements6774);
                    rollback_statement300=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement300.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:39: savepoint_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_sql_statements6778);
                    savepoint_statement301=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement301.getTree());

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:697:61: set_transaction_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_statement_in_sql_statements6782);
                    set_transaction_statement302=set_transaction_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_statement302.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, sql_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statements"

    public static class sql_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:1: sql_operator : ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' );
    public final PL_SQLParser.sql_operator_return sql_operator() throws RecognitionException {
        PL_SQLParser.sql_operator_return retval = new PL_SQLParser.sql_operator_return();
        retval.start = input.LT(1);
        int sql_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set303=null;

        CommonTree set303_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:698:14: ( '+' | '-' | '*' | '/' | '**' | '||' | '=' | '<>' | '!=' | '~=' | '^=' | '>' | '<' | '<=' | '>=' | '(+)' | ',' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set303=(Token)input.LT(1);
            if ( input.LA(1)==COMMA||input.LA(1)==208||(input.LA(1)>=210 && input.LA(1)<=224) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set303));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, sql_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_operator"

    public static class sql_not_parsed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_not_parsed"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );
    public final PL_SQLParser.sql_not_parsed_return sql_not_parsed() throws RecognitionException {
        PL_SQLParser.sql_not_parsed_return retval = new PL_SQLParser.sql_not_parsed_return();
        retval.start = input.LT(1);
        int sql_not_parsed_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ALIAS304=null;
        Token KEYWORD305=null;
        Token INTO_KEYWORD307=null;
        Token IN_KEYWORD308=null;
        Token NOT_OPERATOR309=null;
        Token IN_KEYWORD310=null;
        Token AS_KEYWORD311=null;
        Token VALUES_KEYWORD312=null;
        Token BETWEEN_KEYWORD313=null;
        Token SOME_TYPES314=null;
        Token BULK_KEYWORD315=null;
        Token COLLECT_KEYWORD316=null;
        Token RETURNING_KEYWORD317=null;
        Token ROW_KEYWORD318=null;
        Token SET_KEYWORD319=null;
        Token BY_KEYWORD320=null;
        Token WITH_KEYWORD321=null;
        Token TABLE_KEYWORD322=null;
        Token JOIN_KEYWORD323=null;
        Token EXISTS_KEYWORD324=null;
        Token REPLACE_KEYWORD325=null;
        Token NUMBER_UNSIGNED326=null;
        Token COUNT_KEYWORD327=null;
        Token STRING330=null;
        Token COMMA331=null;
        Token AND_OPERATOR332=null;
        Token OR_OPERATOR333=null;
        Token NOT_OPERATOR334=null;
        Token IS_KEYWORD335=null;
        Token NOT_OPERATOR336=null;
        Token NULL_KEYWORD337=null;
        Token IS_KEYWORD338=null;
        Token NULL_KEYWORD339=null;
        Token NULL_KEYWORD340=null;
        Token LIKE_KEYWORD341=null;
        Token OF_KEYWORD342=null;
        Token THE_REST345=null;
        Token char_literal346=null;
        Token char_literal348=null;
        PL_SQLParser.sql_operator_return sql_operator306 = null;

        PL_SQLParser.universal_identifier_return universal_identifier328 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression329 = null;

        PL_SQLParser.sql_statements_return sql_statements343 = null;

        PL_SQLParser.expression_return expression344 = null;

        PL_SQLParser.sql_not_parsed_return sql_not_parsed347 = null;


        CommonTree ALIAS304_tree=null;
        CommonTree KEYWORD305_tree=null;
        CommonTree INTO_KEYWORD307_tree=null;
        CommonTree IN_KEYWORD308_tree=null;
        CommonTree NOT_OPERATOR309_tree=null;
        CommonTree IN_KEYWORD310_tree=null;
        CommonTree AS_KEYWORD311_tree=null;
        CommonTree VALUES_KEYWORD312_tree=null;
        CommonTree BETWEEN_KEYWORD313_tree=null;
        CommonTree SOME_TYPES314_tree=null;
        CommonTree BULK_KEYWORD315_tree=null;
        CommonTree COLLECT_KEYWORD316_tree=null;
        CommonTree RETURNING_KEYWORD317_tree=null;
        CommonTree ROW_KEYWORD318_tree=null;
        CommonTree SET_KEYWORD319_tree=null;
        CommonTree BY_KEYWORD320_tree=null;
        CommonTree WITH_KEYWORD321_tree=null;
        CommonTree TABLE_KEYWORD322_tree=null;
        CommonTree JOIN_KEYWORD323_tree=null;
        CommonTree EXISTS_KEYWORD324_tree=null;
        CommonTree REPLACE_KEYWORD325_tree=null;
        CommonTree NUMBER_UNSIGNED326_tree=null;
        CommonTree COUNT_KEYWORD327_tree=null;
        CommonTree STRING330_tree=null;
        CommonTree COMMA331_tree=null;
        CommonTree AND_OPERATOR332_tree=null;
        CommonTree OR_OPERATOR333_tree=null;
        CommonTree NOT_OPERATOR334_tree=null;
        CommonTree IS_KEYWORD335_tree=null;
        CommonTree NOT_OPERATOR336_tree=null;
        CommonTree NULL_KEYWORD337_tree=null;
        CommonTree IS_KEYWORD338_tree=null;
        CommonTree NULL_KEYWORD339_tree=null;
        CommonTree NULL_KEYWORD340_tree=null;
        CommonTree LIKE_KEYWORD341_tree=null;
        CommonTree OF_KEYWORD342_tree=null;
        CommonTree THE_REST345_tree=null;
        CommonTree char_literal346_tree=null;
        CommonTree char_literal348_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:16: ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) )
            int alt118=39;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:18: ALIAS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALIAS304=(Token)match(input,ALIAS,FOLLOW_ALIAS_in_sql_not_parsed6876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALIAS304_tree = (CommonTree)adaptor.create(ALIAS304);
                    adaptor.addChild(root_0, ALIAS304_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:26: KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KEYWORD305=(Token)match(input,KEYWORD,FOLLOW_KEYWORD_in_sql_not_parsed6880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KEYWORD305_tree = (CommonTree)adaptor.create(KEYWORD305);
                    adaptor.addChild(root_0, KEYWORD305_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:36: sql_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_operator_in_sql_not_parsed6884);
                    sql_operator306=sql_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_operator306.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:51: INTO_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INTO_KEYWORD307=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_sql_not_parsed6888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO_KEYWORD307_tree = (CommonTree)adaptor.create(INTO_KEYWORD307);
                    adaptor.addChild(root_0, INTO_KEYWORD307_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:66: IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IN_KEYWORD308=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed6892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD308_tree = (CommonTree)adaptor.create(IN_KEYWORD308);
                    adaptor.addChild(root_0, IN_KEYWORD308_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:79: NOT_OPERATOR IN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR309=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed6896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR309_tree = (CommonTree)adaptor.create(NOT_OPERATOR309);
                    adaptor.addChild(root_0, NOT_OPERATOR309_tree);
                    }
                    IN_KEYWORD310=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_sql_not_parsed6898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD310_tree = (CommonTree)adaptor.create(IN_KEYWORD310);
                    adaptor.addChild(root_0, IN_KEYWORD310_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:16: AS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AS_KEYWORD311=(Token)match(input,AS_KEYWORD,FOLLOW_AS_KEYWORD_in_sql_not_parsed6917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS_KEYWORD311_tree = (CommonTree)adaptor.create(AS_KEYWORD311);
                    adaptor.addChild(root_0, AS_KEYWORD311_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:29: VALUES_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VALUES_KEYWORD312=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_sql_not_parsed6921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD312_tree = (CommonTree)adaptor.create(VALUES_KEYWORD312);
                    adaptor.addChild(root_0, VALUES_KEYWORD312_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:46: BETWEEN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BETWEEN_KEYWORD313=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed6925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD313_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD313);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD313_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:702:64: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES314=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_sql_not_parsed6929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES314_tree = (CommonTree)adaptor.create(SOME_TYPES314);
                    adaptor.addChild(root_0, SOME_TYPES314_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:16: BULK_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BULK_KEYWORD315=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_sql_not_parsed6948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BULK_KEYWORD315_tree = (CommonTree)adaptor.create(BULK_KEYWORD315);
                    adaptor.addChild(root_0, BULK_KEYWORD315_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:31: COLLECT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COLLECT_KEYWORD316=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed6952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLLECT_KEYWORD316_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD316);
                    adaptor.addChild(root_0, COLLECT_KEYWORD316_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:49: RETURNING_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETURNING_KEYWORD317=(Token)match(input,RETURNING_KEYWORD,FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed6956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNING_KEYWORD317_tree = (CommonTree)adaptor.create(RETURNING_KEYWORD317);
                    adaptor.addChild(root_0, RETURNING_KEYWORD317_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:703:69: ROW_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ROW_KEYWORD318=(Token)match(input,ROW_KEYWORD,FOLLOW_ROW_KEYWORD_in_sql_not_parsed6960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROW_KEYWORD318_tree = (CommonTree)adaptor.create(ROW_KEYWORD318);
                    adaptor.addChild(root_0, ROW_KEYWORD318_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:16: SET_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SET_KEYWORD319=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_sql_not_parsed6979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SET_KEYWORD319_tree = (CommonTree)adaptor.create(SET_KEYWORD319);
                    adaptor.addChild(root_0, SET_KEYWORD319_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:30: BY_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BY_KEYWORD320=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_sql_not_parsed6983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD320_tree = (CommonTree)adaptor.create(BY_KEYWORD320);
                    adaptor.addChild(root_0, BY_KEYWORD320_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:43: WITH_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH_KEYWORD321=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_sql_not_parsed6987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD321_tree = (CommonTree)adaptor.create(WITH_KEYWORD321);
                    adaptor.addChild(root_0, WITH_KEYWORD321_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:58: TABLE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TABLE_KEYWORD322=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_sql_not_parsed6991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE_KEYWORD322_tree = (CommonTree)adaptor.create(TABLE_KEYWORD322);
                    adaptor.addChild(root_0, TABLE_KEYWORD322_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:74: JOIN_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN_KEYWORD323=(Token)match(input,JOIN_KEYWORD,FOLLOW_JOIN_KEYWORD_in_sql_not_parsed6995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN_KEYWORD323_tree = (CommonTree)adaptor.create(JOIN_KEYWORD323);
                    adaptor.addChild(root_0, JOIN_KEYWORD323_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:16: EXISTS_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS_KEYWORD324=(Token)match(input,EXISTS_KEYWORD,FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS_KEYWORD324_tree = (CommonTree)adaptor.create(EXISTS_KEYWORD324);
                    adaptor.addChild(root_0, EXISTS_KEYWORD324_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:33: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD325=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7018); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD325_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD325);
                    adaptor.addChild(root_0, REPLACE_KEYWORD325_tree);
                    }

                    }
                    break;
                case 22 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:16: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED326=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED326_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED326);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED326_tree);
                    }

                    }
                    break;
                case 23 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:34: COUNT_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT_KEYWORD327=(Token)match(input,COUNT_KEYWORD,FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT_KEYWORD327_tree = (CommonTree)adaptor.create(COUNT_KEYWORD327);
                    adaptor.addChild(root_0, COUNT_KEYWORD327_tree);
                    }

                    }
                    break;
                case 24 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:50: universal_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_universal_identifier_in_sql_not_parsed7045);
                    universal_identifier328=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier328.getTree());

                    }
                    break;
                case 25 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:73: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_sql_not_parsed7049);
                    case_statement_expression329=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression329.getTree());

                    }
                    break;
                case 26 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:16: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING330=(Token)match(input,STRING,FOLLOW_STRING_in_sql_not_parsed7068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING330_tree = (CommonTree)adaptor.create(STRING330);
                    adaptor.addChild(root_0, STRING330_tree);
                    }

                    }
                    break;
                case 27 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:25: COMMA
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_not_parsed7072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA331_tree = (CommonTree)adaptor.create(COMMA331);
                    adaptor.addChild(root_0, COMMA331_tree);
                    }

                    }
                    break;
                case 28 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:33: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR332=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_sql_not_parsed7076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR332_tree = (CommonTree)adaptor.create(AND_OPERATOR332);
                    adaptor.addChild(root_0, AND_OPERATOR332_tree);
                    }

                    }
                    break;
                case 29 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:48: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR333=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_sql_not_parsed7080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR333_tree = (CommonTree)adaptor.create(OR_OPERATOR333);
                    adaptor.addChild(root_0, OR_OPERATOR333_tree);
                    }

                    }
                    break;
                case 30 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:62: NOT_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_OPERATOR334=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR334_tree = (CommonTree)adaptor.create(NOT_OPERATOR334);
                    adaptor.addChild(root_0, NOT_OPERATOR334_tree);
                    }

                    }
                    break;
                case 31 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD335=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD335_tree = (CommonTree)adaptor.create(IS_KEYWORD335);
                    adaptor.addChild(root_0, IS_KEYWORD335_tree);
                    }
                    NOT_OPERATOR336=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_sql_not_parsed7105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR336_tree = (CommonTree)adaptor.create(NOT_OPERATOR336);
                    adaptor.addChild(root_0, NOT_OPERATOR336_tree);
                    }
                    NULL_KEYWORD337=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD337_tree = (CommonTree)adaptor.create(NULL_KEYWORD337);
                    adaptor.addChild(root_0, NULL_KEYWORD337_tree);
                    }

                    }
                    break;
                case 32 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:55: IS_KEYWORD NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IS_KEYWORD338=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_sql_not_parsed7111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD338_tree = (CommonTree)adaptor.create(IS_KEYWORD338);
                    adaptor.addChild(root_0, IS_KEYWORD338_tree);
                    }
                    NULL_KEYWORD339=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD339_tree = (CommonTree)adaptor.create(NULL_KEYWORD339);
                    adaptor.addChild(root_0, NULL_KEYWORD339_tree);
                    }

                    }
                    break;
                case 33 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:81: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD340=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_sql_not_parsed7117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD340_tree = (CommonTree)adaptor.create(NULL_KEYWORD340);
                    adaptor.addChild(root_0, NULL_KEYWORD340_tree);
                    }

                    }
                    break;
                case 34 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:96: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD341=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD341_tree = (CommonTree)adaptor.create(LIKE_KEYWORD341);
                    adaptor.addChild(root_0, LIKE_KEYWORD341_tree);
                    }

                    }
                    break;
                case 35 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:709:16: OF_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OF_KEYWORD342=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_sql_not_parsed7141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD342_tree = (CommonTree)adaptor.create(OF_KEYWORD342);
                    adaptor.addChild(root_0, OF_KEYWORD342_tree);
                    }

                    }
                    break;
                case 36 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:16: sql_statements
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sql_statements_in_sql_not_parsed7160);
                    sql_statements343=sql_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements343.getTree());

                    }
                    break;
                case 37 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:16: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_sql_not_parsed7180);
                    expression344=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression344.getTree());

                    }
                    break;
                case 38 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:29: THE_REST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    THE_REST345=(Token)match(input,THE_REST,FOLLOW_THE_REST_in_sql_not_parsed7184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THE_REST345_tree = (CommonTree)adaptor.create(THE_REST345);
                    adaptor.addChild(root_0, THE_REST345_tree);
                    }

                    }
                    break;
                case 39 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:40: ( '(' ( sql_not_parsed )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:40: ( '(' ( sql_not_parsed )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:41: '(' ( sql_not_parsed )* ')'
                    {
                    char_literal346=(Token)match(input,206,FOLLOW_206_in_sql_not_parsed7189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal346_tree = (CommonTree)adaptor.create(char_literal346);
                    adaptor.addChild(root_0, char_literal346_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:45: ( sql_not_parsed )*
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( ((LA117_0>=NUMBER_UNSIGNED && LA117_0<=OR_OPERATOR)||(LA117_0>=STRING && LA117_0<=SOME_TYPES)||(LA117_0>=KEYWORD && LA117_0<=ALIAS)||LA117_0==COMMA||LA117_0==NULL_KEYWORD||(LA117_0>=TRUE_KEYWORD && LA117_0<=FALSE_KEYWORD)||LA117_0==WITH_KEYWORD||LA117_0==INTERVAL_KEYWORD||LA117_0==IS_KEYWORD||LA117_0==REPLACE_KEYWORD||LA117_0==AS_KEYWORD||LA117_0==IN_KEYWORD||(LA117_0>=SELECT_KEYWORD && LA117_0<=COUNT_KEYWORD)||LA117_0==LIKE_KEYWORD||LA117_0==CASE_KEYWORD||(LA117_0>=TABLE_KEYWORD && LA117_0<=OF_KEYWORD)||LA117_0==BY_KEYWORD||LA117_0==COMMIT_KEYWORD||LA117_0==DELETE_KEYWORD||LA117_0==INTO_KEYWORD||(LA117_0>=BULK_KEYWORD && LA117_0<=COLLECT_KEYWORD)||(LA117_0>=VALUES_KEYWORD && LA117_0<=BETWEEN_KEYWORD)||(LA117_0>=INSERT_KEYWORD && LA117_0<=MERGE_KEYWORD)||(LA117_0>=RETURNING_KEYWORD && LA117_0<=SAVEPOINT_KEYWORD)||LA117_0==SET_KEYWORD||(LA117_0>=SQLCODE_KEYWORD && LA117_0<=EXISTS_KEYWORD)||LA117_0==ROW_KEYWORD||LA117_0==RESULT_KEYWORD||LA117_0==JOIN_KEYWORD||LA117_0==NOT_OPERATOR||LA117_0==THE_REST||LA117_0==206||LA117_0==208||(LA117_0>=210 && LA117_0<=224)) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:46: sql_not_parsed
                    	    {
                    	    pushFollow(FOLLOW_sql_not_parsed_in_sql_not_parsed7192);
                    	    sql_not_parsed347=sql_not_parsed();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed347.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop117;
                        }
                    } while (true);

                    char_literal348=(Token)match(input,207,FOLLOW_207_in_sql_not_parsed7196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal348_tree = (CommonTree)adaptor.create(char_literal348);
                    adaptor.addChild(root_0, char_literal348_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, sql_not_parsed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_not_parsed"

    public static class select_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:1: select_statement : SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ ;
    public final PL_SQLParser.select_statement_return select_statement() throws RecognitionException {
        PL_SQLParser.select_statement_return retval = new PL_SQLParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SELECT_KEYWORD349=null;
        Token ON_KEYWORD351=null;
        Token FOR_KEYWORD352=null;
        Token UPDATE_KEYWORD353=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed350 = null;


        CommonTree SELECT_KEYWORD349_tree=null;
        CommonTree ON_KEYWORD351_tree=null;
        CommonTree FOR_KEYWORD352_tree=null;
        CommonTree UPDATE_KEYWORD353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:18: ( SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:20: SELECT_KEYWORD ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SELECT_KEYWORD349=(Token)match(input,SELECT_KEYWORD,FOLLOW_SELECT_KEYWORD_in_select_statement7207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT_KEYWORD349_tree = (CommonTree)adaptor.create(SELECT_KEYWORD349);
            adaptor.addChild(root_0, SELECT_KEYWORD349_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:35: ( ( sql_not_parsed | ON_KEYWORD ) | ( FOR_KEYWORD UPDATE_KEYWORD ) )+
            int cnt120=0;
            loop120:
            do {
                int alt120=3;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==FOR_KEYWORD) ) {
                    int LA120_1 = input.LA(2);

                    if ( (synpred227_PL_SQL()) ) {
                        alt120=2;
                    }


                }
                else if ( ((LA120_0>=NUMBER_UNSIGNED && LA120_0<=OR_OPERATOR)||(LA120_0>=STRING && LA120_0<=SOME_TYPES)||(LA120_0>=KEYWORD && LA120_0<=ALIAS)||LA120_0==COMMA||LA120_0==NULL_KEYWORD||(LA120_0>=TRUE_KEYWORD && LA120_0<=FALSE_KEYWORD)||LA120_0==WITH_KEYWORD||LA120_0==INTERVAL_KEYWORD||LA120_0==IS_KEYWORD||LA120_0==REPLACE_KEYWORD||LA120_0==AS_KEYWORD||LA120_0==IN_KEYWORD||(LA120_0>=SELECT_KEYWORD && LA120_0<=COUNT_KEYWORD)||LA120_0==LIKE_KEYWORD||LA120_0==CASE_KEYWORD||(LA120_0>=TABLE_KEYWORD && LA120_0<=OF_KEYWORD)||LA120_0==BY_KEYWORD||LA120_0==COMMIT_KEYWORD||LA120_0==DELETE_KEYWORD||LA120_0==INTO_KEYWORD||(LA120_0>=BULK_KEYWORD && LA120_0<=COLLECT_KEYWORD)||(LA120_0>=VALUES_KEYWORD && LA120_0<=BETWEEN_KEYWORD)||(LA120_0>=INSERT_KEYWORD && LA120_0<=MERGE_KEYWORD)||(LA120_0>=RETURNING_KEYWORD && LA120_0<=SAVEPOINT_KEYWORD)||LA120_0==SET_KEYWORD||(LA120_0>=SQLCODE_KEYWORD && LA120_0<=EXISTS_KEYWORD)||LA120_0==ON_KEYWORD||LA120_0==ROW_KEYWORD||LA120_0==RESULT_KEYWORD||LA120_0==JOIN_KEYWORD||LA120_0==NOT_OPERATOR||LA120_0==THE_REST||LA120_0==206||LA120_0==208||(LA120_0>=210 && LA120_0<=224)) ) {
                    int LA120_4 = input.LA(2);

                    if ( (synpred226_PL_SQL()) ) {
                        alt120=1;
                    }


                }


                switch (alt120) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:36: ( sql_not_parsed | ON_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:36: ( sql_not_parsed | ON_KEYWORD )
            	    int alt119=2;
            	    int LA119_0 = input.LA(1);

            	    if ( ((LA119_0>=NUMBER_UNSIGNED && LA119_0<=OR_OPERATOR)||(LA119_0>=STRING && LA119_0<=SOME_TYPES)||(LA119_0>=KEYWORD && LA119_0<=ALIAS)||LA119_0==COMMA||LA119_0==NULL_KEYWORD||(LA119_0>=TRUE_KEYWORD && LA119_0<=FALSE_KEYWORD)||LA119_0==WITH_KEYWORD||LA119_0==INTERVAL_KEYWORD||LA119_0==IS_KEYWORD||LA119_0==REPLACE_KEYWORD||LA119_0==AS_KEYWORD||LA119_0==IN_KEYWORD||(LA119_0>=SELECT_KEYWORD && LA119_0<=COUNT_KEYWORD)||LA119_0==LIKE_KEYWORD||LA119_0==CASE_KEYWORD||(LA119_0>=TABLE_KEYWORD && LA119_0<=OF_KEYWORD)||LA119_0==BY_KEYWORD||LA119_0==COMMIT_KEYWORD||LA119_0==DELETE_KEYWORD||LA119_0==INTO_KEYWORD||(LA119_0>=BULK_KEYWORD && LA119_0<=COLLECT_KEYWORD)||(LA119_0>=VALUES_KEYWORD && LA119_0<=BETWEEN_KEYWORD)||(LA119_0>=INSERT_KEYWORD && LA119_0<=MERGE_KEYWORD)||(LA119_0>=RETURNING_KEYWORD && LA119_0<=SAVEPOINT_KEYWORD)||LA119_0==SET_KEYWORD||(LA119_0>=SQLCODE_KEYWORD && LA119_0<=EXISTS_KEYWORD)||LA119_0==ROW_KEYWORD||LA119_0==RESULT_KEYWORD||LA119_0==JOIN_KEYWORD||LA119_0==NOT_OPERATOR||LA119_0==THE_REST||LA119_0==206||LA119_0==208||(LA119_0>=210 && LA119_0<=224)) ) {
            	        alt119=1;
            	    }
            	    else if ( (LA119_0==ON_KEYWORD) ) {
            	        alt119=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 119, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt119) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:37: sql_not_parsed
            	            {
            	            pushFollow(FOLLOW_sql_not_parsed_in_select_statement7211);
            	            sql_not_parsed350=sql_not_parsed();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed350.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:54: ON_KEYWORD
            	            {
            	            ON_KEYWORD351=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_select_statement7215); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ON_KEYWORD351_tree = (CommonTree)adaptor.create(ON_KEYWORD351);
            	            adaptor.addChild(root_0, ON_KEYWORD351_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    {
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:68: ( FOR_KEYWORD UPDATE_KEYWORD )
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:69: FOR_KEYWORD UPDATE_KEYWORD
            	    {
            	    FOR_KEYWORD352=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_select_statement7221); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR_KEYWORD352_tree = (CommonTree)adaptor.create(FOR_KEYWORD352);
            	    adaptor.addChild(root_0, FOR_KEYWORD352_tree);
            	    }
            	    UPDATE_KEYWORD353=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_select_statement7223); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD353_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD353);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD353_tree);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class commit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:1: commit_statement : COMMIT_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.commit_statement_return commit_statement() throws RecognitionException {
        PL_SQLParser.commit_statement_return retval = new PL_SQLParser.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMIT_KEYWORD354=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed355 = null;


        CommonTree COMMIT_KEYWORD354_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:18: ( COMMIT_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:20: COMMIT_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMIT_KEYWORD354=(Token)match(input,COMMIT_KEYWORD,FOLLOW_COMMIT_KEYWORD_in_commit_statement7233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMIT_KEYWORD354_tree = (CommonTree)adaptor.create(COMMIT_KEYWORD354);
            adaptor.addChild(root_0, COMMIT_KEYWORD354_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:35: ( sql_not_parsed )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=NUMBER_UNSIGNED && LA121_0<=OR_OPERATOR)||(LA121_0>=STRING && LA121_0<=SOME_TYPES)||(LA121_0>=KEYWORD && LA121_0<=ALIAS)||LA121_0==COMMA||LA121_0==NULL_KEYWORD||(LA121_0>=TRUE_KEYWORD && LA121_0<=FALSE_KEYWORD)||LA121_0==WITH_KEYWORD||LA121_0==INTERVAL_KEYWORD||LA121_0==IS_KEYWORD||LA121_0==REPLACE_KEYWORD||LA121_0==AS_KEYWORD||LA121_0==IN_KEYWORD||(LA121_0>=SELECT_KEYWORD && LA121_0<=COUNT_KEYWORD)||LA121_0==LIKE_KEYWORD||LA121_0==CASE_KEYWORD||(LA121_0>=TABLE_KEYWORD && LA121_0<=OF_KEYWORD)||LA121_0==BY_KEYWORD||LA121_0==COMMIT_KEYWORD||LA121_0==DELETE_KEYWORD||LA121_0==INTO_KEYWORD||(LA121_0>=BULK_KEYWORD && LA121_0<=COLLECT_KEYWORD)||(LA121_0>=VALUES_KEYWORD && LA121_0<=BETWEEN_KEYWORD)||(LA121_0>=INSERT_KEYWORD && LA121_0<=MERGE_KEYWORD)||(LA121_0>=RETURNING_KEYWORD && LA121_0<=SAVEPOINT_KEYWORD)||LA121_0==SET_KEYWORD||(LA121_0>=SQLCODE_KEYWORD && LA121_0<=EXISTS_KEYWORD)||LA121_0==ROW_KEYWORD||LA121_0==RESULT_KEYWORD||LA121_0==JOIN_KEYWORD||LA121_0==NOT_OPERATOR||LA121_0==THE_REST||LA121_0==206||LA121_0==208||(LA121_0>=210 && LA121_0<=224)) ) {
                int LA121_2 = input.LA(2);

                if ( (synpred228_PL_SQL()) ) {
                    alt121=1;
                }
            }
            switch (alt121) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_commit_statement7235);
                    sql_not_parsed355=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed355.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class delete_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:1: delete_statement : DELETE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.delete_statement_return delete_statement() throws RecognitionException {
        PL_SQLParser.delete_statement_return retval = new PL_SQLParser.delete_statement_return();
        retval.start = input.LT(1);
        int delete_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DELETE_KEYWORD356=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed357 = null;


        CommonTree DELETE_KEYWORD356_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:18: ( DELETE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:20: DELETE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            DELETE_KEYWORD356=(Token)match(input,DELETE_KEYWORD,FOLLOW_DELETE_KEYWORD_in_delete_statement7243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE_KEYWORD356_tree = (CommonTree)adaptor.create(DELETE_KEYWORD356);
            adaptor.addChild(root_0, DELETE_KEYWORD356_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:35: ( sql_not_parsed )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=NUMBER_UNSIGNED && LA122_0<=OR_OPERATOR)||(LA122_0>=STRING && LA122_0<=SOME_TYPES)||(LA122_0>=KEYWORD && LA122_0<=ALIAS)||LA122_0==COMMA||LA122_0==NULL_KEYWORD||(LA122_0>=TRUE_KEYWORD && LA122_0<=FALSE_KEYWORD)||LA122_0==WITH_KEYWORD||LA122_0==INTERVAL_KEYWORD||LA122_0==IS_KEYWORD||LA122_0==REPLACE_KEYWORD||LA122_0==AS_KEYWORD||LA122_0==IN_KEYWORD||(LA122_0>=SELECT_KEYWORD && LA122_0<=COUNT_KEYWORD)||LA122_0==LIKE_KEYWORD||LA122_0==CASE_KEYWORD||(LA122_0>=TABLE_KEYWORD && LA122_0<=OF_KEYWORD)||LA122_0==BY_KEYWORD||LA122_0==COMMIT_KEYWORD||LA122_0==DELETE_KEYWORD||LA122_0==INTO_KEYWORD||(LA122_0>=BULK_KEYWORD && LA122_0<=COLLECT_KEYWORD)||(LA122_0>=VALUES_KEYWORD && LA122_0<=BETWEEN_KEYWORD)||(LA122_0>=INSERT_KEYWORD && LA122_0<=MERGE_KEYWORD)||(LA122_0>=RETURNING_KEYWORD && LA122_0<=SAVEPOINT_KEYWORD)||LA122_0==SET_KEYWORD||(LA122_0>=SQLCODE_KEYWORD && LA122_0<=EXISTS_KEYWORD)||LA122_0==ROW_KEYWORD||LA122_0==RESULT_KEYWORD||LA122_0==JOIN_KEYWORD||LA122_0==NOT_OPERATOR||LA122_0==THE_REST||LA122_0==206||LA122_0==208||(LA122_0>=210 && LA122_0<=224)) ) {
                    int LA122_2 = input.LA(2);

                    if ( (synpred229_PL_SQL()) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_delete_statement7246);
            	    sql_not_parsed357=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed357.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, delete_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_statement"

    public static class insert_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:1: insert_statement : INSERT_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.insert_statement_return insert_statement() throws RecognitionException {
        PL_SQLParser.insert_statement_return retval = new PL_SQLParser.insert_statement_return();
        retval.start = input.LT(1);
        int insert_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSERT_KEYWORD358=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed359 = null;


        CommonTree INSERT_KEYWORD358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:18: ( INSERT_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:20: INSERT_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            INSERT_KEYWORD358=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_insert_statement7255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT_KEYWORD358_tree = (CommonTree)adaptor.create(INSERT_KEYWORD358);
            adaptor.addChild(root_0, INSERT_KEYWORD358_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:35: ( sql_not_parsed )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( ((LA123_0>=NUMBER_UNSIGNED && LA123_0<=OR_OPERATOR)||(LA123_0>=STRING && LA123_0<=SOME_TYPES)||(LA123_0>=KEYWORD && LA123_0<=ALIAS)||LA123_0==COMMA||LA123_0==NULL_KEYWORD||(LA123_0>=TRUE_KEYWORD && LA123_0<=FALSE_KEYWORD)||LA123_0==WITH_KEYWORD||LA123_0==INTERVAL_KEYWORD||LA123_0==IS_KEYWORD||LA123_0==REPLACE_KEYWORD||LA123_0==AS_KEYWORD||LA123_0==IN_KEYWORD||(LA123_0>=SELECT_KEYWORD && LA123_0<=COUNT_KEYWORD)||LA123_0==LIKE_KEYWORD||LA123_0==CASE_KEYWORD||(LA123_0>=TABLE_KEYWORD && LA123_0<=OF_KEYWORD)||LA123_0==BY_KEYWORD||LA123_0==COMMIT_KEYWORD||LA123_0==DELETE_KEYWORD||LA123_0==INTO_KEYWORD||(LA123_0>=BULK_KEYWORD && LA123_0<=COLLECT_KEYWORD)||(LA123_0>=VALUES_KEYWORD && LA123_0<=BETWEEN_KEYWORD)||(LA123_0>=INSERT_KEYWORD && LA123_0<=MERGE_KEYWORD)||(LA123_0>=RETURNING_KEYWORD && LA123_0<=SAVEPOINT_KEYWORD)||LA123_0==SET_KEYWORD||(LA123_0>=SQLCODE_KEYWORD && LA123_0<=EXISTS_KEYWORD)||LA123_0==ROW_KEYWORD||LA123_0==RESULT_KEYWORD||LA123_0==JOIN_KEYWORD||LA123_0==NOT_OPERATOR||LA123_0==THE_REST||LA123_0==206||LA123_0==208||(LA123_0>=210 && LA123_0<=224)) ) {
                    int LA123_2 = input.LA(2);

                    if ( (synpred230_PL_SQL()) ) {
                        alt123=1;
                    }


                }


                switch (alt123) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_insert_statement7258);
            	    sql_not_parsed359=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed359.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, insert_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:1: lock_table_statement : LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        PL_SQLParser.lock_table_statement_return retval = new PL_SQLParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOCK_KEYWORD360=null;
        Token TABLE_KEYWORD361=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed362 = null;


        CommonTree LOCK_KEYWORD360_tree=null;
        CommonTree TABLE_KEYWORD361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:22: ( LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:24: LOCK_KEYWORD TABLE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            LOCK_KEYWORD360=(Token)match(input,LOCK_KEYWORD,FOLLOW_LOCK_KEYWORD_in_lock_table_statement7267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOCK_KEYWORD360_tree = (CommonTree)adaptor.create(LOCK_KEYWORD360);
            adaptor.addChild(root_0, LOCK_KEYWORD360_tree);
            }
            TABLE_KEYWORD361=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_lock_table_statement7269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD361_tree = (CommonTree)adaptor.create(TABLE_KEYWORD361);
            adaptor.addChild(root_0, TABLE_KEYWORD361_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:51: ( sql_not_parsed )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0>=NUMBER_UNSIGNED && LA124_0<=OR_OPERATOR)||(LA124_0>=STRING && LA124_0<=SOME_TYPES)||(LA124_0>=KEYWORD && LA124_0<=ALIAS)||LA124_0==COMMA||LA124_0==NULL_KEYWORD||(LA124_0>=TRUE_KEYWORD && LA124_0<=FALSE_KEYWORD)||LA124_0==WITH_KEYWORD||LA124_0==INTERVAL_KEYWORD||LA124_0==IS_KEYWORD||LA124_0==REPLACE_KEYWORD||LA124_0==AS_KEYWORD||LA124_0==IN_KEYWORD||(LA124_0>=SELECT_KEYWORD && LA124_0<=COUNT_KEYWORD)||LA124_0==LIKE_KEYWORD||LA124_0==CASE_KEYWORD||(LA124_0>=TABLE_KEYWORD && LA124_0<=OF_KEYWORD)||LA124_0==BY_KEYWORD||LA124_0==COMMIT_KEYWORD||LA124_0==DELETE_KEYWORD||LA124_0==INTO_KEYWORD||(LA124_0>=BULK_KEYWORD && LA124_0<=COLLECT_KEYWORD)||(LA124_0>=VALUES_KEYWORD && LA124_0<=BETWEEN_KEYWORD)||(LA124_0>=INSERT_KEYWORD && LA124_0<=MERGE_KEYWORD)||(LA124_0>=RETURNING_KEYWORD && LA124_0<=SAVEPOINT_KEYWORD)||LA124_0==SET_KEYWORD||(LA124_0>=SQLCODE_KEYWORD && LA124_0<=EXISTS_KEYWORD)||LA124_0==ROW_KEYWORD||LA124_0==RESULT_KEYWORD||LA124_0==JOIN_KEYWORD||LA124_0==NOT_OPERATOR||LA124_0==THE_REST||LA124_0==206||LA124_0==208||(LA124_0>=210 && LA124_0<=224)) ) {
                    int LA124_1 = input.LA(2);

                    if ( (synpred231_PL_SQL()) ) {
                        alt124=1;
                    }


                }


                switch (alt124) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:52: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_lock_table_statement7272);
            	    sql_not_parsed362=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed362.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class merge_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "merge_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:1: merge_statement : MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ ;
    public final PL_SQLParser.merge_statement_return merge_statement() throws RecognitionException {
        PL_SQLParser.merge_statement_return retval = new PL_SQLParser.merge_statement_return();
        retval.start = input.LT(1);
        int merge_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token MERGE_KEYWORD363=null;
        Token ON_KEYWORD365=null;
        Token USING_KEYWORD366=null;
        Token WHEN_KEYWORD367=null;
        Token THEN_KEYWORD368=null;
        Token INSERT_KEYWORD369=null;
        Token UPDATE_KEYWORD370=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed364 = null;


        CommonTree MERGE_KEYWORD363_tree=null;
        CommonTree ON_KEYWORD365_tree=null;
        CommonTree USING_KEYWORD366_tree=null;
        CommonTree WHEN_KEYWORD367_tree=null;
        CommonTree THEN_KEYWORD368_tree=null;
        CommonTree INSERT_KEYWORD369_tree=null;
        CommonTree UPDATE_KEYWORD370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:17: ( MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:19: MERGE_KEYWORD ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            {
            root_0 = (CommonTree)adaptor.nil();

            MERGE_KEYWORD363=(Token)match(input,MERGE_KEYWORD,FOLLOW_MERGE_KEYWORD_in_merge_statement7281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MERGE_KEYWORD363_tree = (CommonTree)adaptor.create(MERGE_KEYWORD363);
            adaptor.addChild(root_0, MERGE_KEYWORD363_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+
            int cnt125=0;
            loop125:
            do {
                int alt125=8;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:34: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_merge_statement7284);
            	    sql_not_parsed364=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed364.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:51: ON_KEYWORD
            	    {
            	    ON_KEYWORD365=(Token)match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_merge_statement7288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON_KEYWORD365_tree = (CommonTree)adaptor.create(ON_KEYWORD365);
            	    adaptor.addChild(root_0, ON_KEYWORD365_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:19: USING_KEYWORD
            	    {
            	    USING_KEYWORD366=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_merge_statement7310); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    USING_KEYWORD366_tree = (CommonTree)adaptor.create(USING_KEYWORD366);
            	    adaptor.addChild(root_0, USING_KEYWORD366_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:35: WHEN_KEYWORD
            	    {
            	    WHEN_KEYWORD367=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_merge_statement7314); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    WHEN_KEYWORD367_tree = (CommonTree)adaptor.create(WHEN_KEYWORD367);
            	    adaptor.addChild(root_0, WHEN_KEYWORD367_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:50: THEN_KEYWORD
            	    {
            	    THEN_KEYWORD368=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_merge_statement7318); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    THEN_KEYWORD368_tree = (CommonTree)adaptor.create(THEN_KEYWORD368);
            	    adaptor.addChild(root_0, THEN_KEYWORD368_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:65: INSERT_KEYWORD
            	    {
            	    INSERT_KEYWORD369=(Token)match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_merge_statement7322); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    INSERT_KEYWORD369_tree = (CommonTree)adaptor.create(INSERT_KEYWORD369);
            	    adaptor.addChild(root_0, INSERT_KEYWORD369_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:19: UPDATE_KEYWORD
            	    {
            	    UPDATE_KEYWORD370=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_merge_statement7344); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    UPDATE_KEYWORD370_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD370);
            	    adaptor.addChild(root_0, UPDATE_KEYWORD370_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, merge_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "merge_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:1: rollback_statement : ROLLBACK_KEYWORD ( sql_not_parsed )? ;
    public final PL_SQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
        PL_SQLParser.rollback_statement_return retval = new PL_SQLParser.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ROLLBACK_KEYWORD371=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed372 = null;


        CommonTree ROLLBACK_KEYWORD371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:20: ( ROLLBACK_KEYWORD ( sql_not_parsed )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:22: ROLLBACK_KEYWORD ( sql_not_parsed )?
            {
            root_0 = (CommonTree)adaptor.nil();

            ROLLBACK_KEYWORD371=(Token)match(input,ROLLBACK_KEYWORD,FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ROLLBACK_KEYWORD371_tree = (CommonTree)adaptor.create(ROLLBACK_KEYWORD371);
            adaptor.addChild(root_0, ROLLBACK_KEYWORD371_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:39: ( sql_not_parsed )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( ((LA126_0>=NUMBER_UNSIGNED && LA126_0<=OR_OPERATOR)||(LA126_0>=STRING && LA126_0<=SOME_TYPES)||(LA126_0>=KEYWORD && LA126_0<=ALIAS)||LA126_0==COMMA||LA126_0==NULL_KEYWORD||(LA126_0>=TRUE_KEYWORD && LA126_0<=FALSE_KEYWORD)||LA126_0==WITH_KEYWORD||LA126_0==INTERVAL_KEYWORD||LA126_0==IS_KEYWORD||LA126_0==REPLACE_KEYWORD||LA126_0==AS_KEYWORD||LA126_0==IN_KEYWORD||(LA126_0>=SELECT_KEYWORD && LA126_0<=COUNT_KEYWORD)||LA126_0==LIKE_KEYWORD||LA126_0==CASE_KEYWORD||(LA126_0>=TABLE_KEYWORD && LA126_0<=OF_KEYWORD)||LA126_0==BY_KEYWORD||LA126_0==COMMIT_KEYWORD||LA126_0==DELETE_KEYWORD||LA126_0==INTO_KEYWORD||(LA126_0>=BULK_KEYWORD && LA126_0<=COLLECT_KEYWORD)||(LA126_0>=VALUES_KEYWORD && LA126_0<=BETWEEN_KEYWORD)||(LA126_0>=INSERT_KEYWORD && LA126_0<=MERGE_KEYWORD)||(LA126_0>=RETURNING_KEYWORD && LA126_0<=SAVEPOINT_KEYWORD)||LA126_0==SET_KEYWORD||(LA126_0>=SQLCODE_KEYWORD && LA126_0<=EXISTS_KEYWORD)||LA126_0==ROW_KEYWORD||LA126_0==RESULT_KEYWORD||LA126_0==JOIN_KEYWORD||LA126_0==NOT_OPERATOR||LA126_0==THE_REST||LA126_0==206||LA126_0==208||(LA126_0>=210 && LA126_0<=224)) ) {
                int LA126_2 = input.LA(2);

                if ( (synpred239_PL_SQL()) ) {
                    alt126=1;
                }
            }
            switch (alt126) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: sql_not_parsed
                    {
                    pushFollow(FOLLOW_sql_not_parsed_in_rollback_statement7355);
                    sql_not_parsed372=sql_not_parsed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed372.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:1: savepoint_statement : SAVEPOINT_KEYWORD identifier ;
    public final PL_SQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        PL_SQLParser.savepoint_statement_return retval = new PL_SQLParser.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SAVEPOINT_KEYWORD373=null;
        PL_SQLParser.identifier_return identifier374 = null;


        CommonTree SAVEPOINT_KEYWORD373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:21: ( SAVEPOINT_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:724:23: SAVEPOINT_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            SAVEPOINT_KEYWORD373=(Token)match(input,SAVEPOINT_KEYWORD,FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAVEPOINT_KEYWORD373_tree = (CommonTree)adaptor.create(SAVEPOINT_KEYWORD373);
            adaptor.addChild(root_0, SAVEPOINT_KEYWORD373_tree);
            }
            pushFollow(FOLLOW_identifier_in_savepoint_statement7365);
            identifier374=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier374.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class set_transaction_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:1: set_transaction_statement : SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.set_transaction_statement_return set_transaction_statement() throws RecognitionException {
        PL_SQLParser.set_transaction_statement_return retval = new PL_SQLParser.set_transaction_statement_return();
        retval.start = input.LT(1);
        int set_transaction_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SET_KEYWORD375=null;
        Token TRANSACTION_KEYWORD376=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed377 = null;


        CommonTree SET_KEYWORD375_tree=null;
        CommonTree TRANSACTION_KEYWORD376_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:27: ( SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:29: SET_KEYWORD TRANSACTION_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            SET_KEYWORD375=(Token)match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_set_transaction_statement7372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SET_KEYWORD375_tree = (CommonTree)adaptor.create(SET_KEYWORD375);
            adaptor.addChild(root_0, SET_KEYWORD375_tree);
            }
            TRANSACTION_KEYWORD376=(Token)match(input,TRANSACTION_KEYWORD,FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRANSACTION_KEYWORD376_tree = (CommonTree)adaptor.create(TRANSACTION_KEYWORD376);
            adaptor.addChild(root_0, TRANSACTION_KEYWORD376_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:61: ( sql_not_parsed )+
            int cnt127=0;
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( ((LA127_0>=NUMBER_UNSIGNED && LA127_0<=OR_OPERATOR)||(LA127_0>=STRING && LA127_0<=SOME_TYPES)||(LA127_0>=KEYWORD && LA127_0<=ALIAS)||LA127_0==COMMA||LA127_0==NULL_KEYWORD||(LA127_0>=TRUE_KEYWORD && LA127_0<=FALSE_KEYWORD)||LA127_0==WITH_KEYWORD||LA127_0==INTERVAL_KEYWORD||LA127_0==IS_KEYWORD||LA127_0==REPLACE_KEYWORD||LA127_0==AS_KEYWORD||LA127_0==IN_KEYWORD||(LA127_0>=SELECT_KEYWORD && LA127_0<=COUNT_KEYWORD)||LA127_0==LIKE_KEYWORD||LA127_0==CASE_KEYWORD||(LA127_0>=TABLE_KEYWORD && LA127_0<=OF_KEYWORD)||LA127_0==BY_KEYWORD||LA127_0==COMMIT_KEYWORD||LA127_0==DELETE_KEYWORD||LA127_0==INTO_KEYWORD||(LA127_0>=BULK_KEYWORD && LA127_0<=COLLECT_KEYWORD)||(LA127_0>=VALUES_KEYWORD && LA127_0<=BETWEEN_KEYWORD)||(LA127_0>=INSERT_KEYWORD && LA127_0<=MERGE_KEYWORD)||(LA127_0>=RETURNING_KEYWORD && LA127_0<=SAVEPOINT_KEYWORD)||LA127_0==SET_KEYWORD||(LA127_0>=SQLCODE_KEYWORD && LA127_0<=EXISTS_KEYWORD)||LA127_0==ROW_KEYWORD||LA127_0==RESULT_KEYWORD||LA127_0==JOIN_KEYWORD||LA127_0==NOT_OPERATOR||LA127_0==THE_REST||LA127_0==206||LA127_0==208||(LA127_0>=210 && LA127_0<=224)) ) {
                    int LA127_2 = input.LA(2);

                    if ( (synpred240_PL_SQL()) ) {
                        alt127=1;
                    }


                }


                switch (alt127) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:62: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_set_transaction_statement7377);
            	    sql_not_parsed377=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed377.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, set_transaction_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_statement"

    public static class update_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:1: update_statement : UPDATE_KEYWORD ( sql_not_parsed )+ ;
    public final PL_SQLParser.update_statement_return update_statement() throws RecognitionException {
        PL_SQLParser.update_statement_return retval = new PL_SQLParser.update_statement_return();
        retval.start = input.LT(1);
        int update_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token UPDATE_KEYWORD378=null;
        PL_SQLParser.sql_not_parsed_return sql_not_parsed379 = null;


        CommonTree UPDATE_KEYWORD378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:18: ( UPDATE_KEYWORD ( sql_not_parsed )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:20: UPDATE_KEYWORD ( sql_not_parsed )+
            {
            root_0 = (CommonTree)adaptor.nil();

            UPDATE_KEYWORD378=(Token)match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_update_statement7386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UPDATE_KEYWORD378_tree = (CommonTree)adaptor.create(UPDATE_KEYWORD378);
            adaptor.addChild(root_0, UPDATE_KEYWORD378_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:35: ( sql_not_parsed )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( ((LA128_0>=NUMBER_UNSIGNED && LA128_0<=OR_OPERATOR)||(LA128_0>=STRING && LA128_0<=SOME_TYPES)||(LA128_0>=KEYWORD && LA128_0<=ALIAS)||LA128_0==COMMA||LA128_0==NULL_KEYWORD||(LA128_0>=TRUE_KEYWORD && LA128_0<=FALSE_KEYWORD)||LA128_0==WITH_KEYWORD||LA128_0==INTERVAL_KEYWORD||LA128_0==IS_KEYWORD||LA128_0==REPLACE_KEYWORD||LA128_0==AS_KEYWORD||LA128_0==IN_KEYWORD||(LA128_0>=SELECT_KEYWORD && LA128_0<=COUNT_KEYWORD)||LA128_0==LIKE_KEYWORD||LA128_0==CASE_KEYWORD||(LA128_0>=TABLE_KEYWORD && LA128_0<=OF_KEYWORD)||LA128_0==BY_KEYWORD||LA128_0==COMMIT_KEYWORD||LA128_0==DELETE_KEYWORD||LA128_0==INTO_KEYWORD||(LA128_0>=BULK_KEYWORD && LA128_0<=COLLECT_KEYWORD)||(LA128_0>=VALUES_KEYWORD && LA128_0<=BETWEEN_KEYWORD)||(LA128_0>=INSERT_KEYWORD && LA128_0<=MERGE_KEYWORD)||(LA128_0>=RETURNING_KEYWORD && LA128_0<=SAVEPOINT_KEYWORD)||LA128_0==SET_KEYWORD||(LA128_0>=SQLCODE_KEYWORD && LA128_0<=EXISTS_KEYWORD)||LA128_0==ROW_KEYWORD||LA128_0==RESULT_KEYWORD||LA128_0==JOIN_KEYWORD||LA128_0==NOT_OPERATOR||LA128_0==THE_REST||LA128_0==206||LA128_0==208||(LA128_0>=210 && LA128_0<=224)) ) {
                    int LA128_1 = input.LA(2);

                    if ( (synpred241_PL_SQL()) ) {
                        alt128=1;
                    }


                }


                switch (alt128) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:36: sql_not_parsed
            	    {
            	    pushFollow(FOLLOW_sql_not_parsed_in_update_statement7389);
            	    sql_not_parsed379=sql_not_parsed();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_not_parsed379.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, update_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:1: goto_statement : GOTO_KEYWORD identifier ;
    public final PL_SQLParser.goto_statement_return goto_statement() throws RecognitionException {
        PL_SQLParser.goto_statement_return retval = new PL_SQLParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GOTO_KEYWORD380=null;
        PL_SQLParser.identifier_return identifier381 = null;


        CommonTree GOTO_KEYWORD380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:16: ( GOTO_KEYWORD identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:729:18: GOTO_KEYWORD identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            GOTO_KEYWORD380=(Token)match(input,GOTO_KEYWORD,FOLLOW_GOTO_KEYWORD_in_goto_statement7400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOTO_KEYWORD380_tree = (CommonTree)adaptor.create(GOTO_KEYWORD380);
            adaptor.addChild(root_0, GOTO_KEYWORD380_tree);
            }
            pushFollow(FOLLOW_identifier_in_goto_statement7402);
            identifier381=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier381.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:1: return_statement : RETURN_KEYWORD ( expression )? ;
    public final PL_SQLParser.return_statement_return return_statement() throws RecognitionException {
        PL_SQLParser.return_statement_return retval = new PL_SQLParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RETURN_KEYWORD382=null;
        PL_SQLParser.expression_return expression383 = null;


        CommonTree RETURN_KEYWORD382_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:18: ( RETURN_KEYWORD ( expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:20: RETURN_KEYWORD ( expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RETURN_KEYWORD382=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_return_statement7409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN_KEYWORD382_tree = (CommonTree)adaptor.create(RETURN_KEYWORD382);
            adaptor.addChild(root_0, RETURN_KEYWORD382_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:35: ( expression )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NUMBER_UNSIGNED||LA129_0==STRING||(LA129_0>=IDENTIFIER && LA129_0<=EXT_IDENTIFIER)||LA129_0==NULL_KEYWORD||(LA129_0>=TRUE_KEYWORD && LA129_0<=FALSE_KEYWORD)||LA129_0==INTERVAL_KEYWORD||LA129_0==REPLACE_KEYWORD||LA129_0==IN_KEYWORD||LA129_0==CASE_KEYWORD||(LA129_0>=SQLCODE_KEYWORD && LA129_0<=SQLERRM_KEYWORD)||LA129_0==RESULT_KEYWORD||LA129_0==NOT_OPERATOR||LA129_0==206||(LA129_0>=210 && LA129_0<=211)) ) {
                int LA129_1 = input.LA(2);

                if ( (synpred242_PL_SQL()) ) {
                    alt129=1;
                }
            }
            switch (alt129) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7411);
                    expression383=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression383.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:1: if_statement : IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) ;
    public final PL_SQLParser.if_statement_return if_statement() throws RecognitionException {
        PL_SQLParser.if_statement_return retval = new PL_SQLParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IF_KEYWORD384=null;
        Token THEN_KEYWORD386=null;
        Token ELSIF_KEYWORD388=null;
        Token THEN_KEYWORD390=null;
        Token ELSE_KEYWORD392=null;
        Token END_KEYWORD394=null;
        Token IF_KEYWORD395=null;
        PL_SQLParser.expression_return expression385 = null;

        PL_SQLParser.executable_section_return executable_section387 = null;

        PL_SQLParser.expression_return expression389 = null;

        PL_SQLParser.executable_section_return executable_section391 = null;

        PL_SQLParser.executable_section_return executable_section393 = null;


        CommonTree IF_KEYWORD384_tree=null;
        CommonTree THEN_KEYWORD386_tree=null;
        CommonTree ELSIF_KEYWORD388_tree=null;
        CommonTree THEN_KEYWORD390_tree=null;
        CommonTree ELSE_KEYWORD392_tree=null;
        CommonTree END_KEYWORD394_tree=null;
        CommonTree IF_KEYWORD395_tree=null;
        RewriteRuleTokenStream stream_ELSIF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSIF_KEYWORD");
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_IF_KEYWORD=new RewriteRuleTokenStream(adaptor,"token IF_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:14: ( IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:16: IF_KEYWORD expression THEN_KEYWORD ( executable_section )+ ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )* ( ELSE_KEYWORD ( executable_section )+ )? END_KEYWORD IF_KEYWORD
            {
            IF_KEYWORD384=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD384);

            pushFollow(FOLLOW_expression_in_if_statement7421);
            expression385=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression385.getTree());
            THEN_KEYWORD386=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD386);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:51: ( executable_section )+
            int cnt130=0;
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==NUMBER_UNSIGNED||LA130_0==STRING||(LA130_0>=IDENTIFIER && LA130_0<=EXT_IDENTIFIER)||LA130_0==BEGIN_KEYWORD||LA130_0==DECLARE_KEYWORD||LA130_0==NULL_KEYWORD||(LA130_0>=TRUE_KEYWORD && LA130_0<=FALSE_KEYWORD)||LA130_0==INTERVAL_KEYWORD||LA130_0==REPLACE_KEYWORD||(LA130_0>=RETURN_KEYWORD && LA130_0<=IN_KEYWORD)||LA130_0==IF_KEYWORD||(LA130_0>=GOTO_KEYWORD && LA130_0<=FOR_KEYWORD)||LA130_0==SELECT_KEYWORD||(LA130_0>=RAISE_KEYWORD && LA130_0<=PRAGMA_KEYWORD)||(LA130_0>=CASE_KEYWORD && LA130_0<=CLOSE_KEYWORD)||LA130_0==COMMIT_KEYWORD||LA130_0==CONTINUE_KEYWORD||(LA130_0>=DELETE_KEYWORD && LA130_0<=EXECUTE_KEYWORD)||LA130_0==EXIT_KEYWORD||LA130_0==FETCH_KEYWORD||LA130_0==FORALL_KEYWORD||(LA130_0>=INSERT_KEYWORD && LA130_0<=OPEN_KEYWORD)||(LA130_0>=ROLLBACK_KEYWORD && LA130_0<=SAVEPOINT_KEYWORD)||LA130_0==SET_KEYWORD||(LA130_0>=SQLCODE_KEYWORD && LA130_0<=UPDATE_KEYWORD)||LA130_0==RESULT_KEYWORD||LA130_0==NOT_OPERATOR||LA130_0==204||LA130_0==206||(LA130_0>=210 && LA130_0<=211)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:731:52: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_if_statement7426);
            	    executable_section387=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section387.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt130 >= 1 ) break loop130;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(130, input);
                        throw eee;
                }
                cnt130++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:16: ( ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+ )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==ELSIF_KEYWORD) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:17: ELSIF_KEYWORD expression THEN_KEYWORD ( executable_section )+
            	    {
            	    ELSIF_KEYWORD388=(Token)match(input,ELSIF_KEYWORD,FOLLOW_ELSIF_KEYWORD_in_if_statement7446); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ELSIF_KEYWORD.add(ELSIF_KEYWORD388);

            	    pushFollow(FOLLOW_expression_in_if_statement7448);
            	    expression389=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression389.getTree());
            	    THEN_KEYWORD390=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_if_statement7450); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD390);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:55: ( executable_section )+
            	    int cnt131=0;
            	    loop131:
            	    do {
            	        int alt131=2;
            	        int LA131_0 = input.LA(1);

            	        if ( (LA131_0==NUMBER_UNSIGNED||LA131_0==STRING||(LA131_0>=IDENTIFIER && LA131_0<=EXT_IDENTIFIER)||LA131_0==BEGIN_KEYWORD||LA131_0==DECLARE_KEYWORD||LA131_0==NULL_KEYWORD||(LA131_0>=TRUE_KEYWORD && LA131_0<=FALSE_KEYWORD)||LA131_0==INTERVAL_KEYWORD||LA131_0==REPLACE_KEYWORD||(LA131_0>=RETURN_KEYWORD && LA131_0<=IN_KEYWORD)||LA131_0==IF_KEYWORD||(LA131_0>=GOTO_KEYWORD && LA131_0<=FOR_KEYWORD)||LA131_0==SELECT_KEYWORD||(LA131_0>=RAISE_KEYWORD && LA131_0<=PRAGMA_KEYWORD)||(LA131_0>=CASE_KEYWORD && LA131_0<=CLOSE_KEYWORD)||LA131_0==COMMIT_KEYWORD||LA131_0==CONTINUE_KEYWORD||(LA131_0>=DELETE_KEYWORD && LA131_0<=EXECUTE_KEYWORD)||LA131_0==EXIT_KEYWORD||LA131_0==FETCH_KEYWORD||LA131_0==FORALL_KEYWORD||(LA131_0>=INSERT_KEYWORD && LA131_0<=OPEN_KEYWORD)||(LA131_0>=ROLLBACK_KEYWORD && LA131_0<=SAVEPOINT_KEYWORD)||LA131_0==SET_KEYWORD||(LA131_0>=SQLCODE_KEYWORD && LA131_0<=UPDATE_KEYWORD)||LA131_0==RESULT_KEYWORD||LA131_0==NOT_OPERATOR||LA131_0==204||LA131_0==206||(LA131_0>=210 && LA131_0<=211)) ) {
            	            alt131=1;
            	        }


            	        switch (alt131) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:732:56: executable_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_section_in_if_statement7453);
            	    	    executable_section391=executable_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section391.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt131 >= 1 ) break loop131;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(131, input);
            	                throw eee;
            	        }
            	        cnt131++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:16: ( ELSE_KEYWORD ( executable_section )+ )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==ELSE_KEYWORD) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:17: ELSE_KEYWORD ( executable_section )+
                    {
                    ELSE_KEYWORD392=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_if_statement7475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD392);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:30: ( executable_section )+
                    int cnt133=0;
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==NUMBER_UNSIGNED||LA133_0==STRING||(LA133_0>=IDENTIFIER && LA133_0<=EXT_IDENTIFIER)||LA133_0==BEGIN_KEYWORD||LA133_0==DECLARE_KEYWORD||LA133_0==NULL_KEYWORD||(LA133_0>=TRUE_KEYWORD && LA133_0<=FALSE_KEYWORD)||LA133_0==INTERVAL_KEYWORD||LA133_0==REPLACE_KEYWORD||(LA133_0>=RETURN_KEYWORD && LA133_0<=IN_KEYWORD)||LA133_0==IF_KEYWORD||(LA133_0>=GOTO_KEYWORD && LA133_0<=FOR_KEYWORD)||LA133_0==SELECT_KEYWORD||(LA133_0>=RAISE_KEYWORD && LA133_0<=PRAGMA_KEYWORD)||(LA133_0>=CASE_KEYWORD && LA133_0<=CLOSE_KEYWORD)||LA133_0==COMMIT_KEYWORD||LA133_0==CONTINUE_KEYWORD||(LA133_0>=DELETE_KEYWORD && LA133_0<=EXECUTE_KEYWORD)||LA133_0==EXIT_KEYWORD||LA133_0==FETCH_KEYWORD||LA133_0==FORALL_KEYWORD||(LA133_0>=INSERT_KEYWORD && LA133_0<=OPEN_KEYWORD)||(LA133_0>=ROLLBACK_KEYWORD && LA133_0<=SAVEPOINT_KEYWORD)||LA133_0==SET_KEYWORD||(LA133_0>=SQLCODE_KEYWORD && LA133_0<=UPDATE_KEYWORD)||LA133_0==RESULT_KEYWORD||LA133_0==NOT_OPERATOR||LA133_0==204||LA133_0==206||(LA133_0>=210 && LA133_0<=211)) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:733:31: executable_section
                    	    {
                    	    pushFollow(FOLLOW_executable_section_in_if_statement7478);
                    	    executable_section393=executable_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section393.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt133 >= 1 ) break loop133;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(133, input);
                                throw eee;
                        }
                        cnt133++;
                    } while (true);


                    }
                    break;

            }

            END_KEYWORD394=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_if_statement7499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD394);

            IF_KEYWORD395=(Token)match(input,IF_KEYWORD,FOLLOW_IF_KEYWORD_in_if_statement7501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF_KEYWORD.add(IF_KEYWORD395);



            // AST REWRITE
            // elements: END_KEYWORD, IF_KEYWORD, executable_section, IF_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:16: -> ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:735:19: ^( IM_IF IF_KEYWORD ( executable_section )+ END_KEYWORD IF_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_IF, "IM_IF"), root_1);

                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_IF_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:1: loop_statement : LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) ;
    public final PL_SQLParser.loop_statement_return loop_statement() throws RecognitionException {
        PL_SQLParser.loop_statement_return retval = new PL_SQLParser.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOOP_KEYWORD396=null;
        Token END_KEYWORD398=null;
        Token LOOP_KEYWORD399=null;
        PL_SQLParser.executable_section_return executable_section397 = null;

        PL_SQLParser.identifier_return identifier400 = null;


        CommonTree LOOP_KEYWORD396_tree=null;
        CommonTree END_KEYWORD398_tree=null;
        CommonTree LOOP_KEYWORD399_tree=null;
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_LOOP_KEYWORD=new RewriteRuleTokenStream(adaptor,"token LOOP_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:16: ( LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )? -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:18: LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD ( identifier )?
            {
            LOOP_KEYWORD396=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD396);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:31: ( executable_section )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==NUMBER_UNSIGNED||LA135_0==STRING||(LA135_0>=IDENTIFIER && LA135_0<=EXT_IDENTIFIER)||LA135_0==BEGIN_KEYWORD||LA135_0==DECLARE_KEYWORD||LA135_0==NULL_KEYWORD||(LA135_0>=TRUE_KEYWORD && LA135_0<=FALSE_KEYWORD)||LA135_0==INTERVAL_KEYWORD||LA135_0==REPLACE_KEYWORD||(LA135_0>=RETURN_KEYWORD && LA135_0<=IN_KEYWORD)||LA135_0==IF_KEYWORD||(LA135_0>=GOTO_KEYWORD && LA135_0<=FOR_KEYWORD)||LA135_0==SELECT_KEYWORD||(LA135_0>=RAISE_KEYWORD && LA135_0<=PRAGMA_KEYWORD)||(LA135_0>=CASE_KEYWORD && LA135_0<=CLOSE_KEYWORD)||LA135_0==COMMIT_KEYWORD||LA135_0==CONTINUE_KEYWORD||(LA135_0>=DELETE_KEYWORD && LA135_0<=EXECUTE_KEYWORD)||LA135_0==EXIT_KEYWORD||LA135_0==FETCH_KEYWORD||LA135_0==FORALL_KEYWORD||(LA135_0>=INSERT_KEYWORD && LA135_0<=OPEN_KEYWORD)||(LA135_0>=ROLLBACK_KEYWORD && LA135_0<=SAVEPOINT_KEYWORD)||LA135_0==SET_KEYWORD||(LA135_0>=SQLCODE_KEYWORD && LA135_0<=UPDATE_KEYWORD)||LA135_0==RESULT_KEYWORD||LA135_0==NOT_OPERATOR||LA135_0==204||LA135_0==206||(LA135_0>=210 && LA135_0<=211)) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:32: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_loop_statement7543);
            	    executable_section397=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_executable_section.add(executable_section397.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);

            END_KEYWORD398=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_loop_statement7547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD398);

            LOOP_KEYWORD399=(Token)match(input,LOOP_KEYWORD,FOLLOW_LOOP_KEYWORD_in_loop_statement7549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LOOP_KEYWORD.add(LOOP_KEYWORD399);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:78: ( identifier )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==IDENTIFIER||LA136_0==INTERVAL_KEYWORD||LA136_0==RESULT_KEYWORD) ) {
                int LA136_1 = input.LA(2);

                if ( (synpred249_PL_SQL()) ) {
                    alt136=1;
                }
            }
            switch (alt136) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_loop_statement7551);
                    identifier400=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier400.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: END_KEYWORD, LOOP_KEYWORD, LOOP_KEYWORD, executable_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 737:3: -> ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:737:6: ^( IM_LOOP LOOP_KEYWORD ( executable_section )+ END_KEYWORD LOOP_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_LOOP, "IM_LOOP"), root_1);

                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());
                if ( !(stream_executable_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_section.nextTree());

                }
                stream_executable_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());
                adaptor.addChild(root_1, stream_LOOP_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:1: while_loop_statement : WHILE_KEYWORD expression loop_statement ;
    public final PL_SQLParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        PL_SQLParser.while_loop_statement_return retval = new PL_SQLParser.while_loop_statement_return();
        retval.start = input.LT(1);
        int while_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHILE_KEYWORD401=null;
        PL_SQLParser.expression_return expression402 = null;

        PL_SQLParser.loop_statement_return loop_statement403 = null;


        CommonTree WHILE_KEYWORD401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:22: ( WHILE_KEYWORD expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:738:24: WHILE_KEYWORD expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            WHILE_KEYWORD401=(Token)match(input,WHILE_KEYWORD,FOLLOW_WHILE_KEYWORD_in_while_loop_statement7578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE_KEYWORD401_tree = (CommonTree)adaptor.create(WHILE_KEYWORD401);
            adaptor.addChild(root_0, WHILE_KEYWORD401_tree);
            }
            pushFollow(FOLLOW_expression_in_while_loop_statement7580);
            expression402=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression402.getTree());
            pushFollow(FOLLOW_loop_statement_in_while_loop_statement7582);
            loop_statement403=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement403.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, while_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class for_loop_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:1: for_loop_statement : FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) ;
    public final PL_SQLParser.for_loop_statement_return for_loop_statement() throws RecognitionException {
        PL_SQLParser.for_loop_statement_return retval = new PL_SQLParser.for_loop_statement_return();
        retval.start = input.LT(1);
        int for_loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FOR_KEYWORD404=null;
        Token IN_KEYWORD406=null;
        Token REVERSE_KEYWORD407=null;
        PL_SQLParser.identifier_return identifier405 = null;

        PL_SQLParser.expression_return expression408 = null;

        PL_SQLParser.for_loop_statement_part_return for_loop_statement_part409 = null;

        PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1410 = null;

        PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2411 = null;


        CommonTree FOR_KEYWORD404_tree=null;
        CommonTree IN_KEYWORD406_tree=null;
        CommonTree REVERSE_KEYWORD407_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:20: ( FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:22: FOR_KEYWORD identifier IN_KEYWORD ( REVERSE_KEYWORD )? ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            {
            root_0 = (CommonTree)adaptor.nil();

            FOR_KEYWORD404=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_for_loop_statement7589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR_KEYWORD404_tree = (CommonTree)adaptor.create(FOR_KEYWORD404);
            adaptor.addChild(root_0, FOR_KEYWORD404_tree);
            }
            pushFollow(FOLLOW_identifier_in_for_loop_statement7591);
            identifier405=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier405.getTree());
            IN_KEYWORD406=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_for_loop_statement7593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD406_tree = (CommonTree)adaptor.create(IN_KEYWORD406);
            adaptor.addChild(root_0, IN_KEYWORD406_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:739:56: ( REVERSE_KEYWORD )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==REVERSE_KEYWORD) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REVERSE_KEYWORD
                    {
                    REVERSE_KEYWORD407=(Token)match(input,REVERSE_KEYWORD,FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REVERSE_KEYWORD407_tree = (CommonTree)adaptor.create(REVERSE_KEYWORD407);
                    adaptor.addChild(root_0, REVERSE_KEYWORD407_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:22: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) | cursor_for_loop_statement2 )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==206) ) {
                int LA139_1 = input.LA(2);

                if ( (synpred252_PL_SQL()) ) {
                    alt139=1;
                }
                else if ( (true) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA139_0==NUMBER_UNSIGNED||LA139_0==STRING||(LA139_0>=IDENTIFIER && LA139_0<=EXT_IDENTIFIER)||LA139_0==NULL_KEYWORD||(LA139_0>=TRUE_KEYWORD && LA139_0<=FALSE_KEYWORD)||LA139_0==INTERVAL_KEYWORD||LA139_0==REPLACE_KEYWORD||LA139_0==IN_KEYWORD||LA139_0==CASE_KEYWORD||(LA139_0>=SQLCODE_KEYWORD && LA139_0<=SQLERRM_KEYWORD)||LA139_0==RESULT_KEYWORD||LA139_0==NOT_OPERATOR||(LA139_0>=210 && LA139_0<=211)) ) {
                alt139=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
                    {
                    pushFollow(FOLLOW_expression_in_for_loop_statement7622);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression408.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==225) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==LOOP_KEYWORD) ) {
                        alt138=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);

                        throw nvae;
                    }
                    switch (alt138) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:36: for_loop_statement_part
                            {
                            pushFollow(FOLLOW_for_loop_statement_part_in_for_loop_statement7625);
                            for_loop_statement_part409=for_loop_statement_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_loop_statement_part409.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:62: cursor_for_loop_statement1
                            {
                            pushFollow(FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7629);
                            cursor_for_loop_statement1410=cursor_for_loop_statement1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement1410.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:741:24: cursor_for_loop_statement2
                    {
                    pushFollow(FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7658);
                    cursor_for_loop_statement2411=cursor_for_loop_statement2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_for_loop_statement2411.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, for_loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement"

    public static class for_loop_statement_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_loop_statement_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:1: for_loop_statement_part : '..' expression loop_statement ;
    public final PL_SQLParser.for_loop_statement_part_return for_loop_statement_part() throws RecognitionException {
        PL_SQLParser.for_loop_statement_part_return retval = new PL_SQLParser.for_loop_statement_part_return();
        retval.start = input.LT(1);
        int for_loop_statement_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal412=null;
        PL_SQLParser.expression_return expression413 = null;

        PL_SQLParser.loop_statement_return loop_statement414 = null;


        CommonTree string_literal412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:25: ( '..' expression loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:742:28: '..' expression loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal412=(Token)match(input,225,FOLLOW_225_in_for_loop_statement_part7667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = (CommonTree)adaptor.create(string_literal412);
            adaptor.addChild(root_0, string_literal412_tree);
            }
            pushFollow(FOLLOW_expression_in_for_loop_statement_part7669);
            expression413=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression413.getTree());
            pushFollow(FOLLOW_loop_statement_in_for_loop_statement_part7671);
            loop_statement414=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement414.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, for_loop_statement_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_loop_statement_part"

    public static class cursor_for_loop_statement1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement1"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:1: cursor_for_loop_statement1 : loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement1_return cursor_for_loop_statement1() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement1_return retval = new PL_SQLParser.cursor_for_loop_statement1_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement1_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.loop_statement_return loop_statement415 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:28: ( loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:743:30: loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement17678);
            loop_statement415=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement415.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, cursor_for_loop_statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement1"

    public static class cursor_for_loop_statement2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_for_loop_statement2"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:1: cursor_for_loop_statement2 : '(' select_statement ')' loop_statement ;
    public final PL_SQLParser.cursor_for_loop_statement2_return cursor_for_loop_statement2() throws RecognitionException {
        PL_SQLParser.cursor_for_loop_statement2_return retval = new PL_SQLParser.cursor_for_loop_statement2_return();
        retval.start = input.LT(1);
        int cursor_for_loop_statement2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal416=null;
        Token char_literal418=null;
        PL_SQLParser.select_statement_return select_statement417 = null;

        PL_SQLParser.loop_statement_return loop_statement419 = null;


        CommonTree char_literal416_tree=null;
        CommonTree char_literal418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:28: ( '(' select_statement ')' loop_statement )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:744:30: '(' select_statement ')' loop_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal416=(Token)match(input,206,FOLLOW_206_in_cursor_for_loop_statement27685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal416_tree = (CommonTree)adaptor.create(char_literal416);
            adaptor.addChild(root_0, char_literal416_tree);
            }
            pushFollow(FOLLOW_select_statement_in_cursor_for_loop_statement27687);
            select_statement417=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement417.getTree());
            char_literal418=(Token)match(input,207,FOLLOW_207_in_cursor_for_loop_statement27689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal418_tree = (CommonTree)adaptor.create(char_literal418);
            adaptor.addChild(root_0, char_literal418_tree);
            }
            pushFollow(FOLLOW_loop_statement_in_cursor_for_loop_statement27691);
            loop_statement419=loop_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement419.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, cursor_for_loop_statement2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_for_loop_statement2"

    public static class raise_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:1: raise_statement : RAISE_KEYWORD ( universal_identifier )? ;
    public final PL_SQLParser.raise_statement_return raise_statement() throws RecognitionException {
        PL_SQLParser.raise_statement_return retval = new PL_SQLParser.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAISE_KEYWORD420=null;
        PL_SQLParser.universal_identifier_return universal_identifier421 = null;


        CommonTree RAISE_KEYWORD420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:17: ( RAISE_KEYWORD ( universal_identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:19: RAISE_KEYWORD ( universal_identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAISE_KEYWORD420=(Token)match(input,RAISE_KEYWORD,FOLLOW_RAISE_KEYWORD_in_raise_statement7698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE_KEYWORD420_tree = (CommonTree)adaptor.create(RAISE_KEYWORD420);
            adaptor.addChild(root_0, RAISE_KEYWORD420_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:33: ( universal_identifier )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( ((LA140_0>=IDENTIFIER && LA140_0<=EXT_IDENTIFIER)||LA140_0==INTERVAL_KEYWORD||LA140_0==RESULT_KEYWORD) ) {
                int LA140_2 = input.LA(2);

                if ( (synpred253_PL_SQL()) ) {
                    alt140=1;
                }
            }
            switch (alt140) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: universal_identifier
                    {
                    pushFollow(FOLLOW_universal_identifier_in_raise_statement7700);
                    universal_identifier421=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier421.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:1: case_statement_expression : ( simple_case_statement_expression | searched_case_statement_expression );
    public final PL_SQLParser.case_statement_expression_return case_statement_expression() throws RecognitionException {
        PL_SQLParser.case_statement_expression_return retval = new PL_SQLParser.case_statement_expression_return();
        retval.start = input.LT(1);
        int case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression422 = null;

        PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression423 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:27: ( simple_case_statement_expression | searched_case_statement_expression )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==CASE_KEYWORD) ) {
                int LA141_1 = input.LA(2);

                if ( (synpred254_PL_SQL()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:29: simple_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_case_statement_expression_in_case_statement_expression7708);
                    simple_case_statement_expression422=simple_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement_expression422.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:64: searched_case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_searched_case_statement_expression_in_case_statement_expression7712);
                    searched_case_statement_expression423=searched_case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement_expression423.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement_expression"

    public static class simple_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:747:1: simple_case_statement_expression : CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.simple_case_statement_expression_return simple_case_statement_expression() throws RecognitionException {
        PL_SQLParser.simple_case_statement_expression_return retval = new PL_SQLParser.simple_case_statement_expression_return();
        retval.start = input.LT(1);
        int simple_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD424=null;
        Token WHEN_KEYWORD426=null;
        Token THEN_KEYWORD428=null;
        Token ELSE_KEYWORD430=null;
        Token END_KEYWORD432=null;
        Token CASE_KEYWORD433=null;
        PL_SQLParser.expression_return expression425 = null;

        PL_SQLParser.expression_return expression427 = null;

        PL_SQLParser.executable_case_section_return executable_case_section429 = null;

        PL_SQLParser.executable_case_section_return executable_case_section431 = null;

        PL_SQLParser.identifier_return identifier434 = null;


        CommonTree CASE_KEYWORD424_tree=null;
        CommonTree WHEN_KEYWORD426_tree=null;
        CommonTree THEN_KEYWORD428_tree=null;
        CommonTree ELSE_KEYWORD430_tree=null;
        CommonTree END_KEYWORD432_tree=null;
        CommonTree CASE_KEYWORD433_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:747:34: ( CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:747:36: CASE_KEYWORD expression ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD424=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD424);

            pushFollow(FOLLOW_expression_in_simple_case_statement_expression7721);
            expression425=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression425.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==WHEN_KEYWORD) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD426=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7749); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD426);

            	    pushFollow(FOLLOW_expression_in_simple_case_statement_expression7751);
            	    expression427=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression427.getTree());
            	    THEN_KEYWORD428=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7753); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD428);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:63: ( executable_case_section )+
            	    int cnt142=0;
            	    loop142:
            	    do {
            	        int alt142=2;
            	        int LA142_0 = input.LA(1);

            	        if ( (LA142_0==NUMBER_UNSIGNED||LA142_0==STRING||(LA142_0>=IDENTIFIER && LA142_0<=EXT_IDENTIFIER)||LA142_0==BEGIN_KEYWORD||LA142_0==DECLARE_KEYWORD||LA142_0==NULL_KEYWORD||(LA142_0>=TRUE_KEYWORD && LA142_0<=FALSE_KEYWORD)||LA142_0==INTERVAL_KEYWORD||LA142_0==REPLACE_KEYWORD||(LA142_0>=RETURN_KEYWORD && LA142_0<=IN_KEYWORD)||LA142_0==IF_KEYWORD||(LA142_0>=GOTO_KEYWORD && LA142_0<=FOR_KEYWORD)||LA142_0==SELECT_KEYWORD||(LA142_0>=RAISE_KEYWORD && LA142_0<=PRAGMA_KEYWORD)||(LA142_0>=CASE_KEYWORD && LA142_0<=CLOSE_KEYWORD)||LA142_0==COMMIT_KEYWORD||LA142_0==CONTINUE_KEYWORD||(LA142_0>=DELETE_KEYWORD && LA142_0<=EXECUTE_KEYWORD)||LA142_0==EXIT_KEYWORD||LA142_0==FETCH_KEYWORD||LA142_0==FORALL_KEYWORD||(LA142_0>=INSERT_KEYWORD && LA142_0<=OPEN_KEYWORD)||(LA142_0>=ROLLBACK_KEYWORD && LA142_0<=SAVEPOINT_KEYWORD)||LA142_0==SET_KEYWORD||(LA142_0>=SQLCODE_KEYWORD && LA142_0<=UPDATE_KEYWORD)||LA142_0==RESULT_KEYWORD||LA142_0==NOT_OPERATOR||LA142_0==204||LA142_0==206||(LA142_0>=210 && LA142_0<=211)) ) {
            	            alt142=1;
            	        }


            	        switch (alt142) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:748:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7756);
            	    	    executable_case_section429=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section429.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt142 >= 1 ) break loop142;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(142, input);
            	                throw eee;
            	        }
            	        cnt142++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ELSE_KEYWORD) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD430=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD430);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:39: ( executable_case_section )+
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==NUMBER_UNSIGNED||LA144_0==STRING||(LA144_0>=IDENTIFIER && LA144_0<=EXT_IDENTIFIER)||LA144_0==BEGIN_KEYWORD||LA144_0==DECLARE_KEYWORD||LA144_0==NULL_KEYWORD||(LA144_0>=TRUE_KEYWORD && LA144_0<=FALSE_KEYWORD)||LA144_0==INTERVAL_KEYWORD||LA144_0==REPLACE_KEYWORD||(LA144_0>=RETURN_KEYWORD && LA144_0<=IN_KEYWORD)||LA144_0==IF_KEYWORD||(LA144_0>=GOTO_KEYWORD && LA144_0<=FOR_KEYWORD)||LA144_0==SELECT_KEYWORD||(LA144_0>=RAISE_KEYWORD && LA144_0<=PRAGMA_KEYWORD)||(LA144_0>=CASE_KEYWORD && LA144_0<=CLOSE_KEYWORD)||LA144_0==COMMIT_KEYWORD||LA144_0==CONTINUE_KEYWORD||(LA144_0>=DELETE_KEYWORD && LA144_0<=EXECUTE_KEYWORD)||LA144_0==EXIT_KEYWORD||LA144_0==FETCH_KEYWORD||LA144_0==FORALL_KEYWORD||(LA144_0>=INSERT_KEYWORD && LA144_0<=OPEN_KEYWORD)||(LA144_0>=ROLLBACK_KEYWORD && LA144_0<=SAVEPOINT_KEYWORD)||LA144_0==SET_KEYWORD||(LA144_0>=SQLCODE_KEYWORD && LA144_0<=UPDATE_KEYWORD)||LA144_0==RESULT_KEYWORD||LA144_0==NOT_OPERATOR||LA144_0==204||LA144_0==206||(LA144_0>=210 && LA144_0<=211)) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:749:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_simple_case_statement_expression7790);
                    	    executable_case_section431=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section431.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD432=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_simple_case_statement_expression7821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD432);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:38: ( CASE_KEYWORD )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==CASE_KEYWORD) ) {
                int LA146_2 = input.LA(2);

                if ( (synpred259_PL_SQL()) ) {
                    alt146=1;
                }
            }
            switch (alt146) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD433=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD433);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:52: ( identifier )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==IDENTIFIER||LA147_0==INTERVAL_KEYWORD||LA147_0==RESULT_KEYWORD) ) {
                int LA147_2 = input.LA(2);

                if ( (synpred260_PL_SQL()) ) {
                    alt147=1;
                }
            }
            switch (alt147) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_simple_case_statement_expression7826);
                    identifier434=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier434.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: END_KEYWORD, executable_case_section, CASE_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 751:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:751:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, simple_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement_expression"

    public static class searched_case_statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:1: searched_case_statement_expression : CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) ;
    public final PL_SQLParser.searched_case_statement_expression_return searched_case_statement_expression() throws RecognitionException {
        PL_SQLParser.searched_case_statement_expression_return retval = new PL_SQLParser.searched_case_statement_expression_return();
        retval.start = input.LT(1);
        int searched_case_statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE_KEYWORD435=null;
        Token WHEN_KEYWORD436=null;
        Token THEN_KEYWORD438=null;
        Token ELSE_KEYWORD440=null;
        Token END_KEYWORD442=null;
        Token CASE_KEYWORD443=null;
        PL_SQLParser.expression_return expression437 = null;

        PL_SQLParser.executable_case_section_return executable_case_section439 = null;

        PL_SQLParser.executable_case_section_return executable_case_section441 = null;

        PL_SQLParser.identifier_return identifier444 = null;


        CommonTree CASE_KEYWORD435_tree=null;
        CommonTree WHEN_KEYWORD436_tree=null;
        CommonTree THEN_KEYWORD438_tree=null;
        CommonTree ELSE_KEYWORD440_tree=null;
        CommonTree END_KEYWORD442_tree=null;
        CommonTree CASE_KEYWORD443_tree=null;
        RewriteRuleTokenStream stream_THEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token THEN_KEYWORD");
        RewriteRuleTokenStream stream_END_KEYWORD=new RewriteRuleTokenStream(adaptor,"token END_KEYWORD");
        RewriteRuleTokenStream stream_WHEN_KEYWORD=new RewriteRuleTokenStream(adaptor,"token WHEN_KEYWORD");
        RewriteRuleTokenStream stream_ELSE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token ELSE_KEYWORD");
        RewriteRuleTokenStream stream_CASE_KEYWORD=new RewriteRuleTokenStream(adaptor,"token CASE_KEYWORD");
        RewriteRuleSubtreeStream stream_executable_case_section=new RewriteRuleSubtreeStream(adaptor,"rule executable_case_section");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:36: ( CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? ) -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:752:38: CASE_KEYWORD ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+ ( ELSE_KEYWORD ( executable_case_section )+ )? ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            {
            CASE_KEYWORD435=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD435);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:25: ( WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+ )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==WHEN_KEYWORD) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:26: WHEN_KEYWORD expression THEN_KEYWORD ( executable_case_section )+
            	    {
            	    WHEN_KEYWORD436=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7901); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_WHEN_KEYWORD.add(WHEN_KEYWORD436);

            	    pushFollow(FOLLOW_expression_in_searched_case_statement_expression7903);
            	    expression437=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression437.getTree());
            	    THEN_KEYWORD438=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7905); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_THEN_KEYWORD.add(THEN_KEYWORD438);

            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:63: ( executable_case_section )+
            	    int cnt148=0;
            	    loop148:
            	    do {
            	        int alt148=2;
            	        int LA148_0 = input.LA(1);

            	        if ( (LA148_0==NUMBER_UNSIGNED||LA148_0==STRING||(LA148_0>=IDENTIFIER && LA148_0<=EXT_IDENTIFIER)||LA148_0==BEGIN_KEYWORD||LA148_0==DECLARE_KEYWORD||LA148_0==NULL_KEYWORD||(LA148_0>=TRUE_KEYWORD && LA148_0<=FALSE_KEYWORD)||LA148_0==INTERVAL_KEYWORD||LA148_0==REPLACE_KEYWORD||(LA148_0>=RETURN_KEYWORD && LA148_0<=IN_KEYWORD)||LA148_0==IF_KEYWORD||(LA148_0>=GOTO_KEYWORD && LA148_0<=FOR_KEYWORD)||LA148_0==SELECT_KEYWORD||(LA148_0>=RAISE_KEYWORD && LA148_0<=PRAGMA_KEYWORD)||(LA148_0>=CASE_KEYWORD && LA148_0<=CLOSE_KEYWORD)||LA148_0==COMMIT_KEYWORD||LA148_0==CONTINUE_KEYWORD||(LA148_0>=DELETE_KEYWORD && LA148_0<=EXECUTE_KEYWORD)||LA148_0==EXIT_KEYWORD||LA148_0==FETCH_KEYWORD||LA148_0==FORALL_KEYWORD||(LA148_0>=INSERT_KEYWORD && LA148_0<=OPEN_KEYWORD)||(LA148_0>=ROLLBACK_KEYWORD && LA148_0<=SAVEPOINT_KEYWORD)||LA148_0==SET_KEYWORD||(LA148_0>=SQLCODE_KEYWORD && LA148_0<=UPDATE_KEYWORD)||LA148_0==RESULT_KEYWORD||LA148_0==NOT_OPERATOR||LA148_0==204||LA148_0==206||(LA148_0>=210 && LA148_0<=211)) ) {
            	            alt148=1;
            	        }


            	        switch (alt148) {
            	    	case 1 :
            	    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:753:64: executable_case_section
            	    	    {
            	    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7908);
            	    	    executable_case_section439=executable_case_section();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section439.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt148 >= 1 ) break loop148;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(148, input);
            	                throw eee;
            	        }
            	        cnt148++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:25: ( ELSE_KEYWORD ( executable_case_section )+ )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ELSE_KEYWORD) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:26: ELSE_KEYWORD ( executable_case_section )+
                    {
                    ELSE_KEYWORD440=(Token)match(input,ELSE_KEYWORD,FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_KEYWORD.add(ELSE_KEYWORD440);

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:39: ( executable_case_section )+
                    int cnt150=0;
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==NUMBER_UNSIGNED||LA150_0==STRING||(LA150_0>=IDENTIFIER && LA150_0<=EXT_IDENTIFIER)||LA150_0==BEGIN_KEYWORD||LA150_0==DECLARE_KEYWORD||LA150_0==NULL_KEYWORD||(LA150_0>=TRUE_KEYWORD && LA150_0<=FALSE_KEYWORD)||LA150_0==INTERVAL_KEYWORD||LA150_0==REPLACE_KEYWORD||(LA150_0>=RETURN_KEYWORD && LA150_0<=IN_KEYWORD)||LA150_0==IF_KEYWORD||(LA150_0>=GOTO_KEYWORD && LA150_0<=FOR_KEYWORD)||LA150_0==SELECT_KEYWORD||(LA150_0>=RAISE_KEYWORD && LA150_0<=PRAGMA_KEYWORD)||(LA150_0>=CASE_KEYWORD && LA150_0<=CLOSE_KEYWORD)||LA150_0==COMMIT_KEYWORD||LA150_0==CONTINUE_KEYWORD||(LA150_0>=DELETE_KEYWORD && LA150_0<=EXECUTE_KEYWORD)||LA150_0==EXIT_KEYWORD||LA150_0==FETCH_KEYWORD||LA150_0==FORALL_KEYWORD||(LA150_0>=INSERT_KEYWORD && LA150_0<=OPEN_KEYWORD)||(LA150_0>=ROLLBACK_KEYWORD && LA150_0<=SAVEPOINT_KEYWORD)||LA150_0==SET_KEYWORD||(LA150_0>=SQLCODE_KEYWORD && LA150_0<=UPDATE_KEYWORD)||LA150_0==RESULT_KEYWORD||LA150_0==NOT_OPERATOR||LA150_0==204||LA150_0==206||(LA150_0>=210 && LA150_0<=211)) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:754:40: executable_case_section
                    	    {
                    	    pushFollow(FOLLOW_executable_case_section_in_searched_case_statement_expression7942);
                    	    executable_case_section441=executable_case_section();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_executable_case_section.add(executable_case_section441.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt150 >= 1 ) break loop150;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(150, input);
                                throw eee;
                        }
                        cnt150++;
                    } while (true);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:25: ( END_KEYWORD ( CASE_KEYWORD )? ( identifier )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:26: END_KEYWORD ( CASE_KEYWORD )? ( identifier )?
            {
            END_KEYWORD442=(Token)match(input,END_KEYWORD,FOLLOW_END_KEYWORD_in_searched_case_statement_expression7973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END_KEYWORD.add(END_KEYWORD442);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:38: ( CASE_KEYWORD )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==CASE_KEYWORD) ) {
                int LA152_2 = input.LA(2);

                if ( (synpred265_PL_SQL()) ) {
                    alt152=1;
                }
            }
            switch (alt152) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: CASE_KEYWORD
                    {
                    CASE_KEYWORD443=(Token)match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE_KEYWORD.add(CASE_KEYWORD443);


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:52: ( identifier )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==IDENTIFIER||LA153_0==INTERVAL_KEYWORD||LA153_0==RESULT_KEYWORD) ) {
                int LA153_2 = input.LA(2);

                if ( (synpred266_PL_SQL()) ) {
                    alt153=1;
                }
            }
            switch (alt153) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_searched_case_statement_expression7978);
                    identifier444=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier444.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: executable_case_section, CASE_KEYWORD, END_KEYWORD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:25: -> ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
            {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:756:28: ^( IM_CASE CASE_KEYWORD ( executable_case_section )+ END_KEYWORD )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IM_CASE, "IM_CASE"), root_1);

                adaptor.addChild(root_1, stream_CASE_KEYWORD.nextNode());
                if ( !(stream_executable_case_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_executable_case_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_executable_case_section.nextTree());

                }
                stream_executable_case_section.reset();
                adaptor.addChild(root_1, stream_END_KEYWORD.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, searched_case_statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement_expression"

    public static class close_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:1: close_statement : CLOSE_KEYWORD universal_identifier ;
    public final PL_SQLParser.close_statement_return close_statement() throws RecognitionException {
        PL_SQLParser.close_statement_return retval = new PL_SQLParser.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLOSE_KEYWORD445=null;
        PL_SQLParser.universal_identifier_return universal_identifier446 = null;


        CommonTree CLOSE_KEYWORD445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:17: ( CLOSE_KEYWORD universal_identifier )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:757:19: CLOSE_KEYWORD universal_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            CLOSE_KEYWORD445=(Token)match(input,CLOSE_KEYWORD,FOLLOW_CLOSE_KEYWORD_in_close_statement8050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_KEYWORD445_tree = (CommonTree)adaptor.create(CLOSE_KEYWORD445);
            adaptor.addChild(root_0, CLOSE_KEYWORD445_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_close_statement8052);
            universal_identifier446=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier446.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:1: continue_statement : CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.continue_statement_return continue_statement() throws RecognitionException {
        PL_SQLParser.continue_statement_return retval = new PL_SQLParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONTINUE_KEYWORD447=null;
        Token WHEN_KEYWORD449=null;
        PL_SQLParser.identifier_return identifier448 = null;

        PL_SQLParser.expression_return expression450 = null;


        CommonTree CONTINUE_KEYWORD447_tree=null;
        CommonTree WHEN_KEYWORD449_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:20: ( CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:22: CONTINUE_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CONTINUE_KEYWORD447=(Token)match(input,CONTINUE_KEYWORD,FOLLOW_CONTINUE_KEYWORD_in_continue_statement8059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE_KEYWORD447_tree = (CommonTree)adaptor.create(CONTINUE_KEYWORD447);
            adaptor.addChild(root_0, CONTINUE_KEYWORD447_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:39: ( identifier )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==IDENTIFIER||LA154_0==INTERVAL_KEYWORD||LA154_0==RESULT_KEYWORD) ) {
                int LA154_1 = input.LA(2);

                if ( (synpred267_PL_SQL()) ) {
                    alt154=1;
                }
            }
            switch (alt154) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_continue_statement8061);
                    identifier448=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier448.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:51: ( WHEN_KEYWORD expression )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==WHEN_KEYWORD) ) {
                int LA155_2 = input.LA(2);

                if ( (synpred268_PL_SQL()) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:52: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD449=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_continue_statement8065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD449_tree = (CommonTree)adaptor.create(WHEN_KEYWORD449);
                    adaptor.addChild(root_0, WHEN_KEYWORD449_tree);
                    }
                    pushFollow(FOLLOW_expression_in_continue_statement8067);
                    expression450=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, continue_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class execute_immediate_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "execute_immediate_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:1: execute_immediate_statement : EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? ;
    public final PL_SQLParser.execute_immediate_statement_return execute_immediate_statement() throws RecognitionException {
        PL_SQLParser.execute_immediate_statement_return retval = new PL_SQLParser.execute_immediate_statement_return();
        retval.start = input.LT(1);
        int execute_immediate_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXECUTE_KEYWORD451=null;
        Token IMMEDIATE_KEYWORD452=null;
        Token set454=null;
        PL_SQLParser.expression_return expression453 = null;

        PL_SQLParser.into_clause_return into_clause455 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause456 = null;

        PL_SQLParser.using_clause_return using_clause457 = null;


        CommonTree EXECUTE_KEYWORD451_tree=null;
        CommonTree IMMEDIATE_KEYWORD452_tree=null;
        CommonTree set454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:29: ( EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:759:31: EXECUTE_KEYWORD IMMEDIATE_KEYWORD expression ( RETURN_KEYWORD | RETURNING_KEYWORD )? ( into_clause | bulk_collect_into_clause )? ( using_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXECUTE_KEYWORD451=(Token)match(input,EXECUTE_KEYWORD,FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECUTE_KEYWORD451_tree = (CommonTree)adaptor.create(EXECUTE_KEYWORD451);
            adaptor.addChild(root_0, EXECUTE_KEYWORD451_tree);
            }
            IMMEDIATE_KEYWORD452=(Token)match(input,IMMEDIATE_KEYWORD,FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMMEDIATE_KEYWORD452_tree = (CommonTree)adaptor.create(IMMEDIATE_KEYWORD452);
            adaptor.addChild(root_0, IMMEDIATE_KEYWORD452_tree);
            }
            pushFollow(FOLLOW_expression_in_execute_immediate_statement8080);
            expression453=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression453.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:760:31: ( RETURN_KEYWORD | RETURNING_KEYWORD )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==RETURN_KEYWORD) ) {
                int LA156_2 = input.LA(2);

                if ( (true) ) {
                    alt156=1;
                }
            }
            else if ( (LA156_0==RETURNING_KEYWORD) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                    {
                    set454=(Token)input.LT(1);
                    if ( input.LA(1)==RETURN_KEYWORD||input.LA(1)==RETURNING_KEYWORD ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set454));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:31: ( into_clause | bulk_collect_into_clause )?
            int alt157=3;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==INTO_KEYWORD) ) {
                alt157=1;
            }
            else if ( (LA157_0==BULK_KEYWORD) ) {
                alt157=2;
            }
            switch (alt157) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:32: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate_statement8152);
                    into_clause455=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause455.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:761:46: bulk_collect_into_clause
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8156);
                    bulk_collect_into_clause456=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause456.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:762:31: ( using_clause )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==USING_KEYWORD) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate_statement8190);
                    using_clause457=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause457.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, execute_immediate_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "execute_immediate_statement"

    public static class into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:1: into_clause : INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.into_clause_return into_clause() throws RecognitionException {
        PL_SQLParser.into_clause_return retval = new PL_SQLParser.into_clause_return();
        retval.start = input.LT(1);
        int into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTO_KEYWORD458=null;
        Token char_literal460=null;
        PL_SQLParser.universal_identifier_return universal_identifier459 = null;

        PL_SQLParser.universal_identifier_return universal_identifier461 = null;


        CommonTree INTO_KEYWORD458_tree=null;
        CommonTree char_literal460_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:13: ( INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:15: INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            INTO_KEYWORD458=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_into_clause8199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD458_tree = (CommonTree)adaptor.create(INTO_KEYWORD458);
            adaptor.addChild(root_0, INTO_KEYWORD458_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_into_clause8201);
            universal_identifier459=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier459.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:49: ( ',' universal_identifier )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==COMMA) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:763:50: ',' universal_identifier
            	    {
            	    char_literal460=(Token)match(input,COMMA,FOLLOW_COMMA_in_into_clause8204); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal460_tree = (CommonTree)adaptor.create(char_literal460);
            	    adaptor.addChild(root_0, char_literal460_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_into_clause8206);
            	    universal_identifier461=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier461.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "into_clause"

    public static class bulk_collect_into_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bulk_collect_into_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:1: bulk_collect_into_clause : BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* ;
    public final PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause() throws RecognitionException {
        PL_SQLParser.bulk_collect_into_clause_return retval = new PL_SQLParser.bulk_collect_into_clause_return();
        retval.start = input.LT(1);
        int bulk_collect_into_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BULK_KEYWORD462=null;
        Token COLLECT_KEYWORD463=null;
        Token INTO_KEYWORD464=null;
        Token char_literal466=null;
        PL_SQLParser.universal_identifier_return universal_identifier465 = null;

        PL_SQLParser.universal_identifier_return universal_identifier467 = null;


        CommonTree BULK_KEYWORD462_tree=null;
        CommonTree COLLECT_KEYWORD463_tree=null;
        CommonTree INTO_KEYWORD464_tree=null;
        CommonTree char_literal466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:26: ( BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:764:28: BULK_KEYWORD COLLECT_KEYWORD INTO_KEYWORD universal_identifier ( ',' universal_identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            BULK_KEYWORD462=(Token)match(input,BULK_KEYWORD,FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BULK_KEYWORD462_tree = (CommonTree)adaptor.create(BULK_KEYWORD462);
            adaptor.addChild(root_0, BULK_KEYWORD462_tree);
            }
            COLLECT_KEYWORD463=(Token)match(input,COLLECT_KEYWORD,FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLLECT_KEYWORD463_tree = (CommonTree)adaptor.create(COLLECT_KEYWORD463);
            adaptor.addChild(root_0, COLLECT_KEYWORD463_tree);
            }
            INTO_KEYWORD464=(Token)match(input,INTO_KEYWORD,FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTO_KEYWORD464_tree = (CommonTree)adaptor.create(INTO_KEYWORD464);
            adaptor.addChild(root_0, INTO_KEYWORD464_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8249);
            universal_identifier465=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier465.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:49: ( ',' universal_identifier )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==COMMA) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:765:50: ',' universal_identifier
            	    {
            	    char_literal466=(Token)match(input,COMMA,FOLLOW_COMMA_in_bulk_collect_into_clause8252); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal466_tree = (CommonTree)adaptor.create(char_literal466);
            	    adaptor.addChild(root_0, char_literal466_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_bulk_collect_into_clause8254);
            	    universal_identifier467=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier467.getTree());

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, bulk_collect_into_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bulk_collect_into_clause"

    public static class using_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:1: using_clause : USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* ;
    public final PL_SQLParser.using_clause_return using_clause() throws RecognitionException {
        PL_SQLParser.using_clause_return retval = new PL_SQLParser.using_clause_return();
        retval.start = input.LT(1);
        int using_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token USING_KEYWORD468=null;
        Token IN_KEYWORD469=null;
        Token OUT_KEYWORD470=null;
        Token IN_KEYWORD471=null;
        Token OUT_KEYWORD472=null;
        Token char_literal474=null;
        Token IN_KEYWORD475=null;
        Token OUT_KEYWORD476=null;
        Token IN_KEYWORD477=null;
        Token OUT_KEYWORD478=null;
        PL_SQLParser.expression_return expression473 = null;

        PL_SQLParser.expression_return expression479 = null;


        CommonTree USING_KEYWORD468_tree=null;
        CommonTree IN_KEYWORD469_tree=null;
        CommonTree OUT_KEYWORD470_tree=null;
        CommonTree IN_KEYWORD471_tree=null;
        CommonTree OUT_KEYWORD472_tree=null;
        CommonTree char_literal474_tree=null;
        CommonTree IN_KEYWORD475_tree=null;
        CommonTree OUT_KEYWORD476_tree=null;
        CommonTree IN_KEYWORD477_tree=null;
        CommonTree OUT_KEYWORD478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:14: ( USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:16: USING_KEYWORD ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            USING_KEYWORD468=(Token)match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_using_clause8263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING_KEYWORD468_tree = (CommonTree)adaptor.create(USING_KEYWORD468);
            adaptor.addChild(root_0, USING_KEYWORD468_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:30: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            int alt161=4;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==OUT_KEYWORD) ) {
                alt161=2;
            }
            else if ( (LA161_0==IN_KEYWORD) ) {
                int LA161_3 = input.LA(2);

                if ( (synpred276_PL_SQL()) ) {
                    alt161=1;
                }
                else if ( (synpred278_PL_SQL()) ) {
                    alt161=3;
                }
            }
            switch (alt161) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:31: IN_KEYWORD
                    {
                    IN_KEYWORD469=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD469_tree = (CommonTree)adaptor.create(IN_KEYWORD469);
                    adaptor.addChild(root_0, IN_KEYWORD469_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:44: OUT_KEYWORD
                    {
                    OUT_KEYWORD470=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8270); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD470_tree = (CommonTree)adaptor.create(OUT_KEYWORD470);
                    adaptor.addChild(root_0, OUT_KEYWORD470_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:58: ( IN_KEYWORD OUT_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:58: ( IN_KEYWORD OUT_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:59: IN_KEYWORD OUT_KEYWORD
                    {
                    IN_KEYWORD471=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD471_tree = (CommonTree)adaptor.create(IN_KEYWORD471);
                    adaptor.addChild(root_0, IN_KEYWORD471_tree);
                    }
                    OUT_KEYWORD472=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUT_KEYWORD472_tree = (CommonTree)adaptor.create(OUT_KEYWORD472);
                    adaptor.addChild(root_0, OUT_KEYWORD472_tree);
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_using_clause8282);
            expression473=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:16: ( ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:17: ',' ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )? expression
            	    {
            	    char_literal474=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause8300); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal474_tree = (CommonTree)adaptor.create(char_literal474);
            	    adaptor.addChild(root_0, char_literal474_tree);
            	    }
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:21: ( IN_KEYWORD | OUT_KEYWORD | ( IN_KEYWORD OUT_KEYWORD ) )?
            	    int alt162=4;
            	    int LA162_0 = input.LA(1);

            	    if ( (LA162_0==IN_KEYWORD) ) {
            	        int LA162_2 = input.LA(2);

            	        if ( (synpred279_PL_SQL()) ) {
            	            alt162=1;
            	        }
            	        else if ( (synpred281_PL_SQL()) ) {
            	            alt162=3;
            	        }
            	    }
            	    else if ( (LA162_0==OUT_KEYWORD) ) {
            	        alt162=2;
            	    }
            	    switch (alt162) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:22: IN_KEYWORD
            	            {
            	            IN_KEYWORD475=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8303); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD475_tree = (CommonTree)adaptor.create(IN_KEYWORD475);
            	            adaptor.addChild(root_0, IN_KEYWORD475_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:35: OUT_KEYWORD
            	            {
            	            OUT_KEYWORD476=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8307); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD476_tree = (CommonTree)adaptor.create(OUT_KEYWORD476);
            	            adaptor.addChild(root_0, OUT_KEYWORD476_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:49: ( IN_KEYWORD OUT_KEYWORD )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:49: ( IN_KEYWORD OUT_KEYWORD )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:50: IN_KEYWORD OUT_KEYWORD
            	            {
            	            IN_KEYWORD477=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_using_clause8312); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            IN_KEYWORD477_tree = (CommonTree)adaptor.create(IN_KEYWORD477);
            	            adaptor.addChild(root_0, IN_KEYWORD477_tree);
            	            }
            	            OUT_KEYWORD478=(Token)match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_using_clause8314); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OUT_KEYWORD478_tree = (CommonTree)adaptor.create(OUT_KEYWORD478);
            	            adaptor.addChild(root_0, OUT_KEYWORD478_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_expression_in_using_clause8319);
            	    expression479=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression479.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, using_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_clause"

    public static class exit_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:1: exit_statement : EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? ;
    public final PL_SQLParser.exit_statement_return exit_statement() throws RecognitionException {
        PL_SQLParser.exit_statement_return retval = new PL_SQLParser.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXIT_KEYWORD480=null;
        Token WHEN_KEYWORD482=null;
        PL_SQLParser.identifier_return identifier481 = null;

        PL_SQLParser.expression_return expression483 = null;


        CommonTree EXIT_KEYWORD480_tree=null;
        CommonTree WHEN_KEYWORD482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:16: ( EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:18: EXIT_KEYWORD ( identifier )? ( WHEN_KEYWORD expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            EXIT_KEYWORD480=(Token)match(input,EXIT_KEYWORD,FOLLOW_EXIT_KEYWORD_in_exit_statement8328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXIT_KEYWORD480_tree = (CommonTree)adaptor.create(EXIT_KEYWORD480);
            adaptor.addChild(root_0, EXIT_KEYWORD480_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:31: ( identifier )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==IDENTIFIER||LA164_0==INTERVAL_KEYWORD||LA164_0==RESULT_KEYWORD) ) {
                int LA164_2 = input.LA(2);

                if ( (synpred283_PL_SQL()) ) {
                    alt164=1;
                }
            }
            switch (alt164) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_exit_statement8330);
                    identifier481=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier481.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:43: ( WHEN_KEYWORD expression )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==WHEN_KEYWORD) ) {
                int LA165_2 = input.LA(2);

                if ( (synpred284_PL_SQL()) ) {
                    alt165=1;
                }
            }
            switch (alt165) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:44: WHEN_KEYWORD expression
                    {
                    WHEN_KEYWORD482=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exit_statement8334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHEN_KEYWORD482_tree = (CommonTree)adaptor.create(WHEN_KEYWORD482);
                    adaptor.addChild(root_0, WHEN_KEYWORD482_tree);
                    }
                    pushFollow(FOLLOW_expression_in_exit_statement8336);
                    expression483=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression483.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:1: fetch_statement : FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) ;
    public final PL_SQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
        PL_SQLParser.fetch_statement_return retval = new PL_SQLParser.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FETCH_KEYWORD484=null;
        Token LIMIT_KEYWORD487=null;
        PL_SQLParser.expression_return expression485 = null;

        PL_SQLParser.bulk_collect_into_clause_return bulk_collect_into_clause486 = null;

        PL_SQLParser.expression_return expression488 = null;

        PL_SQLParser.into_clause_return into_clause489 = null;


        CommonTree FETCH_KEYWORD484_tree=null;
        CommonTree LIMIT_KEYWORD487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:17: ( FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:769:19: FETCH_KEYWORD expression ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            {
            root_0 = (CommonTree)adaptor.nil();

            FETCH_KEYWORD484=(Token)match(input,FETCH_KEYWORD,FOLLOW_FETCH_KEYWORD_in_fetch_statement8345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FETCH_KEYWORD484_tree = (CommonTree)adaptor.create(FETCH_KEYWORD484);
            adaptor.addChild(root_0, FETCH_KEYWORD484_tree);
            }
            pushFollow(FOLLOW_expression_in_fetch_statement8347);
            expression485=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression485.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:19: ( ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? ) | into_clause )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==BULK_KEYWORD) ) {
                alt167=1;
            }
            else if ( (LA167_0==INTO_KEYWORD) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:20: ( bulk_collect_into_clause ( LIMIT_KEYWORD expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:21: bulk_collect_into_clause ( LIMIT_KEYWORD expression )?
                    {
                    pushFollow(FOLLOW_bulk_collect_into_clause_in_fetch_statement8370);
                    bulk_collect_into_clause486=bulk_collect_into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bulk_collect_into_clause486.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:46: ( LIMIT_KEYWORD expression )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==LIMIT_KEYWORD) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:47: LIMIT_KEYWORD expression
                            {
                            LIMIT_KEYWORD487=(Token)match(input,LIMIT_KEYWORD,FOLLOW_LIMIT_KEYWORD_in_fetch_statement8373); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LIMIT_KEYWORD487_tree = (CommonTree)adaptor.create(LIMIT_KEYWORD487);
                            adaptor.addChild(root_0, LIMIT_KEYWORD487_tree);
                            }
                            pushFollow(FOLLOW_expression_in_fetch_statement8375);
                            expression488=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:770:78: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_fetch_statement8383);
                    into_clause489=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause489.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class forall_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:1: forall_statement : FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements ;
    public final PL_SQLParser.forall_statement_return forall_statement() throws RecognitionException {
        PL_SQLParser.forall_statement_return retval = new PL_SQLParser.forall_statement_return();
        retval.start = input.LT(1);
        int forall_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FORALL_KEYWORD490=null;
        Token IN_KEYWORD492=null;
        Token SAVE_KEYWORD494=null;
        Token EXCEPTIONS_KEYWORD495=null;
        PL_SQLParser.identifier_return identifier491 = null;

        PL_SQLParser.bounds_clause_return bounds_clause493 = null;

        PL_SQLParser.sql_statements_return sql_statements496 = null;


        CommonTree FORALL_KEYWORD490_tree=null;
        CommonTree IN_KEYWORD492_tree=null;
        CommonTree SAVE_KEYWORD494_tree=null;
        CommonTree EXCEPTIONS_KEYWORD495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:18: ( FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:771:20: FORALL_KEYWORD identifier IN_KEYWORD bounds_clause ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )? sql_statements
            {
            root_0 = (CommonTree)adaptor.nil();

            FORALL_KEYWORD490=(Token)match(input,FORALL_KEYWORD,FOLLOW_FORALL_KEYWORD_in_forall_statement8391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORALL_KEYWORD490_tree = (CommonTree)adaptor.create(FORALL_KEYWORD490);
            adaptor.addChild(root_0, FORALL_KEYWORD490_tree);
            }
            pushFollow(FOLLOW_identifier_in_forall_statement8393);
            identifier491=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier491.getTree());
            IN_KEYWORD492=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_forall_statement8395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD492_tree = (CommonTree)adaptor.create(IN_KEYWORD492);
            adaptor.addChild(root_0, IN_KEYWORD492_tree);
            }
            pushFollow(FOLLOW_bounds_clause_in_forall_statement8397);
            bounds_clause493=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bounds_clause493.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:20: ( SAVE_KEYWORD EXCEPTIONS_KEYWORD )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==SAVE_KEYWORD) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:772:21: SAVE_KEYWORD EXCEPTIONS_KEYWORD
                    {
                    SAVE_KEYWORD494=(Token)match(input,SAVE_KEYWORD,FOLLOW_SAVE_KEYWORD_in_forall_statement8419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAVE_KEYWORD494_tree = (CommonTree)adaptor.create(SAVE_KEYWORD494);
                    adaptor.addChild(root_0, SAVE_KEYWORD494_tree);
                    }
                    EXCEPTIONS_KEYWORD495=(Token)match(input,EXCEPTIONS_KEYWORD,FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTIONS_KEYWORD495_tree = (CommonTree)adaptor.create(EXCEPTIONS_KEYWORD495);
                    adaptor.addChild(root_0, EXCEPTIONS_KEYWORD495_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_statements_in_forall_statement8425);
            sql_statements496=sql_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statements496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, forall_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forall_statement"

    public static class bounds_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bounds_clause"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:1: bounds_clause : ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) );
    public final PL_SQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
        PL_SQLParser.bounds_clause_return retval = new PL_SQLParser.bounds_clause_return();
        retval.start = input.LT(1);
        int bounds_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal498=null;
        Token INDICES_KEYWORD500=null;
        Token OF_KEYWORD501=null;
        Token BETWEEN_KEYWORD503=null;
        Token AND_OPERATOR505=null;
        Token VALUES_KEYWORD507=null;
        Token OF_KEYWORD508=null;
        PL_SQLParser.expression_return expression497 = null;

        PL_SQLParser.expression_return expression499 = null;

        PL_SQLParser.universal_identifier_return universal_identifier502 = null;

        PL_SQLParser.expression_return expression504 = null;

        PL_SQLParser.expression_return expression506 = null;

        PL_SQLParser.universal_identifier_return universal_identifier509 = null;


        CommonTree string_literal498_tree=null;
        CommonTree INDICES_KEYWORD500_tree=null;
        CommonTree OF_KEYWORD501_tree=null;
        CommonTree BETWEEN_KEYWORD503_tree=null;
        CommonTree AND_OPERATOR505_tree=null;
        CommonTree VALUES_KEYWORD507_tree=null;
        CommonTree OF_KEYWORD508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:15: ( ( expression '..' expression ) | ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? ) | ( VALUES_KEYWORD OF_KEYWORD universal_identifier ) )
            int alt170=3;
            switch ( input.LA(1) ) {
            case NUMBER_UNSIGNED:
            case STRING:
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case NULL_KEYWORD:
            case TRUE_KEYWORD:
            case FALSE_KEYWORD:
            case INTERVAL_KEYWORD:
            case REPLACE_KEYWORD:
            case IN_KEYWORD:
            case CASE_KEYWORD:
            case SQLCODE_KEYWORD:
            case SQLERRM_KEYWORD:
            case RESULT_KEYWORD:
            case NOT_OPERATOR:
            case 206:
            case 210:
            case 211:
                {
                alt170=1;
                }
                break;
            case INDICES_KEYWORD:
                {
                alt170=2;
                }
                break;
            case VALUES_KEYWORD:
                {
                alt170=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:17: ( expression '..' expression )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:17: ( expression '..' expression )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:773:18: expression '..' expression
                    {
                    pushFollow(FOLLOW_expression_in_bounds_clause8433);
                    expression497=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression497.getTree());
                    string_literal498=(Token)match(input,225,FOLLOW_225_in_bounds_clause8435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal498_tree = (CommonTree)adaptor.create(string_literal498);
                    adaptor.addChild(root_0, string_literal498_tree);
                    }
                    pushFollow(FOLLOW_expression_in_bounds_clause8437);
                    expression499=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression499.getTree());

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:17: ( INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:774:18: INDICES_KEYWORD OF_KEYWORD universal_identifier ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    {
                    INDICES_KEYWORD500=(Token)match(input,INDICES_KEYWORD,FOLLOW_INDICES_KEYWORD_in_bounds_clause8459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDICES_KEYWORD500_tree = (CommonTree)adaptor.create(INDICES_KEYWORD500);
                    adaptor.addChild(root_0, INDICES_KEYWORD500_tree);
                    }
                    OF_KEYWORD501=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD501_tree = (CommonTree)adaptor.create(OF_KEYWORD501);
                    adaptor.addChild(root_0, OF_KEYWORD501_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8463);
                    universal_identifier502=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier502.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:775:17: ( BETWEEN_KEYWORD expression AND_OPERATOR expression )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==BETWEEN_KEYWORD) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:775:18: BETWEEN_KEYWORD expression AND_OPERATOR expression
                            {
                            BETWEEN_KEYWORD503=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8483); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BETWEEN_KEYWORD503_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD503);
                            adaptor.addChild(root_0, BETWEEN_KEYWORD503_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8485);
                            expression504=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression504.getTree());
                            AND_OPERATOR505=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_bounds_clause8487); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_OPERATOR505_tree = (CommonTree)adaptor.create(AND_OPERATOR505);
                            adaptor.addChild(root_0, AND_OPERATOR505_tree);
                            }
                            pushFollow(FOLLOW_expression_in_bounds_clause8489);
                            expression506=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression506.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:17: ( VALUES_KEYWORD OF_KEYWORD universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:776:18: VALUES_KEYWORD OF_KEYWORD universal_identifier
                    {
                    VALUES_KEYWORD507=(Token)match(input,VALUES_KEYWORD,FOLLOW_VALUES_KEYWORD_in_bounds_clause8514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VALUES_KEYWORD507_tree = (CommonTree)adaptor.create(VALUES_KEYWORD507);
                    adaptor.addChild(root_0, VALUES_KEYWORD507_tree);
                    }
                    OF_KEYWORD508=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_bounds_clause8516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OF_KEYWORD508_tree = (CommonTree)adaptor.create(OF_KEYWORD508);
                    adaptor.addChild(root_0, OF_KEYWORD508_tree);
                    }
                    pushFollow(FOLLOW_universal_identifier_in_bounds_clause8518);
                    universal_identifier509=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier509.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, bounds_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"

    public static class pragma_inline_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_inline_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:1: pragma_inline_statement : PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' ;
    public final PL_SQLParser.pragma_inline_statement_return pragma_inline_statement() throws RecognitionException {
        PL_SQLParser.pragma_inline_statement_return retval = new PL_SQLParser.pragma_inline_statement_return();
        retval.start = input.LT(1);
        int pragma_inline_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PRAGMA_KEYWORD510=null;
        Token INLINE_KEYWORD511=null;
        Token char_literal512=null;
        Token STRING513=null;
        Token char_literal514=null;
        Token STRING515=null;
        Token char_literal516=null;

        CommonTree PRAGMA_KEYWORD510_tree=null;
        CommonTree INLINE_KEYWORD511_tree=null;
        CommonTree char_literal512_tree=null;
        CommonTree STRING513_tree=null;
        CommonTree char_literal514_tree=null;
        CommonTree STRING515_tree=null;
        CommonTree char_literal516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:25: ( PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:777:27: PRAGMA_KEYWORD INLINE_KEYWORD '(' STRING ',' STRING ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            PRAGMA_KEYWORD510=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRAGMA_KEYWORD510_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD510);
            adaptor.addChild(root_0, PRAGMA_KEYWORD510_tree);
            }
            INLINE_KEYWORD511=(Token)match(input,INLINE_KEYWORD,FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INLINE_KEYWORD511_tree = (CommonTree)adaptor.create(INLINE_KEYWORD511);
            adaptor.addChild(root_0, INLINE_KEYWORD511_tree);
            }
            char_literal512=(Token)match(input,206,FOLLOW_206_in_pragma_inline_statement8557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal512_tree = (CommonTree)adaptor.create(char_literal512);
            adaptor.addChild(root_0, char_literal512_tree);
            }
            STRING513=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING513_tree = (CommonTree)adaptor.create(STRING513);
            adaptor.addChild(root_0, STRING513_tree);
            }
            char_literal514=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_inline_statement8561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal514_tree = (CommonTree)adaptor.create(char_literal514);
            adaptor.addChild(root_0, char_literal514_tree);
            }
            STRING515=(Token)match(input,STRING,FOLLOW_STRING_in_pragma_inline_statement8563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING515_tree = (CommonTree)adaptor.create(STRING515);
            adaptor.addChild(root_0, STRING515_tree);
            }
            char_literal516=(Token)match(input,207,FOLLOW_207_in_pragma_inline_statement8565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal516_tree = (CommonTree)adaptor.create(char_literal516);
            adaptor.addChild(root_0, char_literal516_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, pragma_inline_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_inline_statement"

    public static class open_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:1: open_statement : OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? ;
    public final PL_SQLParser.open_statement_return open_statement() throws RecognitionException {
        PL_SQLParser.open_statement_return retval = new PL_SQLParser.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OPEN_KEYWORD517=null;
        Token FOR_KEYWORD520=null;
        Token STRING522=null;
        PL_SQLParser.universal_identifier_return universal_identifier518 = null;

        PL_SQLParser.open_params_return open_params519 = null;

        PL_SQLParser.select_statement_return select_statement521 = null;

        PL_SQLParser.universal_identifier_return universal_identifier523 = null;

        PL_SQLParser.using_clause_return using_clause524 = null;


        CommonTree OPEN_KEYWORD517_tree=null;
        CommonTree FOR_KEYWORD520_tree=null;
        CommonTree STRING522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:16: ( OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:18: OPEN_KEYWORD universal_identifier ( open_params )? ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            OPEN_KEYWORD517=(Token)match(input,OPEN_KEYWORD,FOLLOW_OPEN_KEYWORD_in_open_statement8572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_KEYWORD517_tree = (CommonTree)adaptor.create(OPEN_KEYWORD517);
            adaptor.addChild(root_0, OPEN_KEYWORD517_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_open_statement8574);
            universal_identifier518=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier518.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:52: ( open_params )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==206) ) {
                int LA171_1 = input.LA(2);

                if ( (synpred291_PL_SQL()) ) {
                    alt171=1;
                }
            }
            switch (alt171) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: open_params
                    {
                    pushFollow(FOLLOW_open_params_in_open_statement8576);
                    open_params519=open_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_params519.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:18: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==FOR_KEYWORD) ) {
                int LA174_1 = input.LA(2);

                if ( (synpred295_PL_SQL()) ) {
                    alt174=1;
                }
            }
            switch (alt174) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
                    {
                    FOR_KEYWORD520=(Token)match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_open_statement8597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR_KEYWORD520_tree = (CommonTree)adaptor.create(FOR_KEYWORD520);
                    adaptor.addChild(root_0, FOR_KEYWORD520_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:31: ( select_statement | STRING | universal_identifier )
                    int alt172=3;
                    switch ( input.LA(1) ) {
                    case SELECT_KEYWORD:
                        {
                        alt172=1;
                        }
                        break;
                    case STRING:
                        {
                        alt172=2;
                        }
                        break;
                    case IDENTIFIER:
                    case EXT_IDENTIFIER:
                    case INTERVAL_KEYWORD:
                    case RESULT_KEYWORD:
                        {
                        alt172=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 0, input);

                        throw nvae;
                    }

                    switch (alt172) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:32: select_statement
                            {
                            pushFollow(FOLLOW_select_statement_in_open_statement8600);
                            select_statement521=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement521.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:51: STRING
                            {
                            STRING522=(Token)match(input,STRING,FOLLOW_STRING_in_open_statement8604); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STRING522_tree = (CommonTree)adaptor.create(STRING522);
                            adaptor.addChild(root_0, STRING522_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:60: universal_identifier
                            {
                            pushFollow(FOLLOW_universal_identifier_in_open_statement8608);
                            universal_identifier523=universal_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier523.getTree());

                            }
                            break;

                    }

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:82: ( using_clause )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==USING_KEYWORD) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_open_statement8611);
                            using_clause524=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause524.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class open_params_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_params"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:1: open_params : '(' expression ( ',' expression )* ')' ;
    public final PL_SQLParser.open_params_return open_params() throws RecognitionException {
        PL_SQLParser.open_params_return retval = new PL_SQLParser.open_params_return();
        retval.start = input.LT(1);
        int open_params_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal525=null;
        Token char_literal527=null;
        Token char_literal529=null;
        PL_SQLParser.expression_return expression526 = null;

        PL_SQLParser.expression_return expression528 = null;


        CommonTree char_literal525_tree=null;
        CommonTree char_literal527_tree=null;
        CommonTree char_literal529_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:13: ( '(' expression ( ',' expression )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:15: '(' expression ( ',' expression )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal525=(Token)match(input,206,FOLLOW_206_in_open_params8621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal525_tree = (CommonTree)adaptor.create(char_literal525);
            adaptor.addChild(root_0, char_literal525_tree);
            }
            pushFollow(FOLLOW_expression_in_open_params8623);
            expression526=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:30: ( ',' expression )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==COMMA) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:781:31: ',' expression
            	    {
            	    char_literal527=(Token)match(input,COMMA,FOLLOW_COMMA_in_open_params8626); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal527_tree = (CommonTree)adaptor.create(char_literal527);
            	    adaptor.addChild(root_0, char_literal527_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_open_params8628);
            	    expression528=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression528.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);

            char_literal529=(Token)match(input,207,FOLLOW_207_in_open_params8632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal529_tree = (CommonTree)adaptor.create(char_literal529);
            adaptor.addChild(root_0, char_literal529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, open_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_params"

    public static class sqlcode_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcode_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:1: sqlcode_function : SQLCODE_KEYWORD ;
    public final PL_SQLParser.sqlcode_function_return sqlcode_function() throws RecognitionException {
        PL_SQLParser.sqlcode_function_return retval = new PL_SQLParser.sqlcode_function_return();
        retval.start = input.LT(1);
        int sqlcode_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLCODE_KEYWORD530=null;

        CommonTree SQLCODE_KEYWORD530_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:18: ( SQLCODE_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:782:20: SQLCODE_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLCODE_KEYWORD530=(Token)match(input,SQLCODE_KEYWORD,FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLCODE_KEYWORD530_tree = (CommonTree)adaptor.create(SQLCODE_KEYWORD530);
            adaptor.addChild(root_0, SQLCODE_KEYWORD530_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, sqlcode_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlcode_function"

    public static class sqlerrm_function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlerrm_function"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:1: sqlerrm_function : SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.sqlerrm_function_return sqlerrm_function() throws RecognitionException {
        PL_SQLParser.sqlerrm_function_return retval = new PL_SQLParser.sqlerrm_function_return();
        retval.start = input.LT(1);
        int sqlerrm_function_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SQLERRM_KEYWORD531=null;
        Token char_literal532=null;
        Token set533=null;
        Token NUMBER_UNSIGNED534=null;
        Token char_literal535=null;

        CommonTree SQLERRM_KEYWORD531_tree=null;
        CommonTree char_literal532_tree=null;
        CommonTree set533_tree=null;
        CommonTree NUMBER_UNSIGNED534_tree=null;
        CommonTree char_literal535_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:18: ( SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:20: SQLERRM_KEYWORD ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SQLERRM_KEYWORD531=(Token)match(input,SQLERRM_KEYWORD,FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQLERRM_KEYWORD531_tree = (CommonTree)adaptor.create(SQLERRM_KEYWORD531);
            adaptor.addChild(root_0, SQLERRM_KEYWORD531_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:36: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==206) ) {
                int LA177_2 = input.LA(2);

                if ( (synpred299_PL_SQL()) ) {
                    alt177=1;
                }
            }
            switch (alt177) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal532=(Token)match(input,206,FOLLOW_206_in_sqlerrm_function8649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal532_tree = (CommonTree)adaptor.create(char_literal532);
                    adaptor.addChild(root_0, char_literal532_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:41: ( '+' | '-' )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( ((LA176_0>=210 && LA176_0<=211)) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set533=(Token)input.LT(1);
                            if ( (input.LA(1)>=210 && input.LA(1)<=211) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set533));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER_UNSIGNED534=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED534_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED534);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED534_tree);
                    }
                    char_literal535=(Token)match(input,207,FOLLOW_207_in_sqlerrm_function8660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal535_tree = (CommonTree)adaptor.create(char_literal535);
                    adaptor.addChild(root_0, char_literal535_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, sqlerrm_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sqlerrm_function"

    public static class anonymous_block_declare_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_block_declare_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:1: anonymous_block_declare_section : DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* ;
    public final PL_SQLParser.anonymous_block_declare_section_return anonymous_block_declare_section() throws RecognitionException {
        PL_SQLParser.anonymous_block_declare_section_return retval = new PL_SQLParser.anonymous_block_declare_section_return();
        retval.start = input.LT(1);
        int anonymous_block_declare_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DECLARE_KEYWORD536=null;
        PL_SQLParser.variable_declaration_return variable_declaration537 = null;

        PL_SQLParser.function_declaration_return function_declaration538 = null;

        PL_SQLParser.procedure_declaration_return procedure_declaration539 = null;


        CommonTree DECLARE_KEYWORD536_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:33: ( DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:784:35: DECLARE_KEYWORD ( variable_declaration )* ( function_declaration | procedure_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE_KEYWORD536=(Token)match(input,DECLARE_KEYWORD,FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARE_KEYWORD536_tree = (CommonTree)adaptor.create(DECLARE_KEYWORD536);
            adaptor.addChild(root_0, DECLARE_KEYWORD536_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:35: ( variable_declaration )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==IDENTIFIER||LA178_0==TYPE_KEYWORD||LA178_0==INTERVAL_KEYWORD||LA178_0==SUBTYPE_KEYWORD||LA178_0==PRAGMA_KEYWORD||LA178_0==CURSOR_KEYWORD||LA178_0==RESULT_KEYWORD) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:785:36: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_anonymous_block_declare_section8707);
            	    variable_declaration537=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration537.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:35: ( function_declaration | procedure_declaration )*
            loop179:
            do {
                int alt179=3;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==FUNCTION_KEYWORD) ) {
                    alt179=1;
                }
                else if ( (LA179_0==PROCEDURE_KEYWORD) ) {
                    alt179=2;
                }


                switch (alt179) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:36: function_declaration
            	    {
            	    pushFollow(FOLLOW_function_declaration_in_anonymous_block_declare_section8747);
            	    function_declaration538=function_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration538.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:786:59: procedure_declaration
            	    {
            	    pushFollow(FOLLOW_procedure_declaration_in_anonymous_block_declare_section8751);
            	    procedure_declaration539=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration539.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, anonymous_block_declare_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_block_declare_section"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:1: variable_declaration : ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR ;
    public final PL_SQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
        PL_SQLParser.variable_declaration_return retval = new PL_SQLParser.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CONSTANT_KEYWORD544=null;
        Token EXCEPTION_KEYWORD550=null;
        Token PRAGMA_KEYWORD551=null;
        Token AUTONOMOUS_TRANSACTION_KEYWORD552=null;
        Token SERIALLY_REUSABLE_KEYWORD553=null;
        Token EXCEPTION_INIT_KEYWORD554=null;
        Token char_literal555=null;
        Token char_literal557=null;
        Token char_literal559=null;
        Token RESTRICT_REFERENCES_KEYWORD560=null;
        Token char_literal561=null;
        Token char_literal563=null;
        Token char_literal565=null;
        Token SEPARATOR567=null;
        PL_SQLParser.identifier_return identifier540 = null;

        PL_SQLParser.data_type_return data_type541 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part542 = null;

        PL_SQLParser.identifier_return identifier543 = null;

        PL_SQLParser.data_type_return data_type545 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part546 = null;

        PL_SQLParser.subtype_datatype_return subtype_datatype547 = null;

        PL_SQLParser.record_collection_datatype_return record_collection_datatype548 = null;

        PL_SQLParser.identifier_return identifier549 = null;

        PL_SQLParser.expression_return expression556 = null;

        PL_SQLParser.expression_return expression558 = null;

        PL_SQLParser.expression_return expression562 = null;

        PL_SQLParser.expression_return expression564 = null;

        PL_SQLParser.cursor_datatype_return cursor_datatype566 = null;


        CommonTree CONSTANT_KEYWORD544_tree=null;
        CommonTree EXCEPTION_KEYWORD550_tree=null;
        CommonTree PRAGMA_KEYWORD551_tree=null;
        CommonTree AUTONOMOUS_TRANSACTION_KEYWORD552_tree=null;
        CommonTree SERIALLY_REUSABLE_KEYWORD553_tree=null;
        CommonTree EXCEPTION_INIT_KEYWORD554_tree=null;
        CommonTree char_literal555_tree=null;
        CommonTree char_literal557_tree=null;
        CommonTree char_literal559_tree=null;
        CommonTree RESTRICT_REFERENCES_KEYWORD560_tree=null;
        CommonTree char_literal561_tree=null;
        CommonTree char_literal563_tree=null;
        CommonTree char_literal565_tree=null;
        CommonTree SEPARATOR567_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:22: ( ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype ) SEPARATOR
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:24: ( ( identifier data_type ( variable_declaration_part )? ) | ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) | subtype_datatype | record_collection_datatype | ( identifier EXCEPTION_KEYWORD ) | ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) ) | cursor_datatype )
            int alt183=7;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                int LA183_1 = input.LA(2);

                if ( (synpred304_PL_SQL()) ) {
                    alt183=1;
                }
                else if ( (synpred305_PL_SQL()) ) {
                    alt183=2;
                }
                else if ( (synpred308_PL_SQL()) ) {
                    alt183=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 1, input);

                    throw nvae;
                }
                }
                break;
            case SUBTYPE_KEYWORD:
                {
                alt183=3;
                }
                break;
            case PRAGMA_KEYWORD:
                {
                alt183=6;
                }
                break;
            case TYPE_KEYWORD:
                {
                alt183=4;
                }
                break;
            case CURSOR_KEYWORD:
                {
                alt183=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:25: ( identifier data_type ( variable_declaration_part )? )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:25: ( identifier data_type ( variable_declaration_part )? )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:26: identifier data_type ( variable_declaration_part )?
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8762);
                    identifier540=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier540.getTree());
                    pushFollow(FOLLOW_data_type_in_variable_declaration8764);
                    data_type541=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type541.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:24: ( variable_declaration_part )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==DEFAULT_KEYWORD||LA180_0==NOT_OPERATOR||LA180_0==226) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                            {
                            pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8790);
                            variable_declaration_part542=variable_declaration_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part542.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8808);
                    identifier543=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier543.getTree());
                    CONSTANT_KEYWORD544=(Token)match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONSTANT_KEYWORD544_tree = (CommonTree)adaptor.create(CONSTANT_KEYWORD544);
                    adaptor.addChild(root_0, CONSTANT_KEYWORD544_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_variable_declaration8812);
                    data_type545=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type545.getTree());
                    pushFollow(FOLLOW_variable_declaration_part_in_variable_declaration8838);
                    variable_declaration_part546=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part546.getTree());

                    }


                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:792:11: subtype_datatype
                    {
                    pushFollow(FOLLOW_subtype_datatype_in_variable_declaration8851);
                    subtype_datatype547=subtype_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_datatype547.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:793:11: record_collection_datatype
                    {
                    pushFollow(FOLLOW_record_collection_datatype_in_variable_declaration8863);
                    record_collection_datatype548=record_collection_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_collection_datatype548.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:11: ( identifier EXCEPTION_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:11: ( identifier EXCEPTION_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:12: identifier EXCEPTION_KEYWORD
                    {
                    pushFollow(FOLLOW_identifier_in_variable_declaration8876);
                    identifier549=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier549.getTree());
                    EXCEPTION_KEYWORD550=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXCEPTION_KEYWORD550_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD550);
                    adaptor.addChild(root_0, EXCEPTION_KEYWORD550_tree);
                    }

                    }


                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:9: ( PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) ) )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:10: PRAGMA_KEYWORD ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    {
                    PRAGMA_KEYWORD551=(Token)match(input,PRAGMA_KEYWORD,FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8901); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRAGMA_KEYWORD551_tree = (CommonTree)adaptor.create(PRAGMA_KEYWORD551);
                    adaptor.addChild(root_0, PRAGMA_KEYWORD551_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:25: ( AUTONOMOUS_TRANSACTION_KEYWORD | SERIALLY_REUSABLE_KEYWORD | ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' ) | ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' ) )
                    int alt182=4;
                    switch ( input.LA(1) ) {
                    case AUTONOMOUS_TRANSACTION_KEYWORD:
                        {
                        alt182=1;
                        }
                        break;
                    case SERIALLY_REUSABLE_KEYWORD:
                        {
                        alt182=2;
                        }
                        break;
                    case EXCEPTION_INIT_KEYWORD:
                        {
                        alt182=3;
                        }
                        break;
                    case RESTRICT_REFERENCES_KEYWORD:
                        {
                        alt182=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 182, 0, input);

                        throw nvae;
                    }

                    switch (alt182) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:26: AUTONOMOUS_TRANSACTION_KEYWORD
                            {
                            AUTONOMOUS_TRANSACTION_KEYWORD552=(Token)match(input,AUTONOMOUS_TRANSACTION_KEYWORD,FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8904); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AUTONOMOUS_TRANSACTION_KEYWORD552_tree = (CommonTree)adaptor.create(AUTONOMOUS_TRANSACTION_KEYWORD552);
                            adaptor.addChild(root_0, AUTONOMOUS_TRANSACTION_KEYWORD552_tree);
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:796:59: SERIALLY_REUSABLE_KEYWORD
                            {
                            SERIALLY_REUSABLE_KEYWORD553=(Token)match(input,SERIALLY_REUSABLE_KEYWORD,FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8908); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SERIALLY_REUSABLE_KEYWORD553_tree = (CommonTree)adaptor.create(SERIALLY_REUSABLE_KEYWORD553);
                            adaptor.addChild(root_0, SERIALLY_REUSABLE_KEYWORD553_tree);
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:7: ( EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:797:8: EXCEPTION_INIT_KEYWORD '(' expression ',' expression ')'
                            {
                            EXCEPTION_INIT_KEYWORD554=(Token)match(input,EXCEPTION_INIT_KEYWORD,FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8919); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EXCEPTION_INIT_KEYWORD554_tree = (CommonTree)adaptor.create(EXCEPTION_INIT_KEYWORD554);
                            adaptor.addChild(root_0, EXCEPTION_INIT_KEYWORD554_tree);
                            }
                            char_literal555=(Token)match(input,206,FOLLOW_206_in_variable_declaration8921); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal555_tree = (CommonTree)adaptor.create(char_literal555);
                            adaptor.addChild(root_0, char_literal555_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8923);
                            expression556=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression556.getTree());
                            char_literal557=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8925); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal557_tree = (CommonTree)adaptor.create(char_literal557);
                            adaptor.addChild(root_0, char_literal557_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8927);
                            expression558=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression558.getTree());
                            char_literal559=(Token)match(input,207,FOLLOW_207_in_variable_declaration8929); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal559_tree = (CommonTree)adaptor.create(char_literal559);
                            adaptor.addChild(root_0, char_literal559_tree);
                            }

                            }


                            }
                            break;
                        case 4 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            {
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:7: ( RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')' )
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:8: RESTRICT_REFERENCES_KEYWORD '(' expression ( ',' expression )+ ')'
                            {
                            RESTRICT_REFERENCES_KEYWORD560=(Token)match(input,RESTRICT_REFERENCES_KEYWORD,FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8941); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RESTRICT_REFERENCES_KEYWORD560_tree = (CommonTree)adaptor.create(RESTRICT_REFERENCES_KEYWORD560);
                            adaptor.addChild(root_0, RESTRICT_REFERENCES_KEYWORD560_tree);
                            }
                            char_literal561=(Token)match(input,206,FOLLOW_206_in_variable_declaration8943); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal561_tree = (CommonTree)adaptor.create(char_literal561);
                            adaptor.addChild(root_0, char_literal561_tree);
                            }
                            pushFollow(FOLLOW_expression_in_variable_declaration8945);
                            expression562=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression562.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:51: ( ',' expression )+
                            int cnt181=0;
                            loop181:
                            do {
                                int alt181=2;
                                int LA181_0 = input.LA(1);

                                if ( (LA181_0==COMMA) ) {
                                    alt181=1;
                                }


                                switch (alt181) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:798:52: ',' expression
                            	    {
                            	    char_literal563=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_declaration8948); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal563_tree = (CommonTree)adaptor.create(char_literal563);
                            	    adaptor.addChild(root_0, char_literal563_tree);
                            	    }
                            	    pushFollow(FOLLOW_expression_in_variable_declaration8950);
                            	    expression564=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression564.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt181 >= 1 ) break loop181;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(181, input);
                                        throw eee;
                                }
                                cnt181++;
                            } while (true);

                            char_literal565=(Token)match(input,207,FOLLOW_207_in_variable_declaration8954); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal565_tree = (CommonTree)adaptor.create(char_literal565);
                            adaptor.addChild(root_0, char_literal565_tree);
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:799:11: cursor_datatype
                    {
                    pushFollow(FOLLOW_cursor_datatype_in_variable_declaration8971);
                    cursor_datatype566=cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_datatype566.getTree());

                    }
                    break;

            }

            SEPARATOR567=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_variable_declaration8982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEPARATOR567_tree = (CommonTree)adaptor.create(SEPARATOR567);
            adaptor.addChild(root_0, SEPARATOR567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class variable_declaration_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:1: variable_declaration_part : ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression ;
    public final PL_SQLParser.variable_declaration_part_return variable_declaration_part() throws RecognitionException {
        PL_SQLParser.variable_declaration_part_return retval = new PL_SQLParser.variable_declaration_part_return();
        retval.start = input.LT(1);
        int variable_declaration_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR568=null;
        Token NULL_KEYWORD569=null;
        PL_SQLParser.variable_def_part_return variable_def_part570 = null;

        PL_SQLParser.expression_return expression571 = null;


        CommonTree NOT_OPERATOR568_tree=null;
        CommonTree NULL_KEYWORD569_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:27: ( ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:29: ( NOT_OPERATOR NULL_KEYWORD )? variable_def_part expression
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:29: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==NOT_OPERATOR) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:801:30: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR568=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_variable_declaration_part8990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR568_tree = (CommonTree)adaptor.create(NOT_OPERATOR568);
                    adaptor.addChild(root_0, NOT_OPERATOR568_tree);
                    }
                    NULL_KEYWORD569=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_variable_declaration_part8992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD569_tree = (CommonTree)adaptor.create(NULL_KEYWORD569);
                    adaptor.addChild(root_0, NULL_KEYWORD569_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_variable_def_part_in_variable_declaration_part8996);
            variable_def_part570=variable_def_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part570.getTree());
            pushFollow(FOLLOW_expression_in_variable_declaration_part8998);
            expression571=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression571.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, variable_declaration_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_part"

    public static class variable_def_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_def_part"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:1: variable_def_part : ( ':=' | DEFAULT_KEYWORD );
    public final PL_SQLParser.variable_def_part_return variable_def_part() throws RecognitionException {
        PL_SQLParser.variable_def_part_return retval = new PL_SQLParser.variable_def_part_return();
        retval.start = input.LT(1);
        int variable_def_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set572=null;

        CommonTree set572_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:802:19: ( ':=' | DEFAULT_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set572=(Token)input.LT(1);
            if ( input.LA(1)==DEFAULT_KEYWORD||input.LA(1)==226 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set572));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, variable_def_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_def_part"

    public static class data_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );
    public final PL_SQLParser.data_type_return data_type() throws RecognitionException {
        PL_SQLParser.data_type_return retval = new PL_SQLParser.data_type_return();
        retval.start = input.LT(1);
        int data_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SOME_TYPES573=null;
        Token REF_KEYWORD581=null;
        PL_SQLParser.scale_types_return scale_types574 = null;

        PL_SQLParser.size_types_return size_types575 = null;

        PL_SQLParser.char_types_return char_types576 = null;

        PL_SQLParser.raw_type_return raw_type577 = null;

        PL_SQLParser.timestamp_types_return timestamp_types578 = null;

        PL_SQLParser.interval_year_type_return interval_year_type579 = null;

        PL_SQLParser.interval_day_type_return interval_day_type580 = null;

        PL_SQLParser.universal_identifier_return universal_identifier582 = null;

        PL_SQLParser.special_datatype_return special_datatype583 = null;


        CommonTree SOME_TYPES573_tree=null;
        CommonTree REF_KEYWORD581_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:11: ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype )
            int alt186=10;
            alt186 = dfa186.predict(input);
            switch (alt186) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:13: SOME_TYPES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SOME_TYPES573=(Token)match(input,SOME_TYPES,FOLLOW_SOME_TYPES_in_data_type9016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SOME_TYPES573_tree = (CommonTree)adaptor.create(SOME_TYPES573);
                    adaptor.addChild(root_0, SOME_TYPES573_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:26: scale_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_scale_types_in_data_type9020);
                    scale_types574=scale_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scale_types574.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:40: size_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_size_types_in_data_type9024);
                    size_types575=size_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, size_types575.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:53: char_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_char_types_in_data_type9028);
                    char_types576=char_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_types576.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:803:66: raw_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raw_type_in_data_type9032);
                    raw_type577=raw_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raw_type577.getTree());

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:13: timestamp_types
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timestamp_types_in_data_type9048);
                    timestamp_types578=timestamp_types();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_types578.getTree());

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:31: interval_year_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_year_type_in_data_type9052);
                    interval_year_type579=interval_year_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_year_type579.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:52: interval_day_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interval_day_type_in_data_type9056);
                    interval_day_type580=interval_day_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_day_type580.getTree());

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:13: ( ( REF_KEYWORD )? universal_identifier )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:13: ( ( REF_KEYWORD )? universal_identifier )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:14: ( REF_KEYWORD )? universal_identifier
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:14: ( REF_KEYWORD )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==REF_KEYWORD) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                            {
                            REF_KEYWORD581=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_data_type9074); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            REF_KEYWORD581_tree = (CommonTree)adaptor.create(REF_KEYWORD581);
                            adaptor.addChild(root_0, REF_KEYWORD581_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_universal_identifier_in_data_type9077);
                    universal_identifier582=universal_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier582.getTree());

                    }


                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:50: special_datatype
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_special_datatype_in_data_type9081);
                    special_datatype583=special_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, special_datatype583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, data_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class char_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:1: char_types : ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? ;
    public final PL_SQLParser.char_types_return char_types() throws RecognitionException {
        PL_SQLParser.char_types_return retval = new PL_SQLParser.char_types_return();
        retval.start = input.LT(1);
        int char_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set584=null;
        Token char_literal585=null;
        Token char_literal586=null;
        Token NUMBER_UNSIGNED587=null;
        Token set588=null;
        Token char_literal589=null;

        CommonTree set584_tree=null;
        CommonTree char_literal585_tree=null;
        CommonTree char_literal586_tree=null;
        CommonTree NUMBER_UNSIGNED587_tree=null;
        CommonTree set588_tree=null;
        CommonTree char_literal589_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:12: ( ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:14: ( CHAR_TYPES | CHAR_TYPE ) ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            set584=(Token)input.LT(1);
            if ( (input.LA(1)>=CHAR_TYPES && input.LA(1)<=CHAR_TYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set584));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:39: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==206) ) {
                int LA189_2 = input.LA(2);

                if ( (synpred330_PL_SQL()) ) {
                    alt189=1;
                }
            }
            switch (alt189) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
                    {
                    char_literal585=(Token)match(input,206,FOLLOW_206_in_char_types9097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal585_tree = (CommonTree)adaptor.create(char_literal585);
                    adaptor.addChild(root_0, char_literal585_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:44: ( '+' )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==210) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal586=(Token)match(input,210,FOLLOW_210_in_char_types9099); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal586_tree = (CommonTree)adaptor.create(char_literal586);
                            adaptor.addChild(root_0, char_literal586_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED587=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_char_types9102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED587_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED587);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED587_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:65: ( CHAR_TYPE | BYTE_TYPE )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( ((LA188_0>=CHAR_TYPE && LA188_0<=BYTE_TYPE)) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                            {
                            set588=(Token)input.LT(1);
                            if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set588));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    char_literal589=(Token)match(input,207,FOLLOW_207_in_char_types9113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal589_tree = (CommonTree)adaptor.create(char_literal589);
                    adaptor.addChild(root_0, char_literal589_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, char_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "char_types"

    public static class timestamp_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:1: timestamp_types : timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? ;
    public final PL_SQLParser.timestamp_types_return timestamp_types() throws RecognitionException {
        PL_SQLParser.timestamp_types_return retval = new PL_SQLParser.timestamp_types_return();
        retval.start = input.LT(1);
        int timestamp_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WITH_KEYWORD591=null;
        Token LOCAL_KEYWORD592=null;
        Token TIME_KEYWORD593=null;
        Token ZONE_KEYWORD594=null;
        PL_SQLParser.timestamp_type_return timestamp_type590 = null;


        CommonTree WITH_KEYWORD591_tree=null;
        CommonTree LOCAL_KEYWORD592_tree=null;
        CommonTree TIME_KEYWORD593_tree=null;
        CommonTree ZONE_KEYWORD594_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:17: ( timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:19: timestamp_type ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestamp_type_in_timestamp_types9122);
            timestamp_type590=timestamp_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp_type590.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:34: ( WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==WITH_KEYWORD) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:35: WITH_KEYWORD ( LOCAL_KEYWORD )? TIME_KEYWORD ZONE_KEYWORD
                    {
                    WITH_KEYWORD591=(Token)match(input,WITH_KEYWORD,FOLLOW_WITH_KEYWORD_in_timestamp_types9125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_KEYWORD591_tree = (CommonTree)adaptor.create(WITH_KEYWORD591);
                    adaptor.addChild(root_0, WITH_KEYWORD591_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:807:48: ( LOCAL_KEYWORD )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==LOCAL_KEYWORD) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: LOCAL_KEYWORD
                            {
                            LOCAL_KEYWORD592=(Token)match(input,LOCAL_KEYWORD,FOLLOW_LOCAL_KEYWORD_in_timestamp_types9127); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LOCAL_KEYWORD592_tree = (CommonTree)adaptor.create(LOCAL_KEYWORD592);
                            adaptor.addChild(root_0, LOCAL_KEYWORD592_tree);
                            }

                            }
                            break;

                    }

                    TIME_KEYWORD593=(Token)match(input,TIME_KEYWORD,FOLLOW_TIME_KEYWORD_in_timestamp_types9130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIME_KEYWORD593_tree = (CommonTree)adaptor.create(TIME_KEYWORD593);
                    adaptor.addChild(root_0, TIME_KEYWORD593_tree);
                    }
                    ZONE_KEYWORD594=(Token)match(input,ZONE_KEYWORD,FOLLOW_ZONE_KEYWORD_in_timestamp_types9132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ZONE_KEYWORD594_tree = (CommonTree)adaptor.create(ZONE_KEYWORD594);
                    adaptor.addChild(root_0, ZONE_KEYWORD594_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, timestamp_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_types"

    public static class interval_year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:808:1: interval_year_type : INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD ;
    public final PL_SQLParser.interval_year_type_return interval_year_type() throws RecognitionException {
        PL_SQLParser.interval_year_type_return retval = new PL_SQLParser.interval_year_type_return();
        retval.start = input.LT(1);
        int interval_year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD595=null;
        Token TO_KEYWORD597=null;
        Token MONTH_KEYWORD598=null;
        PL_SQLParser.year_type_return year_type596 = null;


        CommonTree INTERVAL_KEYWORD595_tree=null;
        CommonTree TO_KEYWORD597_tree=null;
        CommonTree MONTH_KEYWORD598_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:808:20: ( INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:808:22: INTERVAL_KEYWORD year_type TO_KEYWORD MONTH_KEYWORD
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD595=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD595_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD595);
            adaptor.addChild(root_0, INTERVAL_KEYWORD595_tree);
            }
            pushFollow(FOLLOW_year_type_in_interval_year_type9143);
            year_type596=year_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, year_type596.getTree());
            TO_KEYWORD597=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_year_type9145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD597_tree = (CommonTree)adaptor.create(TO_KEYWORD597);
            adaptor.addChild(root_0, TO_KEYWORD597_tree);
            }
            MONTH_KEYWORD598=(Token)match(input,MONTH_KEYWORD,FOLLOW_MONTH_KEYWORD_in_interval_year_type9147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MONTH_KEYWORD598_tree = (CommonTree)adaptor.create(MONTH_KEYWORD598);
            adaptor.addChild(root_0, MONTH_KEYWORD598_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, interval_year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_year_type"

    public static class interval_day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:1: interval_day_type : INTERVAL_KEYWORD day_type TO_KEYWORD second_type ;
    public final PL_SQLParser.interval_day_type_return interval_day_type() throws RecognitionException {
        PL_SQLParser.interval_day_type_return retval = new PL_SQLParser.interval_day_type_return();
        retval.start = input.LT(1);
        int interval_day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERVAL_KEYWORD599=null;
        Token TO_KEYWORD601=null;
        PL_SQLParser.day_type_return day_type600 = null;

        PL_SQLParser.second_type_return second_type602 = null;


        CommonTree INTERVAL_KEYWORD599_tree=null;
        CommonTree TO_KEYWORD601_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:19: ( INTERVAL_KEYWORD day_type TO_KEYWORD second_type )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:809:21: INTERVAL_KEYWORD day_type TO_KEYWORD second_type
            {
            root_0 = (CommonTree)adaptor.nil();

            INTERVAL_KEYWORD599=(Token)match(input,INTERVAL_KEYWORD,FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTERVAL_KEYWORD599_tree = (CommonTree)adaptor.create(INTERVAL_KEYWORD599);
            adaptor.addChild(root_0, INTERVAL_KEYWORD599_tree);
            }
            pushFollow(FOLLOW_day_type_in_interval_day_type9156);
            day_type600=day_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, day_type600.getTree());
            TO_KEYWORD601=(Token)match(input,TO_KEYWORD,FOLLOW_TO_KEYWORD_in_interval_day_type9158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO_KEYWORD601_tree = (CommonTree)adaptor.create(TO_KEYWORD601);
            adaptor.addChild(root_0, TO_KEYWORD601_tree);
            }
            pushFollow(FOLLOW_second_type_in_interval_day_type9160);
            second_type602=second_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, second_type602.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, interval_day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_day_type"

    public static class subtype_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:1: subtype_datatype : SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.subtype_datatype_return subtype_datatype() throws RecognitionException {
        PL_SQLParser.subtype_datatype_return retval = new PL_SQLParser.subtype_datatype_return();
        retval.start = input.LT(1);
        int subtype_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUBTYPE_KEYWORD603=null;
        Token IS_KEYWORD605=null;
        Token NOT_OPERATOR607=null;
        Token NULL_KEYWORD608=null;
        PL_SQLParser.identifier_return identifier604 = null;

        PL_SQLParser.data_type_return data_type606 = null;


        CommonTree SUBTYPE_KEYWORD603_tree=null;
        CommonTree IS_KEYWORD605_tree=null;
        CommonTree NOT_OPERATOR607_tree=null;
        CommonTree NULL_KEYWORD608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:18: ( SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:20: SUBTYPE_KEYWORD identifier IS_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SUBTYPE_KEYWORD603=(Token)match(input,SUBTYPE_KEYWORD,FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUBTYPE_KEYWORD603_tree = (CommonTree)adaptor.create(SUBTYPE_KEYWORD603);
            adaptor.addChild(root_0, SUBTYPE_KEYWORD603_tree);
            }
            pushFollow(FOLLOW_identifier_in_subtype_datatype9169);
            identifier604=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier604.getTree());
            IS_KEYWORD605=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_subtype_datatype9171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD605_tree = (CommonTree)adaptor.create(IS_KEYWORD605);
            adaptor.addChild(root_0, IS_KEYWORD605_tree);
            }
            pushFollow(FOLLOW_data_type_in_subtype_datatype9173);
            data_type606=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type606.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:68: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==NOT_OPERATOR) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:810:69: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR607=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_subtype_datatype9176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR607_tree = (CommonTree)adaptor.create(NOT_OPERATOR607);
                    adaptor.addChild(root_0, NOT_OPERATOR607_tree);
                    }
                    NULL_KEYWORD608=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_subtype_datatype9178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD608_tree = (CommonTree)adaptor.create(NULL_KEYWORD608);
                    adaptor.addChild(root_0, NULL_KEYWORD608_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, subtype_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_datatype"

    public static class record_collection_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_collection_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:812:1: record_collection_datatype : TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) ;
    public final PL_SQLParser.record_collection_datatype_return record_collection_datatype() throws RecognitionException {
        PL_SQLParser.record_collection_datatype_return retval = new PL_SQLParser.record_collection_datatype_return();
        retval.start = input.LT(1);
        int record_collection_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TYPE_KEYWORD609=null;
        Token IS_KEYWORD611=null;
        PL_SQLParser.identifier_return identifier610 = null;

        PL_SQLParser.record_datatype_return record_datatype612 = null;

        PL_SQLParser.collection_table_datatype_return collection_table_datatype613 = null;

        PL_SQLParser.collection_varray_datatype_return collection_varray_datatype614 = null;

        PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype615 = null;


        CommonTree TYPE_KEYWORD609_tree=null;
        CommonTree IS_KEYWORD611_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:812:28: ( TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:812:30: TYPE_KEYWORD identifier IS_KEYWORD ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            {
            root_0 = (CommonTree)adaptor.nil();

            TYPE_KEYWORD609=(Token)match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_KEYWORD609_tree = (CommonTree)adaptor.create(TYPE_KEYWORD609);
            adaptor.addChild(root_0, TYPE_KEYWORD609_tree);
            }
            pushFollow(FOLLOW_identifier_in_record_collection_datatype9190);
            identifier610=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier610.getTree());
            IS_KEYWORD611=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_record_collection_datatype9192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IS_KEYWORD611_tree = (CommonTree)adaptor.create(IS_KEYWORD611);
            adaptor.addChild(root_0, IS_KEYWORD611_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:29: ( record_datatype | collection_table_datatype | collection_varray_datatype | ref_cursor_datatype )
            int alt193=4;
            switch ( input.LA(1) ) {
            case RECORD_KEYWORD:
                {
                alt193=1;
                }
                break;
            case TABLE_KEYWORD:
                {
                alt193=2;
                }
                break;
            case VARRAY_KEYWORD:
            case VARYING_KEYWORD:
                {
                alt193=3;
                }
                break;
            case REF_KEYWORD:
                {
                alt193=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:30: record_datatype
                    {
                    pushFollow(FOLLOW_record_datatype_in_record_collection_datatype9224);
                    record_datatype612=record_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_datatype612.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:48: collection_table_datatype
                    {
                    pushFollow(FOLLOW_collection_table_datatype_in_record_collection_datatype9228);
                    collection_table_datatype613=collection_table_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_table_datatype613.getTree());

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:813:76: collection_varray_datatype
                    {
                    pushFollow(FOLLOW_collection_varray_datatype_in_record_collection_datatype9232);
                    collection_varray_datatype614=collection_varray_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_varray_datatype614.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:814:29: ref_cursor_datatype
                    {
                    pushFollow(FOLLOW_ref_cursor_datatype_in_record_collection_datatype9264);
                    ref_cursor_datatype615=ref_cursor_datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_cursor_datatype615.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, record_collection_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_collection_datatype"

    public static class record_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:1: record_datatype : RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' ;
    public final PL_SQLParser.record_datatype_return record_datatype() throws RecognitionException {
        PL_SQLParser.record_datatype_return retval = new PL_SQLParser.record_datatype_return();
        retval.start = input.LT(1);
        int record_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RECORD_KEYWORD616=null;
        Token char_literal617=null;
        Token char_literal619=null;
        Token char_literal621=null;
        PL_SQLParser.record_field_declaration_return record_field_declaration618 = null;

        PL_SQLParser.record_field_declaration_return record_field_declaration620 = null;


        CommonTree RECORD_KEYWORD616_tree=null;
        CommonTree char_literal617_tree=null;
        CommonTree char_literal619_tree=null;
        CommonTree char_literal621_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:17: ( RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:19: RECORD_KEYWORD '(' record_field_declaration ( ',' record_field_declaration )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            RECORD_KEYWORD616=(Token)match(input,RECORD_KEYWORD,FOLLOW_RECORD_KEYWORD_in_record_datatype9272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECORD_KEYWORD616_tree = (CommonTree)adaptor.create(RECORD_KEYWORD616);
            adaptor.addChild(root_0, RECORD_KEYWORD616_tree);
            }
            char_literal617=(Token)match(input,206,FOLLOW_206_in_record_datatype9274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal617_tree = (CommonTree)adaptor.create(char_literal617);
            adaptor.addChild(root_0, char_literal617_tree);
            }
            pushFollow(FOLLOW_record_field_declaration_in_record_datatype9276);
            record_field_declaration618=record_field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration618.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:63: ( ',' record_field_declaration )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:815:64: ',' record_field_declaration
            	    {
            	    char_literal619=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_datatype9279); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal619_tree = (CommonTree)adaptor.create(char_literal619);
            	    adaptor.addChild(root_0, char_literal619_tree);
            	    }
            	    pushFollow(FOLLOW_record_field_declaration_in_record_datatype9281);
            	    record_field_declaration620=record_field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_field_declaration620.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);

            char_literal621=(Token)match(input,207,FOLLOW_207_in_record_datatype9285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal621_tree = (CommonTree)adaptor.create(char_literal621);
            adaptor.addChild(root_0, char_literal621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, record_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_datatype"

    public static class record_field_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_field_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:1: record_field_declaration : identifier data_type ( variable_declaration_part )? ;
    public final PL_SQLParser.record_field_declaration_return record_field_declaration() throws RecognitionException {
        PL_SQLParser.record_field_declaration_return retval = new PL_SQLParser.record_field_declaration_return();
        retval.start = input.LT(1);
        int record_field_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.identifier_return identifier622 = null;

        PL_SQLParser.data_type_return data_type623 = null;

        PL_SQLParser.variable_declaration_part_return variable_declaration_part624 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:26: ( identifier data_type ( variable_declaration_part )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:28: identifier data_type ( variable_declaration_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_field_declaration9293);
            identifier622=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier622.getTree());
            pushFollow(FOLLOW_data_type_in_record_field_declaration9295);
            data_type623=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type623.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:816:49: ( variable_declaration_part )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==DEFAULT_KEYWORD||LA195_0==NOT_OPERATOR||LA195_0==226) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                    {
                    pushFollow(FOLLOW_variable_declaration_part_in_record_field_declaration9297);
                    variable_declaration_part624=variable_declaration_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_part624.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, record_field_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_field_declaration"

    public static class collection_table_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_table_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:1: collection_table_datatype : TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? ;
    public final PL_SQLParser.collection_table_datatype_return collection_table_datatype() throws RecognitionException {
        PL_SQLParser.collection_table_datatype_return retval = new PL_SQLParser.collection_table_datatype_return();
        retval.start = input.LT(1);
        int collection_table_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TABLE_KEYWORD625=null;
        Token OF_KEYWORD626=null;
        Token NOT_OPERATOR628=null;
        Token NULL_KEYWORD629=null;
        Token INDEX_KEYWORD630=null;
        Token BY_KEYWORD631=null;
        PL_SQLParser.data_type_return data_type627 = null;

        PL_SQLParser.data_type_return data_type632 = null;


        CommonTree TABLE_KEYWORD625_tree=null;
        CommonTree OF_KEYWORD626_tree=null;
        CommonTree NOT_OPERATOR628_tree=null;
        CommonTree NULL_KEYWORD629_tree=null;
        CommonTree INDEX_KEYWORD630_tree=null;
        CommonTree BY_KEYWORD631_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:27: ( TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:29: TABLE_KEYWORD OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ( INDEX_KEYWORD BY_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TABLE_KEYWORD625=(Token)match(input,TABLE_KEYWORD,FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE_KEYWORD625_tree = (CommonTree)adaptor.create(TABLE_KEYWORD625);
            adaptor.addChild(root_0, TABLE_KEYWORD625_tree);
            }
            OF_KEYWORD626=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_table_datatype9307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD626_tree = (CommonTree)adaptor.create(OF_KEYWORD626);
            adaptor.addChild(root_0, OF_KEYWORD626_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_table_datatype9309);
            data_type627=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type627.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:64: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==NOT_OPERATOR) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:817:65: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR628=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_table_datatype9312); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR628_tree = (CommonTree)adaptor.create(NOT_OPERATOR628);
                    adaptor.addChild(root_0, NOT_OPERATOR628_tree);
                    }
                    NULL_KEYWORD629=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_table_datatype9314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD629_tree = (CommonTree)adaptor.create(NULL_KEYWORD629);
                    adaptor.addChild(root_0, NULL_KEYWORD629_tree);
                    }

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:23: ( INDEX_KEYWORD BY_KEYWORD data_type )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==INDEX_KEYWORD) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:818:24: INDEX_KEYWORD BY_KEYWORD data_type
                    {
                    INDEX_KEYWORD630=(Token)match(input,INDEX_KEYWORD,FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX_KEYWORD630_tree = (CommonTree)adaptor.create(INDEX_KEYWORD630);
                    adaptor.addChild(root_0, INDEX_KEYWORD630_tree);
                    }
                    BY_KEYWORD631=(Token)match(input,BY_KEYWORD,FOLLOW_BY_KEYWORD_in_collection_table_datatype9343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY_KEYWORD631_tree = (CommonTree)adaptor.create(BY_KEYWORD631);
                    adaptor.addChild(root_0, BY_KEYWORD631_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_collection_table_datatype9345);
                    data_type632=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type632.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, collection_table_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_table_datatype"

    public static class collection_varray_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_varray_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:1: collection_varray_datatype : ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? ;
    public final PL_SQLParser.collection_varray_datatype_return collection_varray_datatype() throws RecognitionException {
        PL_SQLParser.collection_varray_datatype_return retval = new PL_SQLParser.collection_varray_datatype_return();
        retval.start = input.LT(1);
        int collection_varray_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token VARRAY_KEYWORD633=null;
        Token VARYING_KEYWORD634=null;
        Token ARRAY_KEYWORD635=null;
        Token char_literal636=null;
        Token char_literal637=null;
        Token NUMBER_UNSIGNED638=null;
        Token char_literal639=null;
        Token OF_KEYWORD640=null;
        Token NOT_OPERATOR642=null;
        Token NULL_KEYWORD643=null;
        PL_SQLParser.data_type_return data_type641 = null;


        CommonTree VARRAY_KEYWORD633_tree=null;
        CommonTree VARYING_KEYWORD634_tree=null;
        CommonTree ARRAY_KEYWORD635_tree=null;
        CommonTree char_literal636_tree=null;
        CommonTree char_literal637_tree=null;
        CommonTree NUMBER_UNSIGNED638_tree=null;
        CommonTree char_literal639_tree=null;
        CommonTree OF_KEYWORD640_tree=null;
        CommonTree NOT_OPERATOR642_tree=null;
        CommonTree NULL_KEYWORD643_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:28: ( ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) ) '(' ( '+' )? NUMBER_UNSIGNED ')' OF_KEYWORD data_type ( NOT_OPERATOR NULL_KEYWORD )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:30: ( VARRAY_KEYWORD | ( VARYING_KEYWORD ARRAY_KEYWORD ) )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==VARRAY_KEYWORD) ) {
                alt198=1;
            }
            else if ( (LA198_0==VARYING_KEYWORD) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:31: VARRAY_KEYWORD
                    {
                    VARRAY_KEYWORD633=(Token)match(input,VARRAY_KEYWORD,FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARRAY_KEYWORD633_tree = (CommonTree)adaptor.create(VARRAY_KEYWORD633);
                    adaptor.addChild(root_0, VARRAY_KEYWORD633_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:48: ( VARYING_KEYWORD ARRAY_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:819:49: VARYING_KEYWORD ARRAY_KEYWORD
                    {
                    VARYING_KEYWORD634=(Token)match(input,VARYING_KEYWORD,FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARYING_KEYWORD634_tree = (CommonTree)adaptor.create(VARYING_KEYWORD634);
                    adaptor.addChild(root_0, VARYING_KEYWORD634_tree);
                    }
                    ARRAY_KEYWORD635=(Token)match(input,ARRAY_KEYWORD,FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY_KEYWORD635_tree = (CommonTree)adaptor.create(ARRAY_KEYWORD635);
                    adaptor.addChild(root_0, ARRAY_KEYWORD635_tree);
                    }

                    }


                    }
                    break;

            }

            char_literal636=(Token)match(input,206,FOLLOW_206_in_collection_varray_datatype9395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal636_tree = (CommonTree)adaptor.create(char_literal636);
            adaptor.addChild(root_0, char_literal636_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:34: ( '+' )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==210) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                    {
                    char_literal637=(Token)match(input,210,FOLLOW_210_in_collection_varray_datatype9397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal637_tree = (CommonTree)adaptor.create(char_literal637);
                    adaptor.addChild(root_0, char_literal637_tree);
                    }

                    }
                    break;

            }

            NUMBER_UNSIGNED638=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_UNSIGNED638_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED638);
            adaptor.addChild(root_0, NUMBER_UNSIGNED638_tree);
            }
            char_literal639=(Token)match(input,207,FOLLOW_207_in_collection_varray_datatype9402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal639_tree = (CommonTree)adaptor.create(char_literal639);
            adaptor.addChild(root_0, char_literal639_tree);
            }
            OF_KEYWORD640=(Token)match(input,OF_KEYWORD,FOLLOW_OF_KEYWORD_in_collection_varray_datatype9404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF_KEYWORD640_tree = (CommonTree)adaptor.create(OF_KEYWORD640);
            adaptor.addChild(root_0, OF_KEYWORD640_tree);
            }
            pushFollow(FOLLOW_data_type_in_collection_varray_datatype9406);
            data_type641=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type641.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:80: ( NOT_OPERATOR NULL_KEYWORD )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==NOT_OPERATOR) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:820:81: NOT_OPERATOR NULL_KEYWORD
                    {
                    NOT_OPERATOR642=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR642_tree = (CommonTree)adaptor.create(NOT_OPERATOR642);
                    adaptor.addChild(root_0, NOT_OPERATOR642_tree);
                    }
                    NULL_KEYWORD643=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD643_tree = (CommonTree)adaptor.create(NULL_KEYWORD643);
                    adaptor.addChild(root_0, NULL_KEYWORD643_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, collection_varray_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_varray_datatype"

    public static class ref_cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:1: ref_cursor_datatype : REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? ;
    public final PL_SQLParser.ref_cursor_datatype_return ref_cursor_datatype() throws RecognitionException {
        PL_SQLParser.ref_cursor_datatype_return retval = new PL_SQLParser.ref_cursor_datatype_return();
        retval.start = input.LT(1);
        int ref_cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REF_KEYWORD644=null;
        Token CURSOR_KEYWORD645=null;
        Token RETURN_KEYWORD646=null;
        PL_SQLParser.data_type_return data_type647 = null;


        CommonTree REF_KEYWORD644_tree=null;
        CommonTree CURSOR_KEYWORD645_tree=null;
        CommonTree RETURN_KEYWORD646_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:21: ( REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:23: REF_KEYWORD CURSOR_KEYWORD ( RETURN_KEYWORD data_type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            REF_KEYWORD644=(Token)match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REF_KEYWORD644_tree = (CommonTree)adaptor.create(REF_KEYWORD644);
            adaptor.addChild(root_0, REF_KEYWORD644_tree);
            }
            CURSOR_KEYWORD645=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD645_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD645);
            adaptor.addChild(root_0, CURSOR_KEYWORD645_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:50: ( RETURN_KEYWORD data_type )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==RETURN_KEYWORD) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:821:51: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD646=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD646_tree = (CommonTree)adaptor.create(RETURN_KEYWORD646);
                    adaptor.addChild(root_0, RETURN_KEYWORD646_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_ref_cursor_datatype9427);
                    data_type647=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type647.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, ref_cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_cursor_datatype"

    public static class cursor_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:1: cursor_datatype : CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? ;
    public final PL_SQLParser.cursor_datatype_return cursor_datatype() throws RecognitionException {
        PL_SQLParser.cursor_datatype_return retval = new PL_SQLParser.cursor_datatype_return();
        retval.start = input.LT(1);
        int cursor_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CURSOR_KEYWORD648=null;
        Token RETURN_KEYWORD651=null;
        Token IS_KEYWORD653=null;
        PL_SQLParser.identifier_return identifier649 = null;

        PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration650 = null;

        PL_SQLParser.data_type_return data_type652 = null;

        PL_SQLParser.select_statement_return select_statement654 = null;


        CommonTree CURSOR_KEYWORD648_tree=null;
        CommonTree RETURN_KEYWORD651_tree=null;
        CommonTree IS_KEYWORD653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:17: ( CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:19: CURSOR_KEYWORD identifier ( cursor_parameter_declaration )? ( RETURN_KEYWORD data_type )? ( IS_KEYWORD select_statement )?
            {
            root_0 = (CommonTree)adaptor.nil();

            CURSOR_KEYWORD648=(Token)match(input,CURSOR_KEYWORD,FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CURSOR_KEYWORD648_tree = (CommonTree)adaptor.create(CURSOR_KEYWORD648);
            adaptor.addChild(root_0, CURSOR_KEYWORD648_tree);
            }
            pushFollow(FOLLOW_identifier_in_cursor_datatype9438);
            identifier649=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier649.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:822:45: ( cursor_parameter_declaration )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==206) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: cursor_parameter_declaration
                    {
                    pushFollow(FOLLOW_cursor_parameter_declaration_in_cursor_datatype9440);
                    cursor_parameter_declaration650=cursor_parameter_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter_declaration650.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:19: ( RETURN_KEYWORD data_type )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==RETURN_KEYWORD) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:20: RETURN_KEYWORD data_type
                    {
                    RETURN_KEYWORD651=(Token)match(input,RETURN_KEYWORD,FOLLOW_RETURN_KEYWORD_in_cursor_datatype9462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN_KEYWORD651_tree = (CommonTree)adaptor.create(RETURN_KEYWORD651);
                    adaptor.addChild(root_0, RETURN_KEYWORD651_tree);
                    }
                    pushFollow(FOLLOW_data_type_in_cursor_datatype9464);
                    data_type652=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type652.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:47: ( IS_KEYWORD select_statement )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IS_KEYWORD) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:823:48: IS_KEYWORD select_statement
                    {
                    IS_KEYWORD653=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_cursor_datatype9469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD653_tree = (CommonTree)adaptor.create(IS_KEYWORD653);
                    adaptor.addChild(root_0, IS_KEYWORD653_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_datatype9471);
                    select_statement654=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement654.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, cursor_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_datatype"

    public static class cursor_parameter_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter_declaration"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:1: cursor_parameter_declaration : '(' cursor_parameter ( ',' cursor_parameter )* ')' ;
    public final PL_SQLParser.cursor_parameter_declaration_return cursor_parameter_declaration() throws RecognitionException {
        PL_SQLParser.cursor_parameter_declaration_return retval = new PL_SQLParser.cursor_parameter_declaration_return();
        retval.start = input.LT(1);
        int cursor_parameter_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal655=null;
        Token char_literal657=null;
        Token char_literal659=null;
        PL_SQLParser.cursor_parameter_return cursor_parameter656 = null;

        PL_SQLParser.cursor_parameter_return cursor_parameter658 = null;


        CommonTree char_literal655_tree=null;
        CommonTree char_literal657_tree=null;
        CommonTree char_literal659_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:30: ( '(' cursor_parameter ( ',' cursor_parameter )* ')' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:32: '(' cursor_parameter ( ',' cursor_parameter )* ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal655=(Token)match(input,206,FOLLOW_206_in_cursor_parameter_declaration9480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal655_tree = (CommonTree)adaptor.create(char_literal655);
            adaptor.addChild(root_0, char_literal655_tree);
            }
            pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9482);
            cursor_parameter656=cursor_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter656.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:53: ( ',' cursor_parameter )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==COMMA) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:824:54: ',' cursor_parameter
            	    {
            	    char_literal657=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_parameter_declaration9485); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal657_tree = (CommonTree)adaptor.create(char_literal657);
            	    adaptor.addChild(root_0, char_literal657_tree);
            	    }
            	    pushFollow(FOLLOW_cursor_parameter_in_cursor_parameter_declaration9487);
            	    cursor_parameter658=cursor_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_parameter658.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);

            char_literal659=(Token)match(input,207,FOLLOW_207_in_cursor_parameter_declaration9491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal659_tree = (CommonTree)adaptor.create(char_literal659);
            adaptor.addChild(root_0, char_literal659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, cursor_parameter_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter_declaration"

    public static class cursor_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_parameter"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:1: cursor_parameter : identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? ;
    public final PL_SQLParser.cursor_parameter_return cursor_parameter() throws RecognitionException {
        PL_SQLParser.cursor_parameter_return retval = new PL_SQLParser.cursor_parameter_return();
        retval.start = input.LT(1);
        int cursor_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IN_KEYWORD661=null;
        PL_SQLParser.identifier_return identifier660 = null;

        PL_SQLParser.data_type_return data_type662 = null;

        PL_SQLParser.variable_def_part_return variable_def_part663 = null;

        PL_SQLParser.expression_return expression664 = null;


        CommonTree IN_KEYWORD661_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:18: ( identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:20: identifier ( IN_KEYWORD )? data_type ( variable_def_part expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_parameter9499);
            identifier660=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier660.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:31: ( IN_KEYWORD )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==IN_KEYWORD) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: IN_KEYWORD
                    {
                    IN_KEYWORD661=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_cursor_parameter9501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN_KEYWORD661_tree = (CommonTree)adaptor.create(IN_KEYWORD661);
                    adaptor.addChild(root_0, IN_KEYWORD661_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_data_type_in_cursor_parameter9504);
            data_type662=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type662.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:53: ( variable_def_part expression )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==DEFAULT_KEYWORD||LA207_0==226) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:825:54: variable_def_part expression
                    {
                    pushFollow(FOLLOW_variable_def_part_in_cursor_parameter9507);
                    variable_def_part663=variable_def_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_def_part663.getTree());
                    pushFollow(FOLLOW_expression_in_cursor_parameter9509);
                    expression664=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression664.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, cursor_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_parameter"

    public static class special_datatype_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_datatype"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:1: special_datatype : ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) ;
    public final PL_SQLParser.special_datatype_return special_datatype() throws RecognitionException {
        PL_SQLParser.special_datatype_return retval = new PL_SQLParser.special_datatype_return();
        retval.start = input.LT(1);
        int special_datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXT_IDENTIFIER666=null;
        Token set667=null;
        PL_SQLParser.identifier_return identifier665 = null;


        CommonTree EXT_IDENTIFIER666_tree=null;
        CommonTree set667_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:18: ( ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:20: ( identifier | EXT_IDENTIFIER ) ( LIKE_TYPE_KEYWORD | ROWTYPE_KEYWORD )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:20: ( identifier | EXT_IDENTIFIER )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==IDENTIFIER||LA208_0==INTERVAL_KEYWORD||LA208_0==RESULT_KEYWORD) ) {
                alt208=1;
            }
            else if ( (LA208_0==EXT_IDENTIFIER) ) {
                alt208=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:21: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_special_datatype9520);
                    identifier665=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier665.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:827:34: EXT_IDENTIFIER
                    {
                    EXT_IDENTIFIER666=(Token)match(input,EXT_IDENTIFIER,FOLLOW_EXT_IDENTIFIER_in_special_datatype9524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXT_IDENTIFIER666_tree = (CommonTree)adaptor.create(EXT_IDENTIFIER666);
                    adaptor.addChild(root_0, EXT_IDENTIFIER666_tree);
                    }

                    }
                    break;

            }

            set667=(Token)input.LT(1);
            if ( (input.LA(1)>=ROWTYPE_KEYWORD && input.LA(1)<=LIKE_TYPE_KEYWORD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set667));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, special_datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_datatype"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:1: expression : universal_expression ;
    public final PL_SQLParser.expression_return expression() throws RecognitionException {
        PL_SQLParser.expression_return retval = new PL_SQLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        PL_SQLParser.universal_expression_return universal_expression668 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:12: ( universal_expression )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:831:14: universal_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_expression_in_expression9543);
            universal_expression668=universal_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression668.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class in_notin_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_notin_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:1: in_notin_expression : ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) ;
    public final PL_SQLParser.in_notin_expression_return in_notin_expression() throws RecognitionException {
        PL_SQLParser.in_notin_expression_return retval = new PL_SQLParser.in_notin_expression_return();
        retval.start = input.LT(1);
        int in_notin_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT_OPERATOR669=null;
        Token IN_KEYWORD670=null;
        Token char_literal672=null;
        Token char_literal674=null;
        PL_SQLParser.universal_expression_return universal_expression671 = null;

        PL_SQLParser.select_statement_return select_statement673 = null;


        CommonTree NOT_OPERATOR669_tree=null;
        CommonTree IN_KEYWORD670_tree=null;
        CommonTree char_literal672_tree=null;
        CommonTree char_literal674_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:21: ( ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) ) )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:23: ( ( NOT_OPERATOR )? IN_KEYWORD ) ( universal_expression | ( '(' select_statement ')' ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:23: ( ( NOT_OPERATOR )? IN_KEYWORD )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:24: ( NOT_OPERATOR )? IN_KEYWORD
            {
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:832:24: ( NOT_OPERATOR )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==NOT_OPERATOR) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                    {
                    NOT_OPERATOR669=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_in_notin_expression9551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_OPERATOR669_tree = (CommonTree)adaptor.create(NOT_OPERATOR669);
                    adaptor.addChild(root_0, NOT_OPERATOR669_tree);
                    }

                    }
                    break;

            }

            IN_KEYWORD670=(Token)match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_in_notin_expression9554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN_KEYWORD670_tree = (CommonTree)adaptor.create(IN_KEYWORD670);
            adaptor.addChild(root_0, IN_KEYWORD670_tree);
            }

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:23: ( universal_expression | ( '(' select_statement ')' ) )
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==NUMBER_UNSIGNED||LA210_0==STRING||(LA210_0>=IDENTIFIER && LA210_0<=EXT_IDENTIFIER)||LA210_0==NULL_KEYWORD||(LA210_0>=TRUE_KEYWORD && LA210_0<=FALSE_KEYWORD)||LA210_0==INTERVAL_KEYWORD||LA210_0==REPLACE_KEYWORD||LA210_0==IN_KEYWORD||LA210_0==CASE_KEYWORD||(LA210_0>=SQLCODE_KEYWORD && LA210_0<=SQLERRM_KEYWORD)||LA210_0==RESULT_KEYWORD||LA210_0==NOT_OPERATOR||(LA210_0>=210 && LA210_0<=211)) ) {
                alt210=1;
            }
            else if ( (LA210_0==206) ) {
                int LA210_2 = input.LA(2);

                if ( (synpred354_PL_SQL()) ) {
                    alt210=1;
                }
                else if ( (true) ) {
                    alt210=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }
            switch (alt210) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:25: universal_expression
                    {
                    pushFollow(FOLLOW_universal_expression_in_in_notin_expression9582);
                    universal_expression671=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression671.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:48: ( '(' select_statement ')' )
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:48: ( '(' select_statement ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:50: '(' select_statement ')'
                    {
                    char_literal672=(Token)match(input,206,FOLLOW_206_in_in_notin_expression9588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal672_tree = (CommonTree)adaptor.create(char_literal672);
                    adaptor.addChild(root_0, char_literal672_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_in_notin_expression9590);
                    select_statement673=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement673.getTree());
                    char_literal674=(Token)match(input,207,FOLLOW_207_in_in_notin_expression9592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal674_tree = (CommonTree)adaptor.create(char_literal674);
                    adaptor.addChild(root_0, char_literal674_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, in_notin_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in_notin_expression"

    public static class operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );
    public final PL_SQLParser.operator_return operator() throws RecognitionException {
        PL_SQLParser.operator_return retval = new PL_SQLParser.operator_return();
        retval.start = input.LT(1);
        int operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal675=null;
        Token char_literal676=null;
        Token char_literal677=null;
        Token char_literal678=null;
        Token string_literal679=null;
        Token string_literal680=null;
        Token string_literal681=null;
        Token char_literal682=null;
        Token string_literal683=null;
        Token char_literal684=null;
        Token char_literal685=null;
        Token string_literal686=null;
        Token string_literal687=null;
        Token char_literal688=null;
        Token string_literal689=null;
        Token string_literal690=null;
        Token string_literal691=null;
        Token AND_OPERATOR692=null;
        Token OR_OPERATOR693=null;
        Token LIKE_KEYWORD694=null;
        Token NOT_OPERATOR695=null;
        Token BETWEEN_KEYWORD696=null;

        CommonTree char_literal675_tree=null;
        CommonTree char_literal676_tree=null;
        CommonTree char_literal677_tree=null;
        CommonTree char_literal678_tree=null;
        CommonTree string_literal679_tree=null;
        CommonTree string_literal680_tree=null;
        CommonTree string_literal681_tree=null;
        CommonTree char_literal682_tree=null;
        CommonTree string_literal683_tree=null;
        CommonTree char_literal684_tree=null;
        CommonTree char_literal685_tree=null;
        CommonTree string_literal686_tree=null;
        CommonTree string_literal687_tree=null;
        CommonTree char_literal688_tree=null;
        CommonTree string_literal689_tree=null;
        CommonTree string_literal690_tree=null;
        CommonTree string_literal691_tree=null;
        CommonTree AND_OPERATOR692_tree=null;
        CommonTree OR_OPERATOR693_tree=null;
        CommonTree LIKE_KEYWORD694_tree=null;
        CommonTree NOT_OPERATOR695_tree=null;
        CommonTree BETWEEN_KEYWORD696_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:10: ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) )
            int alt212=21;
            alt212 = dfa212.predict(input);
            switch (alt212) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:12: '+'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal675=(Token)match(input,210,FOLLOW_210_in_operator9601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal675_tree = (CommonTree)adaptor.create(char_literal675);
                    adaptor.addChild(root_0, char_literal675_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:18: '-'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal676=(Token)match(input,211,FOLLOW_211_in_operator9605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal676_tree = (CommonTree)adaptor.create(char_literal676);
                    adaptor.addChild(root_0, char_literal676_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:24: '*'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal677=(Token)match(input,212,FOLLOW_212_in_operator9609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal677_tree = (CommonTree)adaptor.create(char_literal677);
                    adaptor.addChild(root_0, char_literal677_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:30: '/'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal678=(Token)match(input,208,FOLLOW_208_in_operator9613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal678_tree = (CommonTree)adaptor.create(char_literal678);
                    adaptor.addChild(root_0, char_literal678_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:36: '**'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal679=(Token)match(input,213,FOLLOW_213_in_operator9617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal679_tree = (CommonTree)adaptor.create(string_literal679);
                    adaptor.addChild(root_0, string_literal679_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:43: '||'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal680=(Token)match(input,214,FOLLOW_214_in_operator9621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal680_tree = (CommonTree)adaptor.create(string_literal680);
                    adaptor.addChild(root_0, string_literal680_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:50: ':='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal681=(Token)match(input,226,FOLLOW_226_in_operator9625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal681_tree = (CommonTree)adaptor.create(string_literal681);
                    adaptor.addChild(root_0, string_literal681_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:834:57: '.'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal682=(Token)match(input,227,FOLLOW_227_in_operator9629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal682_tree = (CommonTree)adaptor.create(char_literal682);
                    adaptor.addChild(root_0, char_literal682_tree);
                    }

                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:12: '^='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal683=(Token)match(input,219,FOLLOW_219_in_operator9644); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal683_tree = (CommonTree)adaptor.create(string_literal683);
                    adaptor.addChild(root_0, string_literal683_tree);
                    }

                    }
                    break;
                case 10 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:19: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal684=(Token)match(input,220,FOLLOW_220_in_operator9648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal684_tree = (CommonTree)adaptor.create(char_literal684);
                    adaptor.addChild(root_0, char_literal684_tree);
                    }

                    }
                    break;
                case 11 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:25: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal685=(Token)match(input,221,FOLLOW_221_in_operator9652); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal685_tree = (CommonTree)adaptor.create(char_literal685);
                    adaptor.addChild(root_0, char_literal685_tree);
                    }

                    }
                    break;
                case 12 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:31: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal686=(Token)match(input,222,FOLLOW_222_in_operator9656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal686_tree = (CommonTree)adaptor.create(string_literal686);
                    adaptor.addChild(root_0, string_literal686_tree);
                    }

                    }
                    break;
                case 13 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:38: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal687=(Token)match(input,223,FOLLOW_223_in_operator9660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal687_tree = (CommonTree)adaptor.create(string_literal687);
                    adaptor.addChild(root_0, string_literal687_tree);
                    }

                    }
                    break;
                case 14 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:45: '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal688=(Token)match(input,215,FOLLOW_215_in_operator9664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal688_tree = (CommonTree)adaptor.create(char_literal688);
                    adaptor.addChild(root_0, char_literal688_tree);
                    }

                    }
                    break;
                case 15 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:51: '<>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal689=(Token)match(input,216,FOLLOW_216_in_operator9668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal689_tree = (CommonTree)adaptor.create(string_literal689);
                    adaptor.addChild(root_0, string_literal689_tree);
                    }

                    }
                    break;
                case 16 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:58: '!='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal690=(Token)match(input,217,FOLLOW_217_in_operator9672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal690_tree = (CommonTree)adaptor.create(string_literal690);
                    adaptor.addChild(root_0, string_literal690_tree);
                    }

                    }
                    break;
                case 17 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:835:65: '~='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal691=(Token)match(input,218,FOLLOW_218_in_operator9676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal691_tree = (CommonTree)adaptor.create(string_literal691);
                    adaptor.addChild(root_0, string_literal691_tree);
                    }

                    }
                    break;
                case 18 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:12: AND_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AND_OPERATOR692=(Token)match(input,AND_OPERATOR,FOLLOW_AND_OPERATOR_in_operator9691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_OPERATOR692_tree = (CommonTree)adaptor.create(AND_OPERATOR692);
                    adaptor.addChild(root_0, AND_OPERATOR692_tree);
                    }

                    }
                    break;
                case 19 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:836:27: OR_OPERATOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OR_OPERATOR693=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_operator9695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_OPERATOR693_tree = (CommonTree)adaptor.create(OR_OPERATOR693);
                    adaptor.addChild(root_0, OR_OPERATOR693_tree);
                    }

                    }
                    break;
                case 20 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:12: LIKE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LIKE_KEYWORD694=(Token)match(input,LIKE_KEYWORD,FOLLOW_LIKE_KEYWORD_in_operator9710); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIKE_KEYWORD694_tree = (CommonTree)adaptor.create(LIKE_KEYWORD694);
                    adaptor.addChild(root_0, LIKE_KEYWORD694_tree);
                    }

                    }
                    break;
                case 21 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:27: ( ( NOT_OPERATOR )? BETWEEN_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:28: ( NOT_OPERATOR )? BETWEEN_KEYWORD
                    {
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:28: ( NOT_OPERATOR )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NOT_OPERATOR) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:837:29: NOT_OPERATOR
                            {
                            NOT_OPERATOR695=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_operator9716); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR695_tree = (CommonTree)adaptor.create(NOT_OPERATOR695);
                            adaptor.addChild(root_0, NOT_OPERATOR695_tree);
                            }

                            }
                            break;

                    }

                    BETWEEN_KEYWORD696=(Token)match(input,BETWEEN_KEYWORD,FOLLOW_BETWEEN_KEYWORD_in_operator9720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BETWEEN_KEYWORD696_tree = (CommonTree)adaptor.create(BETWEEN_KEYWORD696);
                    adaptor.addChild(root_0, BETWEEN_KEYWORD696_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator"

    public static class unary_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:1: unary_op : ( NOT_OPERATOR | '+' | '-' );
    public final PL_SQLParser.unary_op_return unary_op() throws RecognitionException {
        PL_SQLParser.unary_op_return retval = new PL_SQLParser.unary_op_return();
        retval.start = input.LT(1);
        int unary_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set697=null;

        CommonTree set697_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:838:10: ( NOT_OPERATOR | '+' | '-' )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set697=(Token)input.LT(1);
            if ( input.LA(1)==NOT_OPERATOR||(input.LA(1)>=210 && input.LA(1)<=211) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set697));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, unary_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_op"

    public static class postfix_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfix_op"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:1: postfix_op : ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' );
    public final PL_SQLParser.postfix_op_return postfix_op() throws RecognitionException {
        PL_SQLParser.postfix_op_return retval = new PL_SQLParser.postfix_op_return();
        retval.start = input.LT(1);
        int postfix_op_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IS_KEYWORD698=null;
        Token NOT_OPERATOR699=null;
        Token NULL_KEYWORD700=null;
        Token string_literal701=null;

        CommonTree IS_KEYWORD698_tree=null;
        CommonTree NOT_OPERATOR699_tree=null;
        CommonTree NULL_KEYWORD700_tree=null;
        CommonTree string_literal701_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:12: ( ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD ) | '(+)' )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==IS_KEYWORD) ) {
                alt214=1;
            }
            else if ( (LA214_0==224) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:14: ( IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:15: IS_KEYWORD ( NOT_OPERATOR )? NULL_KEYWORD
                    {
                    IS_KEYWORD698=(Token)match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_postfix_op9744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS_KEYWORD698_tree = (CommonTree)adaptor.create(IS_KEYWORD698);
                    adaptor.addChild(root_0, IS_KEYWORD698_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:26: ( NOT_OPERATOR )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==NOT_OPERATOR) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                            {
                            NOT_OPERATOR699=(Token)match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_postfix_op9746); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_OPERATOR699_tree = (CommonTree)adaptor.create(NOT_OPERATOR699);
                            adaptor.addChild(root_0, NOT_OPERATOR699_tree);
                            }

                            }
                            break;

                    }

                    NULL_KEYWORD700=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_postfix_op9749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD700_tree = (CommonTree)adaptor.create(NULL_KEYWORD700);
                    adaptor.addChild(root_0, NULL_KEYWORD700_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:839:56: '(+)'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal701=(Token)match(input,224,FOLLOW_224_in_postfix_op9754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal701_tree = (CommonTree)adaptor.create(string_literal701);
                    adaptor.addChild(root_0, string_literal701_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, postfix_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfix_op"

    public static class universal_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_expression"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:1: universal_expression : ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* ;
    public final PL_SQLParser.universal_expression_return universal_expression() throws RecognitionException {
        PL_SQLParser.universal_expression_return retval = new PL_SQLParser.universal_expression_return();
        retval.start = input.LT(1);
        int universal_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal707=null;
        Token char_literal709=null;
        PL_SQLParser.unary_op_return unary_op702 = null;

        PL_SQLParser.universal_factor_return universal_factor703 = null;

        PL_SQLParser.postfix_op_return postfix_op704 = null;

        PL_SQLParser.operator_return operator705 = null;

        PL_SQLParser.universal_expression_return universal_expression706 = null;

        PL_SQLParser.select_statement_return select_statement708 = null;


        CommonTree char_literal707_tree=null;
        CommonTree char_literal709_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:22: ( ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )* )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:24: ( unary_op )? universal_factor ( postfix_op )? ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:24: ( unary_op )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( ((LA215_0>=210 && LA215_0<=211)) ) {
                alt215=1;
            }
            else if ( (LA215_0==NOT_OPERATOR) ) {
                int LA215_2 = input.LA(2);

                if ( (synpred380_PL_SQL()) ) {
                    alt215=1;
                }
            }
            switch (alt215) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: unary_op
                    {
                    pushFollow(FOLLOW_unary_op_in_universal_expression9762);
                    unary_op702=unary_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_op702.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_universal_factor_in_universal_expression9765);
            universal_factor703=universal_factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_factor703.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:51: ( postfix_op )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==IS_KEYWORD||LA216_0==224) ) {
                int LA216_2 = input.LA(2);

                if ( (synpred381_PL_SQL()) ) {
                    alt216=1;
                }
            }
            switch (alt216) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: postfix_op
                    {
                    pushFollow(FOLLOW_postfix_op_in_universal_expression9767);
                    postfix_op704=postfix_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfix_op704.getTree());

                    }
                    break;

            }

            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:63: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )*
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( ((LA218_0>=AND_OPERATOR && LA218_0<=OR_OPERATOR)||LA218_0==LIKE_KEYWORD||LA218_0==BETWEEN_KEYWORD||LA218_0==NOT_OPERATOR||LA218_0==208||(LA218_0>=210 && LA218_0<=223)||(LA218_0>=226 && LA218_0<=227)) ) {
                    int LA218_1 = input.LA(2);

                    if ( (synpred383_PL_SQL()) ) {
                        alt218=1;
                    }


                }


                switch (alt218) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:64: operator ( universal_expression | ( '(' select_statement ')' ) )
            	    {
            	    pushFollow(FOLLOW_operator_in_universal_expression9771);
            	    operator705=operator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator705.getTree());
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:73: ( universal_expression | ( '(' select_statement ')' ) )
            	    int alt217=2;
            	    int LA217_0 = input.LA(1);

            	    if ( (LA217_0==NUMBER_UNSIGNED||LA217_0==STRING||(LA217_0>=IDENTIFIER && LA217_0<=EXT_IDENTIFIER)||LA217_0==NULL_KEYWORD||(LA217_0>=TRUE_KEYWORD && LA217_0<=FALSE_KEYWORD)||LA217_0==INTERVAL_KEYWORD||LA217_0==REPLACE_KEYWORD||LA217_0==IN_KEYWORD||LA217_0==CASE_KEYWORD||(LA217_0>=SQLCODE_KEYWORD && LA217_0<=SQLERRM_KEYWORD)||LA217_0==RESULT_KEYWORD||LA217_0==NOT_OPERATOR||(LA217_0>=210 && LA217_0<=211)) ) {
            	        alt217=1;
            	    }
            	    else if ( (LA217_0==206) ) {
            	        int LA217_2 = input.LA(2);

            	        if ( (synpred382_PL_SQL()) ) {
            	            alt217=1;
            	        }
            	        else if ( (true) ) {
            	            alt217=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 217, 2, input);

            	            throw nvae;
            	        }
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 217, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt217) {
            	        case 1 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:74: universal_expression
            	            {
            	            pushFollow(FOLLOW_universal_expression_in_universal_expression9774);
            	            universal_expression706=universal_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression706.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:97: ( '(' select_statement ')' )
            	            {
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:97: ( '(' select_statement ')' )
            	            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:98: '(' select_statement ')'
            	            {
            	            char_literal707=(Token)match(input,206,FOLLOW_206_in_universal_expression9779); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal707_tree = (CommonTree)adaptor.create(char_literal707);
            	            adaptor.addChild(root_0, char_literal707_tree);
            	            }
            	            pushFollow(FOLLOW_select_statement_in_universal_expression9781);
            	            select_statement708=select_statement();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement708.getTree());
            	            char_literal709=(Token)match(input,207,FOLLOW_207_in_universal_expression9783); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal709_tree = (CommonTree)adaptor.create(char_literal709);
            	            adaptor.addChild(root_0, char_literal709_tree);
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, universal_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_expression"

    public static class universal_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "universal_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );
    public final PL_SQLParser.universal_factor_return universal_factor() throws RecognitionException {
        PL_SQLParser.universal_factor_return retval = new PL_SQLParser.universal_factor_return();
        retval.start = input.LT(1);
        int universal_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TRUE_KEYWORD710=null;
        Token FALSE_KEYWORD711=null;
        Token NUMBER_UNSIGNED712=null;
        Token STRING714=null;
        Token NULL_KEYWORD715=null;
        Token char_literal720=null;
        Token char_literal722=null;
        Token char_literal724=null;
        PL_SQLParser.in_notin_expression_return in_notin_expression713 = null;

        PL_SQLParser.case_statement_expression_return case_statement_expression716 = null;

        PL_SQLParser.sub_identifier_return sub_identifier717 = null;

        PL_SQLParser.call_statement_param_return call_statement_param718 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression719 = null;

        PL_SQLParser.universal_expression_return universal_expression721 = null;

        PL_SQLParser.universal_expression_return universal_expression723 = null;


        CommonTree TRUE_KEYWORD710_tree=null;
        CommonTree FALSE_KEYWORD711_tree=null;
        CommonTree NUMBER_UNSIGNED712_tree=null;
        CommonTree STRING714_tree=null;
        CommonTree NULL_KEYWORD715_tree=null;
        CommonTree char_literal720_tree=null;
        CommonTree char_literal722_tree=null;
        CommonTree char_literal724_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:18: ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) )
            int alt222=9;
            alt222 = dfa222.predict(input);
            switch (alt222) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:20: TRUE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRUE_KEYWORD710=(Token)match(input,TRUE_KEYWORD,FOLLOW_TRUE_KEYWORD_in_universal_factor9795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE_KEYWORD710_tree = (CommonTree)adaptor.create(TRUE_KEYWORD710);
                    adaptor.addChild(root_0, TRUE_KEYWORD710_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:35: FALSE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FALSE_KEYWORD711=(Token)match(input,FALSE_KEYWORD,FOLLOW_FALSE_KEYWORD_in_universal_factor9799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE_KEYWORD711_tree = (CommonTree)adaptor.create(FALSE_KEYWORD711);
                    adaptor.addChild(root_0, FALSE_KEYWORD711_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:841:51: NUMBER_UNSIGNED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NUMBER_UNSIGNED712=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_universal_factor9803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED712_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED712);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED712_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:842:20: in_notin_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9826);
                    in_notin_expression713=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression713.getTree());

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:20: STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRING714=(Token)match(input,STRING,FOLLOW_STRING_in_universal_factor9849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING714_tree = (CommonTree)adaptor.create(STRING714);
                    adaptor.addChild(root_0, STRING714_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:29: NULL_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NULL_KEYWORD715=(Token)match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_universal_factor9853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL_KEYWORD715_tree = (CommonTree)adaptor.create(NULL_KEYWORD715);
                    adaptor.addChild(root_0, NULL_KEYWORD715_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:843:44: case_statement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_expression_in_universal_factor9857);
                    case_statement_expression716=case_statement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement_expression716.getTree());

                    }
                    break;
                case 8 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:20: sub_identifier ( call_statement_param ( in_notin_expression )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_in_universal_factor9880);
                    sub_identifier717=sub_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier717.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:35: ( call_statement_param ( in_notin_expression )? )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==206) ) {
                        int LA220_2 = input.LA(2);

                        if ( (synpred392_PL_SQL()) ) {
                            alt220=1;
                        }
                    }
                    switch (alt220) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:36: call_statement_param ( in_notin_expression )?
                            {
                            pushFollow(FOLLOW_call_statement_param_in_universal_factor9883);
                            call_statement_param718=call_statement_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement_param718.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:57: ( in_notin_expression )?
                            int alt219=2;
                            int LA219_0 = input.LA(1);

                            if ( (LA219_0==IN_KEYWORD||LA219_0==NOT_OPERATOR) ) {
                                int LA219_2 = input.LA(2);

                                if ( (synpred391_PL_SQL()) ) {
                                    alt219=1;
                                }
                            }
                            switch (alt219) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:58: in_notin_expression
                                    {
                                    pushFollow(FOLLOW_in_notin_expression_in_universal_factor9886);
                                    in_notin_expression719=in_notin_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression719.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:20: ( '(' universal_expression ( ',' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:21: '(' universal_expression ( ',' universal_expression )* ')'
                    {
                    char_literal720=(Token)match(input,206,FOLLOW_206_in_universal_factor9914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal720_tree = (CommonTree)adaptor.create(char_literal720);
                    adaptor.addChild(root_0, char_literal720_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_universal_factor9916);
                    universal_expression721=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression721.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:46: ( ',' universal_expression )*
                    loop221:
                    do {
                        int alt221=2;
                        int LA221_0 = input.LA(1);

                        if ( (LA221_0==COMMA) ) {
                            alt221=1;
                        }


                        switch (alt221) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:845:47: ',' universal_expression
                    	    {
                    	    char_literal722=(Token)match(input,COMMA,FOLLOW_COMMA_in_universal_factor9919); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal722_tree = (CommonTree)adaptor.create(char_literal722);
                    	    adaptor.addChild(root_0, char_literal722_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_universal_factor9921);
                    	    universal_expression723=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression723.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop221;
                        }
                    } while (true);

                    char_literal724=(Token)match(input,207,FOLLOW_207_in_universal_factor9926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal724_tree = (CommonTree)adaptor.create(char_literal724);
                    adaptor.addChild(root_0, char_literal724_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, universal_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "universal_factor"

    public static class sub_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:1: sub_identifier : ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function );
    public final PL_SQLParser.sub_identifier_return sub_identifier() throws RecognitionException {
        PL_SQLParser.sub_identifier_return retval = new PL_SQLParser.sub_identifier_return();
        retval.start = input.LT(1);
        int sub_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token REPLACE_KEYWORD726=null;
        PL_SQLParser.sub_identifier_factor_return sub_identifier_factor725 = null;

        PL_SQLParser.sqlcode_function_return sqlcode_function727 = null;

        PL_SQLParser.sqlerrm_function_return sqlerrm_function728 = null;


        CommonTree REPLACE_KEYWORD726_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:16: ( sub_identifier_factor | REPLACE_KEYWORD | sqlcode_function | sqlerrm_function )
            int alt223=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case EXT_IDENTIFIER:
            case INTERVAL_KEYWORD:
            case RESULT_KEYWORD:
                {
                alt223=1;
                }
                break;
            case REPLACE_KEYWORD:
                {
                alt223=2;
                }
                break;
            case SQLCODE_KEYWORD:
                {
                alt223=3;
                }
                break;
            case SQLERRM_KEYWORD:
                {
                alt223=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }

            switch (alt223) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:18: sub_identifier_factor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sub_identifier_factor_in_sub_identifier9934);
                    sub_identifier_factor725=sub_identifier_factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub_identifier_factor725.getTree());

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:42: REPLACE_KEYWORD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    REPLACE_KEYWORD726=(Token)match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_sub_identifier9938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACE_KEYWORD726_tree = (CommonTree)adaptor.create(REPLACE_KEYWORD726);
                    adaptor.addChild(root_0, REPLACE_KEYWORD726_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:60: sqlcode_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlcode_function_in_sub_identifier9942);
                    sqlcode_function727=sqlcode_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcode_function727.getTree());

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:846:79: sqlerrm_function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sqlerrm_function_in_sub_identifier9946);
                    sqlerrm_function728=sqlerrm_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlerrm_function728.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, sub_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier"

    public static class sub_identifier_factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sub_identifier_factor"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:1: sub_identifier_factor : universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? ;
    public final PL_SQLParser.sub_identifier_factor_return sub_identifier_factor() throws RecognitionException {
        PL_SQLParser.sub_identifier_factor_return retval = new PL_SQLParser.sub_identifier_factor_return();
        retval.start = input.LT(1);
        int sub_identifier_factor_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOTFOUND_KEYWORD730=null;
        Token FOUND_KEYWORD731=null;
        Token ISOPEN_KEYWORD732=null;
        Token ROWCOUNT_KEYWORD733=null;
        PL_SQLParser.universal_identifier_return universal_identifier729 = null;

        PL_SQLParser.in_notin_expression_return in_notin_expression734 = null;


        CommonTree NOTFOUND_KEYWORD730_tree=null;
        CommonTree FOUND_KEYWORD731_tree=null;
        CommonTree ISOPEN_KEYWORD732_tree=null;
        CommonTree ROWCOUNT_KEYWORD733_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:23: ( universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:25: universal_identifier ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_universal_identifier_in_sub_identifier_factor9953);
            universal_identifier729=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier729.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:46: ( NOTFOUND_KEYWORD | FOUND_KEYWORD | ISOPEN_KEYWORD | ROWCOUNT_KEYWORD | in_notin_expression )?
            int alt224=6;
            switch ( input.LA(1) ) {
                case ROWCOUNT_KEYWORD:
                    {
                    alt224=4;
                    }
                    break;
                case NOTFOUND_KEYWORD:
                    {
                    alt224=1;
                    }
                    break;
                case IN_KEYWORD:
                case NOT_OPERATOR:
                    {
                    int LA224_3 = input.LA(2);

                    if ( (synpred402_PL_SQL()) ) {
                        alt224=5;
                    }
                    }
                    break;
                case FOUND_KEYWORD:
                    {
                    alt224=2;
                    }
                    break;
                case ISOPEN_KEYWORD:
                    {
                    alt224=3;
                    }
                    break;
            }

            switch (alt224) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:47: NOTFOUND_KEYWORD
                    {
                    NOTFOUND_KEYWORD730=(Token)match(input,NOTFOUND_KEYWORD,FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTFOUND_KEYWORD730_tree = (CommonTree)adaptor.create(NOTFOUND_KEYWORD730);
                    adaptor.addChild(root_0, NOTFOUND_KEYWORD730_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:847:66: FOUND_KEYWORD
                    {
                    FOUND_KEYWORD731=(Token)match(input,FOUND_KEYWORD,FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOUND_KEYWORD731_tree = (CommonTree)adaptor.create(FOUND_KEYWORD731);
                    adaptor.addChild(root_0, FOUND_KEYWORD731_tree);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:25: ISOPEN_KEYWORD
                    {
                    ISOPEN_KEYWORD732=(Token)match(input,ISOPEN_KEYWORD,FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISOPEN_KEYWORD732_tree = (CommonTree)adaptor.create(ISOPEN_KEYWORD732);
                    adaptor.addChild(root_0, ISOPEN_KEYWORD732_tree);
                    }

                    }
                    break;
                case 4 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:42: ROWCOUNT_KEYWORD
                    {
                    ROWCOUNT_KEYWORD733=(Token)match(input,ROWCOUNT_KEYWORD,FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWCOUNT_KEYWORD733_tree = (CommonTree)adaptor.create(ROWCOUNT_KEYWORD733);
                    adaptor.addChild(root_0, ROWCOUNT_KEYWORD733_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:61: in_notin_expression
                    {
                    pushFollow(FOLLOW_in_notin_expression_in_sub_identifier_factor9996);
                    in_notin_expression734=in_notin_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in_notin_expression734.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, sub_identifier_factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sub_identifier_factor"

    public static class call_statement_param_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_statement_param"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:1: call_statement_param : ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) );
    public final PL_SQLParser.call_statement_param_return call_statement_param() throws RecognitionException {
        PL_SQLParser.call_statement_param_return retval = new PL_SQLParser.call_statement_param_return();
        retval.start = input.LT(1);
        int call_statement_param_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal735=null;
        Token char_literal737=null;
        Token char_literal739=null;
        Token char_literal740=null;
        Token string_literal742=null;
        Token char_literal744=null;
        Token string_literal746=null;
        Token char_literal748=null;
        PL_SQLParser.universal_expression_return universal_expression736 = null;

        PL_SQLParser.universal_expression_return universal_expression738 = null;

        PL_SQLParser.identifier_return identifier741 = null;

        PL_SQLParser.universal_expression_return universal_expression743 = null;

        PL_SQLParser.identifier_return identifier745 = null;

        PL_SQLParser.universal_expression_return universal_expression747 = null;


        CommonTree char_literal735_tree=null;
        CommonTree char_literal737_tree=null;
        CommonTree char_literal739_tree=null;
        CommonTree char_literal740_tree=null;
        CommonTree string_literal742_tree=null;
        CommonTree char_literal744_tree=null;
        CommonTree string_literal746_tree=null;
        CommonTree char_literal748_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:22: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) | ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' ) )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==206) ) {
                int LA228_1 = input.LA(2);

                if ( (synpred405_PL_SQL()) ) {
                    alt228=1;
                }
                else if ( (true) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
                    {
                    char_literal735=(Token)match(input,206,FOLLOW_206_in_call_statement_param10006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal735_tree = (CommonTree)adaptor.create(char_literal735);
                    adaptor.addChild(root_0, char_literal735_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:29: ( universal_expression ( ',' universal_expression )* )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==NUMBER_UNSIGNED||LA226_0==STRING||(LA226_0>=IDENTIFIER && LA226_0<=EXT_IDENTIFIER)||LA226_0==NULL_KEYWORD||(LA226_0>=TRUE_KEYWORD && LA226_0<=FALSE_KEYWORD)||LA226_0==INTERVAL_KEYWORD||LA226_0==REPLACE_KEYWORD||LA226_0==IN_KEYWORD||LA226_0==CASE_KEYWORD||(LA226_0>=SQLCODE_KEYWORD && LA226_0<=SQLERRM_KEYWORD)||LA226_0==RESULT_KEYWORD||LA226_0==NOT_OPERATOR||LA226_0==206||(LA226_0>=210 && LA226_0<=211)) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:30: universal_expression ( ',' universal_expression )*
                            {
                            pushFollow(FOLLOW_universal_expression_in_call_statement_param10009);
                            universal_expression736=universal_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression736.getTree());
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:51: ( ',' universal_expression )*
                            loop225:
                            do {
                                int alt225=2;
                                int LA225_0 = input.LA(1);

                                if ( (LA225_0==COMMA) ) {
                                    alt225=1;
                                }


                                switch (alt225) {
                            	case 1 :
                            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:52: ',' universal_expression
                            	    {
                            	    char_literal737=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10012); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal737_tree = (CommonTree)adaptor.create(char_literal737);
                            	    adaptor.addChild(root_0, char_literal737_tree);
                            	    }
                            	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10014);
                            	    universal_expression738=universal_expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression738.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop225;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal739=(Token)match(input,207,FOLLOW_207_in_call_statement_param10021); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal739_tree = (CommonTree)adaptor.create(char_literal739);
                    adaptor.addChild(root_0, char_literal739_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:24: ( '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')' )
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:25: '(' identifier '=>' universal_expression ( ',' identifier '=>' universal_expression )* ')'
                    {
                    char_literal740=(Token)match(input,206,FOLLOW_206_in_call_statement_param10050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal740_tree = (CommonTree)adaptor.create(char_literal740);
                    adaptor.addChild(root_0, char_literal740_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_call_statement_param10052);
                    identifier741=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier741.getTree());
                    string_literal742=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal742_tree = (CommonTree)adaptor.create(string_literal742);
                    adaptor.addChild(root_0, string_literal742_tree);
                    }
                    pushFollow(FOLLOW_universal_expression_in_call_statement_param10056);
                    universal_expression743=universal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression743.getTree());
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:66: ( ',' identifier '=>' universal_expression )*
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);

                        if ( (LA227_0==COMMA) ) {
                            alt227=1;
                        }


                        switch (alt227) {
                    	case 1 :
                    	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:850:67: ',' identifier '=>' universal_expression
                    	    {
                    	    char_literal744=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement_param10059); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal744_tree = (CommonTree)adaptor.create(char_literal744);
                    	    adaptor.addChild(root_0, char_literal744_tree);
                    	    }
                    	    pushFollow(FOLLOW_identifier_in_call_statement_param10061);
                    	    identifier745=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier745.getTree());
                    	    string_literal746=(Token)match(input,PARAM_VALUE,FOLLOW_PARAM_VALUE_in_call_statement_param10063); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal746_tree = (CommonTree)adaptor.create(string_literal746);
                    	    adaptor.addChild(root_0, string_literal746_tree);
                    	    }
                    	    pushFollow(FOLLOW_universal_expression_in_call_statement_param10065);
                    	    universal_expression747=universal_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_expression747.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);

                    char_literal748=(Token)match(input,207,FOLLOW_207_in_call_statement_param10070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal748_tree = (CommonTree)adaptor.create(char_literal748);
                    adaptor.addChild(root_0, char_literal748_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, call_statement_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_statement_param"

    public static class exception_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_section"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:1: exception_section : EXCEPTION_KEYWORD ( exception_handler )+ ;
    public final PL_SQLParser.exception_section_return exception_section() throws RecognitionException {
        PL_SQLParser.exception_section_return retval = new PL_SQLParser.exception_section_return();
        retval.start = input.LT(1);
        int exception_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXCEPTION_KEYWORD749=null;
        PL_SQLParser.exception_handler_return exception_handler750 = null;


        CommonTree EXCEPTION_KEYWORD749_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:19: ( EXCEPTION_KEYWORD ( exception_handler )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:21: EXCEPTION_KEYWORD ( exception_handler )+
            {
            root_0 = (CommonTree)adaptor.nil();

            EXCEPTION_KEYWORD749=(Token)match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_exception_section10079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPTION_KEYWORD749_tree = (CommonTree)adaptor.create(EXCEPTION_KEYWORD749);
            adaptor.addChild(root_0, EXCEPTION_KEYWORD749_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:39: ( exception_handler )+
            int cnt229=0;
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==WHEN_KEYWORD) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:851:40: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_section10082);
            	    exception_handler750=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler750.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt229 >= 1 ) break loop229;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(229, input);
                        throw eee;
                }
                cnt229++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, exception_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_section"

    public static class exception_handler_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:1: exception_handler : WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ ;
    public final PL_SQLParser.exception_handler_return exception_handler() throws RecognitionException {
        PL_SQLParser.exception_handler_return retval = new PL_SQLParser.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        CommonTree root_0 = null;

        Token WHEN_KEYWORD751=null;
        Token OR_OPERATOR753=null;
        Token THEN_KEYWORD755=null;
        PL_SQLParser.universal_identifier_return universal_identifier752 = null;

        PL_SQLParser.universal_identifier_return universal_identifier754 = null;

        PL_SQLParser.executable_section_return executable_section756 = null;


        CommonTree WHEN_KEYWORD751_tree=null;
        CommonTree OR_OPERATOR753_tree=null;
        CommonTree THEN_KEYWORD755_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:19: ( WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+ )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:21: WHEN_KEYWORD universal_identifier ( OR_OPERATOR universal_identifier )* THEN_KEYWORD ( executable_section )+
            {
            root_0 = (CommonTree)adaptor.nil();

            WHEN_KEYWORD751=(Token)match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_exception_handler10091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN_KEYWORD751_tree = (CommonTree)adaptor.create(WHEN_KEYWORD751);
            adaptor.addChild(root_0, WHEN_KEYWORD751_tree);
            }
            pushFollow(FOLLOW_universal_identifier_in_exception_handler10093);
            universal_identifier752=universal_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier752.getTree());
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:55: ( OR_OPERATOR universal_identifier )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==OR_OPERATOR) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:852:56: OR_OPERATOR universal_identifier
            	    {
            	    OR_OPERATOR753=(Token)match(input,OR_OPERATOR,FOLLOW_OR_OPERATOR_in_exception_handler10096); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR_OPERATOR753_tree = (CommonTree)adaptor.create(OR_OPERATOR753);
            	    adaptor.addChild(root_0, OR_OPERATOR753_tree);
            	    }
            	    pushFollow(FOLLOW_universal_identifier_in_exception_handler10098);
            	    universal_identifier754=universal_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, universal_identifier754.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);

            THEN_KEYWORD755=(Token)match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_exception_handler10122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN_KEYWORD755_tree = (CommonTree)adaptor.create(THEN_KEYWORD755);
            adaptor.addChild(root_0, THEN_KEYWORD755_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:34: ( executable_section )+
            int cnt231=0;
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==NUMBER_UNSIGNED||LA231_0==STRING||(LA231_0>=IDENTIFIER && LA231_0<=EXT_IDENTIFIER)||LA231_0==BEGIN_KEYWORD||LA231_0==DECLARE_KEYWORD||LA231_0==NULL_KEYWORD||(LA231_0>=TRUE_KEYWORD && LA231_0<=FALSE_KEYWORD)||LA231_0==INTERVAL_KEYWORD||LA231_0==REPLACE_KEYWORD||(LA231_0>=RETURN_KEYWORD && LA231_0<=IN_KEYWORD)||LA231_0==IF_KEYWORD||(LA231_0>=GOTO_KEYWORD && LA231_0<=FOR_KEYWORD)||LA231_0==SELECT_KEYWORD||(LA231_0>=RAISE_KEYWORD && LA231_0<=PRAGMA_KEYWORD)||(LA231_0>=CASE_KEYWORD && LA231_0<=CLOSE_KEYWORD)||LA231_0==COMMIT_KEYWORD||LA231_0==CONTINUE_KEYWORD||(LA231_0>=DELETE_KEYWORD && LA231_0<=EXECUTE_KEYWORD)||LA231_0==EXIT_KEYWORD||LA231_0==FETCH_KEYWORD||LA231_0==FORALL_KEYWORD||(LA231_0>=INSERT_KEYWORD && LA231_0<=OPEN_KEYWORD)||(LA231_0>=ROLLBACK_KEYWORD && LA231_0<=SAVEPOINT_KEYWORD)||LA231_0==SET_KEYWORD||(LA231_0>=SQLCODE_KEYWORD && LA231_0<=UPDATE_KEYWORD)||LA231_0==RESULT_KEYWORD||LA231_0==NOT_OPERATOR||LA231_0==204||LA231_0==206||(LA231_0>=210 && LA231_0<=211)) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:853:35: executable_section
            	    {
            	    pushFollow(FOLLOW_executable_section_in_exception_handler10125);
            	    executable_section756=executable_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, executable_section756.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt231 >= 1 ) break loop231;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(231, input);
                        throw eee;
                }
                cnt231++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    public static class scale_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scale_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:855:1: scale_types : SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? ;
    public final PL_SQLParser.scale_types_return scale_types() throws RecognitionException {
        PL_SQLParser.scale_types_return retval = new PL_SQLParser.scale_types_return();
        retval.start = input.LT(1);
        int scale_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SCALE_TYPES757=null;
        Token char_literal758=null;
        Token char_literal759=null;
        Token NUMBER_UNSIGNED760=null;
        Token COMMA761=null;
        Token set762=null;
        Token NUMBER_UNSIGNED763=null;
        Token char_literal764=null;

        CommonTree SCALE_TYPES757_tree=null;
        CommonTree char_literal758_tree=null;
        CommonTree char_literal759_tree=null;
        CommonTree NUMBER_UNSIGNED760_tree=null;
        CommonTree COMMA761_tree=null;
        CommonTree set762_tree=null;
        CommonTree NUMBER_UNSIGNED763_tree=null;
        CommonTree char_literal764_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:2: ( SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:4: SCALE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SCALE_TYPES757=(Token)match(input,SCALE_TYPES,FOLLOW_SCALE_TYPES_in_scale_types10136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCALE_TYPES757_tree = (CommonTree)adaptor.create(SCALE_TYPES757);
            adaptor.addChild(root_0, SCALE_TYPES757_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:16: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==206) ) {
                int LA235_2 = input.LA(2);

                if ( (synpred414_PL_SQL()) ) {
                    alt235=1;
                }
            }
            switch (alt235) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
                    {
                    char_literal758=(Token)match(input,206,FOLLOW_206_in_scale_types10139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal758_tree = (CommonTree)adaptor.create(char_literal758);
                    adaptor.addChild(root_0, char_literal758_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:21: ( '+' )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==210) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal759=(Token)match(input,210,FOLLOW_210_in_scale_types10141); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal759_tree = (CommonTree)adaptor.create(char_literal759);
                            adaptor.addChild(root_0, char_literal759_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED760=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED760_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED760);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED760_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
                    int alt234=2;
                    int LA234_0 = input.LA(1);

                    if ( (LA234_0==COMMA) ) {
                        alt234=1;
                    }
                    switch (alt234) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                            {
                            COMMA761=(Token)match(input,COMMA,FOLLOW_COMMA_in_scale_types10147); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA761_tree = (CommonTree)adaptor.create(COMMA761);
                            adaptor.addChild(root_0, COMMA761_tree);
                            }
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:49: ( '+' | '-' )?
                            int alt233=2;
                            int LA233_0 = input.LA(1);

                            if ( ((LA233_0>=210 && LA233_0<=211)) ) {
                                alt233=1;
                            }
                            switch (alt233) {
                                case 1 :
                                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                                    {
                                    set762=(Token)input.LT(1);
                                    if ( (input.LA(1)>=210 && input.LA(1)<=211) ) {
                                        input.consume();
                                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set762));
                                        state.errorRecovery=false;state.failed=false;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        MismatchedSetException mse = new MismatchedSetException(null,input);
                                        throw mse;
                                    }


                                    }
                                    break;

                            }

                            NUMBER_UNSIGNED763=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_scale_types10158); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER_UNSIGNED763_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED763);
                            adaptor.addChild(root_0, NUMBER_UNSIGNED763_tree);
                            }

                            }
                            break;

                    }

                    char_literal764=(Token)match(input,207,FOLLOW_207_in_scale_types10162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal764_tree = (CommonTree)adaptor.create(char_literal764);
                    adaptor.addChild(root_0, char_literal764_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, scale_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scale_types"

    public static class size_types_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "size_types"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:858:1: size_types : SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.size_types_return size_types() throws RecognitionException {
        PL_SQLParser.size_types_return retval = new PL_SQLParser.size_types_return();
        retval.start = input.LT(1);
        int size_types_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SIZE_TYPES765=null;
        Token char_literal766=null;
        Token char_literal767=null;
        Token NUMBER_UNSIGNED768=null;
        Token char_literal769=null;

        CommonTree SIZE_TYPES765_tree=null;
        CommonTree char_literal766_tree=null;
        CommonTree char_literal767_tree=null;
        CommonTree NUMBER_UNSIGNED768_tree=null;
        CommonTree char_literal769_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:2: ( SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:4: SIZE_TYPES ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SIZE_TYPES765=(Token)match(input,SIZE_TYPES,FOLLOW_SIZE_TYPES_in_size_types10173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SIZE_TYPES765_tree = (CommonTree)adaptor.create(SIZE_TYPES765);
            adaptor.addChild(root_0, SIZE_TYPES765_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:15: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==206) ) {
                int LA237_1 = input.LA(2);

                if ( (synpred416_PL_SQL()) ) {
                    alt237=1;
                }
            }
            switch (alt237) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal766=(Token)match(input,206,FOLLOW_206_in_size_types10177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal766_tree = (CommonTree)adaptor.create(char_literal766);
                    adaptor.addChild(root_0, char_literal766_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:21: ( '+' )?
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==210) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal767=(Token)match(input,210,FOLLOW_210_in_size_types10179); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal767_tree = (CommonTree)adaptor.create(char_literal767);
                            adaptor.addChild(root_0, char_literal767_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED768=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_size_types10182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED768_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED768);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED768_tree);
                    }
                    char_literal769=(Token)match(input,207,FOLLOW_207_in_size_types10184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal769_tree = (CommonTree)adaptor.create(char_literal769);
                    adaptor.addChild(root_0, char_literal769_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, size_types_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "size_types"

    public static class raw_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raw_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:1: raw_type : RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.raw_type_return raw_type() throws RecognitionException {
        PL_SQLParser.raw_type_return retval = new PL_SQLParser.raw_type_return();
        retval.start = input.LT(1);
        int raw_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token RAW_TYPE770=null;
        Token char_literal771=null;
        Token char_literal772=null;
        Token NUMBER_UNSIGNED773=null;
        Token char_literal774=null;

        CommonTree RAW_TYPE770_tree=null;
        CommonTree char_literal771_tree=null;
        CommonTree char_literal772_tree=null;
        CommonTree NUMBER_UNSIGNED773_tree=null;
        CommonTree char_literal774_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:9: ( RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:11: RAW_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            RAW_TYPE770=(Token)match(input,RAW_TYPE,FOLLOW_RAW_TYPE_in_raw_type10194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAW_TYPE770_tree = (CommonTree)adaptor.create(RAW_TYPE770);
            adaptor.addChild(root_0, RAW_TYPE770_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:20: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==206) ) {
                int LA239_2 = input.LA(2);

                if ( (synpred418_PL_SQL()) ) {
                    alt239=1;
                }
            }
            switch (alt239) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal771=(Token)match(input,206,FOLLOW_206_in_raw_type10198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal771_tree = (CommonTree)adaptor.create(char_literal771);
                    adaptor.addChild(root_0, char_literal771_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:26: ( '+' )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==210) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal772=(Token)match(input,210,FOLLOW_210_in_raw_type10200); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal772_tree = (CommonTree)adaptor.create(char_literal772);
                            adaptor.addChild(root_0, char_literal772_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED773=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_raw_type10203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED773_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED773);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED773_tree);
                    }
                    char_literal774=(Token)match(input,207,FOLLOW_207_in_raw_type10205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal774_tree = (CommonTree)adaptor.create(char_literal774);
                    adaptor.addChild(root_0, char_literal774_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, raw_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raw_type"

    public static class year_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "year_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:863:1: year_type : YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.year_type_return year_type() throws RecognitionException {
        PL_SQLParser.year_type_return retval = new PL_SQLParser.year_type_return();
        retval.start = input.LT(1);
        int year_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token YEAR_TYPE775=null;
        Token char_literal776=null;
        Token char_literal777=null;
        Token NUMBER_UNSIGNED778=null;
        Token char_literal779=null;

        CommonTree YEAR_TYPE775_tree=null;
        CommonTree char_literal776_tree=null;
        CommonTree char_literal777_tree=null;
        CommonTree NUMBER_UNSIGNED778_tree=null;
        CommonTree char_literal779_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:2: ( YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:4: YEAR_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            YEAR_TYPE775=(Token)match(input,YEAR_TYPE,FOLLOW_YEAR_TYPE_in_year_type10217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YEAR_TYPE775_tree = (CommonTree)adaptor.create(YEAR_TYPE775);
            adaptor.addChild(root_0, YEAR_TYPE775_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:14: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==206) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:16: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal776=(Token)match(input,206,FOLLOW_206_in_year_type10221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal776_tree = (CommonTree)adaptor.create(char_literal776);
                    adaptor.addChild(root_0, char_literal776_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:864:20: ( '+' )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==210) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal777=(Token)match(input,210,FOLLOW_210_in_year_type10223); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal777_tree = (CommonTree)adaptor.create(char_literal777);
                            adaptor.addChild(root_0, char_literal777_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED778=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_year_type10226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED778_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED778);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED778_tree);
                    }
                    char_literal779=(Token)match(input,207,FOLLOW_207_in_year_type10228); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal779_tree = (CommonTree)adaptor.create(char_literal779);
                    adaptor.addChild(root_0, char_literal779_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, year_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "year_type"

    public static class timestamp_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestamp_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:866:1: timestamp_type : TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.timestamp_type_return timestamp_type() throws RecognitionException {
        PL_SQLParser.timestamp_type_return retval = new PL_SQLParser.timestamp_type_return();
        retval.start = input.LT(1);
        int timestamp_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token TIMESTAMP_TYPE780=null;
        Token char_literal781=null;
        Token char_literal782=null;
        Token NUMBER_UNSIGNED783=null;
        Token char_literal784=null;

        CommonTree TIMESTAMP_TYPE780_tree=null;
        CommonTree char_literal781_tree=null;
        CommonTree char_literal782_tree=null;
        CommonTree NUMBER_UNSIGNED783_tree=null;
        CommonTree char_literal784_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:2: ( TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:4: TIMESTAMP_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TIMESTAMP_TYPE780=(Token)match(input,TIMESTAMP_TYPE,FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TIMESTAMP_TYPE780_tree = (CommonTree)adaptor.create(TIMESTAMP_TYPE780);
            adaptor.addChild(root_0, TIMESTAMP_TYPE780_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:19: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==206) ) {
                int LA243_1 = input.LA(2);

                if ( (synpred422_PL_SQL()) ) {
                    alt243=1;
                }
            }
            switch (alt243) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal781=(Token)match(input,206,FOLLOW_206_in_timestamp_type10244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal781_tree = (CommonTree)adaptor.create(char_literal781);
                    adaptor.addChild(root_0, char_literal781_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:25: ( '+' )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==210) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal782=(Token)match(input,210,FOLLOW_210_in_timestamp_type10246); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal782_tree = (CommonTree)adaptor.create(char_literal782);
                            adaptor.addChild(root_0, char_literal782_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED783=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED783_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED783);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED783_tree);
                    }
                    char_literal784=(Token)match(input,207,FOLLOW_207_in_timestamp_type10251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal784_tree = (CommonTree)adaptor.create(char_literal784);
                    adaptor.addChild(root_0, char_literal784_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, timestamp_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "timestamp_type"

    public static class day_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "day_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:869:1: day_type : DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.day_type_return day_type() throws RecognitionException {
        PL_SQLParser.day_type_return retval = new PL_SQLParser.day_type_return();
        retval.start = input.LT(1);
        int day_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DAY_TYPE785=null;
        Token char_literal786=null;
        Token char_literal787=null;
        Token NUMBER_UNSIGNED788=null;
        Token char_literal789=null;

        CommonTree DAY_TYPE785_tree=null;
        CommonTree char_literal786_tree=null;
        CommonTree char_literal787_tree=null;
        CommonTree NUMBER_UNSIGNED788_tree=null;
        CommonTree char_literal789_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:2: ( DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:4: DAY_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            DAY_TYPE785=(Token)match(input,DAY_TYPE,FOLLOW_DAY_TYPE_in_day_type10263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DAY_TYPE785_tree = (CommonTree)adaptor.create(DAY_TYPE785);
            adaptor.addChild(root_0, DAY_TYPE785_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:13: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==206) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:15: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal786=(Token)match(input,206,FOLLOW_206_in_day_type10267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal786_tree = (CommonTree)adaptor.create(char_literal786);
                    adaptor.addChild(root_0, char_literal786_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:870:19: ( '+' )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==210) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal787=(Token)match(input,210,FOLLOW_210_in_day_type10269); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal787_tree = (CommonTree)adaptor.create(char_literal787);
                            adaptor.addChild(root_0, char_literal787_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED788=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_day_type10272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED788_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED788);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED788_tree);
                    }
                    char_literal789=(Token)match(input,207,FOLLOW_207_in_day_type10274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal789_tree = (CommonTree)adaptor.create(char_literal789);
                    adaptor.addChild(root_0, char_literal789_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, day_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "day_type"

    public static class second_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "second_type"
    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:872:1: second_type : SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? ;
    public final PL_SQLParser.second_type_return second_type() throws RecognitionException {
        PL_SQLParser.second_type_return retval = new PL_SQLParser.second_type_return();
        retval.start = input.LT(1);
        int second_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SECOND_TYPE790=null;
        Token char_literal791=null;
        Token char_literal792=null;
        Token NUMBER_UNSIGNED793=null;
        Token char_literal794=null;

        CommonTree SECOND_TYPE790_tree=null;
        CommonTree char_literal791_tree=null;
        CommonTree char_literal792_tree=null;
        CommonTree NUMBER_UNSIGNED793_tree=null;
        CommonTree char_literal794_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:2: ( SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )? )
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:4: SECOND_TYPE ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            SECOND_TYPE790=(Token)match(input,SECOND_TYPE,FOLLOW_SECOND_TYPE_in_second_type10286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SECOND_TYPE790_tree = (CommonTree)adaptor.create(SECOND_TYPE790);
            adaptor.addChild(root_0, SECOND_TYPE790_tree);
            }
            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:16: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==206) ) {
                int LA247_2 = input.LA(2);

                if ( (synpred426_PL_SQL()) ) {
                    alt247=1;
                }
            }
            switch (alt247) {
                case 1 :
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
                    {
                    char_literal791=(Token)match(input,206,FOLLOW_206_in_second_type10290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal791_tree = (CommonTree)adaptor.create(char_literal791);
                    adaptor.addChild(root_0, char_literal791_tree);
                    }
                    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:22: ( '+' )?
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==210) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                            {
                            char_literal792=(Token)match(input,210,FOLLOW_210_in_second_type10292); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal792_tree = (CommonTree)adaptor.create(char_literal792);
                            adaptor.addChild(root_0, char_literal792_tree);
                            }

                            }
                            break;

                    }

                    NUMBER_UNSIGNED793=(Token)match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_second_type10295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_UNSIGNED793_tree = (CommonTree)adaptor.create(NUMBER_UNSIGNED793);
                    adaptor.addChild(root_0, NUMBER_UNSIGNED793_tree);
                    }
                    char_literal794=(Token)match(input,207,FOLLOW_207_in_second_type10297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal794_tree = (CommonTree)adaptor.create(char_literal794);
                    adaptor.addChild(root_0, char_literal794_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, second_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "second_type"

    // $ANTLR start synpred35_PL_SQL
    public final void synpred35_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:23: ( ( PACKAGE_KEYWORD package_spec ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:23: ( PACKAGE_KEYWORD package_spec )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:23: ( PACKAGE_KEYWORD package_spec )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:613:24: PACKAGE_KEYWORD package_spec
        {
        match(input,PACKAGE_KEYWORD,FOLLOW_PACKAGE_KEYWORD_in_synpred35_PL_SQL5109); if (state.failed) return ;
        pushFollow(FOLLOW_package_spec_in_synpred35_PL_SQL5111);
        package_spec();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred35_PL_SQL

    // $ANTLR start synpred68_PL_SQL
    public final void synpred68_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:37: ( dml_event_clause_factor )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:636:37: dml_event_clause_factor
        {
        pushFollow(FOLLOW_dml_event_clause_factor_in_synpred68_PL_SQL5564);
        dml_event_clause_factor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_PL_SQL

    // $ANTLR start synpred72_PL_SQL
    public final void synpred72_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:43: ( referencing_clause )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:638:43: referencing_clause
        {
        pushFollow(FOLLOW_referencing_clause_in_synpred72_PL_SQL5619);
        referencing_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_PL_SQL

    // $ANTLR start synpred83_PL_SQL
    public final void synpred83_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:20: ( TYPE_KEYWORD type_spec_declaration )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:644:20: TYPE_KEYWORD type_spec_declaration
        {
        match(input,TYPE_KEYWORD,FOLLOW_TYPE_KEYWORD_in_synpred83_PL_SQL5753); if (state.failed) return ;
        pushFollow(FOLLOW_type_spec_declaration_in_synpred83_PL_SQL5756);
        type_spec_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_PL_SQL

    // $ANTLR start synpred89_PL_SQL
    public final void synpred89_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:19: ( object_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:19: object_type
        {
        pushFollow(FOLLOW_object_type_in_synpred89_PL_SQL5840);
        object_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_PL_SQL

    // $ANTLR start synpred90_PL_SQL
    public final void synpred90_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:33: ( varray_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:649:33: varray_type
        {
        pushFollow(FOLLOW_varray_type_in_synpred90_PL_SQL5844);
        varray_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_PL_SQL

    // $ANTLR start synpred94_PL_SQL
    public final void synpred94_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:17: ( ( NOT_OPERATOR )? FINAL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:17: ( NOT_OPERATOR )? FINAL_KEYWORD
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:652:17: ( NOT_OPERATOR )?
        int alt265=2;
        int LA265_0 = input.LA(1);

        if ( (LA265_0==NOT_OPERATOR) ) {
            alt265=1;
        }
        switch (alt265) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: NOT_OPERATOR
                {
                match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL5904); if (state.failed) return ;

                }
                break;

        }

        match(input,FINAL_KEYWORD,FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL5907); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_PL_SQL

    // $ANTLR start synpred101_PL_SQL
    public final void synpred101_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:16: ( inheritance_clauses )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:16: inheritance_clauses
        {
        pushFollow(FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5951);
        inheritance_clauses();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_PL_SQL

    // $ANTLR start synpred104_PL_SQL
    public final void synpred104_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:101: ( ',' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:101: ','
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred104_PL_SQL5967); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_PL_SQL

    // $ANTLR start synpred105_PL_SQL
    public final void synpred105_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:38: ( ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:38: ( subprogram_spec | constructor_spec | map_order_function_spec ) ( ',' )?
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:38: ( subprogram_spec | constructor_spec | map_order_function_spec )
        int alt269=3;
        switch ( input.LA(1) ) {
        case MEMBER_KEYWORD:
        case STATIC_KEYWORD:
            {
            alt269=1;
            }
            break;
        case FINAL_KEYWORD:
        case INSTANTIABLE_KEYWORD:
        case CONSTRUCTOR_KEYWORD:
            {
            alt269=2;
            }
            break;
        case MAP_KEYWORD:
        case ORDER_KEYWORD:
            {
            alt269=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 269, 0, input);

            throw nvae;
        }

        switch (alt269) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:39: subprogram_spec
                {
                pushFollow(FOLLOW_subprogram_spec_in_synpred105_PL_SQL5956);
                subprogram_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:57: constructor_spec
                {
                pushFollow(FOLLOW_constructor_spec_in_synpred105_PL_SQL5960);
                constructor_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:76: map_order_function_spec
                {
                pushFollow(FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5964);
                map_order_function_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:654:101: ( ',' )?
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==COMMA) ) {
            alt270=1;
        }
        switch (alt270) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: ','
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred105_PL_SQL5967); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_PL_SQL

    // $ANTLR start synpred136_PL_SQL
    public final void synpred136_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:21: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:679:21: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred136_PL_SQL6454);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_PL_SQL

    // $ANTLR start synpred188_PL_SQL
    public final void synpred188_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:36: ( sql_operator )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:36: sql_operator
        {
        pushFollow(FOLLOW_sql_operator_in_synpred188_PL_SQL6884);
        sql_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_PL_SQL

    // $ANTLR start synpred190_PL_SQL
    public final void synpred190_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:66: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:66: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred190_PL_SQL6892); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_PL_SQL

    // $ANTLR start synpred191_PL_SQL
    public final void synpred191_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:79: ( NOT_OPERATOR IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:701:79: NOT_OPERATOR IN_KEYWORD
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred191_PL_SQL6896); if (state.failed) return ;
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL6898); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_PL_SQL

    // $ANTLR start synpred200_PL_SQL
    public final void synpred200_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:16: ( SET_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:704:16: SET_KEYWORD
        {
        match(input,SET_KEYWORD,FOLLOW_SET_KEYWORD_in_synpred200_PL_SQL6979); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_PL_SQL

    // $ANTLR start synpred206_PL_SQL
    public final void synpred206_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:33: ( REPLACE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:705:33: REPLACE_KEYWORD
        {
        match(input,REPLACE_KEYWORD,FOLLOW_REPLACE_KEYWORD_in_synpred206_PL_SQL7018); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_PL_SQL

    // $ANTLR start synpred207_PL_SQL
    public final void synpred207_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:16: ( NUMBER_UNSIGNED )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:16: NUMBER_UNSIGNED
        {
        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred207_PL_SQL7037); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_PL_SQL

    // $ANTLR start synpred209_PL_SQL
    public final void synpred209_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:50: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:50: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred209_PL_SQL7045);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_PL_SQL

    // $ANTLR start synpred210_PL_SQL
    public final void synpred210_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:73: ( case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:706:73: case_statement_expression
        {
        pushFollow(FOLLOW_case_statement_expression_in_synpred210_PL_SQL7049);
        case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_PL_SQL

    // $ANTLR start synpred211_PL_SQL
    public final void synpred211_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:16: ( STRING )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:16: STRING
        {
        match(input,STRING,FOLLOW_STRING_in_synpred211_PL_SQL7068); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_PL_SQL

    // $ANTLR start synpred212_PL_SQL
    public final void synpred212_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:25: ( COMMA )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:25: COMMA
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred212_PL_SQL7072); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_PL_SQL

    // $ANTLR start synpred215_PL_SQL
    public final void synpred215_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:62: ( NOT_OPERATOR )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:707:62: NOT_OPERATOR
        {
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred215_PL_SQL7084); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_PL_SQL

    // $ANTLR start synpred216_PL_SQL
    public final void synpred216_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:16: ( IS_KEYWORD NOT_OPERATOR NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:16: IS_KEYWORD NOT_OPERATOR NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred216_PL_SQL7103); if (state.failed) return ;
        match(input,NOT_OPERATOR,FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL7105); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred216_PL_SQL7107); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_PL_SQL

    // $ANTLR start synpred217_PL_SQL
    public final void synpred217_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:55: ( IS_KEYWORD NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:55: IS_KEYWORD NULL_KEYWORD
        {
        match(input,IS_KEYWORD,FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL7111); if (state.failed) return ;
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL7113); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_PL_SQL

    // $ANTLR start synpred218_PL_SQL
    public final void synpred218_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:81: ( NULL_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:708:81: NULL_KEYWORD
        {
        match(input,NULL_KEYWORD,FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7117); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_PL_SQL

    // $ANTLR start synpred221_PL_SQL
    public final void synpred221_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:16: ( sql_statements )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:710:16: sql_statements
        {
        pushFollow(FOLLOW_sql_statements_in_synpred221_PL_SQL7160);
        sql_statements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_PL_SQL

    // $ANTLR start synpred222_PL_SQL
    public final void synpred222_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:16: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:711:16: expression
        {
        pushFollow(FOLLOW_expression_in_synpred222_PL_SQL7180);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_PL_SQL

    // $ANTLR start synpred226_PL_SQL
    public final void synpred226_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:36: ( ( sql_not_parsed | ON_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:36: ( sql_not_parsed | ON_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:36: ( sql_not_parsed | ON_KEYWORD )
        int alt276=2;
        int LA276_0 = input.LA(1);

        if ( ((LA276_0>=NUMBER_UNSIGNED && LA276_0<=OR_OPERATOR)||(LA276_0>=STRING && LA276_0<=SOME_TYPES)||(LA276_0>=KEYWORD && LA276_0<=ALIAS)||LA276_0==COMMA||LA276_0==NULL_KEYWORD||(LA276_0>=TRUE_KEYWORD && LA276_0<=FALSE_KEYWORD)||LA276_0==WITH_KEYWORD||LA276_0==INTERVAL_KEYWORD||LA276_0==IS_KEYWORD||LA276_0==REPLACE_KEYWORD||LA276_0==AS_KEYWORD||LA276_0==IN_KEYWORD||(LA276_0>=SELECT_KEYWORD && LA276_0<=COUNT_KEYWORD)||LA276_0==LIKE_KEYWORD||LA276_0==CASE_KEYWORD||(LA276_0>=TABLE_KEYWORD && LA276_0<=OF_KEYWORD)||LA276_0==BY_KEYWORD||LA276_0==COMMIT_KEYWORD||LA276_0==DELETE_KEYWORD||LA276_0==INTO_KEYWORD||(LA276_0>=BULK_KEYWORD && LA276_0<=COLLECT_KEYWORD)||(LA276_0>=VALUES_KEYWORD && LA276_0<=BETWEEN_KEYWORD)||(LA276_0>=INSERT_KEYWORD && LA276_0<=MERGE_KEYWORD)||(LA276_0>=RETURNING_KEYWORD && LA276_0<=SAVEPOINT_KEYWORD)||LA276_0==SET_KEYWORD||(LA276_0>=SQLCODE_KEYWORD && LA276_0<=EXISTS_KEYWORD)||LA276_0==ROW_KEYWORD||LA276_0==RESULT_KEYWORD||LA276_0==JOIN_KEYWORD||LA276_0==NOT_OPERATOR||LA276_0==THE_REST||LA276_0==206||LA276_0==208||(LA276_0>=210 && LA276_0<=224)) ) {
            alt276=1;
        }
        else if ( (LA276_0==ON_KEYWORD) ) {
            alt276=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 276, 0, input);

            throw nvae;
        }
        switch (alt276) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:37: sql_not_parsed
                {
                pushFollow(FOLLOW_sql_not_parsed_in_synpred226_PL_SQL7211);
                sql_not_parsed();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:54: ON_KEYWORD
                {
                match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred226_PL_SQL7215); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred226_PL_SQL

    // $ANTLR start synpred227_PL_SQL
    public final void synpred227_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:68: ( ( FOR_KEYWORD UPDATE_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:68: ( FOR_KEYWORD UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:715:69: FOR_KEYWORD UPDATE_KEYWORD
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred227_PL_SQL7221); if (state.failed) return ;
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred227_PL_SQL7223); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred227_PL_SQL

    // $ANTLR start synpred228_PL_SQL
    public final void synpred228_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:35: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:716:35: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred228_PL_SQL7235);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_PL_SQL

    // $ANTLR start synpred229_PL_SQL
    public final void synpred229_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:717:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred229_PL_SQL7246);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_PL_SQL

    // $ANTLR start synpred230_PL_SQL
    public final void synpred230_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:718:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7258);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_PL_SQL

    // $ANTLR start synpred231_PL_SQL
    public final void synpred231_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:52: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:719:52: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7272);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_PL_SQL

    // $ANTLR start synpred232_PL_SQL
    public final void synpred232_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:34: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:34: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7284);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_PL_SQL

    // $ANTLR start synpred233_PL_SQL
    public final void synpred233_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:51: ( ON_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:720:51: ON_KEYWORD
        {
        match(input,ON_KEYWORD,FOLLOW_ON_KEYWORD_in_synpred233_PL_SQL7288); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_PL_SQL

    // $ANTLR start synpred234_PL_SQL
    public final void synpred234_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:19: ( USING_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:19: USING_KEYWORD
        {
        match(input,USING_KEYWORD,FOLLOW_USING_KEYWORD_in_synpred234_PL_SQL7310); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_PL_SQL

    // $ANTLR start synpred235_PL_SQL
    public final void synpred235_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:35: ( WHEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:35: WHEN_KEYWORD
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred235_PL_SQL7314); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_PL_SQL

    // $ANTLR start synpred236_PL_SQL
    public final void synpred236_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:50: ( THEN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:50: THEN_KEYWORD
        {
        match(input,THEN_KEYWORD,FOLLOW_THEN_KEYWORD_in_synpred236_PL_SQL7318); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_PL_SQL

    // $ANTLR start synpred237_PL_SQL
    public final void synpred237_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:65: ( INSERT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:721:65: INSERT_KEYWORD
        {
        match(input,INSERT_KEYWORD,FOLLOW_INSERT_KEYWORD_in_synpred237_PL_SQL7322); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_PL_SQL

    // $ANTLR start synpred238_PL_SQL
    public final void synpred238_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:19: ( UPDATE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:722:19: UPDATE_KEYWORD
        {
        match(input,UPDATE_KEYWORD,FOLLOW_UPDATE_KEYWORD_in_synpred238_PL_SQL7344); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_PL_SQL

    // $ANTLR start synpred239_PL_SQL
    public final void synpred239_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:39: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:723:39: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred239_PL_SQL7355);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_PL_SQL

    // $ANTLR start synpred240_PL_SQL
    public final void synpred240_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:62: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:725:62: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7377);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_PL_SQL

    // $ANTLR start synpred241_PL_SQL
    public final void synpred241_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:36: ( sql_not_parsed )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:726:36: sql_not_parsed
        {
        pushFollow(FOLLOW_sql_not_parsed_in_synpred241_PL_SQL7389);
        sql_not_parsed();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_PL_SQL

    // $ANTLR start synpred242_PL_SQL
    public final void synpred242_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:35: ( expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:730:35: expression
        {
        pushFollow(FOLLOW_expression_in_synpred242_PL_SQL7411);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_PL_SQL

    // $ANTLR start synpred249_PL_SQL
    public final void synpred249_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:78: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:736:78: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred249_PL_SQL7551);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_PL_SQL

    // $ANTLR start synpred252_PL_SQL
    public final void synpred252_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:23: ( ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:23: ( expression ( for_loop_statement_part | cursor_for_loop_statement1 ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:24: expression ( for_loop_statement_part | cursor_for_loop_statement1 )
        {
        pushFollow(FOLLOW_expression_in_synpred252_PL_SQL7622);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:35: ( for_loop_statement_part | cursor_for_loop_statement1 )
        int alt279=2;
        int LA279_0 = input.LA(1);

        if ( (LA279_0==225) ) {
            alt279=1;
        }
        else if ( (LA279_0==LOOP_KEYWORD) ) {
            alt279=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 279, 0, input);

            throw nvae;
        }
        switch (alt279) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:36: for_loop_statement_part
                {
                pushFollow(FOLLOW_for_loop_statement_part_in_synpred252_PL_SQL7625);
                for_loop_statement_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:740:62: cursor_for_loop_statement1
                {
                pushFollow(FOLLOW_cursor_for_loop_statement1_in_synpred252_PL_SQL7629);
                cursor_for_loop_statement1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred252_PL_SQL

    // $ANTLR start synpred253_PL_SQL
    public final void synpred253_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:33: ( universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:745:33: universal_identifier
        {
        pushFollow(FOLLOW_universal_identifier_in_synpred253_PL_SQL7700);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_PL_SQL

    // $ANTLR start synpred254_PL_SQL
    public final void synpred254_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:29: ( simple_case_statement_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:746:29: simple_case_statement_expression
        {
        pushFollow(FOLLOW_simple_case_statement_expression_in_synpred254_PL_SQL7708);
        simple_case_statement_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_PL_SQL

    // $ANTLR start synpred259_PL_SQL
    public final void synpred259_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred259_PL_SQL7823); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_PL_SQL

    // $ANTLR start synpred260_PL_SQL
    public final void synpred260_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:750:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred260_PL_SQL7826);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_PL_SQL

    // $ANTLR start synpred265_PL_SQL
    public final void synpred265_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:38: ( CASE_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:38: CASE_KEYWORD
        {
        match(input,CASE_KEYWORD,FOLLOW_CASE_KEYWORD_in_synpred265_PL_SQL7975); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_PL_SQL

    // $ANTLR start synpred266_PL_SQL
    public final void synpred266_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:52: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:755:52: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred266_PL_SQL7978);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_PL_SQL

    // $ANTLR start synpred267_PL_SQL
    public final void synpred267_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:39: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:39: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred267_PL_SQL8061);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_PL_SQL

    // $ANTLR start synpred268_PL_SQL
    public final void synpred268_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:52: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:758:52: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred268_PL_SQL8065); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred268_PL_SQL8067);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_PL_SQL

    // $ANTLR start synpred276_PL_SQL
    public final void synpred276_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:31: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:31: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred276_PL_SQL8266); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_PL_SQL

    // $ANTLR start synpred278_PL_SQL
    public final void synpred278_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:58: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:58: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:58: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:766:59: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred278_PL_SQL8275); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred278_PL_SQL8277); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred278_PL_SQL

    // $ANTLR start synpred279_PL_SQL
    public final void synpred279_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:22: ( IN_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:22: IN_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8303); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_PL_SQL

    // $ANTLR start synpred281_PL_SQL
    public final void synpred281_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:49: ( ( IN_KEYWORD OUT_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:49: ( IN_KEYWORD OUT_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:49: ( IN_KEYWORD OUT_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:767:50: IN_KEYWORD OUT_KEYWORD
        {
        match(input,IN_KEYWORD,FOLLOW_IN_KEYWORD_in_synpred281_PL_SQL8312); if (state.failed) return ;
        match(input,OUT_KEYWORD,FOLLOW_OUT_KEYWORD_in_synpred281_PL_SQL8314); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred281_PL_SQL

    // $ANTLR start synpred283_PL_SQL
    public final void synpred283_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:31: ( identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:31: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred283_PL_SQL8330);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_PL_SQL

    // $ANTLR start synpred284_PL_SQL
    public final void synpred284_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:44: ( WHEN_KEYWORD expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:768:44: WHEN_KEYWORD expression
        {
        match(input,WHEN_KEYWORD,FOLLOW_WHEN_KEYWORD_in_synpred284_PL_SQL8334); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred284_PL_SQL8336);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_PL_SQL

    // $ANTLR start synpred291_PL_SQL
    public final void synpred291_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:52: ( open_params )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:779:52: open_params
        {
        pushFollow(FOLLOW_open_params_in_synpred291_PL_SQL8576);
        open_params();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_PL_SQL

    // $ANTLR start synpred295_PL_SQL
    public final void synpred295_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:19: ( FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:19: FOR_KEYWORD ( select_statement | STRING | universal_identifier ) ( using_clause )?
        {
        match(input,FOR_KEYWORD,FOLLOW_FOR_KEYWORD_in_synpred295_PL_SQL8597); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:31: ( select_statement | STRING | universal_identifier )
        int alt287=3;
        switch ( input.LA(1) ) {
        case SELECT_KEYWORD:
            {
            alt287=1;
            }
            break;
        case STRING:
            {
            alt287=2;
            }
            break;
        case IDENTIFIER:
        case EXT_IDENTIFIER:
        case INTERVAL_KEYWORD:
        case RESULT_KEYWORD:
            {
            alt287=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 287, 0, input);

            throw nvae;
        }

        switch (alt287) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:32: select_statement
                {
                pushFollow(FOLLOW_select_statement_in_synpred295_PL_SQL8600);
                select_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:51: STRING
                {
                match(input,STRING,FOLLOW_STRING_in_synpred295_PL_SQL8604); if (state.failed) return ;

                }
                break;
            case 3 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:60: universal_identifier
                {
                pushFollow(FOLLOW_universal_identifier_in_synpred295_PL_SQL8608);
                universal_identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:780:82: ( using_clause )?
        int alt288=2;
        int LA288_0 = input.LA(1);

        if ( (LA288_0==USING_KEYWORD) ) {
            alt288=1;
        }
        switch (alt288) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: using_clause
                {
                pushFollow(FOLLOW_using_clause_in_synpred295_PL_SQL8611);
                using_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred295_PL_SQL

    // $ANTLR start synpred299_PL_SQL
    public final void synpred299_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:37: ( '(' ( '+' | '-' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:37: '(' ( '+' | '-' )? NUMBER_UNSIGNED ')'
        {
        match(input,206,FOLLOW_206_in_synpred299_PL_SQL8649); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:783:41: ( '+' | '-' )?
        int alt289=2;
        int LA289_0 = input.LA(1);

        if ( ((LA289_0>=210 && LA289_0<=211)) ) {
            alt289=1;
        }
        switch (alt289) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=210 && input.LA(1)<=211) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred299_PL_SQL8658); if (state.failed) return ;
        match(input,207,FOLLOW_207_in_synpred299_PL_SQL8660); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_PL_SQL

    // $ANTLR start synpred304_PL_SQL
    public final void synpred304_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:25: ( ( identifier data_type ( variable_declaration_part )? ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:25: ( identifier data_type ( variable_declaration_part )? )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:25: ( identifier data_type ( variable_declaration_part )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:787:26: identifier data_type ( variable_declaration_part )?
        {
        pushFollow(FOLLOW_identifier_in_synpred304_PL_SQL8762);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred304_PL_SQL8764);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:788:24: ( variable_declaration_part )?
        int alt290=2;
        int LA290_0 = input.LA(1);

        if ( (LA290_0==DEFAULT_KEYWORD||LA290_0==NOT_OPERATOR||LA290_0==226) ) {
            alt290=1;
        }
        switch (alt290) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: variable_declaration_part
                {
                pushFollow(FOLLOW_variable_declaration_part_in_synpred304_PL_SQL8790);
                variable_declaration_part();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred304_PL_SQL

    // $ANTLR start synpred305_PL_SQL
    public final void synpred305_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:9: ( ( identifier CONSTANT_KEYWORD data_type variable_declaration_part ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:9: ( identifier CONSTANT_KEYWORD data_type variable_declaration_part )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:790:10: identifier CONSTANT_KEYWORD data_type variable_declaration_part
        {
        pushFollow(FOLLOW_identifier_in_synpred305_PL_SQL8808);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,CONSTANT_KEYWORD,FOLLOW_CONSTANT_KEYWORD_in_synpred305_PL_SQL8810); if (state.failed) return ;
        pushFollow(FOLLOW_data_type_in_synpred305_PL_SQL8812);
        data_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variable_declaration_part_in_synpred305_PL_SQL8838);
        variable_declaration_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred305_PL_SQL

    // $ANTLR start synpred308_PL_SQL
    public final void synpred308_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:11: ( ( identifier EXCEPTION_KEYWORD ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:11: ( identifier EXCEPTION_KEYWORD )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:11: ( identifier EXCEPTION_KEYWORD )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:794:12: identifier EXCEPTION_KEYWORD
        {
        pushFollow(FOLLOW_identifier_in_synpred308_PL_SQL8876);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,EXCEPTION_KEYWORD,FOLLOW_EXCEPTION_KEYWORD_in_synpred308_PL_SQL8878); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred308_PL_SQL

    // $ANTLR start synpred322_PL_SQL
    public final void synpred322_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:31: ( interval_year_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:31: interval_year_type
        {
        pushFollow(FOLLOW_interval_year_type_in_synpred322_PL_SQL9052);
        interval_year_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_PL_SQL

    // $ANTLR start synpred323_PL_SQL
    public final void synpred323_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:52: ( interval_day_type )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:804:52: interval_day_type
        {
        pushFollow(FOLLOW_interval_day_type_in_synpred323_PL_SQL9056);
        interval_day_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_PL_SQL

    // $ANTLR start synpred325_PL_SQL
    public final void synpred325_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:13: ( ( ( REF_KEYWORD )? universal_identifier ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:13: ( ( REF_KEYWORD )? universal_identifier )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:13: ( ( REF_KEYWORD )? universal_identifier )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:14: ( REF_KEYWORD )? universal_identifier
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:805:14: ( REF_KEYWORD )?
        int alt293=2;
        int LA293_0 = input.LA(1);

        if ( (LA293_0==REF_KEYWORD) ) {
            alt293=1;
        }
        switch (alt293) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: REF_KEYWORD
                {
                match(input,REF_KEYWORD,FOLLOW_REF_KEYWORD_in_synpred325_PL_SQL9074); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_universal_identifier_in_synpred325_PL_SQL9077);
        universal_identifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred325_PL_SQL

    // $ANTLR start synpred330_PL_SQL
    public final void synpred330_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:40: ( '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:40: '(' ( '+' )? NUMBER_UNSIGNED ( CHAR_TYPE | BYTE_TYPE )? ')'
        {
        match(input,206,FOLLOW_206_in_synpred330_PL_SQL9097); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:44: ( '+' )?
        int alt294=2;
        int LA294_0 = input.LA(1);

        if ( (LA294_0==210) ) {
            alt294=1;
        }
        switch (alt294) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred330_PL_SQL9099); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred330_PL_SQL9102); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:806:65: ( CHAR_TYPE | BYTE_TYPE )?
        int alt295=2;
        int LA295_0 = input.LA(1);

        if ( ((LA295_0>=CHAR_TYPE && LA295_0<=BYTE_TYPE)) ) {
            alt295=1;
        }
        switch (alt295) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                {
                if ( (input.LA(1)>=CHAR_TYPE && input.LA(1)<=BYTE_TYPE) ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }

        match(input,207,FOLLOW_207_in_synpred330_PL_SQL9113); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_PL_SQL

    // $ANTLR start synpred354_PL_SQL
    public final void synpred354_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:25: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:833:25: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred354_PL_SQL9582);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_PL_SQL

    // $ANTLR start synpred380_PL_SQL
    public final void synpred380_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:24: ( unary_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:24: unary_op
        {
        pushFollow(FOLLOW_unary_op_in_synpred380_PL_SQL9762);
        unary_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_PL_SQL

    // $ANTLR start synpred381_PL_SQL
    public final void synpred381_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:51: ( postfix_op )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:51: postfix_op
        {
        pushFollow(FOLLOW_postfix_op_in_synpred381_PL_SQL9767);
        postfix_op();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_PL_SQL

    // $ANTLR start synpred382_PL_SQL
    public final void synpred382_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:74: ( universal_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:74: universal_expression
        {
        pushFollow(FOLLOW_universal_expression_in_synpred382_PL_SQL9774);
        universal_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_PL_SQL

    // $ANTLR start synpred383_PL_SQL
    public final void synpred383_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:64: ( operator ( universal_expression | ( '(' select_statement ')' ) ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:64: operator ( universal_expression | ( '(' select_statement ')' ) )
        {
        pushFollow(FOLLOW_operator_in_synpred383_PL_SQL9771);
        operator();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:73: ( universal_expression | ( '(' select_statement ')' ) )
        int alt298=2;
        int LA298_0 = input.LA(1);

        if ( (LA298_0==NUMBER_UNSIGNED||LA298_0==STRING||(LA298_0>=IDENTIFIER && LA298_0<=EXT_IDENTIFIER)||LA298_0==NULL_KEYWORD||(LA298_0>=TRUE_KEYWORD && LA298_0<=FALSE_KEYWORD)||LA298_0==INTERVAL_KEYWORD||LA298_0==REPLACE_KEYWORD||LA298_0==IN_KEYWORD||LA298_0==CASE_KEYWORD||(LA298_0>=SQLCODE_KEYWORD && LA298_0<=SQLERRM_KEYWORD)||LA298_0==RESULT_KEYWORD||LA298_0==NOT_OPERATOR||(LA298_0>=210 && LA298_0<=211)) ) {
            alt298=1;
        }
        else if ( (LA298_0==206) ) {
            int LA298_2 = input.LA(2);

            if ( (synpred382_PL_SQL()) ) {
                alt298=1;
            }
            else if ( (true) ) {
                alt298=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 298, 0, input);

            throw nvae;
        }
        switch (alt298) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:74: universal_expression
                {
                pushFollow(FOLLOW_universal_expression_in_synpred383_PL_SQL9774);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:97: ( '(' select_statement ')' )
                {
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:97: ( '(' select_statement ')' )
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:840:98: '(' select_statement ')'
                {
                match(input,206,FOLLOW_206_in_synpred383_PL_SQL9779); if (state.failed) return ;
                pushFollow(FOLLOW_select_statement_in_synpred383_PL_SQL9781);
                select_statement();

                state._fsp--;
                if (state.failed) return ;
                match(input,207,FOLLOW_207_in_synpred383_PL_SQL9783); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred383_PL_SQL

    // $ANTLR start synpred391_PL_SQL
    public final void synpred391_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:58: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:58: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred391_PL_SQL9886);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_PL_SQL

    // $ANTLR start synpred392_PL_SQL
    public final void synpred392_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:36: ( call_statement_param ( in_notin_expression )? )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:36: call_statement_param ( in_notin_expression )?
        {
        pushFollow(FOLLOW_call_statement_param_in_synpred392_PL_SQL9883);
        call_statement_param();

        state._fsp--;
        if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:57: ( in_notin_expression )?
        int alt299=2;
        int LA299_0 = input.LA(1);

        if ( (LA299_0==IN_KEYWORD||LA299_0==NOT_OPERATOR) ) {
            alt299=1;
        }
        switch (alt299) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:844:58: in_notin_expression
                {
                pushFollow(FOLLOW_in_notin_expression_in_synpred392_PL_SQL9886);
                in_notin_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred392_PL_SQL

    // $ANTLR start synpred402_PL_SQL
    public final void synpred402_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:61: ( in_notin_expression )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:848:61: in_notin_expression
        {
        pushFollow(FOLLOW_in_notin_expression_in_synpred402_PL_SQL9996);
        in_notin_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_PL_SQL

    // $ANTLR start synpred405_PL_SQL
    public final void synpred405_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:24: ( ( '(' ( universal_expression ( ',' universal_expression )* )? ')' ) )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        {
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:24: ( '(' ( universal_expression ( ',' universal_expression )* )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:25: '(' ( universal_expression ( ',' universal_expression )* )? ')'
        {
        match(input,206,FOLLOW_206_in_synpred405_PL_SQL10006); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:29: ( universal_expression ( ',' universal_expression )* )?
        int alt304=2;
        int LA304_0 = input.LA(1);

        if ( (LA304_0==NUMBER_UNSIGNED||LA304_0==STRING||(LA304_0>=IDENTIFIER && LA304_0<=EXT_IDENTIFIER)||LA304_0==NULL_KEYWORD||(LA304_0>=TRUE_KEYWORD && LA304_0<=FALSE_KEYWORD)||LA304_0==INTERVAL_KEYWORD||LA304_0==REPLACE_KEYWORD||LA304_0==IN_KEYWORD||LA304_0==CASE_KEYWORD||(LA304_0>=SQLCODE_KEYWORD && LA304_0<=SQLERRM_KEYWORD)||LA304_0==RESULT_KEYWORD||LA304_0==NOT_OPERATOR||LA304_0==206||(LA304_0>=210 && LA304_0<=211)) ) {
            alt304=1;
        }
        switch (alt304) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:30: universal_expression ( ',' universal_expression )*
                {
                pushFollow(FOLLOW_universal_expression_in_synpred405_PL_SQL10009);
                universal_expression();

                state._fsp--;
                if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:51: ( ',' universal_expression )*
                loop303:
                do {
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==COMMA) ) {
                        alt303=1;
                    }


                    switch (alt303) {
                	case 1 :
                	    // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:849:52: ',' universal_expression
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred405_PL_SQL10012); if (state.failed) return ;
                	    pushFollow(FOLLOW_universal_expression_in_synpred405_PL_SQL10014);
                	    universal_expression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop303;
                    }
                } while (true);


                }
                break;

        }

        match(input,207,FOLLOW_207_in_synpred405_PL_SQL10021); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred405_PL_SQL

    // $ANTLR start synpred414_PL_SQL
    public final void synpred414_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:17: ( '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:17: '(' ( '+' )? NUMBER_UNSIGNED ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )? ')'
        {
        match(input,206,FOLLOW_206_in_synpred414_PL_SQL10139); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:21: ( '+' )?
        int alt306=2;
        int LA306_0 = input.LA(1);

        if ( (LA306_0==210) ) {
            alt306=1;
        }
        switch (alt306) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred414_PL_SQL10141); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred414_PL_SQL10144); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:42: ( COMMA ( '+' | '-' )? NUMBER_UNSIGNED )?
        int alt308=2;
        int LA308_0 = input.LA(1);

        if ( (LA308_0==COMMA) ) {
            alt308=1;
        }
        switch (alt308) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:43: COMMA ( '+' | '-' )? NUMBER_UNSIGNED
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred414_PL_SQL10147); if (state.failed) return ;
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:856:49: ( '+' | '-' )?
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( ((LA307_0>=210 && LA307_0<=211)) ) {
                    alt307=1;
                }
                switch (alt307) {
                    case 1 :
                        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:
                        {
                        if ( (input.LA(1)>=210 && input.LA(1)<=211) ) {
                            input.consume();
                            state.errorRecovery=false;state.failed=false;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }

                match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred414_PL_SQL10158); if (state.failed) return ;

                }
                break;

        }

        match(input,207,FOLLOW_207_in_synpred414_PL_SQL10162); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_PL_SQL

    // $ANTLR start synpred416_PL_SQL
    public final void synpred416_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:17: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:17: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,206,FOLLOW_206_in_synpred416_PL_SQL10177); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:859:21: ( '+' )?
        int alt309=2;
        int LA309_0 = input.LA(1);

        if ( (LA309_0==210) ) {
            alt309=1;
        }
        switch (alt309) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred416_PL_SQL10179); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred416_PL_SQL10182); if (state.failed) return ;
        match(input,207,FOLLOW_207_in_synpred416_PL_SQL10184); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_PL_SQL

    // $ANTLR start synpred418_PL_SQL
    public final void synpred418_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:22: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:22: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,206,FOLLOW_206_in_synpred418_PL_SQL10198); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:861:26: ( '+' )?
        int alt310=2;
        int LA310_0 = input.LA(1);

        if ( (LA310_0==210) ) {
            alt310=1;
        }
        switch (alt310) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred418_PL_SQL10200); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred418_PL_SQL10203); if (state.failed) return ;
        match(input,207,FOLLOW_207_in_synpred418_PL_SQL10205); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_PL_SQL

    // $ANTLR start synpred422_PL_SQL
    public final void synpred422_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:21: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:21: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,206,FOLLOW_206_in_synpred422_PL_SQL10244); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:867:25: ( '+' )?
        int alt312=2;
        int LA312_0 = input.LA(1);

        if ( (LA312_0==210) ) {
            alt312=1;
        }
        switch (alt312) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred422_PL_SQL10246); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred422_PL_SQL10249); if (state.failed) return ;
        match(input,207,FOLLOW_207_in_synpred422_PL_SQL10251); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_PL_SQL

    // $ANTLR start synpred426_PL_SQL
    public final void synpred426_PL_SQL_fragment() throws RecognitionException {   
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:18: ( '(' ( '+' )? NUMBER_UNSIGNED ')' )
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:18: '(' ( '+' )? NUMBER_UNSIGNED ')'
        {
        match(input,206,FOLLOW_206_in_synpred426_PL_SQL10290); if (state.failed) return ;
        // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:873:22: ( '+' )?
        int alt314=2;
        int LA314_0 = input.LA(1);

        if ( (LA314_0==210) ) {
            alt314=1;
        }
        switch (alt314) {
            case 1 :
                // C:\\Work\\NetBeansProjects\\pl-sql-editor.svn\\trunk\\PL SQL Language\\ext_lib.antlr\\PL_SQL.g:0:0: '+'
                {
                match(input,210,FOLLOW_210_in_synpred426_PL_SQL10292); if (state.failed) return ;

                }
                break;

        }

        match(input,NUMBER_UNSIGNED,FOLLOW_NUMBER_UNSIGNED_in_synpred426_PL_SQL10295); if (state.failed) return ;
        match(input,207,FOLLOW_207_in_synpred426_PL_SQL10297); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_PL_SQL

    // Delegated rules

    public final boolean synpred241_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_PL_SQL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_PL_SQL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA115 dfa115 = new DFA115(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA212 dfa212 = new DFA212(this);
    protected DFA222 dfa222 = new DFA222(this);
    static final String DFA115_eotS =
        "\22\uffff";
    static final String DFA115_eofS =
        "\22\uffff";
    static final String DFA115_minS =
        "\1\4\21\uffff";
    static final String DFA115_maxS =
        "\1\u00d3\21\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21";
    static final String DFA115_specialS =
        "\22\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\1\6\uffff\1\1\14\uffff\2\1\12\uffff\1\1\4\uffff\2\1\5\uffff"+
            "\1\1\6\uffff\1\1\2\uffff\1\7\1\1\12\uffff\1\10\2\uffff\1\2\1"+
            "\3\1\4\1\5\1\uffff\1\6\3\uffff\1\11\1\20\1\uffff\1\1\1\12\7"+
            "\uffff\1\6\1\uffff\1\13\1\uffff\1\6\1\14\1\uffff\1\15\4\uffff"+
            "\1\16\1\uffff\1\17\6\uffff\3\6\1\21\4\uffff\2\6\1\uffff\1\6"+
            "\5\uffff\2\1\1\6\32\uffff\1\1\17\uffff\1\1\34\uffff\1\1\3\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "689:1: statements : ( expression | goto_statement | loop_statement | while_loop_statement | for_loop_statement | sql_statements | return_statement | if_statement | raise_statement | close_statement | continue_statement | execute_immediate_statement | exit_statement | fetch_statement | forall_statement | pragma_inline_statement | open_statement );";
        }
    }
    static final String DFA116_eotS =
        "\13\uffff";
    static final String DFA116_eofS =
        "\13\uffff";
    static final String DFA116_minS =
        "\1\116\12\uffff";
    static final String DFA116_maxS =
        "\1\u0086\12\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA116_specialS =
        "\13\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\1\17\uffff\1\2\3\uffff\1\3\20\uffff\1\5\1\6\1\7\5\uffff"+
            "\1\10\1\11\1\uffff\1\12\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "695:1: sql_statements : ( select_statement | commit_statement | delete_statement | update_statement | insert_statement | lock_table_statement | merge_statement | rollback_statement | savepoint_statement | set_transaction_statement );";
        }
    }
    static final String DFA118_eotS =
        "\67\uffff";
    static final String DFA118_eofS =
        "\67\uffff";
    static final String DFA118_minS =
        "\1\4\3\uffff\1\0\5\uffff\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff\1"+
        "\0\4\uffff\1\0\3\uffff\1\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1"+
        "\uffff\1\0\4\uffff\1\0\5\uffff\1\0";
    static final String DFA118_maxS =
        "\1\u00e0\3\uffff\1\0\5\uffff\1\0\7\uffff\1\0\3\uffff\1\0\1\uffff"+
        "\1\0\4\uffff\1\0\3\uffff\1\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0"+
        "\1\uffff\1\0\4\uffff\1\0\5\uffff\1\0";
    static final String DFA118_acceptS =
        "\1\uffff\1\20\1\13\1\42\1\uffff\1\3\1\33\1\24\1\43\1\12\1\uffff"+
        "\1\41\1\45\1\35\1\14\1\23\1\7\1\44\1\uffff\1\37\1\40\1\16\1\uffff"+
        "\1\47\1\uffff\1\6\1\36\1\2\1\1\1\uffff\1\17\1\11\1\10\1\uffff\1"+
        "\30\1\uffff\1\31\1\uffff\1\25\1\27\1\15\1\uffff\1\26\1\uffff\1\32"+
        "\1\22\1\3\1\46\1\uffff\1\5\1\45\1\34\1\21\1\4\1\uffff";
    static final String DFA118_specialS =
        "\4\uffff\1\0\5\uffff\1\1\7\uffff\1\2\3\uffff\1\3\1\uffff\1\4\4"+
        "\uffff\1\5\3\uffff\1\6\1\uffff\1\7\1\uffff\1\10\3\uffff\1\11\1\uffff"+
        "\1\12\4\uffff\1\13\5\uffff\1\14}>";
    static final String[] DFA118_transitionS = {
            "\1\51\1\63\1\15\4\uffff\1\53\1\11\12\uffff\1\33\2\41\1\34\1"+
            "\uffff\1\4\7\uffff\1\12\4\uffff\2\62\1\uffff\1\64\3\uffff\1"+
            "\41\3\uffff\1\22\2\uffff\1\45\1\uffff\1\20\1\uffff\1\60\22\uffff"+
            "\1\21\1\47\1\uffff\1\3\3\uffff\1\43\1\uffff\1\55\1\10\1\uffff"+
            "\1\1\3\uffff\1\21\3\uffff\1\21\3\uffff\1\65\1\uffff\1\2\1\16"+
            "\6\uffff\1\40\1\37\1\uffff\3\21\4\uffff\1\50\2\21\1\uffff\1"+
            "\35\5\uffff\2\62\1\21\1\7\13\uffff\1\25\15\uffff\1\41\2\uffff"+
            "\1\17\14\uffff\1\30\31\uffff\1\57\2\uffff\1\26\1\uffff\1\56"+
            "\1\uffff\2\66\15\56",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "701:1: sql_not_parsed : ( ALIAS | KEYWORD | sql_operator | INTO_KEYWORD | IN_KEYWORD | NOT_OPERATOR IN_KEYWORD | AS_KEYWORD | VALUES_KEYWORD | BETWEEN_KEYWORD | SOME_TYPES | BULK_KEYWORD | COLLECT_KEYWORD | RETURNING_KEYWORD | ROW_KEYWORD | SET_KEYWORD | BY_KEYWORD | WITH_KEYWORD | TABLE_KEYWORD | JOIN_KEYWORD | EXISTS_KEYWORD | REPLACE_KEYWORD | NUMBER_UNSIGNED | COUNT_KEYWORD | universal_identifier | case_statement_expression | STRING | COMMA | AND_OPERATOR | OR_OPERATOR | NOT_OPERATOR | IS_KEYWORD NOT_OPERATOR NULL_KEYWORD | IS_KEYWORD NULL_KEYWORD | NULL_KEYWORD | LIKE_KEYWORD | OF_KEYWORD | sql_statements | expression | THE_REST | ( '(' ( sql_not_parsed )* ')' ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_4 = input.LA(1);

                         
                        int index118_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_PL_SQL()) ) {s = 5;}

                        else if ( (synpred212_PL_SQL()) ) {s = 6;}

                         
                        input.seek(index118_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA118_10 = input.LA(1);

                         
                        int index118_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_PL_SQL()) ) {s = 11;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_PL_SQL()) ) {s = 19;}

                        else if ( (synpred217_PL_SQL()) ) {s = 20;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_PL_SQL()) ) {s = 12;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA118_24 = input.LA(1);

                         
                        int index118_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_PL_SQL()) ) {s = 25;}

                        else if ( (synpred215_PL_SQL()) ) {s = 26;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA118_29 = input.LA(1);

                         
                        int index118_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_PL_SQL()) ) {s = 30;}

                        else if ( (synpred221_PL_SQL()) ) {s = 17;}

                         
                        input.seek(index118_29);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA118_33 = input.LA(1);

                         
                        int index118_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_PL_SQL()) ) {s = 34;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_33);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA118_35 = input.LA(1);

                         
                        int index118_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_PL_SQL()) ) {s = 36;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_35);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA118_37 = input.LA(1);

                         
                        int index118_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred206_PL_SQL()) ) {s = 38;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_37);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA118_41 = input.LA(1);

                         
                        int index118_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_PL_SQL()) ) {s = 42;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA118_43 = input.LA(1);

                         
                        int index118_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_PL_SQL()) ) {s = 44;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA118_48 = input.LA(1);

                         
                        int index118_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_PL_SQL()) ) {s = 49;}

                        else if ( (synpred222_PL_SQL()) ) {s = 12;}

                         
                        input.seek(index118_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA118_54 = input.LA(1);

                         
                        int index118_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_PL_SQL()) ) {s = 46;}

                        else if ( (synpred222_PL_SQL()) ) {s = 50;}

                         
                        input.seek(index118_54);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\21\uffff";
    static final String DFA125_eofS =
        "\21\uffff";
    static final String DFA125_minS =
        "\1\4\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\2\uffff\1\0\1\uffff";
    static final String DFA125_maxS =
        "\1\u00e0\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1"+
        "\uffff\1\0\2\uffff\1\0\1\uffff";
    static final String DFA125_acceptS =
        "\2\uffff\1\3\1\10\1\uffff\1\1\1\uffff\1\7\1\uffff\1\2\1\uffff\1"+
        "\6\1\uffff\1\4\1\10\1\uffff\1\5";
    static final String DFA125_specialS =
        "\1\uffff\1\0\2\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1"+
        "\uffff\1\5\2\uffff\1\6\1\uffff}>";
    static final String[] DFA125_transitionS = {
            "\3\4\4\uffff\2\4\12\uffff\4\4\1\16\1\4\1\uffff\3\16\1\uffff"+
            "\1\14\1\17\1\4\4\uffff\2\4\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\1\uffff\1\4\1\16\1\4\12\uffff\2\16\1\uffff\4"+
            "\16\1\uffff\2\4\1\uffff\1\4\2\16\1\uffff\1\4\1\16\2\4\1\uffff"+
            "\1\4\3\uffff\1\4\1\uffff\1\16\1\uffff\1\4\1\16\1\uffff\1\16"+
            "\1\4\1\1\2\4\1\16\1\uffff\1\16\3\uffff\2\4\1\uffff\1\12\2\4"+
            "\1\16\3\uffff\3\4\1\uffff\1\4\5\uffff\2\4\1\6\1\4\4\uffff\1"+
            "\10\6\uffff\1\4\15\uffff\1\4\2\uffff\1\4\14\uffff\1\4\31\uffff"+
            "\1\4\1\16\1\uffff\1\4\1\16\1\4\1\uffff\17\4",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "()+ loopback of 720:33: ( sql_not_parsed | ON_KEYWORD | USING_KEYWORD | WHEN_KEYWORD | THEN_KEYWORD | INSERT_KEYWORD | UPDATE_KEYWORD )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_PL_SQL()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_PL_SQL()) ) {s = 5;}

                        else if ( (synpred238_PL_SQL()) ) {s = 7;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_PL_SQL()) ) {s = 9;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_10 = input.LA(1);

                         
                        int index125_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_PL_SQL()) ) {s = 5;}

                        else if ( (synpred237_PL_SQL()) ) {s = 11;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_12 = input.LA(1);

                         
                        int index125_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_PL_SQL()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_15 = input.LA(1);

                         
                        int index125_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_PL_SQL()) ) {s = 16;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index125_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA186_eotS =
        "\16\uffff";
    static final String DFA186_eofS =
        "\16\uffff";
    static final String DFA186_minS =
        "\1\14\3\uffff\1\0\2\uffff\1\0\6\uffff";
    static final String DFA186_maxS =
        "\1\u00a1\3\uffff\1\0\2\uffff\1\0\6\uffff";
    static final String DFA186_acceptS =
        "\1\uffff\1\4\1\5\1\1\1\uffff\1\11\1\12\1\uffff\1\7\1\10\1\11\1"+
        "\3\1\2\1\6";
    static final String DFA186_specialS =
        "\4\uffff\1\0\2\uffff\1\1\6\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\3\1\14\1\13\2\1\1\uffff\1\2\1\15\4\uffff\2\4\26\uffff\1"+
            "\7\56\uffff\1\12\101\uffff\1\4",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "803:1: data_type : ( SOME_TYPES | scale_types | size_types | char_types | raw_type | timestamp_types | interval_year_type | interval_day_type | ( ( REF_KEYWORD )? universal_identifier ) | special_datatype );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_4 = input.LA(1);

                         
                        int index186_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index186_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_7 = input.LA(1);

                         
                        int index186_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_PL_SQL()) ) {s = 8;}

                        else if ( (synpred323_PL_SQL()) ) {s = 9;}

                        else if ( (synpred325_PL_SQL()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index186_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA212_eotS =
        "\26\uffff";
    static final String DFA212_eofS =
        "\26\uffff";
    static final String DFA212_minS =
        "\1\5\25\uffff";
    static final String DFA212_maxS =
        "\1\u00e3\25\uffff";
    static final String DFA212_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25";
    static final String DFA212_specialS =
        "\26\uffff}>";
    static final String[] DFA212_transitionS = {
            "\1\22\1\23\112\uffff\1\24\37\uffff\1\25\77\uffff\1\25\36\uffff"+
            "\1\4\1\uffff\1\1\1\2\1\3\1\5\1\6\1\16\1\17\1\20\1\21\1\11\1"+
            "\12\1\13\1\14\1\15\2\uffff\1\7\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
    static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
    static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
    static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
    static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
    static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
    static final short[][] DFA212_transition;

    static {
        int numStates = DFA212_transitionS.length;
        DFA212_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
        }
    }

    class DFA212 extends DFA {

        public DFA212(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 212;
            this.eot = DFA212_eot;
            this.eof = DFA212_eof;
            this.min = DFA212_min;
            this.max = DFA212_max;
            this.accept = DFA212_accept;
            this.special = DFA212_special;
            this.transition = DFA212_transition;
        }
        public String getDescription() {
            return "834:1: operator : ( '+' | '-' | '*' | '/' | '**' | '||' | ':=' | '.' | '^=' | '>' | '<' | '<=' | '>=' | '=' | '<>' | '!=' | '~=' | AND_OPERATOR | OR_OPERATOR | LIKE_KEYWORD | ( ( NOT_OPERATOR )? BETWEEN_KEYWORD ) );";
        }
    }
    static final String DFA222_eotS =
        "\12\uffff";
    static final String DFA222_eofS =
        "\12\uffff";
    static final String DFA222_minS =
        "\1\4\11\uffff";
    static final String DFA222_maxS =
        "\1\u00ce\11\uffff";
    static final String DFA222_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA222_specialS =
        "\12\uffff}>";
    static final String[] DFA222_transitionS = {
            "\1\3\6\uffff\1\5\14\uffff\2\10\12\uffff\1\6\4\uffff\1\1\1\2"+
            "\5\uffff\1\10\6\uffff\1\10\3\uffff\1\4\31\uffff\1\7\56\uffff"+
            "\2\10\33\uffff\1\10\17\uffff\1\4\34\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }
        public String getDescription() {
            return "841:1: universal_factor : ( TRUE_KEYWORD | FALSE_KEYWORD | NUMBER_UNSIGNED | in_notin_expression | STRING | NULL_KEYWORD | case_statement_expression | sub_identifier ( call_statement_param ( in_notin_expression )? )? | ( '(' universal_expression ( ',' universal_expression )* ')' ) );";
        }
    }
 

    public static final BitSet FOLLOW_source_element_in_grammar_def4668 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_grammar_def4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_source_element4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_replace_part_in_source_element4704 = new BitSet(new long[]{0x0100010000000000L,0x0080000000000020L,0x0000000000000100L});
    public static final BitSet FOLLOW_function_declaration_in_source_element4726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_source_element4730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_declaration_in_source_element4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trigger_declaration_in_source_element4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_source_element4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_universal_identifier4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_universal_identifier4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_label4797 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_label4799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_205_in_label4801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_KEYWORD_in_create_replace_part4808 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_create_replace_part4811 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_create_replace_part4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_as_is_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_parameter_type4833 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4836 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_parameter_type4846 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_NOCOPY_KEYWORD_in_parameter_type4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_parameter_declaration4857 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4859 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4861 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4864 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4867 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4869 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration4898 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_parameter_declaration4900 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parameter_type_in_parameter_declaration4902 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_parameter_declaration4905 = new BitSet(new long[]{0x0000002010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_variable_def_part_in_parameter_declaration4908 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_parameter_declaration4910 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_parameter_declaration4916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_function_spec4923 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_name_in_function_spec4941 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_parameter_declaration_in_function_spec4943 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_function_spec4962 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_function_spec4964 = new BitSet(new long[]{0x4000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_invoker_clause_in_function_spec4966 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_function_spec_add2_in_function_spec4970 = new BitSet(new long[]{0x0000000000000002L,0x000000000000001EL});
    public static final BitSet FOLLOW_universal_identifier_in_function_name4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_function_name4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_KEYWORD_in_invoker_clause4990 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_invoker_clause4992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function_spec_add20 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_function_declaration5024 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_function_declaration5026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_KEYWORD_in_procedure_spec5033 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec5035 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_parameter_declaration_in_procedure_spec5037 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_invoker_clause_in_procedure_spec5057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_procedure_name5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_procedure_name5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_procedure_declaration5076 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_procedure_declaration5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_function_procedure_body5085 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_function_procedure_body5088 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_function_procedure_body5093 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_function_procedure_body5097 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_function_procedure_body5101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5109 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_package_declaration5111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_package_declaration5127 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_package_body_in_package_declaration5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_spec_name_in_package_spec5145 = new BitSet(new long[]{0x4210000000000000L});
    public static final BitSet FOLLOW_invoker_clause_in_package_spec5147 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_spec5150 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_spec5168 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_spec_in_package_spec5174 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_procedure_spec_in_package_spec5178 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5181 = new BitSet(new long[]{0x0109010081000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_spec5202 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec5204 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_spec5207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_package_spec5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_spec_name5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_spec_name5222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_package_body5229 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_body_name_in_package_body5231 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_package_body5233 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_package_body5251 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_package_body5255 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_package_body5259 = new BitSet(new long[]{0x01090100C1000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_package_body5279 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_package_body5282 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_package_body5303 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body5305 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SEPARATOR_in_package_body5308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_package_body5311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_package_body_name5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_package_body_name5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_KEYWORD_in_trigger_declaration5330 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_declaration5332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_trigger_type_in_trigger_declaration5334 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0002000200700070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_follows_part_in_trigger_declaration5336 = new BitSet(new long[]{0x0D89071543000810L,0x5878142FC06C5E60L,0x0002000200600070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_trigger_part_in_trigger_declaration5339 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_anonymous_block_in_trigger_declaration5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_trigger_name5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_trigger_name5374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_KEYWORD_in_follows_part5381 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_follows_part5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_trigger_part5390 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_trigger_part5400 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_trigger_part5402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_KEYWORD_in_trigger_type5412 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_KEYWORD_in_trigger_type5441 = new BitSet(new long[]{0x0001000001000000L,0x0008000400000000L,0x0000000200000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_dml_trigger_in_trigger_type5448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTEAD_KEYWORD_in_trigger_type5470 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_trigger_type5472 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_trigger_type5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_trigger_type5494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_compound_dml_trigger5501 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger5503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_non_dml_trigger5514 = new BitSet(new long[]{0x0001000001000040L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_non_dml_trigger5516 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200001000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_non_dml_trigger5521 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_non_dml_trigger5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_dml_event_clause5532 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_dml_event_clause5536 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_dml_event_clause5562 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5564 = new BitSet(new long[]{0x0000000000000040L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_dml_event_clause5589 = new BitSet(new long[]{0x0000000000000000L,0x0008000401000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_dml_event_clause5592 = new BitSet(new long[]{0x0000000000000000L,0x0008000400000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_dml_event_clause_part_in_dml_event_clause5617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000000000004000L});
    public static final BitSet FOLLOW_referencing_clause_in_dml_event_clause5619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_dml_event_clause5643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_EACH_KEYWORD_in_dml_event_clause5645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_dml_event_clause5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_factor5656 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_factor5659 = new BitSet(new long[]{0x0001000013000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_clause_factor5661 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_dml_event_clause_part5671 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200002000L});
    public static final BitSet FOLLOW_NESTED_KEYWORD_in_dml_event_clause_part5675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_dml_event_clause_part5677 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_dml_event_clause_part5679 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_dml_event_clause_part5681 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_dml_event_clause_part5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCING_KEYWORD_in_referencing_clause5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_set_in_referencing_clause5697 = new BitSet(new long[]{0x0201000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_referencing_clause5730 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200018000L});
    public static final BitSet FOLLOW_OLD_KEYWORD_in_referencing_clause5734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_NEW_KEYWORD_in_referencing_clause5738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_identifier_in_referencing_clause5742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration5753 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_type_declaration5756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_type_declaration5760 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_type_body_declaration_in_type_declaration5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_name_in_type_spec_declaration5770 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_oid_part_in_type_spec_declaration5772 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_invoker_clause_in_type_spec_declaration5775 = new BitSet(new long[]{0x4210000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_type_spec_types_in_type_spec_declaration5778 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_spec_declaration5804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_type_spec_declaration5807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_spec_name5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_spec_name5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OID_KEYWORD_in_type_oid_part5826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_type_oid_part5828 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_type_oid_part5830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_type_oid_part5832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_type_spec_types5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_type_spec_types5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_in_type_spec_types5848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_object_type5857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OBJECT_KEYWORD_in_object_type5859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000200000C000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_UNDER_KEYWORD_in_object_type5865 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_object_type5867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000200000C000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_object_type_part_in_object_type5885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000200000C000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_object_type5907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_object_type5912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_object_type5915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_object_type_part5924 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_object_type_part5927 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_object_type_part5929 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0002000EFC000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5931 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0002000EFC000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_element_spec_in_object_type_part5937 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0002000CFC000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_part5939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000CFC000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_object_type_part5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_element_spec5951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000CFC000000L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec5956 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0002000CFC000000L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec5960 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0002000CFC000000L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec5964 = new BitSet(new long[]{0x0000000010000002L,0x0000000000080000L,0x0002000CFC000000L});
    public static final BitSet FOLLOW_COMMA_in_element_spec5967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x0002000CFC000000L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec5987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_clause5995 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_pragma_clause5997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_pragma_clause5999 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6001 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause6004 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_pragma_clause6006 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_pragma_clause6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec6017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_function_spec6025 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_spec6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_spec6037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_spec6040 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_spec6042 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec6063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_spec6065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_constructor_spec_part6073 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6076 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_constructor_spec_part6078 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_constructor_spec_part6080 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6082 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_constructor_spec_part6111 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_spec_part6113 = new BitSet(new long[]{0x0001000011000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec_part6115 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_constructor_spec_part6120 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_constructor_spec_part6146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SELF_KEYWORD_in_constructor_spec_part6148 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_constructor_spec_part6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RESULT_KEYWORD_in_constructor_spec_part6152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_spec6159 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec6168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec6172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_inheritance_clauses6180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_set_in_inheritance_clauses6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_varray_type6200 = new BitSet(new long[]{0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_varray_type6202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_is_part_in_nested_table_type6209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_nested_table_type6211 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_nested_table_type6213 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_nested_table_type6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BODY_KEYWORD_in_type_body_declaration6222 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_body_name_in_type_body_declaration6224 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_as_is_part_in_type_body_declaration6226 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_subprogram_declaration_in_type_body_declaration6254 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_declaration6258 = new BitSet(new long[]{0x0100000090000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_COMMA_in_type_body_declaration6261 = new BitSet(new long[]{0x0100000080000000L,0x0000000000000020L,0x0000000CEC000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_type_body_declaration6267 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SEPARATOR_in_type_body_declaration6293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_type_body_declaration6296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_type_body_name6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_type_body_name6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_subprogram_declaration6315 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L,0x00000000EC000000L});
    public static final BitSet FOLLOW_function_declaration_in_subprogram_declaration6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_subprogram_declaration6354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprogram_declaration6358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_constructor_declaration6366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000088000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_KEYWORD_in_constructor_declaration6369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_CONSTRUCTOR_KEYWORD_in_constructor_declaration6372 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_FUNCTION_KEYWORD_in_constructor_declaration6374 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_constructor_declaration6402 = new BitSet(new long[]{0x0210000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_constructor_spec_part_in_constructor_declaration6404 = new BitSet(new long[]{0x0210000000000000L});
    public static final BitSet FOLLOW_function_procedure_body_in_constructor_declaration6407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration6414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEMBER_KEYWORD_in_map_order_func_declaration6422 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_function_declaration_in_map_order_func_declaration6424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEGIN_KEYWORD_in_block6432 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_block6436 = new BitSet(new long[]{0x0D890713C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_exception_section_in_block6441 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_block6452 = new BitSet(new long[]{0x000100000B000002L,0x0000000080000000L,0x0000000200000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_universal_identifier_in_block6454 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SEPARATOR_in_block6457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_block6468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_declare_section_in_anonymous_block6520 = new BitSet(new long[]{0x0109010041000000L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_anonymous_block6523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_executable_section6530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_section6534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_executable_case_section6543 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_statements_in_executable_case_section6547 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_SEPARATOR_in_executable_case_section6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_block_in_executable_case_section6555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_statement6563 = new BitSet(new long[]{0x0C81061003000810L,0x5878142DC06C5E40L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_statements_in_statement6567 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_statement6569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statements6576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statements6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statements6584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statements6601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_loop_statement_in_statements6605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_statements6609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statements6626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statements6630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statements6634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_statements6638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statements6655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_statement_in_statements6659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statements6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_statements6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statements6684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_inline_statement_in_statements6688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_statements6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_sql_statements6712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_sql_statements6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_sql_statements6720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_sql_statements6724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_sql_statements6745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_sql_statements6749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_sql_statements6753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_sql_statements6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_sql_statements6778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_statement_in_sql_statements6782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sql_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALIAS_in_sql_not_parsed6876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEYWORD_in_sql_not_parsed6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_sql_not_parsed6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_sql_not_parsed6888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed6896 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_sql_not_parsed6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_KEYWORD_in_sql_not_parsed6917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_sql_not_parsed6921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_sql_not_parsed6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_sql_not_parsed6929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_sql_not_parsed6948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_sql_not_parsed6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNING_KEYWORD_in_sql_not_parsed6956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_KEYWORD_in_sql_not_parsed6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_sql_not_parsed6979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_sql_not_parsed6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_sql_not_parsed6987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_sql_not_parsed6991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_KEYWORD_in_sql_not_parsed6995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_KEYWORD_in_sql_not_parsed7014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sql_not_parsed7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sql_not_parsed7037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_KEYWORD_in_sql_not_parsed7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sql_not_parsed7045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_sql_not_parsed7049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_sql_not_parsed7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_not_parsed7072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_sql_not_parsed7076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_sql_not_parsed7080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_sql_not_parsed7105 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_sql_not_parsed7111 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_sql_not_parsed7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_sql_not_parsed7121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_sql_not_parsed7141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_sql_not_parsed7160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_sql_not_parsed7180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THE_REST_in_sql_not_parsed7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_sql_not_parsed7189 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFDC800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_sql_not_parsed7192 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFDC800L});
    public static final BitSet FOLLOW_207_in_sql_not_parsed7196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_KEYWORD_in_select_statement7207 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2D000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_select_statement7211 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_select_statement7215 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_select_statement7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_select_statement7223 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2D000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_COMMIT_KEYWORD_in_commit_statement7233 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_commit_statement7235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_KEYWORD_in_delete_statement7243 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_delete_statement7246 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_insert_statement7255 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_insert_statement7258 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_LOCK_KEYWORD_in_lock_table_statement7267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_lock_table_statement7269 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_lock_table_statement7272 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_MERGE_KEYWORD_in_merge_statement7281 = new BitSet(new long[]{0x0A91161C17801870L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_merge_statement7284 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_merge_statement7288 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_merge_statement7310 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_merge_statement7314 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_merge_statement7318 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_merge_statement7322 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_merge_statement7344 = new BitSet(new long[]{0x0A91161C17801872L,0x5C3B03C4C5A2C000L,0x00020012000810F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_ROLLBACK_KEYWORD_in_rollback_statement7353 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_rollback_statement7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAVEPOINT_KEYWORD_in_savepoint_statement7363 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_savepoint_statement7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_set_transaction_statement7372 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_TRANSACTION_KEYWORD_in_set_transaction_statement7374 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_set_transaction_statement7377 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_update_statement7386 = new BitSet(new long[]{0x0A91161017801870L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_sql_not_parsed_in_update_statement7389 = new BitSet(new long[]{0x0A91161017801872L,0x5C3B0344C5A2C000L,0x00020012000800F0L,0x00000001FFFD4800L});
    public static final BitSet FOLLOW_GOTO_KEYWORD_in_goto_statement7400 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_return_statement7409 = new BitSet(new long[]{0x0881061003000812L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_return_statement7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7419 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_if_statement7421 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7423 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7426 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_ELSIF_KEYWORD_in_if_statement7446 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_if_statement7448 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_if_statement7450 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7453 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5FE0L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_if_statement7475 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_if_statement7478 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_if_statement7499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IF_KEYWORD_in_if_statement7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7540 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_loop_statement7543 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_loop_statement7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LOOP_KEYWORD_in_loop_statement7549 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_loop_statement7551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_KEYWORD_in_while_loop_statement7578 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_while_loop_statement7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_while_loop_statement7582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_for_loop_statement7589 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_for_loop_statement7591 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_for_loop_statement7593 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_REVERSE_KEYWORD_in_for_loop_statement7595 = new BitSet(new long[]{0x0881061003000810L,0x0000000080202000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement7622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_for_loop_statement7625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_for_loop_statement7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement2_in_for_loop_statement7658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_for_loop_statement_part7667 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_for_loop_statement_part7669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_for_loop_statement_part7671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement17678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_cursor_for_loop_statement27685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_for_loop_statement27687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_cursor_for_loop_statement27689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_statement_in_cursor_for_loop_statement27691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_KEYWORD_in_raise_statement7698 = new BitSet(new long[]{0x0001000003000002L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_raise_statement7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_case_statement_expression7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_expression_in_case_statement_expression7712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7719 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7721 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_simple_case_statement_expression7749 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_simple_case_statement_expression7751 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_simple_case_statement_expression7753 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7756 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_simple_case_statement_expression7787 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_case_section_in_simple_case_statement_expression7790 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_simple_case_statement_expression7821 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_simple_case_statement_expression7823 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_simple_case_statement_expression7826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7874 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_searched_case_statement_expression7901 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_searched_case_statement_expression7903 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_searched_case_statement_expression7905 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7908 = new BitSet(new long[]{0x0D890715C3000810L,0x5878142FC06C5EE0L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_ELSE_KEYWORD_in_searched_case_statement_expression7939 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_case_section_in_searched_case_statement_expression7942 = new BitSet(new long[]{0x0D890711C3000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_END_KEYWORD_in_searched_case_statement_expression7973 = new BitSet(new long[]{0x0001000001000002L,0x0000000000200000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_searched_case_statement_expression7975 = new BitSet(new long[]{0x0001000001000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_searched_case_statement_expression7978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_KEYWORD_in_close_statement8050 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_close_statement8052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_KEYWORD_in_continue_statement8059 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_continue_statement8061 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_continue_statement8065 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_continue_statement8067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_KEYWORD_in_execute_immediate_statement8076 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IMMEDIATE_KEYWORD_in_execute_immediate_statement8078 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_execute_immediate_statement8080 = new BitSet(new long[]{0x0400000000000002L,0x040001C000000000L});
    public static final BitSet FOLLOW_set_in_execute_immediate_statement8112 = new BitSet(new long[]{0x0000000000000002L,0x000001C000000000L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate_statement8152 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_execute_immediate_statement8156 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate_statement8190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_into_clause8199 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8201 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_into_clause8204 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_into_clause8206 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_BULK_KEYWORD_in_bulk_collect_into_clause8215 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLLECT_KEYWORD_in_bulk_collect_into_clause8217 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTO_KEYWORD_in_bulk_collect_into_clause8219 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8249 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_bulk_collect_into_clause8252 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bulk_collect_into_clause8254 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_using_clause8263 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8266 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8270 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8275 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8277 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_using_clause8282 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause8300 = new BitSet(new long[]{0x1881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8303 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8307 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_using_clause8312 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_using_clause8314 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_using_clause8319 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_EXIT_KEYWORD_in_exit_statement8328 = new BitSet(new long[]{0x0001000401000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_exit_statement8330 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exit_statement8334 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_exit_statement8336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FETCH_KEYWORD_in_fetch_statement8345 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8347 = new BitSet(new long[]{0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_bulk_collect_into_clause_in_fetch_statement8370 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_LIMIT_KEYWORD_in_fetch_statement8373 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_fetch_statement8375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_clause_in_fetch_statement8383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_KEYWORD_in_forall_statement8391 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_forall_statement8393 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_forall_statement8395 = new BitSet(new long[]{0x0881061003000810L,0x0001800080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement8397 = new BitSet(new long[]{0x0000000000000000L,0x5838200440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SAVE_KEYWORD_in_forall_statement8419 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EXCEPTIONS_KEYWORD_in_forall_statement8421 = new BitSet(new long[]{0x0000000000000000L,0x5838000440004000L,0x0000000000000040L});
    public static final BitSet FOLLOW_sql_statements_in_forall_statement8425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_225_in_bounds_clause8435 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDICES_KEYWORD_in_bounds_clause8459 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8461 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8463 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_bounds_clause8483 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8485 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_bounds_clause8487 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_bounds_clause8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_KEYWORD_in_bounds_clause8514 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_bounds_clause8516 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_bounds_clause8518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_pragma_inline_statement8527 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_INLINE_KEYWORD_in_pragma_inline_statement8529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_pragma_inline_statement8557 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8559 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_inline_statement8561 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_in_pragma_inline_statement8563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_pragma_inline_statement8565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_KEYWORD_in_open_statement8572 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_open_params_in_open_statement8576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_open_statement8597 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_open_statement8600 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_open_statement8604 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_open_statement8608 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_open_statement8611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_open_params8621 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_open_params8623 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_open_params8626 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_open_params8628 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_open_params8632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLCODE_KEYWORD_in_sqlcode_function8639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQLERRM_KEYWORD_in_sqlerrm_function8646 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_sqlerrm_function8649 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_set_in_sqlerrm_function8651 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_sqlerrm_function8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_sqlerrm_function8660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_KEYWORD_in_anonymous_block_declare_section8669 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_variable_declaration_in_anonymous_block_declare_section8707 = new BitSet(new long[]{0x0109010001000002L,0x0000000200080020L,0x0000000200000000L});
    public static final BitSet FOLLOW_function_declaration_in_anonymous_block_declare_section8747 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_procedure_declaration_in_anonymous_block_declare_section8751 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8762 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8764 = new BitSet(new long[]{0x0000002008000000L,0x0000000000000000L,0x0002000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8790 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8808 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_variable_declaration8810 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_variable_declaration8812 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_variable_declaration8838 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_subtype_datatype_in_variable_declaration8851 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_record_collection_datatype_in_variable_declaration8863 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_identifier_in_variable_declaration8876 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_variable_declaration8878 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_PRAGMA_KEYWORD_in_variable_declaration8901 = new BitSet(new long[]{0x0000000000000000L,0x2200000000110000L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_KEYWORD_in_variable_declaration8904 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_KEYWORD_in_variable_declaration8908 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_KEYWORD_in_variable_declaration8919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_variable_declaration8921 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8923 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8925 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_variable_declaration8929 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_KEYWORD_in_variable_declaration8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_variable_declaration8943 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8945 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_declaration8948 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration8950 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_variable_declaration8954 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_cursor_datatype_in_variable_declaration8971 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_variable_declaration8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_variable_declaration_part8990 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_variable_declaration_part8992 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_def_part_in_variable_declaration_part8996 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_variable_declaration_part8998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variable_def_part0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_TYPES_in_data_type9016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scale_types_in_data_type9020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_size_types_in_data_type9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_types_in_data_type9028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raw_type_in_data_type9032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_types_in_data_type9048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_data_type9052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_data_type9056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_data_type9074 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_data_type9077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_special_datatype_in_data_type9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_char_types9088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_char_types9097 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_char_types9099 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_char_types9102 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_set_in_char_types9104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_char_types9113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestamp_type_in_timestamp_types9122 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_WITH_KEYWORD_in_timestamp_types9125 = new BitSet(new long[]{0x0000600000000000L});
    public static final BitSet FOLLOW_LOCAL_KEYWORD_in_timestamp_types9127 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_TIME_KEYWORD_in_timestamp_types9130 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ZONE_KEYWORD_in_timestamp_types9132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_year_type9141 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_year_type_in_interval_year_type9143 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_year_type9145 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_MONTH_KEYWORD_in_interval_year_type9147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERVAL_KEYWORD_in_interval_day_type9154 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_day_type_in_interval_day_type9156 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_TO_KEYWORD_in_interval_day_type9158 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_second_type_in_interval_day_type9160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBTYPE_KEYWORD_in_subtype_datatype9167 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_subtype_datatype9169 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_subtype_datatype9171 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_subtype_datatype9173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_subtype_datatype9176 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_subtype_datatype9178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_record_collection_datatype9188 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_record_collection_datatype9190 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_record_collection_datatype9192 = new BitSet(new long[]{0x0020000000000000L,0x0000000098800000L});
    public static final BitSet FOLLOW_record_datatype_in_record_collection_datatype9224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_table_datatype_in_record_collection_datatype9228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_varray_datatype_in_record_collection_datatype9232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_cursor_datatype_in_record_collection_datatype9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_KEYWORD_in_record_datatype9272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_record_datatype9274 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9276 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_record_datatype9279 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_record_field_declaration_in_record_datatype9281 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_record_datatype9285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_field_declaration9293 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_record_field_declaration9295 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_record_field_declaration9297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_KEYWORD_in_collection_table_datatype9305 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_table_datatype9307 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9309 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_table_datatype9312 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_table_datatype9314 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_INDEX_KEYWORD_in_collection_table_datatype9341 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_BY_KEYWORD_in_collection_table_datatype9343 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_table_datatype9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARRAY_KEYWORD_in_collection_varray_datatype9355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_VARYING_KEYWORD_in_collection_varray_datatype9360 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ARRAY_KEYWORD_in_collection_varray_datatype9362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_collection_varray_datatype9395 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_collection_varray_datatype9397 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_collection_varray_datatype9400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_collection_varray_datatype9402 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OF_KEYWORD_in_collection_varray_datatype9404 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_collection_varray_datatype9406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_collection_varray_datatype9409 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_collection_varray_datatype9411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_ref_cursor_datatype9420 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_ref_cursor_datatype9422 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_ref_cursor_datatype9425 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_ref_cursor_datatype9427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURSOR_KEYWORD_in_cursor_datatype9436 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_cursor_datatype9438 = new BitSet(new long[]{0x0410000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_cursor_parameter_declaration_in_cursor_datatype9440 = new BitSet(new long[]{0x0410000000000002L});
    public static final BitSet FOLLOW_RETURN_KEYWORD_in_cursor_datatype9462 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_datatype9464 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_cursor_datatype9469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_datatype9471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_cursor_parameter_declaration9480 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9482 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_cursor_parameter_declaration9485 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_cursor_parameter_in_cursor_parameter_declaration9487 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_cursor_parameter_declaration9491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_parameter9499 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_cursor_parameter9501 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_cursor_parameter9504 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_def_part_in_cursor_parameter9507 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_cursor_parameter9509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_special_datatype9520 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_EXT_IDENTIFIER_in_special_datatype9524 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_set_in_special_datatype9527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_expression9543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_in_notin_expression9551 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_in_notin_expression9554 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_in_notin_expression9582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_in_notin_expression9588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_in_notin_expression9590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_in_notin_expression9592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_operator9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_operator9605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_operator9609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_operator9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_operator9617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_operator9621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_operator9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_operator9629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_operator9644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_operator9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_operator9652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_operator9656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_operator9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_operator9664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_operator9668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_operator9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_operator9676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_OPERATOR_in_operator9691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_operator9695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_KEYWORD_in_operator9710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_operator9716 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_BETWEEN_KEYWORD_in_operator9720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unary_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_postfix_op9744 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_postfix_op9746 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_postfix_op9749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_postfix_op9754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_universal_expression9762 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_factor_in_universal_expression9765 = new BitSet(new long[]{0x0010000000000062L,0x0002000000020000L,0x0002000000000000L,0x0000000DFFFD0000L});
    public static final BitSet FOLLOW_postfix_op_in_universal_expression9767 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0002000000000000L,0x0000000CFFFD0000L});
    public static final BitSet FOLLOW_operator_in_universal_expression9771 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_expression9774 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0002000000000000L,0x0000000CFFFD0000L});
    public static final BitSet FOLLOW_206_in_universal_expression9779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_universal_expression9781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_universal_expression9783 = new BitSet(new long[]{0x0000000000000062L,0x0002000000020000L,0x0002000000000000L,0x0000000CFFFD0000L});
    public static final BitSet FOLLOW_TRUE_KEYWORD_in_universal_factor9795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_KEYWORD_in_universal_factor9799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_universal_factor9803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_universal_factor9849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_universal_factor9853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_universal_factor9857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_in_universal_factor9880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_call_statement_param_in_universal_factor9883 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_universal_factor9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_universal_factor9914 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9916 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_universal_factor9919 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_universal_factor9921 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_universal_factor9926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sub_identifier_factor_in_sub_identifier9934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_sub_identifier9938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcode_function_in_sub_identifier9942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlerrm_function_in_sub_identifier9946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_sub_identifier_factor9953 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x000200000000000FL});
    public static final BitSet FOLLOW_NOTFOUND_KEYWORD_in_sub_identifier_factor9956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_KEYWORD_in_sub_identifier_factor9960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_KEYWORD_in_sub_identifier_factor9988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_KEYWORD_in_sub_identifier_factor9992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_sub_identifier_factor9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_call_statement_param10006 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000CC000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10009 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10012 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10014 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_call_statement_param10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_call_statement_param10050 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10052 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10054 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10056 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_call_statement_param10059 = new BitSet(new long[]{0x0001000001000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_identifier_in_call_statement_param10061 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_PARAM_VALUE_in_call_statement_param10063 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_call_statement_param10065 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_call_statement_param10070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_exception_section10079 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_section10082 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_exception_handler10091 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10093 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_OR_OPERATOR_in_exception_handler10096 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_exception_handler10098 = new BitSet(new long[]{0x0000000800000040L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_exception_handler10122 = new BitSet(new long[]{0x0D89071143000810L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_executable_section_in_exception_handler10125 = new BitSet(new long[]{0x0D89071143000812L,0x5878142FC06C5E60L,0x0002000200000070L,0x00000000000C5000L});
    public static final BitSet FOLLOW_SCALE_TYPES_in_scale_types10136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_scale_types10139 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_scale_types10141 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10144 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_scale_types10147 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_set_in_scale_types10149 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_scale_types10158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_scale_types10162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_TYPES_in_size_types10173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_size_types10177 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_size_types10179 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_size_types10182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_size_types10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_TYPE_in_raw_type10194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_raw_type10198 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_raw_type10200 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_raw_type10203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_raw_type10205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_TYPE_in_year_type10217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_year_type10221 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_year_type10223 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_year_type10226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_year_type10228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TYPE_in_timestamp_type10240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_timestamp_type10244 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_timestamp_type10246 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_timestamp_type10249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_timestamp_type10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_TYPE_in_day_type10263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_day_type10267 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_day_type10269 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_day_type10272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_day_type10274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECOND_TYPE_in_second_type10286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_second_type10290 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_second_type10292 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_second_type10295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_second_type10297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_KEYWORD_in_synpred35_PL_SQL5109 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_package_spec_in_synpred35_PL_SQL5111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_event_clause_factor_in_synpred68_PL_SQL5564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_clause_in_synpred72_PL_SQL5619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_KEYWORD_in_synpred83_PL_SQL5753 = new BitSet(new long[]{0x0001000007000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_type_spec_declaration_in_synpred83_PL_SQL5756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_type_in_synpred89_PL_SQL5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_in_synpred90_PL_SQL5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred94_PL_SQL5904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_FINAL_KEYWORD_in_synpred94_PL_SQL5907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inheritance_clauses_in_synpred101_PL_SQL5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred104_PL_SQL5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_synpred105_PL_SQL5956 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_constructor_spec_in_synpred105_PL_SQL5960 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_synpred105_PL_SQL5964 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred105_PL_SQL5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred136_PL_SQL6454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_operator_in_synpred188_PL_SQL6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred190_PL_SQL6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred191_PL_SQL6896 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred191_PL_SQL6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_KEYWORD_in_synpred200_PL_SQL6979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_KEYWORD_in_synpred206_PL_SQL7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred207_PL_SQL7037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred209_PL_SQL7045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_expression_in_synpred210_PL_SQL7049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred211_PL_SQL7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred212_PL_SQL7072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred215_PL_SQL7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred216_PL_SQL7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_NOT_OPERATOR_in_synpred216_PL_SQL7105 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred216_PL_SQL7107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_KEYWORD_in_synpred217_PL_SQL7111 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred217_PL_SQL7113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_KEYWORD_in_synpred218_PL_SQL7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statements_in_synpred221_PL_SQL7160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred222_PL_SQL7180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred226_PL_SQL7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred226_PL_SQL7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred227_PL_SQL7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred227_PL_SQL7223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred228_PL_SQL7235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred229_PL_SQL7246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred230_PL_SQL7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred231_PL_SQL7272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred232_PL_SQL7284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_KEYWORD_in_synpred233_PL_SQL7288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_KEYWORD_in_synpred234_PL_SQL7310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred235_PL_SQL7314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_KEYWORD_in_synpred236_PL_SQL7318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_KEYWORD_in_synpred237_PL_SQL7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_KEYWORD_in_synpred238_PL_SQL7344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred239_PL_SQL7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred240_PL_SQL7377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_not_parsed_in_synpred241_PL_SQL7389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred242_PL_SQL7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred249_PL_SQL7551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred252_PL_SQL7622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_for_loop_statement_part_in_synpred252_PL_SQL7625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_for_loop_statement1_in_synpred252_PL_SQL7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred253_PL_SQL7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_expression_in_synpred254_PL_SQL7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred259_PL_SQL7823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred260_PL_SQL7826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_KEYWORD_in_synpred265_PL_SQL7975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred266_PL_SQL7978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred267_PL_SQL8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred268_PL_SQL8065 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_synpred268_PL_SQL8067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred276_PL_SQL8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred278_PL_SQL8275 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred278_PL_SQL8277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred279_PL_SQL8303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_KEYWORD_in_synpred281_PL_SQL8312 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_OUT_KEYWORD_in_synpred281_PL_SQL8314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred283_PL_SQL8330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_KEYWORD_in_synpred284_PL_SQL8334 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_expression_in_synpred284_PL_SQL8336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_params_in_synpred291_PL_SQL8576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_KEYWORD_in_synpred295_PL_SQL8597 = new BitSet(new long[]{0x0001000003000800L,0x0000000080004000L,0x0000000200000000L});
    public static final BitSet FOLLOW_select_statement_in_synpred295_PL_SQL8600 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STRING_in_synpred295_PL_SQL8604 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred295_PL_SQL8608 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_synpred295_PL_SQL8611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred299_PL_SQL8649 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_set_in_synpred299_PL_SQL8651 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred299_PL_SQL8658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred299_PL_SQL8660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred304_PL_SQL8762 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred304_PL_SQL8764 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred304_PL_SQL8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred305_PL_SQL8808 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_CONSTANT_KEYWORD_in_synpred305_PL_SQL8810 = new BitSet(new long[]{0x18010000030DF000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_data_type_in_synpred305_PL_SQL8812 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_variable_declaration_part_in_synpred305_PL_SQL8838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred308_PL_SQL8876 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_EXCEPTION_KEYWORD_in_synpred308_PL_SQL8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_year_type_in_synpred322_PL_SQL9052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_day_type_in_synpred323_PL_SQL9056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_KEYWORD_in_synpred325_PL_SQL9074 = new BitSet(new long[]{0x0001000003000000L,0x0000000080000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_universal_identifier_in_synpred325_PL_SQL9077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred330_PL_SQL9097 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred330_PL_SQL9099 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred330_PL_SQL9102 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_set_in_synpred330_PL_SQL9104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred330_PL_SQL9113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred354_PL_SQL9582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_op_in_synpred380_PL_SQL9762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_op_in_synpred381_PL_SQL9767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_universal_expression_in_synpred382_PL_SQL9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_synpred383_PL_SQL9771 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred383_PL_SQL9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred383_PL_SQL9779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_synpred383_PL_SQL9781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred383_PL_SQL9783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred391_PL_SQL9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_statement_param_in_synpred392_PL_SQL9883 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred392_PL_SQL9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_notin_expression_in_synpred402_PL_SQL9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred405_PL_SQL10006 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000CC000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred405_PL_SQL10009 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_synpred405_PL_SQL10012 = new BitSet(new long[]{0x0881061003000810L,0x0000000080200000L,0x0002000200000030L,0x00000000000C4000L});
    public static final BitSet FOLLOW_universal_expression_in_synpred405_PL_SQL10014 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred405_PL_SQL10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred414_PL_SQL10139 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred414_PL_SQL10141 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred414_PL_SQL10144 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_synpred414_PL_SQL10147 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_set_in_synpred414_PL_SQL10149 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred414_PL_SQL10158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred414_PL_SQL10162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred416_PL_SQL10177 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred416_PL_SQL10179 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred416_PL_SQL10182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred416_PL_SQL10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred418_PL_SQL10198 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred418_PL_SQL10200 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred418_PL_SQL10203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred418_PL_SQL10205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred422_PL_SQL10244 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred422_PL_SQL10246 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred422_PL_SQL10249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred422_PL_SQL10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred426_PL_SQL10290 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_synpred426_PL_SQL10292 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_UNSIGNED_in_synpred426_PL_SQL10295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred426_PL_SQL10297 = new BitSet(new long[]{0x0000000000000002L});

}